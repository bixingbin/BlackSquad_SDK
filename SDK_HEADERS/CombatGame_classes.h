/*
#############################################################################################
# Black Squad (11.01.2019) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: CombatGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL, dano20zombie
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_MESSENGER_ERR_TARGET_INVITE_YOU                    0x08
#define CONST_CHAT_ERR_CHAT_EMPTY                                0x01
#define CONST_CHAT_ERR_TRAFFIC_PENALTY                           0x02
#define CONST_CHAT_ERR_BLOCK                                     0x03
#define CONST_CHAT_ERR_WHISPER_CANT_OFFLINE_CHAMPIONSHIP_USER    0x04
#define CONST_WHISPER_CHAT_ERR_CHAT_EMPTY                        0x01
#define CONST_WHISPER_CHAT_ERR_TRAFFIC_PENALTY                   0x02
#define CONST_WHISPER_CHAT_ERR_WHISPER_OFFLINE                   0x03
#define CONST_WHISPER_CHAT_ERR_WHISPER_BLIND                     0x04
#define CONST_WHISPER_CHAT_ERR_WHISPER_CANT_GM                   0x05
#define CONST_WHISPER_CHAT_ERR_WHISPER_SELF                      0x06
#define CONST_WHISPER_CHAT_ERR_BLOCK                             0x07
#define CONST_WHISPER_CHAT_ERR_WHISPER_CANT_OFFLINE_CHAMPIONSHIP_USER 0x08
#define CONST_LEAVING_MATCHROOM_REASON_USER_REQUEST              0x00
#define CONST_LEAVING_MATCHROOM_REASON_BAN_FROM_HOST             0x01
#define CONST_LEAVING_MATCHROOM_REASON_BAN_FROM_SYSTEM           0x02
#define CONST_LEAVING_MATCHROOM_REASON_BAN_SECURITY              0x03
#define CONST_LEAVING_MATCHROOM_REASON_BAN_PING_TOO_HIGH         0x04
#define CONST_MATCH_HAS_FINISHED_REASON_GOOD                     0x00
#define CONST_MATCH_HAS_FINISHED_REASON_NO_USER                  0x01
#define CONST_MATCH_HAS_FINISHED_REASON_NO_WINNER                0x02
#define CONST_MATCH_HAS_FINISHED_REASON_INVALID_USERCOUNT        0x03
#define CONST_MATCH_HAS_FINISHED_REASON_INTERNAL_SERVER_ERROR    0x04
#define CONST_MATCH_HAS_FINISHED_REASON_MATCH_READY_FAILED       0x05
#define CONST_RETURN_LOBBY_REASON_GOOD                           0x01
#define CONST_RETURN_LOBBY_REASON_TIME_OUT                       0x02
#define CONST_RETURN_LOBBY_REASON_DEDICATED_ERR                  0x03
#define CONST_RETURN_LOBBY_REASON_LOADING_ERR                    0x04
#define CONST_RETURN_LOBBY_REASON_INVALID                        0x05
#define CONST_RETURN_LOBBY_REASON_CANT_MATH_JOIN                 0x06
#define CONST_RETURN_LOBBY_REASON_FINISH_MATCH                   0x07
#define CONST_RETURN_LOBBY_REASON_MATCH_READY_FAILED             0x08
#define CONST_DISCONNECTED_BY_GM                                 0x01
#define CONST_DISCONNECTED_BY_DUPLICATED_LOGIN                   0x02
#define CONST_DISCONNECTED_BY_GM_COMMAND_ACCOUNT_BLOCK           0x03
#define CONST_DISCONNECTED_BY_GAME_GUARD                         0x04
#define CONST_DISCONNECTED_BY_SYSTEM                             0x05
#define CONST_DISCONNECTED_BY_GAME_GUARD_ACCOUNT_BAN             0x06
#define CONST_CLIENT_ERROR_NONE                                  0
#define CONST_CLIENT_ERROR_INTERNAL                              1
#define CONST_CLIENT_ERROR_INSUFFICIENT_IP                       2
#define CONST_CLIENT_ERROR_CANNOT_CONNECT                        3
#define CONST_CLIENT_ERROR_DUPLICATED                            4
#define CONST_CLIENT_ERROR_INVALID_USER                          5
#define CONST_CLIENT_ERROR_ACCOUNT_BLOCK                         6
#define CONST_CLIENT_ERROR_NOT_IN_SERVICE                        7
#define CONST_CLIENT_ERROR_INVALID_ACCESS                        8
#define CONST_CLIENT_ERROR_START_FAILED                          9
#define CONST_CLIENT_ERROR_INVALID_VERSION                       10
#define CONST_CLIENT_ERROR_NEED_REINSTALLATION                   11
#define CONST_TID1_EQUIP                                         1
#define CONST_TID1_CLOTHS                                        2
#define CONST_TID1_ACTIVEITEM                                    3
#define CONST_TID1_CONSUME                                       4
#define CONST_TID2_PRIMARY_WEAPON                                1
#define CONST_TID2_SUB_WEAPON                                    2
#define CONST_TID2_MELEE_WEAPON                                  3
#define CONST_TID2_GRENADE_A                                     4
#define CONST_TID2_GRENADE_B                                     5
#define CONST_TID2_GRENADE_C                                     6
#define CONST_TID2_CHIP_A                                        7
#define CONST_TID2_CHIP_B                                        8
#define CONST_TID2_CHIP_C                                        9
#define CONST_TID2_SET                                           1
#define CONST_TID2_SPECIAL                                       2
#define CONST_TID2_FUNCTION                                      1
#define CONST_TID3_SMG                                           1
#define CONST_TID3_RIFLE                                         2
#define CONST_TID3_DMR                                           3
#define CONST_TID3_LMG                                           4
#define CONST_TID3_BASR                                          5
#define CONST_TID3_SHOTGUN                                       6
#define CONST_TID3_PISTOL                                        1
#define CONST_TID3_MACHINE_PISTOL                                2
#define CONST_TID3_C4KIT                                         1
#define CONST_TID3_GOLDEXP                                       1
#define CONST_TID3_EXP                                           2
#define CONST_TID3_GOLD                                          3
#define CONST_TID3_ASSAULT                                       1
#define CONST_TID3_SUPPORT                                       2
#define CONST_TID3_COMMAND                                       3
#define CONST_TID3_RECON                                         4
#define CONST_TID4_ASSAULT_SKILL1                                1
#define CONST_TID4_ASSAULT_SKILL2                                2
#define CONST_TID4_ASSAULT_SKILL3                                3
#define CONST_TID4_ASSAULT_SKILL4                                4
#define CONST_TID4_SUPPORT_SKILL1                                1
#define CONST_TID4_SUPPORT_SKILL2                                2
#define CONST_TID4_SUPPORT_SKILL3                                3
#define CONST_TID4_SUPPORT_SKILL4                                4
#define CONST_TID4_COMMAND_SKILL1                                1
#define CONST_TID4_COMMAND_SKILL2                                2
#define CONST_TID4_COMMAND_SKILL3                                3
#define CONST_TID4_COMMAND_SKILL4                                4
#define CONST_TID4_RECON_SKILL1                                  1
#define CONST_TID4_RECON_SKILL2                                  2
#define CONST_TID4_RECON_SKILL3                                  3
#define CONST_TID4_RECON_SKILL4                                  4
#define CONST_CATEGORY_CLASSIC_MATCH                             0x0001
#define CONST_CATEGORY_A_MATCH                                   0x0002
#define CONST_CATEGORY_B_MATCH                                   0x0004
#define CONST_CATEGORY_FREE_A_MATCH                              0x0008
#define CONST_CATEGORY_FREE_B_MATCH                              0x0010
#define CONST_CATEGORY_AUTO_A_MATCH                              0x0020
#define CONST_CATEGORY_AUTO_B_MATCH                              0x0040
#define CONST_CATEGORY_AUTO_FREE_A_MATCH                         0x0080
#define CONST_CATEGORY_AUTO_FREE_B_MATCH                         0x0100
#define CONST_CATEGORY_AI_DEF_MATCH                              0x0200
#define CONST_CATEGORY_PRACTICE_MATCH                            0x0400
#define CONST_CATEGORY_RANKING_MATCH                             0x0800
#define CONST_SYSTEM_NOTIFY_MESSAGE_BLOCK_CHAT                   0x00
#define CONST_DIALOG_PASSWORD_LENGTH                             4
#define CONST_SCHEDULE_OPTION_SUNDAY                             0x001
#define CONST_SCHEDULE_OPTION_MONDAY                             0x002
#define CONST_SCHEDULE_OPTION_TUESDAY                            0x004
#define CONST_SCHEDULE_OPTION_WEDNESDAY                          0x008
#define CONST_SCHEDULE_OPTION_THURSDAY                           0x010
#define CONST_SCHEDULE_OPTION_FRIDAY                             0x020
#define CONST_SCHEDULE_OPTION_SATURDAY                           0x040
#define CONST_SCHEDULE_OPTION_CONTINUOUS                         0x100
#define CONST_CATEGROY_COMPETITIVE                               0x3000
#define CONST_CATEGORY_COMPETITIVE_SQUAD_MATCH                   0x2000
#define CONST_CATEGORY_COMPETITIVE_MATCH                         0x1000
#define CONST_INV_HITLOCATION_SCALE                              0.0133333
#define CONST_HITLOCATION_SCALE                                  75
#define CONST_MAX_CHAMPIONSHIPMEMBER_MAX                         5
#define CONST_DESC_ITEMINFO                                      0x40
#define CONST_ADDON_ITEMINFO                                     0x20
#define CONST_GUAGE_ITEMINFO                                     0x10
#define CONST_ConvertTime                                        3600
#define CONST_CLAN_EMBLEM_ID_NONE                                0
#define CONST_CLAN_ID_NONE                                       0
#define CONST_ERR_LOGIN_CERTIFICATION_USER_REQUEST               80
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_CREATE_INSTANCE_FAIL 59
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_INITIALIZE_FAIL     58
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_LOAD_FAIL           57
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_INITIALIZE          56
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_REMAIN_NETCLIENT    55
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_NULL_SOURCE         54
#define CONST_ERR_LOGIN_CERTIFICATION_PARSING                    28
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_RETURN_ERROR    27
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_NULL_ERROR      26
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_NULL_OUTPUT     25
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_DECODE_JSON     24
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_NO_RESPONSE     23
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_MAC             22
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_ID_PW           21
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_URL             20
#define CONST_ERR_LOGIN_NULL                                     0
#define CONST_HOT_TAG                                            2
#define CONST_NEW_TAG                                            1
#define CONST_LOGOUT_REASON_MATCHSERVER_DISCONNECTED             1
#define CONST_SABM_FIND_FIRST_BIND                               -2
#define CONST_RealGameStartCount                                 5
#define CONST_LimitedPresetSelectTime_RoundStart                 10
#define CONST_LimitedPresetSelectTime_Intrude                    5
#define CONST_MAX_KILL_MARK_SCORE                                9
#define CONST_DAMAGEBOARD_MAX                                    20
#define CONST_GRENADE_INDICATOR_MAX                              4
#define CONST_MAX_MILITARYCLASS_TYPE                             4
#define CONST_MAX_PASSIVE_SKILL_COUNT                            4
#define CONST_MAX_ACTIVE_SKILL_COUNT                             4
#define CONST_MAX_ALL_SKILL_COUNT                                8
#define CONST_CircularBufferSize                                 10
#define CONST_CBPID_GraphicQuality                               380
#define CONST_CBPID_AspectRatio                                  381
#define CONST_CBPID_ScreenMode                                   382
#define CONST_CBPID_ScreenColors                                 383
#define CONST_CBPID_Gamma                                        384
#define CONST_CBPID_AntiAliasing                                 385
#define CONST_CBPID_Resolution                                   386
#define CONST_CBPID_ResX                                         387
#define CONST_CBPID_ResY                                         388
#define CONST_CBPID_ScanRate                                     389
#define CONST_CBPID_VSync                                        390
#define CONST_CBPID_Character                                    391
#define CONST_CBPID_BackGround                                   392
#define CONST_CBPID_Light                                        393
#define CONST_CBPID_LightReflect                                 394
#define CONST_CBPID_Shadow                                       395
#define CONST_CBPID_Effect                                       396
#define CONST_CBPID_Physical                                     397
#define CONST_CBPID_AmbOcclusion                                 398
#define CONST_CBPID_MasterSoundVolume                            399
#define CONST_CBPID_EffectSoundVolume                            400
#define CONST_CBPID_BGMVolume                                    401
#define CONST_CBPID_BGMMute                                      402
#define CONST_CBPID_VoiceVolume                                  403
#define CONST_CBPID_VoiceMute                                    404
#define CONST_CBPID_EffectSoundMute                              405
#define CONST_CBPID_HitSound                                     406
#define CONST_CBPID_HitSoundMute                                 407
#define CONST_CBPID_INGAMEBGMVolume                              408
#define CONST_CBPID_INGAMEBGMMute                                409
#define CONST_CBPID_VoiceChatAutoLogin                           481
#define CONST_CBPID_VoiceChatInputMode                           482
#define CONST_CBPID_VoiceChatInputDevice                         483
#define CONST_CBPID_VoiceChatInputVolume                         484
#define CONST_CBPID_VoiceChatInputMute                           485
#define CONST_CBPID_VoiceChatOutputVolume                        486
#define CONST_CBPID_VoiceChatOutputMute                          487
#define CONST_CBPID_MouseSensitivity_Master                      410
#define CONST_CBPID_AimAssist                                    411
#define CONST_CBPID_MouseSensitivity_Preset1                     412
#define CONST_CBPID_MouseSensitivity_Preset2                     413
#define CONST_CBPID_MouseSensitivity_Preset3                     414
#define CONST_CBPID_MouseSensitivity_Preset4                     415
#define CONST_CBPID_MouseSensitivity_Preset5                     416
#define CONST_CBPID_MouseSensitivity_Preset6                     417
#define CONST_CBPID_MouseSensitivity_Preset7                     418
#define CONST_CBPID_MouseSensitivity_Preset8                     419
#define CONST_CBPID_MouseSensitivity_Preset9                     420
#define CONST_CBPID_MouseSensitivity_Preset10                    421
#define CONST_CBPID_MouseSensMode                                422
#define CONST_CBPID_MouseInvert                                  423
#define CONST_CBPID_MouseSensitivity_Preset1_1stZoom             424
#define CONST_CBPID_MouseSensitivity_Preset1_2ndZoom             425
#define CONST_CBPID_MouseSensitivity_Preset2_1stZoom             426
#define CONST_CBPID_MouseSensitivity_Preset2_2ndZoom             427
#define CONST_CBPID_MouseSensitivity_Preset3_1stZoom             428
#define CONST_CBPID_MouseSensitivity_Preset3_2ndZoom             429
#define CONST_CBPID_GoreTeenLevel                                430
#define CONST_CBPID_GoreAdultLevel                               431
#define CONST_CBPID_BackgroundShadow                             432
#define CONST_CBPID_GunTrail                                     433
#define CONST_CBPID_MouseSensitivity_Preset4_1stZoom             440
#define CONST_CBPID_MouseSensitivity_Preset4_2ndZoom             441
#define CONST_CBPID_MouseSensitivity_Preset1_UseAll              442
#define CONST_CBPID_MouseSensitivity_Preset2_UseAll              443
#define CONST_CBPID_MouseSensitivity_Preset3_UseAll              444
#define CONST_CBPID_MouseSensitivity_Preset1_AutoScale           445
#define CONST_CBPID_MouseSensitivity_Preset2_AutoScale           446
#define CONST_CBPID_MouseSensitivity_Preset3_AutoScale           447
#define CONST_CBPID_AllChat                                      450
#define CONST_CBPID_TeamChat                                     451
#define CONST_CBPID_FOV                                          452
#define CONST_CBPID_FlipMesh                                     453
#define CONST_CBPID_IFFView                                      454
#define CONST_CBPID_HoldMode                                     455
#define CONST_CBPID_StartSecZoom                                 456
#define CONST_CBPID_ForegroundFOV                                457
#define CONST_CBPID_FriendRequestBlock                           458
#define CONST_CBPID_TeamOutline                                  459
#define CONST_CBPID_CrossHairType                                470
#define CONST_CBPID_CrossHairColor                               471
#define CONST_CBPID_CrossHairScale                               472
#define CONST_CBPID_CrossHairAlpha                               473
#define CONST_CBPID_CrossHairShadowType                          474
#define CONST_CBPID_CrossHairDoSpread                            475
#define CONST_CBPID_CrossHairCustomColor                         476
#define CONST_CBPID_SceneTone                                    477
#define CONST_CBPID_FPSLimit                                     478
#define CONST_CBPID_SystemCounter                                479
#define CONST_CBPID_OneFrameThreadLag                            480
#define CONST_CBPID_KeyAction                                    501
#define CONST_CBPID_KeyAction01                                  502
#define CONST_CBPID_KeyAction02                                  503
#define CONST_CBPID_KeyAction03                                  504
#define CONST_CBPID_KeyAction04                                  505
#define CONST_CBPID_KeyAction05                                  506
#define CONST_CBPID_KeyAction06                                  507
#define CONST_CBPID_KeyAction07                                  508
#define CONST_CBPID_KeyAction08                                  509
#define CONST_CBPID_KeyAction09                                  510
#define CONST_CBPID_KeyAction10                                  511
#define CONST_CBPID_KeyAction11                                  512
#define CONST_CBPID_KeyAction12                                  513
#define CONST_CBPID_KeyAction13                                  514
#define CONST_CBPID_KeyAction14                                  515
#define CONST_CBPID_KeyAction15                                  516
#define CONST_CBPID_KeyAction16                                  517
#define CONST_CBPID_KeyAction17                                  518
#define CONST_CBPID_KeyAction18                                  519
#define CONST_CBPID_KeyAction19                                  520
#define CONST_CBPID_KeyAction20                                  521
#define CONST_CBPID_KeyAction21                                  522
#define CONST_CBPID_KeyAction22                                  523
#define CONST_CBPID_KeyAction23                                  524
#define CONST_CBPID_KeyAction24                                  525
#define CONST_CBPID_KeyAction25                                  526
#define CONST_CBPID_KeyAction26                                  527
#define CONST_CBPID_KeyAction27                                  528
#define CONST_CBPID_KeyAction28                                  529
#define CONST_CBPID_KeyAction29                                  530
#define CONST_CBPID_KeyAction30                                  531
#define CONST_CBPID_KeyAction31                                  532
#define CONST_CBPID_KeyAction32                                  533
#define CONST_CBPID_KeyAction33                                  534
#define CONST_CBPID_KeyAction34                                  535
#define CONST_CBPID_KeyAction35                                  536
#define CONST_CBPID_KeyAction36                                  537
#define CONST_CBPID_KeyAction37                                  538
#define CONST_CBPID_KeyAction38                                  539
#define CONST_CBPID_KeyAction39                                  540
#define CONST_CBPID_KeyAction40                                  541
#define CONST_CBPID_KeyAction41                                  542
#define CONST_CBPID_KeyAction42                                  543
#define CONST_CBPID_KeyAction43                                  544
#define CONST_CBPID_KeyAction44                                  545
#define CONST_CBPID_KeyAction45                                  546
#define CONST_CBPID_KeyAction46                                  547
#define CONST_CBPID_KeyAction47                                  548
#define CONST_CBPID_KeyAction48                                  549
#define CONST_CBPID_KeyAction49                                  550
#define CONST_CBPID_KeyAction50                                  551
#define CONST_CBPID_KeyAction51                                  552
#define CONST_CBPID_KeyAction52                                  553
#define CONST_CBPID_KeyAction53                                  554
#define CONST_CBPID_KeyAction54                                  555
#define CONST_CBPID_KeyAction55                                  556
#define CONST_CBPID_KeyAction56                                  557
#define CONST_CBPID_KeyAction57                                  558
#define CONST_CBPID_KeyAction58                                  559
#define CONST_CBPID_KeyAction59                                  560
#define CONST_CBPID_KeyAction60                                  561
#define CONST_CBPID_KeyAction61                                  562
#define CONST_CBPID_KeyAction62                                  563
#define CONST_CBPID_KeyAction63                                  564
#define CONST_CBPID_KeyAction64                                  565
#define CONST_CBPID_KeyAction65                                  566
#define CONST_CBPID_KeyAction66                                  567
#define CONST_CBPID_RESERVED                                     601
#define CONST_CBPID_RESERVED01                                   602
#define CONST_CBPID_RESERVED02                                   603
#define CONST_CBPID_RESERVED03                                   604
#define CONST_CBPID_RESERVED04                                   605
#define CONST_CBPID_RESERVED05                                   606
#define CONST_CBPID_RESERVED06                                   607
#define CONST_CBPID_RESERVED07                                   608
#define CONST_CBPID_RESERVED08                                   609
#define CONST_CBPID_RESERVED09                                   610
#define CONST_CBPID_RESERVED10                                   611
#define CONST_CBPID_RESERVED11                                   612
#define CONST_CBPID_RESERVED12                                   613
#define CONST_CBPID_RESERVED13                                   614
#define CONST_CBPID_RESERVED14                                   615
#define CONST_CBPID_RESERVED15                                   616
#define CONST_CBPID_RESERVED16                                   617
#define CONST_CBPID_RESERVED17                                   618
#define CONST_CBPID_RESERVED18                                   619
#define CONST_CBPID_RESERVED19                                   620
#define CONST_MAX_LAST_WHISPER_LIST                              8
#define CONST_REWARD_TYPE_GOLD                                   1
#define CONST_REWARD_TYPE_ITEM                                   2
#define CONST_REWARD_TYPE_MEDAL                                  3
#define CONST_MAX_DIALOG                                         10
#define CONST_EQUIP_PRESET1                                      1
#define CONST_EQUIP_PRESET2                                      2
#define CONST_EQUIP_PRESET3                                      4
#define CONST_ADDON_MAX                                          10
#define CONST_MYINFO_COMBATRECORDS_WINRATE                       3000036
#define CONST_MYINFO_COMBATRECORDS_KAD                           3000037
#define CONST_MYINFO_COMBATRECORDS_HEADSHOT                      3000038
#define CONST_MYINFO_COMBATRECORDS_FATALSHOT                     3000039
#define CONST_MYINFO_COMBATRECORDS_TOTALWIN                      3000045
#define CONST_MYINFO_COMBATRECORDS_TOTALLOSE                     3000046
#define CONST_MYINFO_COMBATRECORDS_JOINDATE                      3000048
#define CONST_MYINFO_COMBATRECORDS_TOALLIVEPLAYTIME              3000049
#define CONST_MYINFO_COMBATRECORDS_DAYHOURMIN                    3000050
#define CONST_MYINFO_COMBATRECORDS_SUICIDE                       3000051
#define CONST_MYINFO_COMBATRECORDS_TOTALLSCORE                   3000052
#define CONST_MYINFO_COMBATRECORDS_TOTALKILLCOUNT                3000053
#define CONST_MYINFO_COMBATRECORDS_TOTALASSISTCOUNT              3000054
#define CONST_MYINFO_COMBATRECORDS_TOTALDEATHCOUNT               3000055
#define CONST_MYINFO_COMBATRECORDS_TOTALHEADSHOTCOUNT            3000056
#define CONST_MYINFO_COMBATRECORDS_TOTALFATALSHOTCOUNT           3000057
#define CONST_MYINFO_COMBATRECORDS_BEST_TOTALSCORECOUNT          3000058
#define CONST_MYINFO_COMBATRECORDS_BEST_TOTALKILLCOUNT           3000059
#define CONST_MYINFO_COMBATRECORDS_BEST_TOTALASSISTCOUNT         3000060
#define CONST_MYINFO_COMBATRECORDS_BEST_TOTALMISSIONCOUNT        3000061
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_WINRATE        3000086
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_WIN            3000089
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_LOSE           3000090
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_RUNAWAY        3000047
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_KAD            3000088
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_VSCLANNAME     3000087
#define CONST_MERCENARY_MATCH_NAME_TITLE                         105000
#define CONST_MYINFO_WEAPONRECORDS_PRIMWEAPONTOTAL               3000067
#define CONST_MYINFO_WEAPONRECORDS_SECONWEATOTAL                 3000068
#define CONST_MYINFO_WEAPONRECORDS_MELEEWEATOTAL                 3000069
#define CONST_MYINFO_WEAPONRECORDS_THROWWEATOTAL                 3000070
#define CONST_MYINFO_WEAPONRECORDS_SUBTAB_PRIMWEAPON             3000063
#define CONST_MYINFO_WEAPONRECORDS_SUBTAB_SECONWEA               3000064
#define CONST_MYINFO_WEAPONRECORDS_SUBTAB_MELEEWEA               3000065
#define CONST_MYINFO_WEAPONRECORDS_SUBTAB_THROWWEA               3000066
#define CONST_MYINFO_WEAPONRECORDS_EACHPRIMWEAPON                3000076
#define CONST_MYINFO_WEAPONRECORDS_EACHSECONWEA                  3000077
#define CONST_MYINFO_WEAPONRECORDS_EACHMELEEWEA                  3000078
#define CONST_MYINFO_WEAPONRECORDS_EACHTHROWWEA                  3000079
#define CONST_MYINFO_WEAPONRECORDS_HEADSHOT                      3000071
#define CONST_MYINFO_WEAPONRECORDS_FATALSHOT                     3000072
#define CONST_MYINFO_WEAPONRECORDS_TOTALKILLCOUNT                3000073
#define CONST_MYINFO_WEAPONRECORDS_TOTALHEADSHOTCOUNT            3000074
#define CONST_MYINFO_WEAPONRECORDS_TOTALFATALSHOTCOUNT           3000075
#define CONST_MYINFO_WEAPONRECORDS_RANK                          3000080
#define CONST_MYINFO_WEAPONRECORDS_WEAPONNAME                    3000081
#define CONST_MYINFO_WEAPONRECORDS_KILLNAME                      3000082
#define CONST_MYINFO_WEAPONRECORDS_HEADSHOTNAME                  3000083
#define CONST_MYINFO_WEAPONRECORDS_FATALSHOTNAME                 3000084
#define CONST_SCR_NOTICE_TIME                                    10
#define CONST_SCR_NOTICE_DELAY_TIME                              2
#define CONST_MISSION_PROGRESS                                   0
#define CONST_MISSION_OVER                                       1
#define CONST_FRONTEND_INVENTORY_BUTTON_USE                      1223003
#define CONST_MAX_PRESET_TAB_COUNT                               3
#define CONST_MAX_PRESET_LIST_COUNT                              5
#define CONST_MAX_CLOTHES_CHIP_COUNT                             14
#define CONST_MAX_FAILED_LOGIN_COUNT                             3
#define CONST_MAX_MENU_GAMEOPTION_DROPDOWN                       8
#define CONST_USER_STATE_ICON_WAIT                               0x00
#define CONST_USER_STATE_ICON_READY                              0x01
#define CONST_USER_STATE_ICON_SELF_SETTING                       0x02
#define CONST_USER_STATE_ICON_PLAYING                            0x03
#define CONST_USER_STATE_ICON_WATCHING                           0x04
#define CONST_USER_STATE_ICON_ROOM_SETTING                       0x05
#define CONST_B_CLANMATCH_MEMBER                                 0x2
#define CONST_A_CLANMATCH_MEMBER                                 0x3
#define CONST_FRONTEND_REBUY_BUTTON_TIMEOUT                      2100507
#define CONST_MAIL_BOX_RECEIVE_ITEM                              0x00
#define CONST_MAIL_BOX_RECEIVE_DELETE                            0x01
#define CONST_CIRCULAR_CROSSHAIR_IDX                             1
#define CONST_State_LocalPlayer                                  1
#define CONST_State_OtherPlayer                                  2
#define CONST_State_Death                                        3
#define CONST_MAX_INSTANCEITEM_COUNT                             4
#define CONST_MATCH_TIE                                          -1
#define CONST_MaxActorList                                       256
#define CONST_ATTEND_JOIN                                        0
#define CONST_ATTEND_REJOIN                                      1
#define CONST_ATTEND_NEXTDAY                                     2
#define CONST_AppIssuer                                          "nsstudio-blacksqu-w"
#define CONST_domain_with_at                                     "@mt1p.vivox.com"
#define CONST_WeaponStateCountRange                              0x03
#define CONST_ObjectPenetrationTypeMask                          1
#define CONST_PersonPenetrationTypeMask                          2
#define CONST_WeaponStateRange                                   0x3f

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum CombatGame.CCSSystemConfig.ECCSMovementConfig
/*enum ECCSMovementConfig
{
	CCSMovementUnreal                                  = 0,
	CCSMovementKynapse                                 = 1,
	ECCSMovementConfig_MAX                             = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.ETargetSelectionConfig
/*enum ETargetSelectionConfig
{
	CCSTarget_Player                                   = 0,
	CCSTarget_MissionActor                             = 1,
	CCSTarget_Enemy                                    = 2,
	CCSTarget_EnemyHelicopter                          = 3,
	CCSTarget_EnemySentryGun                           = 4,
	CCSTarget_MAX                                      = 5
};*/

// Enum CombatGame.CombatOnlineMetaphors.COMPETITIVE_POINT_STATE
/*enum COMPETITIVE_POINT_STATE
{
	COMPETITIVE_POINT_STATE_NORMAL                     = 0,
	COMPETITIVE_POINT_STATE_PENALTY_TIME               = 1,
	COMPETITIVE_POINT_STATE_PENALTY_INTERVAL           = 2,
	COMPETITIVE_POINT_STATE_MAX                        = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.ECCSDetermineCanShootConfig
/*enum ECCSDetermineCanShootConfig
{
	CCSDetermineCanShoot_SingleLine                    = 0,
	CCSDetermineCanShoot_MultiLine                     = 1,
	CCSDetermineCanShoot_MAX                           = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.TIER_POINT_UPDATE_TYPE
/*enum TIER_POINT_UPDATE_TYPE
{
	TIER_POINT_UPDATE_TYPE_NONE                        = 0,
	TIER_POINT_UPDATE_TYPE_MATCH_END                   = 1,
	TIER_POINT_UPDATE_TYPE_RESET                       = 2,
	TIER_POINT_UPDATE_TYPE_LONG_TERM_NON_PLAY_PENALTY  = 3,
	TIER_POINT_UPDATE_TYPE_MAX                         = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.GAME_OPTION_TYPE
/*enum GAME_OPTION_TYPE
{
	GAME_OPTION_TYPE_INVITE_AUTO_REGIST                = 0,
	GAME_OPTION_TYPE_FRIEND_INVITE_REFUSE              = 1,
	GAME_OPTION_TYPE_MINIMAP_SIZE_STEP                 = 2,
	GAME_OPTION_TYPE_MAX                               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCH_END_REASON
/*enum MATCH_END_REASON
{
	MATCH_END_REASON_NONE                              = 0,
	MATCH_END_REASON_FORFEITURE                        = 1,
	MATCH_END_REASON_SURRENDER                         = 2,
	MATCH_END_REASON_MAX                               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.PENALTY_TYPE
/*enum PENALTY_TYPE
{
	POINT_ALLEVIATION_TIME                             = 0,
	MATCH_START_REJECT                                 = 1,
	CHANNEL_ENTER_REJECT                               = 2,
	PENALTY_TYPE_MAX                                   = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLIENT_PROFILE_TYPE
/*enum CLIENT_PROFILE_TYPE
{
	CLIENT_PROFILE_PROTOCOL                            = 0,
	CLIENT_PROFILE_MAX                                 = 1
};*/

// Enum CombatGame.CombatOnlineMetaphors.SALE_TYPE
/*enum SALE_TYPE
{
	SALE_NONE                                          = 0,
	SALE_INSTANCE                                      = 1,
	SALE_ALLTIME                                       = 2,
	SALE_MAX                                           = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.INVITE_TYPE
/*enum INVITE_TYPE
{
	INVITE_TYPE_MATCHROOM                              = 0,
	INVITE_TYPE_MESSENGER                              = 1,
	INVITE_TYPE_MAX                                    = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.BALANCE_TYPE
/*enum BALANCE_TYPE
{
	BALANCE_TYPE_HANCOIN                               = 0,
	BALANCE_TYPE_GIFT                                  = 1,
	BALANCE_TYPE_EVGIFT                                = 2,
	BALANCE_TYPE_TOTAL                                 = 3,
	BALANCE_TYPE_MAX                                   = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_SELL_OVERLAP_CONDITION_TYPE
/*enum ITEM_SELL_OVERLAP_CONDITION_TYPE
{
	ITEM_SELL_OVERLAP_CONDITION_TYPE_NONE              = 0,
	ITEM_SELL_OVERLAP_CONDITION_TYPE_ALL               = 1,
	ITEM_SELL_OVERLAP_CONDITION_TYPE_TWO_OR_MORE       = 2,
	ITEM_SELL_OVERLAP_CONDITION_TYPE_MAX               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_SELL_PERIOD_CONDITION_TYPE
/*enum ITEM_SELL_PERIOD_CONDITION_TYPE
{
	ITEM_SELL_PERIOD_CONDITION_TYPE_NONE               = 0,
	ITEM_SELL_PERIOD_CONDITION_TYPE_INFINITE           = 1,
	ITEM_SELL_PERIOD_CONDITION_TYPE_TIME               = 2,
	ITEM_SELL_PERIOD_CONDITION_TYPE_ALL                = 3,
	ITEM_SELL_PERIOD_CONDITION_TYPE_MAX                = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.RANDOM_BOX_PROCESS_TYPE
/*enum RANDOM_BOX_PROCESS_TYPE
{
	RANDOM_BOX_PROCESS_TYPE_NONE                       = 0,
	RANDOM_BOX_PROCESS_TYPE_DICE                       = 1,
	RANDOM_BOX_PROCESS_TYPE_SEED                       = 2,
	RANDOM_BOX_PROCESS_TYPE_MAX                        = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCH_CHANNEL_LEAVE_REASON_TYPE
/*enum MATCH_CHANNEL_LEAVE_REASON_TYPE
{
	MATCH_CHANNEL_LEAVE_REASON_TYPE_NONE               = 0,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_KICK_BY_CLAN_MASTER = 1,
	MATCH_CHANNEL_LEAVE_REASON_WRONG_ENTRY_CONDITION   = 2,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_PING_TOO_HIGH      = 3,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_KICK_SECURITY      = 4,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_MAX                = 5,
	MATCH_CHANNEL_LEAVE_REASON_MAX                     = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_SHUTDOWN_TYPE
/*enum CLAN_SHUTDOWN_TYPE
{
	CLAN_SHUTDOWN_NONE                                 = 0,
	CLAN_SHUTDOWN_CLOSING                              = 1,
	CLAN_SHUTDOWN_DESTROYED                            = 2,
	CLAN_SHUTDOWN_MAX                                  = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCH_OPEN_CHANNEL_TYPE
/*enum MATCH_OPEN_CHANNEL_TYPE
{
	MATCH_OPEN_CHANNEL_TYPE_NORMAL                     = 0,
	MATCH_OPEN_CHANNEL_TYPE_CLAN                       = 1,
	MATCH_OPEN_CHANNEL_TYPE_AI                         = 2,
	MATCH_OPEN_CHANNEL_TYPE_QUICK                      = 3,
	MATCH_OPEN_CHANNEL_TYPE_RANK                       = 4,
	MATCH_OPEN_CHANNEL_TYPE_TEST                       = 5,
	MATCH_OPEN_CHANNEL_TYPE_MAX                        = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.REFERENCE_DATA_UPDATE_TYPE
/*enum REFERENCE_DATA_UPDATE_TYPE
{
	REFERENCE_DATA_UPDATE_TYPE_NONE                    = 0,
	REFERENCE_DATA_UPDATE_TYPE_MODE                    = 1,
	REFERENCE_DATA_UPDATE_TYPE_MAP                     = 2,
	REFERENCE_DATA_UPDATE_TYPE_SHOP                    = 3,
	REFERENCE_DATA_UPDATE_TYPE_MISSION                 = 4,
	REFERENCE_DATA_UPDATE_TYPE_MODE_GROUP_BIND_MODE    = 5,
	REFERENCE_DATA_UPDATE_TYPE_MODE_MAP                = 6,
	REFERENCE_DATA_UPDATE_TYPE_MODE_GROUP              = 7,
	REFERENCE_DATA_UPDATE_TYPE_MAX                     = 8
};*/

// Enum CombatGame.CombatOnlineMetaphors.ATTEND_USER_TYPE
/*enum ATTEND_USER_TYPE
{
	ATTEND_USER_TYPE_NONE                              = 0,
	ATTEND_USER_TYPE_NORMAL                            = 1,
	ATTEND_USER_TYPE_COMEBACK                          = 2,
	ATTEND_USER_TYPE_MAX                               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.REQUIRE_TARGET_TYPE
/*enum REQUIRE_TARGET_TYPE
{
	REQUIRE_TARGET_TYPE_NONE                           = 0,
	REQUIRE_TARGET_TYPE_CLAN_MASTER                    = 1,
	REQUIRE_TARGET_TYPE_MAX                            = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.RANDOM_BOX_GIVE_TYPE
/*enum RANDOM_BOX_GIVE_TYPE
{
	RANDOM_BOX_GIVE_TYPE_NONE                          = 0,
	RANDOM_BOX_GIVE_TYPE_ITEM                          = 1,
	RANDOM_BOX_GIVE_TYPE_GOLD                          = 2,
	RANDOM_BOX_GIVE_TYPE_MEDAL                         = 3,
	RANDOM_BOX_GIVE_TYPE_GCOIN                         = 4,
	RANDOM_BOX_GIVE_TYPE_BSCOIN                        = 5,
	RANDOM_BOX_GIVE_TYPE_MCOIN                         = 6,
	RANDOM_BOX_GIVE_TYPE_MAX                           = 7
};*/

// Enum CombatGame.CombatOnlineMetaphors.USER_GAME_OPTION_TYPE
/*enum USER_GAME_OPTION_TYPE
{
	USER_GAME_OPTION_TYPE_OFF                          = 0,
	USER_GAME_OPTION_TYPE_ON                           = 1,
	USER_GAME_OPTION_TYPE_MAX                          = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_STATE
/*enum ITEM_STATE
{
	ITEM_STATE_DEACTIVATED                             = 0,
	ITEM_STATE_ACTIVATED                               = 1,
	ITEM_STATE_EXPIRED                                 = 2,
	ITEM_STATE_DISTROY                                 = 3,
	ITEM_STATE_MAX                                     = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.USER_INFO_SEARCH_TYPE
/*enum USER_INFO_SEARCH_TYPE
{
	USER_INFO_SEARCH_TYPE_ID                           = 0,
	USER_INFO_SEARCH_TYPE_NICK                         = 1,
	USER_INFO_SEARCH_TYPE_MAX                          = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_BUY_RECV_TYPE
/*enum ITEM_BUY_RECV_TYPE
{
	ITEM_BUY_RECV_TYPE_INVENTORY                       = 0,
	ITEM_BUY_RECV_TYPE_MAIL_BOX                        = 1,
	ITEM_BUY_RECV_TYPE_MAX                             = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_PERIOD_TYPE
/*enum ITEM_PERIOD_TYPE
{
	ITEM_PERIOD_TYPE_TIME                              = 0,
	ITEM_PERIOD_TYPE_INFINITE                          = 1,
	ITEM_PERIOD_TYPE_MAX                               = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.CONSUME_TYPE
/*enum CONSUME_TYPE
{
	CONSUME_TYPE_NORMAL                                = 0,
	CONSUME_TYPE_SELECT                                = 1,
	CONSUME_TYPE_ALL                                   = 2,
	CONSUME_TYPE_MAX                                   = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MAIL_STATE
/*enum MAIL_STATE
{
	MAIL_STATE_NEW                                     = 0,
	MAIL_STATE_READ                                    = 1,
	MAIL_STATE_MAX                                     = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MAIL_TYPE
/*enum MAIL_TYPE
{
	MAIL_TYPE_CASH                                     = 0,
	MAIL_TYPE_GIFT_CASH                                = 1,
	MAIL_TYPE_GM                                       = 2,
	MAIL_TYPE_EVENT                                    = 3,
	MAIL_TYPE_SYSTEM                                   = 4,
	MAIL_TYPE_IN_GAME_REWARD                           = 5,
	MAIL_TYPE_IN_GAME_ITEM_BUY_BY_GAME_MONEY           = 6,
	MAIL_TYPE_IN_GAME_ITEM_BUY_BY_MEDAL                = 7,
	MAIL_TYPE_IN_GAME_ITEM_BUY_BY_CASH                 = 8,
	MAIL_TYPE_IN_GAME_ITEM_RANDOM_BOX                  = 9,
	MAIL_TYPE_MAX                                      = 10
};*/

// Enum CombatGame.CombatOnlineMetaphors.PCBANG_BENEFIT
/*enum PCBANG_BENEFIT
{
	PCBANG_BENEFIT_DEACTIVATE                          = 0,
	PCBANG_BENEFIT_ACTIVATE                            = 1,
	PCBANG_BENEFIT_MAX                                 = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.DAY_OF_WEEK
/*enum DAY_OF_WEEK
{
	DAY_OF_WEEK_SUNDAY                                 = 0,
	DAY_OF_WEEK_MONDAY                                 = 1,
	DAY_OF_WEEK_TUESDAY                                = 2,
	DAY_OF_WEEK_WEDNESDAY                              = 3,
	DAY_OF_WEEK_THURSDAY                               = 4,
	DAY_OF_WEEK_FRIDAY                                 = 5,
	DAY_OF_WEEK_SATURDAY                               = 6,
	DAY_OF_WEEK_MAX                                    = 7
};*/

// Enum CombatGame.CombatOnlineMetaphors.COMPLAINT_TYPE
/*enum COMPLAINT_TYPE
{
	COMPLAINT_TYPE_HACK_USER                           = 0,
	COMPLAINT_TYPE_ROUND_MONITORING                    = 1,
	COMPLAINT_TYPE_MAX                                 = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.QUEST_UPDATE_ABUSE_TYPE
/*enum QUEST_UPDATE_ABUSE_TYPE
{
	QUEST_UPDATE_ABUSE_TYPE_NONE                       = 0,
	QUEST_UPDATE_ABUSE_TYPE_BLOCK                      = 1,
	QUEST_UPDATE_ABUSE_TYPE_MAX                        = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.QUEST_STEP
/*enum QUEST_STEP
{
	QUEST_STEP                                         = 0,
	QUEST_STEP01                                       = 1,
	QUEST_STEP02                                       = 2,
	QUEST_STEP03                                       = 3,
	QUEST_STEP04                                       = 4,
	QUEST_STEP05                                       = 5,
	QUEST_STEP_MAX                                     = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.QUEST_TYPE
/*enum QUEST_TYPE
{
	QUEST_TYPE_NONE                                    = 0,
	QUEST_TYPE_DAILY                                   = 1,
	QUEST_TYPE_MEDAL                                   = 2,
	QUEST_TYPE_DAILY01                                 = 3,
	QUEST_TYPE_DAILY02                                 = 4,
	QUEST_TYPE_WEEKLY                                  = 5,
	QUEST_TYPE_WEEKLY01                                = 6,
	QUEST_TYPE_MONTHLY                                 = 7,
	QUEST_TYPE_MONTHLY01                               = 8,
	QUEST_TYPE_PCBANG_TS                               = 9,
	QUEST_TYPE_REPEATEDLY_AND_MATCH_REWARD_ONLY        = 10,
	QUEST_TYPE_REPEATEDLY_AND_MATCH_REWARD_ONLY01      = 11,
	QUEST_TYPE_SPECIAL                                 = 12,
	QUEST_TYPE_AI_NORMAL_S                             = 13,
	QUEST_TYPE_AI_NORMAL_SS                            = 14,
	QUEST_TYPE_AI_HARD_D                               = 15,
	QUEST_TYPE_REPEATEDLY_CLAN_FREE_MATCH_REWARD_ONLY  = 16,
	QUEST_TYPE_REPEATEDLY_CLAN_FREE_MATCH_REWARD_ONLY01 = 17,
	QUEST_TYPE_FREE_AUTO_MATCH                         = 18,
	QUEST_TYPE_FREE_CHANNEL_PLAY                       = 19,
	QUEST_TYPE_AI_TDM                                  = 20,
	QUEST_TYPE_REPEATEDLY_CLAN_RANKING_MATCH_REWARD_ONLY = 21,
	QUEST_TYPE_REPEATEDLY_CLAN_RANKING_MATCH_REWARD_ONLY01 = 22,
	QUEST_TYPE_COMPETITION_MATCH                       = 23,
	QUEST_TYPE_COMPETITION_MATCH_SQUAD                 = 24,
	QUEST_TYPE_DAILY03                                 = 25,
	QUEST_TYPE_ONE_TIME                                = 26,
	QUEST_TYPE_DEILY                                   = 27,
	QUEST_TYPE_DEILY01                                 = 28,
	QUEST_TYPE_DEILY02                                 = 29,
	QUEST_TYPE_DEILY03                                 = 30,
	QUEST_TYPE_MAX                                     = 31
};*/

// Enum CombatGame.CombatOnlineMetaphors.QUEST_GROUP
/*enum QUEST_GROUP
{
	QUEST_GROUP_NONE                                   = 0,
	QUEST_GROUP_DAILY                                  = 1,
	QUEST_GROUP_WEEKLY                                 = 2,
	QUEST_GROUP_MONTHLY                                = 3,
	QUEST_GROUP_PCBANG                                 = 4,
	QUEST_GROUP_REPEATEDLY_AND_MATCH_REWARD_ONLY       = 5,
	QUEST_GROUP_SPECIAL                                = 6,
	QUEST_GROUP_AI                                     = 7,
	QUEST_GROUP_FREE_AUTO_MATCH                        = 8,
	QUEST_GROUP_ONE_TIME                               = 9,
	QUEST_GROUP_MAX                                    = 10
};*/

// Enum CombatGame.CombatOnlineMetaphors.HACK_TYPE
/*enum HACK_TYPE
{
	HACK_Weapon_Ammo                                   = 0,
	HACK_Weapon_Range                                  = 1,
	HACK_Weapon_FireLocation                           = 2,
	HACK_Weapon_HitPawnLocation                        = 3,
	HACK_Weapon_PenetrationFire                        = 4,
	HACK_Weapon_InvalidRecoil                          = 5,
	HACK_ETC_InvalidUDP                                = 6,
	HACK_ETC_WallHack                                  = 7,
	HACK_ETC_MovementProperties                        = 8,
	HACK_Weapon_Projectile                             = 9,
	HACK_MAX                                           = 10
};*/

// Enum CombatGame.CombatOnlineMetaphors.BOOSTER
/*enum BOOSTER
{
	BOOSTER_PC_BANG                                    = 0,
	BOOSTER_ITEM                                       = 1,
	BOOSTER_PERIOD                                     = 2,
	BOOSTER_CHANNEL                                    = 3,
	BOOSTER_MATCH                                      = 4,
	BOOSTER_NOMANNER                                   = 5,
	BOOSTER_MAX                                        = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.SEARCH_ROOM_STATE
/*enum SEARCH_ROOM_STATE
{
	SEARCH_ROOM_STATE_NONE                             = 0,
	SEARCH_ROOM_STATE_WAITING                          = 1,
	SEARCH_ROOM_STATE_PLAYING                          = 2,
	SEARCH_ROOM_STATE_MAX                              = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.ERoundCountType
/*enum ERoundCountType
{
	ERound_None                                        = 0,
	ERound_Single                                      = 1,
	ERound_Multi                                       = 2,
	ERount_Etc                                         = 3,
	ERoundCountType_MAX                                = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.SHOP_VALUE_TYPE
/*enum SHOP_VALUE_TYPE
{
	SHOP_VALUE_TYPE_TIME                               = 0,
	SHOP_VALUE_TYPE_COUNT                              = 1,
	SHOP_VALUE_TYPE_MAX                                = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.PriceType
/*enum PriceType
{
	PRICE_TYPE_GAME_MONEY                              = 0,
	PRICE_TYPE_CASH                                    = 1,
	PRICE_TYPE_MEDAL                                   = 2,
	PRICE_TYPE_GCOIN                                   = 3,
	PRICE_TYPE_BSCOIN                                  = 4,
	PRICE_TYPE_MCOIN                                   = 5,
	PRICE_TYPE_MAX                                     = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.ClanSearchSortType
/*enum ClanSearchSortType
{
	ClanSearchSortTypeAsc                              = 0,
	ClanSearchSortTypeDesc                             = 1,
	ClanSearchSortTypeEnd                              = 2,
	ClanSearchSortType_MAX                             = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_MATCH_TYPE
/*enum CLAN_MATCH_TYPE
{
	CLAN_MATCH_TYPE_NONE                               = 0,
	CLAN_MATCH_TYPE_A                                  = 1,
	CLAN_MATCH_TYPE_B                                  = 2,
	CLAN_MATCH_TYPE_RANKING                            = 3,
	CLAN_MATCH_TYPE_MAX                                = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_SEARCH_TYPE
/*enum CLAN_SEARCH_TYPE
{
	CLAN_SEARCH_TYPE_CREATE_DATE                       = 0,
	CLAN_SEARCH_TYPE_MEMBER_REG_COUNT                  = 1,
	CLAN_SEARCH_TYPE_MATCH_POINT                       = 2,
	CLAN_SEARCH_TYPE_PLAY_MATCH_COUNT                  = 3,
	CLAN_SEARCH_TYPE_RANKING_POINT                     = 4,
	CLAN_SEARCH_TYPE_END                               = 5,
	CLAN_SEARCH_TYPE_MAX                               = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_MEMBER_GRADE
/*enum CLAN_MEMBER_GRADE
{
	CLAN_MEMBER_GRADE_MASTER                           = 0,
	CLAN_MEMBER_GRADE_MANAGER                          = 1,
	CLAN_MEMBER_GRADE_NORMAL                           = 2,
	CLAN_MEMBER_GRADE_END                              = 3,
	CLAN_MEMBER_GRADE_MAX                              = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_RECRUIT_CONDITION
/*enum CLAN_RECRUIT_CONDITION
{
	CLAN_RECRUIT_STOP                                  = 0,
	CLAN_RECRUIT_APPROVAL                              = 1,
	CLAN_RECRUIT_FREE                                  = 2,
	CLAN_RECRUIT_MAX                                   = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.GRADE
/*enum GRADE
{
	ADMIN_GRADE                                        = 0,
	LEAD_GM_GRADE                                      = 1,
	GM_GRADE                                           = 2,
	NORMAL_USER_GRADE                                  = 3,
	DUMMY_CLIENT_GRADE                                 = 4,
	CHAMPIONSHIP_OBSERVER_GRADE                        = 5,
	ONLINE_CHAMPIONSHIP_USER_GRADE                     = 6,
	OFFLINE_CHAMPIONSHIP_USER_GRADE                    = 7,
	GRADE_MAX                                          = 8
};*/

// Enum CombatGame.CombatOnlineMetaphors.MessengerMemberState
/*enum MessengerMemberState
{
	MemberInviteState                                  = 0,
	MemberFriendState                                  = 1,
	MemberBlockState                                   = 2,
	MessengerMemberState_MAX                           = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.CHAT_CHANNEL
/*enum CHAT_CHANNEL
{
	BASIC_CHAT_CHANNEL                                 = 0,
	CUSTOM_CHAT_CHANNEL                                = 1,
	MATCH_ROOM_CHAT_CHANNEL                            = 2,
	CHAT_CHANNEL_MAX                                   = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.CHAT_TYPE
/*enum CHAT_TYPE
{
	CHAT_TYPE_NORMAL                                   = 0,
	CHAT_TYPE_WHISPER                                  = 1,
	CHAT_TYPE_TEAM                                     = 2,
	CHAT_TYPE_NOTICE                                   = 3,
	CHAT_TYPE_RADIO                                    = 4,
	CHAT_TYPE_RADIO_ALL                                = 5,
	CHAT_TYPE_CHANNEL                                  = 6,
	CHAT_TYPE_INGAME                                   = 7,
	CHAT_TYPE_INGAME_TEAM                              = 8,
	CHAT_TYPE_COMMUNITY                                = 9,
	CHAT_TYPE_MAX                                      = 10
};*/

// Enum CombatGame.CombatOnlineMetaphors.MODE_GROUP_ENTRY_TYPE
/*enum MODE_GROUP_ENTRY_TYPE
{
	MODE_GROUP_ENTRY_ALL                               = 0,
	MODE_GROUP_ENTRY_VC                                = 1,
	MODE_GROUP_ENTRY_PM                                = 2,
	MODE_GROUP_ENTRY_MAX                               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MODE_GROUP_SELECT_TYPE
/*enum MODE_GROUP_SELECT_TYPE
{
	MODE_GROUP_SELECT_BASIC                            = 0,
	MODE_GROUP_SELECT_RANDOM                           = 1,
	MODE_GROUP_SELECT_AUTO_MATCHING                    = 2,
	MODE_GROUP_SELECT_QUICK_MATCHING                   = 3,
	MODE_GROUP_SELECT_COMPETITIVE_MATCHING             = 4,
	MODE_GROUP_SELECT_MAX                              = 5
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE
/*enum MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE
{
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_NOT_USE      = 0,
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_EASY         = 1,
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_NORMAL       = 2,
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_HARD         = 3,
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_MAX          = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE
/*enum MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE
{
	MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE_HIDE        = 0,
	MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE_SHOW        = 1,
	MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE_MAX         = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_MODE_OPTION_TOGGLE_TYPE
/*enum MATCHROOM_MODE_OPTION_TOGGLE_TYPE
{
	MATCHROOM_MODE_OPTION_TOGGLE_TYPE_OFF              = 0,
	MATCHROOM_MODE_OPTION_TOGGLE_TYPE_ON               = 1,
	MATCHROOM_MODE_OPTION_TOGGLE_TYPE_MAX              = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_MODE_OPTION_TYPE
/*enum MATCHROOM_MODE_OPTION_TYPE
{
	MATCHROOM_MODE_OPTION_TYPE_MAX_USER                = 0,
	MATCHROOM_MODE_OPTION_TYPE_GOAL                    = 1,
	MATCHROOM_MODE_OPTION_TYPE_MISSION                 = 2,
	MATCHROOM_MODE_OPTION_TYPE_MATCH_END_SCORE         = 3,
	MATCHROOM_MODE_OPTION_TYPE_PLAY_TIME               = 4,
	MATCHROOM_MODE_OPTION_TYPE_THIRD_CAMERA_VIEW       = 5,
	MATCHROOM_MODE_OPTION_TYPE_FREE_CAMERA_VIEW        = 6,
	MATCHROOM_MODE_OPTION_TYPE_DEATH_CHAT              = 7,
	MATCHROOM_MODE_OPTION_TYPE_RUSH                    = 8,
	MATCHROOM_MODE_OPTION_TYPE_AUTO_TEAM_BALANCE       = 9,
	MATCHROOM_MODE_OPTION_TYPE_LIMIT_LEVEL             = 10,
	MATCHROOM_MODE_OPTION_TYPE_OBSERVER                = 11,
	MATCHROOM_MODE_OPTION_TYPE_DIFFICULTY              = 12,
	MATCHROOM_MODE_OPTION_TYPE_HALF_CHANGE             = 13,
	MATCHROOM_MODE_OPTION_TYPE_AUTO_TEAM_CHANGE        = 14,
	MATCHROOM_MODE_OPTION_TYPE_APPLY_CLAN_RECORD       = 15,
	MATCHROOM_MODE_OPTION_TYPE_REQUIRED_CLAN_MEMBER    = 16,
	MATCHROOM_MODE_OPTION_TYPE_ALL_CHAT                = 17,
	MATCHROOM_MODE_OPTION_TYPE_MAX                     = 18
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_OPEN_TYPE
/*enum MATCHROOM_OPEN_TYPE
{
	MATCHROOM_OPEN_TYPE_PUBLIC                         = 0,
	MATCHROOM_OPEN_TYPE_PRIVATE                        = 1,
	MATCHROOM_OPEN_TYPE_MAX                            = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_TITLE_TYPE
/*enum MATCHROOM_TITLE_TYPE
{
	MATCHROOM_TITLE_TYPE_MACRO                         = 0,
	MATCHROOM_TITLE_TYPE_CUSTOM                        = 1,
	MATCHROOM_TITLE_TYPE_MAX                           = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.PC_TYPE
/*enum PC_TYPE
{
	PC_PLAYER                                          = 0,
	PC_SPECTATOR                                       = 1,
	PC_MAX                                             = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.TEAM_UPDATE_TYPE
/*enum TEAM_UPDATE_TYPE
{
	TEAM_UPDATE_TYPE_SWAP_BY_GM                        = 0,
	TEAM_UPDATE_TYPE_SWAP_BY_HOST                      = 1,
	TEAM_UPDATE_TYPE_SHUFFLE_BY_GM                     = 2,
	TEAM_UPDATE_TYPE_SHUFFLE_BY_HOST                   = 3,
	TEAM_UPDATE_TYPE_MAX                               = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.AUTO_BALANCE_TEAM
/*enum AUTO_BALANCE_TEAM
{
	AUTO_BALANCE_TEAM_A                                = 0,
	AUTO_BALANCE_TEAM_B                                = 1,
	AUTO_BALANCE_TEAM_B01                              = 2,
	AUTO_BALANCE_TEAM_A01                              = 3,
	AUTO_BALANCE_TEAM_MAX                              = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.Team
/*enum Team
{
	TEAM_VIPER_CIRCLE                                  = 0,
	TEAM_PEACE_MAKER                                   = 1,
	TEAM_MAX                                           = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_STATES
/*enum MATCHROOM_STATES
{
	MATCHROOM_STATE_CLOSED                             = 0,
	MATCHROOM_STATE_CLOSING                            = 1,
	MATCHROOM_STATE_WAITING                            = 2,
	MATCHROOM_STATE_COUNTDOWN                          = 3,
	MATCHROOM_STATE_ENTERING_MATCH                     = 4,
	MATCHROOM_STATE_PLAYING                            = 5,
	MATCHROOM_STATE_MATCH_FINISHED                     = 6,
	MATCHROOM_STATE_MAX                                = 7
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_PROVIDE_TYPE
/*enum ITEM_PROVIDE_TYPE
{
	ITEM_PROVIDE_TYPE_SHOP                             = 0,
	ITEM_PROVIDE_TYPE_BASIC                            = 1,
	ITEM_PROVIDE_TYPE_MAX                              = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.AVATAR_TYPES
/*enum AVATAR_TYPES
{
	AVATAR_NONE                                        = 0,
	AVATAR_PEACE_MAKER                                 = 1,
	AVATAR_VIPER_CIRCLE                                = 2,
	AVATAR_MAX                                         = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.WEAPON_TYPES
/*enum WEAPON_TYPES
{
	WEAPON_NONE                                        = 0,
	WEAPON_PISTOL                                      = 1,
	WEAPON_SHOTGUN                                     = 2,
	WEAPON_SMG                                         = 3,
	WEAPON_RIFLE                                       = 4,
	WEAPON_DMR                                         = 5,
	WEAPON_LMG                                         = 6,
	WEAPON_BASR                                        = 7,
	WEAPON_GL                                          = 8,
	WEAPON_FSW_RL                                      = 9,
	WEAPON_FSW_GL                                      = 10,
	WEAPON_FSW_LMG                                     = 11,
	WEAPON_FSW_AMSR                                    = 12,
	WEAPON_MELEE                                       = 13,
	WEAPON_MELEE_SAW                                   = 14,
	WEAPON_FLAG                                        = 15,
	WEAPON_GAMEWEAPON                                  = 16,
	WEAPON_MACHINE_PISTOL                              = 17,
	WEAPON_MAX                                         = 18
};*/

// Enum CombatGame.CombatOnlineMetaphors.EQUIP_SLOTS
/*enum EQUIP_SLOTS
{
	EQUIP_PRIMARY_WEAPON                               = 0,
	EQUIP_SUB_WEAPON                                   = 1,
	EQUIP_MELEE_WEAPON                                 = 2,
	EQUIP_GRENADE_A                                    = 3,
	EQUIP_GRENADE_B                                    = 4,
	EQUIP_GRENADE_C                                    = 5,
	EQUIP_CHIP_A                                       = 6,
	EQUIP_CHIP_B                                       = 7,
	EQUIP_CHIP_C                                       = 8,
	EQUIP_MAX                                          = 9
};*/

// Enum CombatGame.CombatOnlineMetaphors.PRESET_EQUIPMENTS
/*enum PRESET_EQUIPMENTS
{
	PRESET_EQUIPMENTS_BASIC                            = 0,
	PRESET_EQUIPMENTS_BASIC01                          = 1,
	PRESET_EQUIPMENTS_BASIC02                          = 2,
	PRESET_EQUIPMENTS_MAX                              = 3
};*/

// Enum CombatGame.AIBeacon.EAITeamInfo
/*enum EAITeamInfo
{
	AITeamInfo_None                                    = 0,
	AITeamInfo_VC                                      = 1,
	AITeamInfo_PM                                      = 2,
	AITeamInfo_MAX                                     = 3
};*/

// Enum CombatGame.AIDebugCameraController.EAIDebugCameraType
/*enum EAIDebugCameraType
{
	AIDebugCameraType_Free                             = 0,
	AIDebugCameraType_Attach                           = 1,
	AIDebugCameraType_Fixed                            = 2,
	AIDebugCameraType_MAX                              = 3
};*/

// Enum CombatGame.CombatAnimBlendByFall.EBlendFallTypes
/*enum EBlendFallTypes
{
	FBT_Up                                             = 0,
	FBT_Down                                           = 1,
	FBT_PreLand                                        = 2,
	FBT_Land                                           = 3,
	FBT_None                                           = 4,
	FBT_MAX                                            = 5
};*/

// Enum CombatGame.CombatTypes.RadioKeyType
/*enum RadioKeyType
{
	RKT_LeftKey                                        = 0,
	RKT_RightKey                                       = 1,
	RKT_MAX                                            = 2
};*/

// Enum CombatGame.CombatTypes.EHotKeyType
/*enum EHotKeyType
{
	EHKT_PickItem                                      = 0,
	EHKT_Operation                                     = 1,
	EHKT_DisablePickItem                               = 2,
	EHKT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.eStatType_HitPart
/*enum eStatType_HitPart
{
	eStatHitPart_Body                                  = 0,
	eStatHitPart_Head                                  = 1,
	eStatHitPart_Fatal                                 = 2,
	eStatHitPart_MAX                                   = 3
};*/

// Enum CombatGame.CombatTypes.ESplineActorType
/*enum ESplineActorType
{
	ESplineActorType_Helicopter                        = 0,
	ESplineActorType_SentryGun                         = 1,
	ESplineActorType_MineTrain                         = 2,
	ESplineActorType_MAX                               = 3
};*/

// Enum CombatGame.CombatTypes.E_COMPETITIVE_MATCH_TYPE
/*enum E_COMPETITIVE_MATCH_TYPE
{
	E_CMT_NONE                                         = 0,
	E_CMT_SOLO_DUO                                     = 1,
	E_CMT_SQUAD                                        = 2,
	E_CMT_MAX                                          = 3
};*/

// Enum CombatGame.CombatTypes.E_MATCH_RESULT_TYPE
/*enum E_MATCH_RESULT_TYPE
{
	E_MATCH_RESULT_TYPE_LOSE                           = 0,
	E_MATCH_RESULT_TYPE_WIN                            = 1,
	E_MATCH_RESULT_TYPE_RUNAWAY                        = 2,
	E_MATCH_RESULT_TYPE_MAX                            = 3
};*/

// Enum CombatGame.CombatTypes.ERequestSendChattingType
/*enum ERequestSendChattingType
{
	ERSCT_None                                         = 0,
	ERSCT_Channel                                      = 1,
	ERSCT_MatchRoom                                    = 2,
	ERSCT_InGame                                       = 3,
	ERSCT_InGameTeam                                   = 4,
	ERSCT_Clan                                         = 5,
	ERSCT_Whisper                                      = 6,
	ERSCT_RadioMessage                                 = 7,
	ERSCT_Max                                          = 8
};*/

// Enum CombatGame.CombatTypes.EModeUIType
/*enum EModeUIType
{
	EModeUIType_None                                   = 0,
	EModeUIType_PVP                                    = 1,
	EModeUIType_ClanMatch                              = 2,
	EModeUIType_AI_DFM                                 = 3,
	EModeUIType_AI_TDM                                 = 4,
	EModeUIType_COMPETITION                            = 5,
	EModeUIType_MAX                                    = 6
};*/

// Enum CombatGame.CombatTypes.EUIActivationType
/*enum EUIActivationType
{
	EUIActivation_Show                                 = 0,
	EUIActivation_Disable                              = 1,
	EUIActivation_Hide                                 = 2,
	EUIActivation_MAX                                  = 3
};*/

// Enum CombatGame.CombatTypes.EAIRewardRank
/*enum EAIRewardRank
{
	EAIRewardRank_D                                    = 0,
	EAIRewardRank_C                                    = 1,
	EAIRewardRank_B                                    = 2,
	EAIRewardRank_A                                    = 3,
	EAIRewardRank_S                                    = 4,
	EAIRewardRank_SS                                   = 5,
	EAIRewardRank_MAX                                  = 6
};*/

// Enum CombatGame.CombatTypes.EShopItemGetType
/*enum EShopItemGetType
{
	E_ShopItemGetType_None                             = 0,
	E_ShopItemGetType_BuyEquip                         = 1,
	E_ShopItemGetType_BuyUsed                          = 2,
	E_ShopItemGetType_MAX                              = 3
};*/

// Enum CombatGame.CombatTypes.ELoginProcessType
/*enum ELoginProcessType
{
	ELPT_Wait                                          = 0,
	ELPT_Load                                          = 1,
	ELPT_Succeed                                       = 2,
	ELPT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.ELoginCertificationType
/*enum ELoginCertificationType
{
	ELCT_UserID                                        = 0,
	ELCT_EnterMatchServer                              = 1,
	ELCT_UserDataInfo                                  = 2,
	ELCT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.EShopSortList
/*enum EShopSortList
{
	E_SHOPSORT_GAMEMONEY                               = 0,
	E_SHOPSORT_CASH                                    = 1,
	E_SHOPSORT_MEDAL                                   = 2,
	E_SHOPSORT_NAME                                    = 3,
	E_SHOPSORT_GRADE                                   = 4,
	E_SHOPSORT_MAX                                     = 5
};*/

// Enum CombatGame.CombatTypes.EShopMoneyType
/*enum EShopMoneyType
{
	E_MONEYTYPE_GAMEMONEY                              = 0,
	E_MONEYTYPE_CASH                                   = 1,
	E_MONEYTYPE_MEDAL                                  = 2,
	E_MONEYTYPE_GCOIN                                  = 3,
	E_MONEYTYPE_BSCOIN                                 = 4,
	E_MONEYTYPE_MCOIN                                  = 5,
	E_MONEYTYPE_MAX                                    = 6
};*/

// Enum CombatGame.CombatTypes.EShopType
/*enum EShopType
{
	E_SHOPTYPE_GAMEMONEY_OR_CASH                       = 0,
	E_SHOPTYPE_MEDAL                                   = 1,
	E_SHOPTYPE_RANDOMBOX                               = 2,
	E_SHOPTYPE_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.EWeaponArcBrandishDir
/*enum EWeaponArcBrandishDir
{
	EWABD_RightToLeft                                  = 0,
	EWABD_LeftToRight                                  = 1,
	EWABD_MAX                                          = 2
};*/

// Enum CombatGame.CombatTypes.EClanPasswordErrorType
/*enum EClanPasswordErrorType
{
	ECPET_Sucees                                       = 0,
	ECPET_None_Pw                                      = 1,
	ECPET_None_PwConfirm                               = 2,
	ECPET_Match_Pw                                     = 3,
	ECPET_Bad_Pw                                       = 4,
	ECPET_None_CurPw                                   = 5,
	ECPET_None_NewPw                                   = 6,
	ECPET_Match_NewPw                                  = 7,
	ECPET_None_NewPwConfirm                            = 8,
	ECPET_Invalid_Pw                                   = 9,
	ECPET_Change_OldPw                                 = 10,
	ECPET_Invalid_Permission                           = 11,
	ECPET_MAX                                          = 12
};*/

// Enum CombatGame.CombatTypes.ATTCK_SKILL_ACTOR
/*enum ATTCK_SKILL_ACTOR
{
	ASA_SentryGun                                      = 0,
	ASA_Trophy                                         = 1,
	ASA_MAX                                            = 2
};*/

// Enum CombatGame.CombatTypes.PLAYERSTART_TYPE
/*enum PLAYERSTART_TYPE
{
	PLAYERSTART_TYPE_GROUND                            = 0,
	PLAYERSTART_TYPE_AIR                               = 1,
	PLAYERSTART_TYPE_MAX                               = 2
};*/

// Enum CombatGame.CombatTypes.MATCHROOM_SLOT_STATE
/*enum MATCHROOM_SLOT_STATE
{
	MATCHROOM_SLOT_STATE_NONE                          = 0,
	MATCHROOM_SLOT_STATE_OPEN                          = 1,
	MATCHROOM_SLOT_STATE_WAIT                          = 2,
	MATCHROOM_SLOT_STATE_READY                         = 3,
	MATCHROOM_SLOT_STATE_SETTING                       = 4,
	MATCHROOM_SLOT_STATE_PLAYING                       = 5,
	MATCHROOM_SLOT_STATE_CLOSED                        = 6,
	MATCHROOM_SLOT_STATE_ROOMSETTING                   = 7,
	MATCHROOM_SLOT_STATE_MAX                           = 8
};*/

// Enum CombatGame.CombatTypes.MATCHROOM_MAP_OPTION_SIZE
/*enum MATCHROOM_MAP_OPTION_SIZE
{
	MATCHROOM_MAP_OPTION_SIZE_SMALL                    = 0,
	MATCHROOM_MAP_OPTION_SIZE_MEDIUM                   = 1,
	MATCHROOM_MAP_OPTION_SIZE_LARGE                    = 2,
	MATCHROOM_MAP_OPTION_SIZE_MAX                      = 3
};*/

// Enum CombatGame.CombatTypes.EFrontEnd_TagType
/*enum EFrontEnd_TagType
{
	TagType_None                                       = 0,
	TagType_Event                                      = 1,
	TagType_Extra                                      = 2,
	TagType_Special                                    = 3,
	TagType_MAX                                        = 4
};*/

// Enum CombatGame.CombatTypes.ESplineSpeedType
/*enum ESplineSpeedType
{
	ESplineSpeedType_Maximum                           = 0,
	ESplineSpeedType_Linear                            = 1,
	ESplineSpeedType_MAX                               = 2
};*/

// Enum CombatGame.CombatTypes.EMatchStartErrorType
/*enum EMatchStartErrorType
{
	EMatchStartErr_None                                = 0,
	EMatchStartErr_LoadedPlayerNotEnough               = 1,
	EMatchStartErr_ClanMatchPlayerNotEnough            = 2,
	EMatchStartErr_MatchCancled                        = 3,
	EMatchStartErr_MAX                                 = 4
};*/

// Enum CombatGame.CombatTypes.EFlagPointType
/*enum EFlagPointType
{
	EFlagPointType_TakePoint                           = 0,
	EFlagPointType_SpawnPoint                          = 1,
	EFlagPointType_MAX                                 = 2
};*/

// Enum CombatGame.CombatTypes.EChannelEnterErrorType
/*enum EChannelEnterErrorType
{
	EChannelEnterErr_Full                              = 0,
	EChannelEnterErr_Not_Enough_Level                  = 1,
	EChannelEnterErr_Not_Service                       = 2,
	EChannelEnterErr_Clan_Only                         = 3,
	EChannelEnterErr_Unselected_Channel                = 4,
	EChannelEnterErr_NormalRequestedChampionship       = 5,
	EChannelEnterErr_ChampionshipRequestedNormal       = 6,
	EChannelEnterErr_KAD_Ratio_Failure                 = 7,
	EChannelEnterErr_MAX                               = 8
};*/

// Enum CombatGame.CombatTypes.EStatRecordType
/*enum EStatRecordType
{
	EStatRecordType_Sum                                = 0,
	EStatRecordType_Max                                = 1
};*/

// Enum CombatGame.CombatTypes.GrenadeUIType
/*enum GrenadeUIType
{
	EGUIT_None                                         = 0,
	EGUIT_HandGrenade                                  = 1,
	EGUIT_Smoke                                        = 2,
	EGUIT_MAX                                          = 3
};*/

// Enum CombatGame.CombatTypes.WeaponUIType
/*enum WeaponUIType
{
	EWUIT_Empty                                        = 0,
	EWUIT_NumberOfUse                                  = 1,
	EWUIT_AmmoWithChamber                              = 2,
	EWUIT_AmmoWithoutChamber                           = 3,
	EWUIT_Grenade                                      = 4,
	EWUIT_MAX                                          = 5
};*/

// Enum CombatGame.CombatTypes.ELevelIconType
/*enum ELevelIconType
{
	ELEVEL_ICON_SMALL                                  = 0,
	ELEVEL_ICON_BIG                                    = 1,
	ELEVEL_ICON_MAX                                    = 2
};*/

// Enum CombatGame.CombatTypes.EMouseSensMode
/*enum EMouseSensMode
{
	MOUSESENSMODE_Master                               = 0,
	MOUSESENSMODE_WeaponPreset                         = 1,
	MOUSESENSMODE_MAX                                  = 2
};*/

// Enum CombatGame.CombatTypes.ETableServiceType
/*enum ETableServiceType
{
	EService_InActive                                  = 0,
	EService_Active                                    = 1,
	EService_Prototype                                 = 2,
	EService_MAX                                       = 3
};*/

// Enum CombatGame.CombatTypes.ERoundConditionSoundType
/*enum ERoundConditionSoundType
{
	ERoundST_None                                      = 0,
	ERoundST_Score30Percent                            = 1,
	ERoundST_Score60Percent                            = 2,
	ERoundST_Score90Percent                            = 3,
	ERoundST_RemainTime1Min                            = 4,
	ERoundST_RemainTime10Sec                           = 5,
	ERoundST_RemainTime30Sec                           = 6,
	ERoundST_MAX                                       = 7
};*/

// Enum CombatGame.CombatTypes.EScoreType
/*enum EScoreType
{
	EScoreType_None                                    = 0,
	EScoreType_GameScore                               = 1,
	EScoreType_MissionScore                            = 2,
	EScoreType_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.ERandomBoxShopCoinType
/*enum ERandomBoxShopCoinType
{
	E_RNDSHOP_COIN_ALL                                 = 0,
	E_RNDSHOP_COIN_CASH                                = 1,
	E_RNDSHOP_COIN_BS                                  = 2,
	E_RNDSHOP_COIN_M                                   = 3,
	E_RNDSHOP_COIN_G                                   = 4,
	E_RNDSHOP_MEDAL                                    = 5,
	E_RNDSHOP_GOLD                                     = 6,
	E_RNDSHOP_MAX                                      = 7
};*/

// Enum CombatGame.CombatTypes.EItemDetailViewType
/*enum EItemDetailViewType
{
	E_VIEWTYPE_TEXT                                    = 0,
	E_VIEWTYPE_SINGLE                                  = 1,
	E_VIEWTYPE_COMPARE                                 = 2,
	E_VIEWTYPE_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.EItemDetaiInfoTab
/*enum EItemDetaiInfoTab
{
	E_ITEMINFO_GUAGE                                   = 0,
	E_ITEMINFO_ADDON                                   = 1,
	E_ITEMINFO_DESC                                    = 2,
	E_ITEMINFO_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.EItemSubTabItem
/*enum EItemSubTabItem
{
	E_SUB_TAB_ITEM_ALL                                 = 0,
	E_SUB_TAB_ITEM_ITEM                                = 1,
	E_SUB_TAB_ITEM_LICENSE                             = 2,
	E_SUB_TAB_ITEM_PACKAGE                             = 3,
	E_SUB_TAB_ITEM_SPRAY                               = 4,
	E_SUB_TAB_ITEM_MAX                                 = 5
};*/

// Enum CombatGame.CombatTypes.EItemSubTabCharacter
/*enum EItemSubTabCharacter
{
	E_SUB_TAB_CHAR_ALL                                 = 0,
	E_SUB_TAB_CHAR_CHAR                                = 1,
	E_SUB_TAB_CHAR_MAX                                 = 2
};*/

// Enum CombatGame.CombatTypes.EItemSubTabAll
/*enum EItemSubTabAll
{
	E_SUB_TAB_ALL_ALL                                  = 0,
	E_SUB_TAB_ALL_MAX                                  = 1
};*/

// Enum CombatGame.CombatTypes.EItemSubTabWeapon
/*enum EItemSubTabWeapon
{
	E_SUB_TAB_WEAPON_ALL                               = 0,
	E_SUB_TAB_WEAPON_PRIMARY_WEAPON                    = 1,
	E_SUB_TAB_WEAPON_SUB_WEAPON                        = 2,
	E_SUB_TAB_WEAPON_MELEE_WEAPON                      = 3,
	E_SUB_TAB_WEAPON_THROW_WEAPON                      = 4,
	E_SUB_TAB_WEAPON_TR_WEAPON                         = 5,
	E_SUB_TAB_WEAPON_MAX                               = 6
};*/

// Enum CombatGame.CombatTypes.EItemMainTab
/*enum EItemMainTab
{
	E_MAIN_TAB_ALL                                     = 0,
	E_MAIN_TAB_WEAPON                                  = 1,
	E_MAIN_TAB_CHARACTER                               = 2,
	E_MAIN_TAB_ITEM                                    = 3,
	E_MAIN_TAB_MAX                                     = 4
};*/

// Enum CombatGame.CombatTypes.EIvenPresetTabIndex
/*enum EIvenPresetTabIndex
{
	E_PRESET_FIRST                                     = 0,
	E_PRESET_SECOND                                    = 1,
	E_PRESET_THIRD                                     = 2,
	E_PRESET_MAX                                       = 3
};*/

// Enum CombatGame.CombatTypes.EUIRoundPoint
/*enum EUIRoundPoint
{
	EUIRoundPoint_Score                                = 0,
	EUIRoundPoint_Kills                                = 1,
	EUIRoundPoint_AliveMemberCount                     = 2,
	EUIRoundPoint_WinRoundCount                        = 3,
	EUIRoundPoint_SpecialPoint                         = 4,
	EUIRoundPoint_MAX                                  = 5
};*/

// Enum CombatGame.CombatTypes.EStatConstValueType
/*enum EStatConstValueType
{
	EStatConstValueType_None                           = 0,
	EStatConstValueType_Gun                            = 1,
	EStatConstValueType_Melee                          = 2,
	EStatConstValueType_Flag                           = 3,
	EStatConstValueType_MAX                            = 4
};*/

// Enum CombatGame.CombatTypes.EStatDataSetType
/*enum EStatDataSetType
{
	EStatDataSetType_None                              = 0,
	EStatDataSetType_ConstValue                        = 1,
	EStatDataSetType_StatGroup                         = 2,
	EStatDataSetType_Item                              = 3,
	EStatDataSetType_Rank                              = 4,
	EStatDataSetType_Scoring                           = 5,
	EStatDataSetType_MAX                               = 6
};*/

// Enum CombatGame.CombatTypes.EStatGameSetType
/*enum EStatGameSetType
{
	EStatGameSetType_None                              = 0,
	EStatGameSetType_Map                               = 1,
	EStatGameSetType_Mode                              = 2,
	EStatGameSetType_MAX                               = 3
};*/

// Enum CombatGame.CombatTypes.EWorldObstacle
/*enum EWorldObstacle
{
	EWObstacle_None                                    = 0,
	EWObstacle_Cliff                                   = 1,
	EWObstacle_MAX                                     = 2
};*/

// Enum CombatGame.CombatTypes.EKillDeathOption
/*enum EKillDeathOption
{
	EKDOption_None                                     = 0,
	EKDOption_Penetrate                                = 1,
	EKDOption_BuzzKill                                 = 2,
	EKDOption_HeadShot                                 = 3,
	EKDOption_ForeheadShot                             = 4,
	EKDOption_Skill                                    = 5,
	EKDOption_AttachGrenadeLauncher                    = 6,
	EKDOption_MAX                                      = 7
};*/

// Enum CombatGame.CombatTypes.ESessionState
/*enum ESessionState
{
	StateNone                                          = 0,
	StateOffLine                                       = 1,
	StateChannel                                       = 2,
	StateLobby                                         = 3,
	StateMatchRoom                                     = 4,
	StatePlayGame                                      = 5,
	ESessionState_MAX                                  = 6
};*/

// Enum CombatGame.CombatTypes.ECombatDamageType
/*enum ECombatDamageType
{
	EDAMAGETYPE_NONE                                   = 0,
	EDAMAGETYPE_MELEE                                  = 1,
	EDAMAGETYPE_BULLET                                 = 2,
	EDAMAGETYPE_EXPLOSION                              = 3,
	EDAMAGETYPE_FELL                                   = 4,
	EDAMAGETYPE_MAX                                    = 5
};*/

// Enum CombatGame.CombatTypes.ERepairType
/*enum ERepairType
{
	CHANGE_INPUT                                       = 0,
	PLAYER_DEAD                                        = 1,
	GAME_OVER                                          = 2,
	PLAYER_OVERRANGE                                   = 3,
	ERepairType_MAX                                    = 4
};*/

// Enum CombatGame.CombatTypes.EHitBodyType
/*enum EHitBodyType
{
	E_Head                                             = 0,
	E_Chest                                            = 1,
	E_Arm                                              = 2,
	E_Leg                                              = 3,
	E_MetalPart                                        = 4,
	E_PS_Normal                                        = 5,
	E_HeadCenter                                       = 6,
	E_Chestupper                                       = 7,
	E_PS_Weak                                          = 8,
	EHitBodyType_None                                  = 9,
	EHitBodyType_MAX                                   = 10
};*/

// Enum CombatGame.CombatTypes.RescueMode_AnnounceSoundType
/*enum RescueMode_AnnounceSoundType
{
	ERAS_StartMove                                     = 0,
	ERAS_Groggy                                        = 1,
	ERAS_WaitingEscape                                 = 2,
	ERAS_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.EDialogType
/*enum EDialogType
{
	EDialog_OK                                         = 0,
	EDialog_Alert                                      = 1,
	EDialog_InputOnlyNumber                            = 2,
	EDialog_CompAlert                                  = 3,
	EDialog_CompOK                                     = 4,
	EDialog_MAX                                        = 5
};*/

// Enum CombatGame.CombatTypes.EDirectionalSeqMode
/*enum EDirectionalSeqMode
{
	EDSM_2Way                                          = 0,
	EDSM_4Way                                          = 1,
	EDSM_8Way                                          = 2,
	EDSM_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.EObjectGradeType
/*enum EObjectGradeType
{
	EOGT_Zero                                          = 0,
	EOGT_First                                         = 1,
	EOGT_Second                                        = 2,
	EOGT_Best                                          = 3,
	EOGT_MAX                                           = 4
};*/

// Enum CombatGame.CombatTypes.EChattingColorType
/*enum EChattingColorType
{
	ECHAT_COLOR_DEFAULT                                = 0,
	ECHAT_COLOR_SELF                                   = 1,
	ECHAT_COLOR_MAX                                    = 2
};*/

// Enum CombatGame.CombatTypes.EChattingType
/*enum EChattingType
{
	ECHAT_TALK                                         = 0,
	ECHAT_WHISPER_TO                                   = 1,
	ECHAT_WHISPER_FROM                                 = 2,
	ECHAT_CLAN                                         = 3,
	ECHAT_SYSTEM                                       = 4,
	ECHAT_SYSTEM_ACCESS_FRIEND                         = 5,
	ECHAT_SYSTEM_ACCESS_CLAN                           = 6,
	ECHAT_SYSTEM_NORMAL                                = 7,
	ECHAT_SYSTEM_MODE                                  = 8,
	ECHAT_SYSTEM_GM                                    = 9,
	ECHAT_SYSTEM_CLAN_NOTICE                           = 10,
	ECHAT_SYSTEM_ENTRANCE                              = 11,
	ECHAT_SYSTEM_MTS                                   = 12,
	ECHAT_SYSTEM_KICK                                  = 13,
	ECHAT_TEAM_CHAT                                    = 14,
	ECHAT_TEAM_DEAD                                    = 15,
	ECHAT_ALL_CHAT                                     = 16,
	ECHAT_ALL_DEAD                                     = 17,
	ECHAT_RADIO_MESSAGE                                = 18,
	ECHAT_NOTICE                                       = 19,
	ECHAT_EVENT                                        = 20,
	ECHAT_TIP                                          = 21,
	ECHAT_DEV                                          = 22,
	ECHAT_CHAMPIONSHIP_OBSERVER                        = 23,
	ECHAT_MAX                                          = 24
};*/

// Enum CombatGame.CombatTypes.EChattingOpenType
/*enum EChattingOpenType
{
	ECHAT_OPEN_DEFAULT                                 = 0,
	ECHAT_OPEN_PAGEUP                                  = 1,
	ECHAT_OPEN_PAGEDOWN                                = 2,
	ECHAT_OPEN_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.EAnnounceableSkillType
/*enum EAnnounceableSkillType
{
	EAST_UAVPatrol                                     = 0,
	EAST_AttackHelicopter                              = 1,
	EAST_AirStrike                                     = 2,
	EAST_Howitzer                                      = 3,
	EAST_Predator                                      = 4,
	EAST_MAX                                           = 5
};*/

// Enum CombatGame.CombatTypes.ESkillMessageType
/*enum ESkillMessageType
{
	ESMT_UnLock                                        = 0,
	ESMT_Buy                                           = 1,
	ESMT_FailedBuy                                     = 2,
	ESMT_ActivatedAlert                                = 3,
	ESMT_MAX                                           = 4
};*/

// Enum CombatGame.CombatTypes.EDashboard
/*enum EDashboard
{
	EDB_Notice                                         = 0,
	EDB_Inven                                          = 1,
	EDB_Record                                         = 2,
	EDB_ClanList                                       = 3,
	EDB_ClanHome                                       = 4,
	EDB_Shop                                           = 5,
	EDB_MedalShop                                      = 6,
	EDB_RandomBoxShop                                  = 7,
	EDB_Option                                         = 8,
	EDB_Exit                                           = 9,
	EDB_Back                                           = 10,
	EDB_Mail                                           = 11,
	EDB_Messenger                                      = 12,
	EDB_Help                                           = 13,
	EDB_Event                                          = 14,
	EDB_MAX                                            = 15
};*/

// Enum CombatGame.CombatTypes.EHUDPlayerState
/*enum EHUDPlayerState
{
	ERPS_Default                                       = 0,
	ERPS_Dead                                          = 1,
	ERPS_Radio                                         = 2,
	ERPS_Fire                                          = 3,
	ERPS_Damaged                                       = 4,
	ERPS_MAX                                           = 5
};*/

// Enum CombatGame.CombatTypes.EPawnBuffState
/*enum EPawnBuffState
{
	EPBS_NONEBUFF                                      = 0,
	EPBS_APPLY_CHARBUFF                                = 1,
	EPBS_APPLY_CHARBUFF_AND_SKILLBUFF                  = 2,
	EPBS_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.EDroppedSuppliesType
/*enum EDroppedSuppliesType
{
	EDST_AmmoKit                                       = 0,
	EDST_MediKit                                       = 1,
	EDST_MAX                                           = 2
};*/

// Enum CombatGame.CombatTypes.EScoringGradeType
/*enum EScoringGradeType
{
	E_SCORING_GRADE0                                   = 0,
	E_SCORING_GRADE1                                   = 1,
	E_SCORING_GRADE2                                   = 2,
	E_SCORING_MAX                                      = 3
};*/

// Enum CombatGame.CombatTypes.EScoringDisplayType
/*enum EScoringDisplayType
{
	ESDT_None                                          = 0,
	ESDT_KillMark                                      = 1,
	ESDT_Stat                                          = 2,
	ESDT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.HostageVoiceType
/*enum HostageVoiceType
{
	EHVT_None                                          = 0,
	EHVT_Captivity                                     = 1,
	EHVT_StartMove                                     = 2,
	EHVT_Hit                                           = 3,
	EHVT_Groggy                                        = 4,
	EHVT_ArriveEscapePoint                             = 5,
	EHVT_MAX                                           = 6
};*/

// Enum CombatGame.CombatTypes.SkillOptionType
/*enum SkillOptionType
{
	ESOP_lock                                          = 0,
	ESOP_Unlock                                        = 1,
	ESOP_Buy                                           = 2,
	ESOP_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.FailedBuyReasonType
/*enum FailedBuyReasonType
{
	EFBRT_OverRange                                    = 0,
	EFBRT_Locking                                      = 1,
	EFBRT_NoMoney                                      = 2,
	EFBRT_AlreadyHave                                  = 3,
	EFBRT_NoData                                       = 4,
	EFBRT_CoolTime                                     = 5,
	EFBRT_GlobalCoolTime                               = 6,
	EFBRT_AlreadyUse                                   = 7,
	EFBRT_NoLicense                                    = 8,
	EFBRT_MAX                                          = 9
};*/

// Enum CombatGame.CombatTypes.CombatSkillCoolType
/*enum CombatSkillCoolType
{
	CSCT_NORMAL                                        = 0,
	CSCT_GLOBAL                                        = 1,
	CSCT_MAX                                           = 2
};*/

// Enum CombatGame.CombatTypes.CombatSkillType
/*enum CombatSkillType
{
	CST_NONE                                           = 0,
	CST_Active                                         = 1,
	CST_Passive                                        = 2,
	CST_MAX                                            = 3
};*/

// Enum CombatGame.CombatTypes.MilitaryClassType
/*enum MilitaryClassType
{
	EMCT_ASSAULT                                       = 0,
	EMCT_SUPPORT                                       = 1,
	EMCT_COMMAND                                       = 2,
	EMCT_RECON                                         = 3,
	EMCT_MAX                                           = 4
};*/

// Enum CombatGame.CombatTypes.MagazineState
/*enum MagazineState
{
	EMS_Normal                                         = 0,
	EMS_Reload                                         = 1,
	EMS_LackOfAmmo                                     = 2,
	EMS_NoAmmo                                         = 3,
	EMS_MAX                                            = 4
};*/

// Enum CombatGame.CombatTypes.WeaponCategoryType
/*enum WeaponCategoryType
{
	EWCT_Gun                                           = 0,
	EWCT_Grenade                                       = 1,
	EWCT_Melee                                         = 2,
	EWCT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.TotalDataInfo_GameStat
/*enum TotalDataInfo_GameStat
{
	ETDI_GS_FireCount                                  = 0,
	ETDI_GS_HitCount                                   = 1,
	ETDI_GS_Damage                                     = 2,
	ETDI_GS_KillCount                                  = 3,
	ETDI_GS_DeathCount                                 = 4,
	ETDI_GS_SuicideCount                               = 5,
	ETDI_GS_Respawncount                               = 6,
	ETDI_GS_PlayTime                                   = 7,
	ETDI_GS_GameScore                                  = 8,
	ETDI_GS_MAX                                        = 9
};*/

// Enum CombatGame.CombatTypes.TotalDataInfo_WeaponStat
/*enum TotalDataInfo_WeaponStat
{
	ETDI_WS_FireCount                                  = 0,
	ETDI_WS_HitCount                                   = 1,
	ETDI_WS_Damage                                     = 2,
	ETDI_WS_KillCount                                  = 3,
	ETDI_WS_HeadShotCount                              = 4,
	ETDI_WS_HeadShotKillCount                          = 5,
	ETDI_WS_DeathCount                                 = 6,
	ETDI_WS_HeadShotDeathCount                         = 7,
	ETDI_WS_MAX                                        = 8
};*/

// Enum CombatGame.CombatTypes.ETeamWinnerCondition
/*enum ETeamWinnerCondition
{
	ETWC_None                                          = 0,
	ETWC_MemberScore                                   = 1,
	ETWC_MissionScore                                  = 2,
	ETWC_Kill                                          = 3,
	ETWC_ASSIST                                        = 4,
	ETWC_DEATH                                         = 5,
	ETWC_AliveMember                                   = 6,
	ETWC_FirstOccupation                               = 7,
	ETWC_MissionCount                                  = 8,
	ETWC_OccupationScoreInNotOccupationZone            = 9,
	ETWC_MAX                                           = 10
};*/

// Enum CombatGame.CombatTypes.EScoreboardType
/*enum EScoreboardType
{
	ESBT_Scoreboard                                    = 0,
	ESBT_ScoreboardAndMap                              = 1,
	ESBT_MAX                                           = 2
};*/

// Enum CombatGame.CombatTypes.EMapScoreMode
/*enum EMapScoreMode
{
	ETMM_None                                          = 0,
	ETMM_MiniMap                                       = 1,
	ETMM_MiniMapMixed                                  = 2,
	ETMM_WholeMap                                      = 3,
	ETMM_WholeMapMixed                                 = 4,
	ETMM_ScoreboardOnly                                = 5,
	ETMM_BroadCasting                                  = 6,
	ETMM_MAX                                           = 7
};*/

// Enum CombatGame.CombatTypes.EUIPlayerState
/*enum EUIPlayerState
{
	EUIPS_None                                         = 0,
	EUIPS_Death                                        = 1,
	EUIPS_Spectator                                    = 2,
	EUIPS_Operating                                    = 3,
	EUIPS_LockedPresetScene                            = 4,
	EUIPS_Num                                          = 5,
	EUIPS_MAX                                          = 6
};*/

// Enum CombatGame.CombatTypes.EUIUpdateSkillListType
/*enum EUIUpdateSkillListType
{
	EUIST_GENERAL                                      = 0,
	EUIST_CHANGECR                                     = 1,
	EUIST_MAX                                          = 2
};*/

// Enum CombatGame.CombatTypes.EUIGameStatus
/*enum EUIGameStatus
{
	EUIGS_None                                         = 0,
	EUIGS_WarmUp                                       = 1,
	EUIGS_CountDown                                    = 2,
	EUIGS_MatchInProgress                              = 3,
	EUIGS_RoundOver                                    = 4,
	EUIGS_SuddenDeath                                  = 5,
	EUIGS_FinalRoundOver                               = 6,
	EUIGS_MatchOver                                    = 7,
	EUIGS_TeamChange                                   = 8,
	EUIGS_TutorialCutScene                             = 9,
	EUIGS_MAX                                          = 10
};*/

// Enum CombatGame.CombatTypes.EUIDirection
/*enum EUIDirection
{
	EUID_TOP                                           = 0,
	EUID_RIGHT                                         = 1,
	EUID_BOTTOM                                        = 2,
	EUID_LEFT                                          = 3,
	EUID_Center                                        = 4,
	EUID_Point                                         = 5,
	EUID_INIT                                          = 6,
	EUID_MAX                                           = 7
};*/

// Enum CombatGame.CombatTypes.ECrosshairTarget
/*enum ECrosshairTarget
{
	ECT_None                                           = 0,
	ECT_Friendly                                       = 1,
	ECT_Enemy                                          = 2,
	ECT_MAX                                            = 3
};*/

// Enum CombatGame.CombatTypes.ECrosshairType
/*enum ECrosshairType
{
	Crosshair_Empty                                    = 0,
	Crosshair_Basic                                    = 1,
	Crosshair_GL                                       = 2,
	Crosshair_RL                                       = 3,
	Crosshair_LaserSight                               = 4,
	Crosshair_MAX                                      = 5
};*/

// Enum CombatGame.CombatTypes.EWinType
/*enum EWinType
{
	EWT_None                                           = 0,
	EWT_Winner                                         = 1,
	EWT_Loser                                          = 2,
	EWT_MAX                                            = 3
};*/

// Enum CombatGame.CombatTypes.ERoundResultReason
/*enum ERoundResultReason
{
	ERRR_None                                          = 0,
	ERRR_TimeLimit                                     = 1,
	ERRR_GameScoreLimit                                = 2,
	ERRR_SuddenDeathKill                               = 3,
	ERRR_NoRespawnGameAllDeath                         = 4,
	ERRR_MissionEnd                                    = 5,
	ERRR_WinByDecision                                 = 6,
	ERRR_MAX                                           = 7
};*/

// Enum CombatGame.CombatTypes.EBLOCK_PLAY_GAME_TYPE
/*enum EBLOCK_PLAY_GAME_TYPE
{
	BPGT_UNBLOCK                                       = 0,
	BPGT_BLOCK                                         = 1,
	BPGT_MAX                                           = 2
};*/

// Enum CombatGame.CombatTypes.EIFFDisplayType
/*enum EIFFDisplayType
{
	E_IFFDisplay_Off                                   = 0,
	E_IFFDisplay_FriendlyHidable                       = 1,
	E_IFFDisplay_Show                                  = 2,
	E_IFFDisplay_MAX                                   = 3
};*/

// Enum CombatGame.CombatTypes.EIFFType
/*enum EIFFType
{
	EIT_NONE                                           = 0,
	EIT_Friendly_Normal                                = 1,
	EIT_Friendly_Targeted                              = 2,
	EIT_Friendly_Hide                                  = 3,
	EIT_Friendly_Flash                                 = 4,
	EIT_Friendly_ChampionShip_Obsever                  = 5,
	EIT_Enemy_Targeted                                 = 6,
	EIT_Enemy_Flash                                    = 7,
	EIT_Enemy_ChampionShip_Obsever                     = 8,
	EIT_AI_Enemy_Targeted                              = 9,
	EIT_MAX                                            = 10
};*/

// Enum CombatGame.CombatTypes.ETacticalMapSymbolMovieClipType
/*enum ETacticalMapSymbolMovieClipType
{
	E_SYMBOL_MC_FRIEND                                 = 0,
	E_SYMBOL_MC_ENEMY                                  = 1,
	E_SYMBOL_MC_FOR_MODE                               = 2,
	E_SYMBOL_MC_AREA                                   = 3,
	E_SYMBOL_MC_SKILL                                  = 4,
	E_SYMBOL_MC_TOP_DEPTH_OBJECT                       = 5,
	E_SYMBOL_MC_MAX                                    = 6
};*/

// Enum CombatGame.CombatTypes.EObjectIconType
/*enum EObjectIconType
{
	O_ICONTYPE_Empty                                   = 0,
	O_ICONTYPE_Self                                    = 1,
	O_ICONTYPE_Friendly                                = 2,
	O_ICONTYPE_Dead_Friendly                           = 3,
	O_ICONTYPE_Damaged_Friendly                        = 4,
	O_ICONTYPE_Fire_Friendly                           = 5,
	O_ICONTYPE_Radio_Friendly                          = 6,
	O_ICONTYPE_Enemy                                   = 7,
	O_ICONTYPE_Dead_Enemy                              = 8,
	O_ICONTYPE_Damaged_Enemy                           = 9,
	O_ICONTYPE_Fire_Enemy                              = 10,
	O_ICONTYPE_Respawn_Area                            = 11,
	O_ICONTYPE_Area                                    = 12,
	O_ICONTYPE_C4_Friendly                             = 13,
	O_ICONTYPE_Damaged_C4_Friendly                     = 14,
	O_ICONTYPE_Fire_C4_Friendly                        = 15,
	O_ICONTYPE_Radio_C4_Friendly                       = 16,
	O_ICONTYPE_Explosion_A                             = 17,
	O_ICONTYPE_Explosion_Planted_A                     = 18,
	O_ICONTYPE_Explosion_B                             = 19,
	O_ICONTYPE_Explosion_Planted_B                     = 20,
	O_ICONTYPE_C4                                      = 21,
	O_ICONTYPE_Bunker_Ally_A                           = 22,
	O_ICONTYPE_Bunker_Ally_B                           = 23,
	O_ICONTYPE_Bunker_Ally_C                           = 24,
	O_ICONTYPE_Bunker_Ally_D                           = 25,
	O_ICONTYPE_Bunker_Ally_E                           = 26,
	O_ICONTYPE_Bunker_Attack_Ally_A                    = 27,
	O_ICONTYPE_Bunker_Attack_Ally_B                    = 28,
	O_ICONTYPE_Bunker_Attack_Ally_C                    = 29,
	O_ICONTYPE_Bunker_Attack_Ally_D                    = 30,
	O_ICONTYPE_Bunker_Attack_Ally_E                    = 31,
	O_ICONTYPE_Bunker_Enemy_A                          = 32,
	O_ICONTYPE_Bunker_Enemy_B                          = 33,
	O_ICONTYPE_Bunker_Enemy_C                          = 34,
	O_ICONTYPE_Bunker_Enemy_D                          = 35,
	O_ICONTYPE_Bunker_Enemy_E                          = 36,
	O_ICONTYPE_Bunker_Attack_Enemy_A                   = 37,
	O_ICONTYPE_Bunker_Attack_Enemy_B                   = 38,
	O_ICONTYPE_Bunker_Attack_Enemy_C                   = 39,
	O_ICONTYPE_Bunker_Attack_Enemy_D                   = 40,
	O_ICONTYPE_Bunker_Attack_Enemy_E                   = 41,
	O_ICONTYPE_RedAlert                                = 42,
	O_ICONTYPE_Siren                                   = 43,
	O_ICONTYPE_Exit                                    = 44,
	O_ICONTYPE_VIP                                     = 45,
	O_ICONTYPE_Damaged_VIP                             = 46,
	O_ICONTYPE_Fire_VIP                                = 47,
	O_ICONTYPE_Occupied_Area                           = 48,
	O_ICONTYPE_Chopper_Friendly                        = 49,
	O_ICONTYPE_Chopper_Enemy                           = 50,
	O_ICONTYPE_Claymore_Friendly                       = 51,
	O_ICONTYPE_Claymore_Enemy                          = 52,
	O_ICONTYPE_UAV_Friendly                            = 53,
	O_ICONTYPE_UAV_Enemy                               = 54,
	O_ICONTYPE_SentryGun_Friendly                      = 55,
	O_ICONTYPE_SentryGun_Enemy                         = 56,
	O_ICONTYPE_TrophyTurret_Friendly                   = 57,
	O_ICONTYPE_TrophyTurret_Enemy                      = 58,
	O_ICONTYPE_Pickup_SpearTac                         = 59,
	O_ICONTYPE_Pickup_Grenade                          = 60,
	O_ICONTYPE_AIwave_DefendedObject                   = 61,
	O_ICONTYPE_MAX                                     = 62
};*/

// Enum CombatGame.CombatTypes.MissionActorUIState
/*enum MissionActorUIState
{
	MissionActorUIState_Default                        = 0,
	MissionActorUIState_Damaged                        = 1,
	MissionActorUIState_Exploded                       = 2,
	MissionActorUIState_MAX                            = 3
};*/

// Enum CombatGame.CombatTypes.ETacticalMapNameplateIconType
/*enum ETacticalMapNameplateIconType
{
	E_NAMEPLATE_VIEWTARGET                             = 0,
	E_NAMEPLATE_VC                                     = 1,
	E_NAMEPLATE_PM                                     = 2,
	E_NAMEPLATE_MAX                                    = 3
};*/

// Enum CombatGame.CombatTypes.EDecalTraceDir
/*enum EDecalTraceDir
{
	DECALTRACE_PosX                                    = 0,
	DECALTRACE_NegX                                    = 1,
	DECALTRACE_PosY                                    = 2,
	DECALTRACE_NegY                                    = 3,
	DECALTRACE_PosZ                                    = 4,
	DECALTRACE_NegZ                                    = 5,
	DECALTRACE_MAX                                     = 6
};*/

// Enum CombatGame.CombatTypes.ESceneType
/*enum ESceneType
{
	SCENE_None                                         = 0,
	SCENE_Main                                         = 1,
	SCENE_Sub                                          = 2,
	SCENE_MAX                                          = 3
};*/

// Enum CombatGame.CombatTypes.EZoomState
/*enum EZoomState
{
	ZST_NotZoomed                                      = 0,
	ZST_Zoomed                                         = 1,
	ZST_Zoomed_Sec                                     = 2,
	ZST_Zoomed_Lnchr                                   = 3,
	ZST_ZoomingOut                                     = 4,
	ZST_ZoomingIn                                      = 5,
	ZST_ZoomingOut_Sec                                 = 6,
	ZST_ZoomingIn_Sec                                  = 7,
	ZST_ZoomingOut_Lnchr                               = 8,
	ZST_ZoomingIn_Lnchr                                = 9,
	ZST_MAX                                            = 10
};*/

// Enum CombatGame.CombatTypes.EWeaponGroup
/*enum EWeaponGroup
{
	EWeaponGroup_None                                  = 0,
	EWeaponGroup_Pri                                   = 1,
	EWeaponGroup_Sub                                   = 2,
	EWeaponGroup_Melee                                 = 3,
	EWeaponGroup_Grenade                               = 4,
	EWeaponGroup_Fifth                                 = 5,
	EWeaponGroup_Sixth                                 = 6,
	EWeaponGroup_Seventh                               = 7,
	EWeaponGroup_Eighth                                = 8,
	EWeaponGroup_Ninth                                 = 9,
	EWeaponGroup_Mission                               = 10,
	EWeaponGroup_Skill                                 = 11,
	EWeaponGroup_MAX                                   = 12
};*/

// Enum CombatGame.CombatTypes.EWeaponState
/*enum EWeaponState
{
	WeaponState_InActive                               = 0,
	WeaponState_PendingDestroy                         = 1,
	WeaponState_Dropped                                = 2,
	WeaponState_Passive                                = 3,
	WeaponState_PendingClientWeaponSet                 = 4,
	WeaponState_Active                                 = 5,
	WeaponState_EquipUp                                = 6,
	WeaponState_PutDown                                = 7,
	WeaponState_PreReload                              = 8,
	WeaponState_FullPreReload                          = 9,
	WeaponState_Reload                                 = 10,
	WeaponState_FullReload                             = 11,
	WeaponState_PostReload                             = 12,
	WeaponState_PreFire1                               = 13,
	WeaponState_PreFire2                               = 14,
	WeaponState_Holding1                               = 15,
	WeaponState_Holding2                               = 16,
	WeaponState_Fire                                   = 17,
	WeaponState_ZoomFire                               = 18,
	WeaponState_ZoomFire_Sec                           = 19,
	WeaponState_AltFire                                = 20,
	WeaponState_RespawnAction                          = 21,
	WeaponState_SpinUp                                 = 22,
	WeaponState_SpinDown                               = 23,
	WeaponState_Stare                                  = 24,
	WeaponState_SilencerEquiping                       = 25,
	WeaponState_SilencerDetaching                      = 26,
	WeaponState_ETC                                    = 27,
	WeaponState_ActivePart                             = 28,
	WeaponState_DeactivePart                           = 29,
	WeaponState_MAX                                    = 30
};*/

// Enum CombatGame.CombatTypes.EStanceState
/*enum EStanceState
{
	E_SS_Stand_Idle                                    = 0,
	E_SS_Stand_Walk                                    = 1,
	E_SS_Stand_Run                                     = 2,
	E_SS_Crouch_Idle                                   = 3,
	E_SS_Crouch_Walk                                   = 4,
	E_SS_Unstable                                      = 5,
	E_SS_MAX                                           = 6
};*/

// Enum CombatGame.CombatTypes.VoteState
/*enum VoteState
{
	VT_NONE                                            = 0,
	VT_READY                                           = 1,
	VT_YES                                             = 2,
	VT_NO                                              = 3,
	VT_CANT                                            = 4,
	VT_MAX                                             = 5
};*/

// Enum CombatGame.CombatTypes.EPartType
/*enum EPartType
{
	PARTTYPE_CHAR_BODY                                 = 0,
	PARTTYPE_1ST_ARM                                   = 1,
	PARTTYPE_1ST_HAND                                  = 2,
	PARTTYPE_1ST_WRIST                                 = 3,
	PARTTYPE_WEAPON_1ST_BODY                           = 4,
	PARTTYPE_WEAPON_1ST_MAGAZINE                       = 5,
	PARTTYPE_WEAPON_1ST_LASER                          = 6,
	PARTTYPE_WEAPON_1ST_SILENCER                       = 7,
	PARTTYPE_WEAPON_1ST_SCOPE                          = 8,
	PARTTYPE_WEAPON_1ST_GLAUNCHER                      = 9,
	PARTTYPE_WEAPON_1ST_GRIP                           = 10,
	PARTTYPE_WEAPON_3RD_BODY                           = 11,
	PARTTYPE_WEAPON_3RD_MAGAZINE                       = 12,
	PARTTYPE_WEAPON_3RD_LASER                          = 13,
	PARTTYPE_WEAPON_3RD_SILENCER                       = 14,
	PARTTYPE_WEAPON_3RD_SCOPE                          = 15,
	PARTTYPE_WEAPON_3RD_GLAUNCHER                      = 16,
	PARTTYPE_WEAPON_3RD_GRIP                           = 17,
	PARTTYPE_MAX                                       = 18
};*/

// Enum CombatGame.CombatTypes.EVelocityState
/*enum EVelocityState
{
	VelocityState_None                                 = 0,
	VelocityState_Accel                                = 1,
	VelocityState_Deceleration                         = 2,
	VelocityState_MAX                                  = 3
};*/

// Enum CombatGame.CombatTypes.EMatchEndReason
/*enum EMatchEndReason
{
	EMatchEndReason_NONE                               = 0,
	EMatchEndReason_FORFEITURE                         = 1,
	EMatchEndReason_SURRENDER                          = 2,
	EMatchEndReason_MAX                                = 3
};*/

// Enum CombatGame.CombatTypes.DXFuncType
/*enum DXFuncType
{
	DXFuncType_EndScene                                = 0,
	DXFuncType_DrawIndexedPrimitive                    = 1,
	DXFuncType_SetStreamSource                         = 2,
	DXFuncType_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.ELadderClimbType
/*enum ELadderClimbType
{
	ELadderClimbType_Default                           = 0,
	ELadderClimbType_IgnoreCameraPitch                 = 1,
	ELadderClimbType_MAX                               = 2
};*/

// Enum CombatGame.CombatTypes.ResourceType
/*enum ResourceType
{
	ResourceType_ImpactPointLight                      = 0,
	ResourceType_ImpactDecal                           = 1,
	ResourceType_ImpactEmitter                         = 2,
	ResourceType_RadialBlur                            = 3,
	ResourceType_WeaponTracer                          = 4,
	ResourceType_MAX                                   = 5
};*/

// Enum CombatGame.CombatTypes.ScoreType
/*enum ScoreType
{
	ScoreType_Team                                     = 0,
	ScoreType_Player                                   = 1,
	ScoreType_TeamAndPlayer                            = 2,
	ScoreType_MAX                                      = 3
};*/

// Enum CombatGame.CombatTypes.WeaponFireSoundType
/*enum WeaponFireSoundType
{
	WeaponFireSoundType_Fire                           = 0,
	WeaponFireSoundType_AltFire                        = 1,
	WeaponFireSoundType_Silencer                       = 2,
	WeaponFireSoundType_GrenadeLauncher                = 3,
	WeaponFireSoundType_MAX                            = 4
};*/

// Enum CombatGame.CombatTypes.WeapFireAnimType
/*enum WeapFireAnimType
{
	WeapFireAnimType_Anim                              = 0,
	WeapFireAnimType_IK                                = 1,
	WeapFireAnimType_Both                              = 2,
	WeapFireAnimType_MAX                               = 3
};*/

// Enum CombatGame.CombatTypes.EPawnAnimset
/*enum EPawnAnimset
{
	EPawnAnimset_Base                                  = 0,
	EPawnAnimset_WeaponMaster                          = 1,
	EPawnAnimset_WeaponSub                             = 2,
	EPawnAnimset_MAX                                   = 3
};*/

// Enum CombatGame.CombatTypes.EHand
/*enum EHand
{
	EHand_Left                                         = 0,
	EHand_Right                                        = 1,
	EHand_MAX                                          = 2
};*/

// Enum CombatGame.CombatTypes.EGender
/*enum EGender
{
	EGender_Male                                       = 0,
	EGender_FeMale                                     = 1,
	EGender_MAX                                        = 2
};*/

// Enum CombatGame.CombatTypes.RISSlot
/*enum RISSlot
{
	RISSlot_None                                       = 0,
	RISSlot_Sight                                      = 1,
	RISSlot_LaserSight                                 = 2,
	RISSlot_Silence                                    = 3,
	RISSlot_Launcher                                   = 4,
	RISSlot_MAX                                        = 5
};*/

// Enum CombatGame.CombatTypes.EFireMode
/*enum EFireMode
{
	FireMode                                           = 0,
	FireMode01                                         = 1,
	FireMode02                                         = 2,
	FireMode_MAX                                       = 3
};*/

// Enum CombatGame.CombatTypes.ERISState
/*enum ERISState
{
	RISState_Attached                                  = 0,
	RISState_Detached                                  = 1,
	RISState_ZoomStateChanged                          = 2,
	RISState_ChangeVisibility                          = 3,
	RISState_InitFirstPersonMesh                       = 4,
	RISState_InitThirdPersonMesh                       = 5,
	RISState_NotifyTeamChanged                         = 6,
	RISState_ModifyWeaponProperties                    = 7,
	RISState_PreActivePart                             = 8,
	RISState_PostDeactivePart                          = 9,
	RISState_MAX                                       = 10
};*/

// Enum CombatGame.CombatTypes.eFrontEndScene
/*enum eFrontEndScene
{
	FES_None                                           = 0,
	FES_Waiting                                        = 1,
	FES_GameTitle                                      = 2,
	FES_Login                                          = 3,
	FES_CreateCharacter                                = 4,
	FES_Channel                                        = 5,
	FES_MainLobby                                      = 6,
	FES_MatchRoom                                      = 7,
	FES_Achieve                                        = 8,
	FES_GameResult                                     = 9,
	FES_CharacterInfo                                  = 10,
	FES_Inventory                                      = 11,
	FES_Shop                                           = 12,
	FES_MakeRoom                                       = 13,
	FES_QuickStart                                     = 14,
	FES_ClanCreate                                     = 15,
	FES_ClanList                                       = 16,
	FES_ClanHome                                       = 17,
	FES_Storage                                        = 18,
	FES_MedalShop                                      = 19,
	FES_Event                                          = 20,
	FES_RandomBox                                      = 21,
	FES_RandomBoxShop                                  = 22,
	FES_END                                            = 23,
	FES_MAX                                            = 24
};*/

// Enum CombatGame.CombatTypes.EObjectCacheTypes
/*enum EObjectCacheTypes
{
	OCTYPE_None                                        = 0,
	OCTYPE_GameDependence                              = 1,
	OCTYPE_LevelDependence                             = 2,
	OCTYPE_MAX                                         = 3
};*/

// Enum CombatGame.CombatNonNativeTypes.ParachuteState
/*enum ParachuteState
{
	ParachuteState_FreeFall                            = 0,
	ParachuteState_Open                                = 1,
	ParachuteState_Landed                              = 2,
	ParachuteState_Max                                 = 3
};*/

// Enum CombatGame.CombatNonNativeTypes.eEffectType
/*enum eEffectType
{
	eEffectType_SmallGauge                             = 0,
	eEffectType_MiddleGauge                            = 1,
	eEffectType_LargeGauge                             = 2,
	eEffectType_AntiMGauge                             = 3,
	eEffectType_MeleeEffect                            = 4,
	eEffectType_LastEffect                             = 5,
	eEffectType_StrongMeleeEffect                      = 6,
	eEffectType_MeleeLastEffect                        = 7,
	eEffectType_MeleeSawEffect                         = 8,
	eEffectType_StrongMeleeSawEffect                   = 9,
	eEffectType_ExplosionEffect                        = 10,
	eEffectType_Max                                    = 11
};*/

// Enum CombatGame.CombatNonNativeTypes.ERotationStep
/*enum ERotationStep
{
	RotationStep                                       = 0,
	RotationStep01                                     = 1,
	RotationStep02                                     = 2,
	RotationStep03                                     = 3,
	RotationStep04                                     = 4,
	RotationStep05                                     = 5,
	RotationStep06                                     = 6,
	RotationStep07                                     = 7,
	RotationStep08                                     = 8,
	RotationStep09                                     = 9,
	RotationStep10                                     = 10,
	RotationStep11                                     = 11,
	RotationStep12                                     = 12,
	RotationStep13                                     = 13,
	RotationStep14                                     = 14,
	RotationStep15                                     = 15,
	RotationStep16                                     = 16,
	RotationStep17                                     = 17,
	RotationStep18                                     = 18,
	RotationStep19                                     = 19,
	RotationStep20                                     = 20,
	RotationStep21                                     = 21,
	RotationStep22                                     = 22,
	RotationStep23                                     = 23,
	RotationStep24                                     = 24,
	RotationStep25                                     = 25,
	RotationStep26                                     = 26,
	RotationStep27                                     = 27,
	RotationStep28                                     = 28,
	RotationStep29                                     = 29,
	RotationStep30                                     = 30,
	RotationStep31                                     = 31,
	RotationStep_MAX                                   = 32
};*/

// Enum CombatGame.CombatNonNativeTypes.EExplosionEffectType
/*enum EExplosionEffectType
{
	ExplosionEffectType_Default                        = 0,
	ExplosionEffectType_AirStrike                      = 1,
	ExplosionEffectType_Cherry                         = 2,
	ExplosionEffectType_Howitzer                       = 3,
	ExplosionEffectType_Predator                       = 4,
	ExplosionEffectType_JuggernautBomb                 = 5,
	ExplosionEffectType_Claymore                       = 6,
	ExplosionEffectType_Steyr                          = 7,
	ExplosionEffectType_TrophyTurret                   = 8,
	ExplosionEffectType_Ice                            = 9,
	ExplosionEffectType_Pumpkin                        = 10,
	ExplosionEffectType_PumpkinGhost                   = 11,
	ExplosionEffectType_Xmas                           = 12,
	ExplosionEffectType_Snow                           = 13,
	ExplosionEffectType_IceBlue                        = 14,
	ExplosionEffectType_FlashBang                      = 15,
	ExplosionEffectType_Party                          = 16,
	ExplosionEffectType_Max                            = 17
};*/

// Enum CombatGame.CBUIDataStore_ETC.EClanRankColor
/*enum EClanRankColor
{
	ERC_None                                           = 0,
	ERC_Advantageous                                   = 1,
	ERC_Equal                                          = 2,
	ERC_MAX                                            = 3
};*/

// Enum CombatGame.CBUIDataStore_TacticalGear.EGearCondition
/*enum EGearCondition
{
	E_GEAR_CON_MONEY                                   = 0,
	E_GEAR_CON_GAME_MODE                               = 1,
	E_GEAR_CON_MAX                                     = 2
};*/

// Enum CombatGame.CCSPawn.ECCSCoverPose
/*enum ECCSCoverPose
{
	CCSCoverPose_Idle                                  = 0,
	CCSCoverPose_ShootRight                            = 1,
	CCSCoverPose_ShootLeft                             = 2,
	CCSCoverPose_ShootOver                             = 3,
	CCSCoverPose_SideStepRight                         = 4,
	CCSCoverPose_SideStepLeft                          = 5,
	CCSCoverPose_BackSideStepRight                     = 6,
	CCSCoverPose_BackSideStepLeft                      = 7,
	CCSCoverPose_MAX                                   = 8
};*/

// Enum CombatGame.CCSPawn.ECCSAlertnessState
/*enum ECCSAlertnessState
{
	CCSAlertnessState_Relax                            = 0,
	CCSAlertnessState_Alert                            = 1,
	CCSAlertnessState_MAX                              = 2
};*/

// Enum CombatGame.CCSPawn.ECCSMovementSpeed
/*enum ECCSMovementSpeed
{
	CCSMovementSpeed_Walk                              = 0,
	CCSMovementSpeed_Run                               = 1,
	CCSMovementSpeed_MAX                               = 2
};*/

// Enum CombatGame.CCSPawn.ECCSMovementType
/*enum ECCSMovementType
{
	CCSMovementType_Idle                               = 0,
	CCSMovementType_Walk                               = 1,
	CCSMovementType_Run                                = 2,
	CCSMovementType_MAX                                = 3
};*/

// Enum CombatGame.GripAIDef.EDistanceType
/*enum EDistanceType
{
	DistanceType_2D                                    = 0,
	DistanceType_3D                                    = 1,
	DistanceType_MAX                                   = 2
};*/

// Enum CombatGame.GripAIDef.EAITargetSelectType
/*enum EAITargetSelectType
{
	AITargetSelectType_ClearEnemy                      = 0,
	AITargetSelectType_ClosestEnemy                    = 1,
	AITargetSelectType_ClosestVisibleEnemy             = 2,
	AITargetSelectType_ClosestPlayer                   = 3,
	AITargetSelectType_ClosestMissionActor             = 4,
	AITargetSelectType_MAX                             = 5
};*/

// Enum CombatGame.GripAIDef.ECurAITarget
/*enum ECurAITarget
{
	CurAITarget_Enemy                                  = 0,
	CurAITarget_CurrentAIBeacon                        = 1,
	CurAITarget_MAX                                    = 2
};*/

// Enum CombatGame.CCSBlackboard.CCSMoveCmd
/*enum CCSMoveCmd
{
	MOVE_CMD_NONE                                      = 0,
	MOVE_CMD_POS                                       = 1,
	MOVE_CMD_MAX                                       = 2
};*/

// Enum CombatGame.CCSBTActionWhileMoving.EUpperBodyActionType
/*enum EUpperBodyActionType
{
	EUBAT_Shoot                                        = 0,
	EUBAT_MAX                                          = 1
};*/

// Enum CombatGame.CCSBTActionWhileMoving.EMoveTargetType
/*enum EMoveTargetType
{
	EMTT_Target                                        = 0,
	EMTT_Actor                                         = 1,
	EMTT_MAX                                           = 2
};*/

// Enum CombatGame.CCSBTSelectTarget.ECCSSelectTargetAlgorithm
/*enum ECCSSelectTargetAlgorithm
{
	ECCSSelectTarget_Closest                           = 0,
	ECCSSelectTarget_ClosestAndVisible                 = 1,
	ECCSSelectTarget_ScriptedRoute                     = 2,
	ECCSSelectTarget_Empty                             = 3,
	ECCSSelectTarget_ClosestMissionActor               = 4,
	ECCSSelectTarget_ClosestPlayer                     = 5,
	ECCSSelectTarget_MAX                               = 6
};*/

// Enum CombatGame.CCSBTCombatTargetExistence.ETargetCheckMethods
/*enum ETargetCheckMethods
{
	ETargetCheckMethod_AND                             = 0,
	ETargetCheckMethod_OR                              = 1,
	ETargetCheckMethod_MAX                             = 2
};*/

// Enum CombatGame.CCSBTScriptCover.ScriptCoverState
/*enum ScriptCoverState
{
	EnterCover                                         = 0,
	GetOutCover                                        = 1,
	ShootFromCover                                     = 2,
	ExitCover                                          = 3,
	ScriptCoverState_MAX                               = 4
};*/

// Enum CombatGame.CombatSkill.ESkillType
/*enum ESkillType
{
	ESKT_None                                          = 0,
	ESKT_WeaponUsed                                    = 1,
	ESKT_Instant                                       = 2,
	ESKT_Passive                                       = 3,
	ESKT_MAX                                           = 4
};*/

// Enum CombatGame.CombatAICond_TargetExistenceDetail.ETargetType
/*enum ETargetType
{
	Target_All                                         = 0,
	Target_Closest                                     = 1,
	Target_ClosestVisible                              = 2,
	Target_Current                                     = 3,
	Target_ClosestPlayer                               = 4,
	Target_ClosestMissionActor                         = 5,
	Target_MAX                                         = 6
};*/

// Enum CombatGame.CombatGame.EMatchType
/*enum EMatchType
{
	EMT_Normal                                         = 0,
	EMT_Clan                                           = 1,
	EMT_Competitive                                    = 2,
	EMT_MAX                                            = 3
};*/

// Enum CombatGame.CombatStatStorageBase.StatSaveConditionType
/*enum StatSaveConditionType
{
	ESaveCondition_Default                             = 0,
	ESaveCondition_Desertion                           = 1,
	ESaveCondition_Ban                                 = 2,
	ESaveCondition_Disconnection                       = 3,
	ESaveCondition_MAX                                 = 4
};*/

// Enum CombatGame.CombatChampionshipManager.EChampionshipManagerError
/*enum EChampionshipManagerError
{
	EChampionshipError_Nothing                         = 0,
	EChampionshipError_InvalidArgument                 = 1,
	EChampionshipError_InvalidGrade                    = 2,
	EChampionshipError_FailedInitialize                = 3,
	EChampionshipError_InvalidPluginData               = 4,
	EChampionshipError_MAX                             = 5
};*/

// Enum CombatGame.CombatCharacterTransaction.EMatchOnOffCheck
/*enum EMatchOnOffCheck
{
	EM_OnOff_PlayerPage                                = 0,
	EM_OnOff_MyPage                                    = 1,
	EM_OnOff_ClanPage                                  = 2,
	EM_OnOff_Max                                       = 3
};*/

// Enum CombatGame.CombatTeamGameMovie.EUIChatType
/*enum EUIChatType
{
	EUICHAT_TEAM                                       = 0,
	EUICHAT_ALL                                        = 1,
	EUICHAT_CLAN                                       = 2,
	EUICHAT_OTHER                                      = 3,
	EUICHAT_MAX                                        = 4
};*/

// Enum CombatGame.CombatTeamGameMovie.EKillDeathPlayerType
/*enum EKillDeathPlayerType
{
	Player_Friendly                                    = 0,
	Player_Enemy                                       = 1,
	Player_MySelf                                      = 2,
	Player_MAX                                         = 3
};*/

// Enum CombatGame.CombatTeamGameMovie.EKillType
/*enum EKillType
{
	KillType_Normal                                    = 0,
	KillType_Penetration                               = 1,
	KillType_Headshot                                  = 2,
	KillType_MiddleOfForehaed                          = 3,
	KillType_Suicide                                   = 4,
	KillType_BuzzKill                                  = 5,
	KillType_MAX                                       = 6
};*/

// Enum CombatGame.CombatTeamGameMovie.ERoundStartType
/*enum ERoundStartType
{
	ERST_ATTCK_ROUND                                   = 0,
	ERST_DEPENSE_ROUND                                 = 1,
	ERST_ATTACK_ROUND_MATCHPOINT                       = 2,
	ERST_DEPENSE_ROUND_MATCHPOINT                      = 3,
	ERST_ATTACK_FINALROUND                             = 4,
	ERST_DEPENSE_FINALROUND                            = 5,
	ERST_ROUND                                         = 6,
	ERST_ROUND_MATCHPOINT                              = 7,
	ERST_FINALROUND                                    = 8,
	ERST_MESSAGE_ONLY                                  = 9,
	ERST_ERROR                                         = 10,
	ERST_MAX                                           = 11
};*/

// Enum CombatGame.CombatTeamGameMovie.EHUDTick
/*enum EHUDTick
{
	EHUDTICK_LEVEL1                                    = 0,
	EHUDTICK_LEVEL2                                    = 1,
	EHUDTICK_LEVEL3                                    = 2,
	EHUDTICK_MAX                                       = 3
};*/

// Enum CombatGame.CombatRadarCore.E_MINIMAP_SIZE
/*enum E_MINIMAP_SIZE
{
	E_MINIMAP_SIZE_SMALL                               = 0,
	E_MINIMAP_SIZE_MEDIUM                              = 1,
	E_MINIMAP_SIZE_LARGE                               = 2,
	E_MINIMAP_SIZE_MAX                                 = 3
};*/

// Enum CombatGame.CombatPlayerInput.EWeaponMouseSensPreset
/*enum EWeaponMouseSensPreset
{
	E_WMS_PRESET_FIRST                                 = 0,
	E_WMS_PRESET_SECOND                                = 1,
	E_WMS_PRESET_THIRD                                 = 2,
	E_WMS_PRESET_FOURTH                                = 3,
	E_WMS_PRESET_MAX                                   = 4
};*/

// Enum CombatGame.CombatPlayerInput.EDummyClientInputCmd
/*enum EDummyClientInputCmd
{
	DCIC_TOGGLEFIRE                                    = 0,
	DCIC_TOGGLEDUCK                                    = 1,
	DCIC_TURN_JUMP                                     = 2,
	DCIC_THROWGRENADE                                  = 3,
	DCIC_MOVE_FRONT                                    = 4,
	DCIC_MOVE_BACK                                     = 5,
	DCIC_STRAFE_LEFT                                   = 6,
	DCIC_STRAFE_RIGHT                                  = 7,
	DCIC_STOP                                          = 8,
	DCIC_SUICIDE                                       = 9,
	DCIC_MAX                                           = 10
};*/

// Enum CombatGame.CombatAssasinGame.EGamePhase
/*enum EGamePhase
{
	E_BeforeVIPMove                                    = 0,
	E_AfterVIPMove                                     = 1,
	E_VIPDeath                                         = 2,
	E_PlayerESCing                                     = 3,
	E_MAX                                              = 4
};*/

// Enum CombatGame.CombatAssasinMovie.EVIPIconType
/*enum EVIPIconType
{
	EVIP_ALLY                                          = 0,
	EVIP_ENEMY                                         = 1,
	EVIP_MAX                                           = 2
};*/

// Enum CombatGame.CombatAssasinMovie.EAssasinHUDIconType
/*enum EAssasinHUDIconType
{
	EAssasinHUDIcon_NONE                               = 0,
	EAssasinHUDIcon_VIP                                = 1,
	EAssasinHUDIcon_EXIT                               = 2,
	EAssasinHUDIcon_MAX                                = 3
};*/

// Enum CombatGame.CombatChannelTransaction.E_SINGLE_GAME_TYPE
/*enum E_SINGLE_GAME_TYPE
{
	E_SINGLE_GAME_TYPE_NONE                            = 0,
	E_SINGLE_GAME_TYPE_LEAVE                           = 1,
	E_SINGLE_GAME_TYPE_FINISH                          = 2,
	E_SINGLE_GAME_TYPE_MAX                             = 3
};*/

// Enum CombatGame.CombatChatManager.EChatHeadErrorType
/*enum EChatHeadErrorType
{
	EChatHeadError_Success                             = 0,
	EChatHeadError_Wrong_Type                          = 1,
	EChatHeadError_NoLabel                             = 2,
	EChatHeadError_NoTarget                            = 3,
	EChatHeadError_Wrong_TargetType                    = 4,
	EChatHeadError_MAX                                 = 5
};*/

// Enum CombatGame.CombatCommon_Command.E_COMMAND_TYPE
/*enum E_COMMAND_TYPE
{
	E_COMMAND_TYPE_CONSOLE                             = 0,
	E_COMMAND_TYPE_TEAM_SHUFFLE                        = 1,
	E_COMMAND_TYPE_TEAM_SWAP                           = 2,
	E_COMMAND_TYPE_DEMO_REC                            = 3,
	E_COMMAND_TYPE_SPECTATOR_MODE                      = 4,
	E_COMMAND_TYPE_ALL_NOTICE                          = 5,
	E_COMMAND_TYPE_CHANNEL_NOTICE                      = 6,
	E_COMMAND_TYPE_BAN_USER                            = 7,
	E_COMMAND_TYPE_BLOCK_CHAT                          = 8,
	E_COMMAND_TYPE_SCR_NOTICE                          = 9,
	E_COMMAND_TYPE_SCR_NOTICE_TIME_OUT                 = 10,
	E_COMMAND_TYPE_SCR_NOTICE_DEL                      = 11,
	E_COMMAND_TYPE_ROUND_MONITORING                    = 12,
	E_COMMAND_TYPE_SET_MAXTICKRATE                     = 13,
	E_COMMAND_TYPE_MAX                                 = 14
};*/

// Enum CombatGame.CombatCommon_Option.E_CROSSHAIR_OPTION_ITEM_Index
/*enum E_CROSSHAIR_OPTION_ITEM_Index
{
	COID_Shape                                         = 0,
	COID_Color                                         = 1,
	COID_Scale                                         = 2,
	COID_Alpha                                         = 3,
	COID_Shadow                                        = 4,
	COID_Spread                                        = 5,
	COID_CustomColor                                   = 6,
	COID_MAX                                           = 7
};*/

// Enum CombatGame.CombatCommon_Option.E_VIDEO_OPTION_ITEM_Type
/*enum E_VIDEO_OPTION_ITEM_Type
{
	VOIT_GENERAL                                       = 0,
	VOIT_ADVANCED                                      = 1,
	VOIT_MAX                                           = 2
};*/

// Enum CombatGame.CombatCommon_Option.E_VIDEO_OPTION_ITEM_Index
/*enum E_VIDEO_OPTION_ITEM_Index
{
	VOIID_GraphicQuality                               = 0,
	VOIID_AspectRatio                                  = 1,
	VOIID_ScreenMode                                   = 2,
	VOIID_ScreenColors                                 = 3,
	VOIID_Gamma                                        = 4,
	VOIID_AntiAliasing                                 = 5,
	VOIID_Resolution                                   = 6,
	VOIID_ScanRate                                     = 7,
	VOIID_VSync                                        = 8,
	VOIID_Character                                    = 9,
	VOIID_BackGround                                   = 10,
	VOIID_Light                                        = 11,
	VOIID_LightReflect                                 = 12,
	VOIID_Shadow                                       = 13,
	VOIID_Effect                                       = 14,
	VOIID_Physical                                     = 15,
	VOIID_AmbOcclusion                                 = 16,
	VOIID_GoreTeenLevel                                = 17,
	VOIID_GoreAdultLevel                               = 18,
	VOIID_BackgroundShadow                             = 19,
	VOIID_GunTrail                                     = 20,
	VOIID_SceneTone                                    = 21,
	VOIID_FPSLimit                                     = 22,
	VOIID_SystemCounter                                = 23,
	VOIID_OneFrameThreadLag                            = 24,
	VOIID_MAX                                          = 25
};*/

// Enum CombatGame.CombatCommon_Option.E_Control_SUBTAB_Index
/*enum E_Control_SUBTAB_Index
{
	CSTI_MouseSens                                     = 0,
	CSTI_KeyBinding                                    = 1,
	CSTI_MAX                                           = 2
};*/

// Enum CombatGame.CombatCommon_Option.E_GAMEPLAY_OPTION_ITEM_Index
/*enum E_GAMEPLAY_OPTION_ITEM_Index
{
	GOIID_AllChat                                      = 0,
	GOIID_TeamChat                                     = 1,
	GOIID_DeadChat                                     = 2,
	GOIID_FOV                                          = 3,
	GOIID_FLIPMESH                                     = 4,
	GOIID_TeamIFFView                                  = 5,
	GOIID_ForegroundFOV                                = 6,
	GOIID_FriendRequestBlock                           = 7,
	GOIID_TeamOutline                                  = 8,
	GOIID_MAX                                          = 9
};*/

// Enum CombatGame.CombatCommon_Option.E_CONTROL_OPTION_ITEM_Index
/*enum E_CONTROL_OPTION_ITEM_Index
{
	COIID_MouseSensMode                                = 0,
	COIID_MasterMouseSensitivity                       = 1,
	COIID_Preset1MouseSensitivity                      = 2,
	COIID_Preset1MouseSensitivity_1stZoom              = 3,
	COIID_Preset1MouseSensitivity_2ndZoom              = 4,
	COIID_Preset2MouseSensitivity                      = 5,
	COIID_Preset2MouseSensitivity_1stZoom              = 6,
	COIID_Preset2MouseSensitivity_2ndZoom              = 7,
	COIID_Preset3MouseSensitivity                      = 8,
	COIID_Preset3MouseSensitivity_1stZoom              = 9,
	COIID_Preset3MouseSensitivity_2ndZoom              = 10,
	COIID_MouseInvert                                  = 11,
	COIID_AimAssist                                    = 12,
	COIID_Preset1MouseSensitivity_UseAll               = 13,
	COIID_Preset2MouseSensitivity_UseAll               = 14,
	COIID_Preset3MouseSensitivity_UseAll               = 15,
	COIID_Preset1MouseSensitivity_AutoScale            = 16,
	COIID_Preset2MouseSensitivity_AutoScale            = 17,
	COIID_Preset3MouseSensitivity_AutoScale            = 18,
	COIID_HoldtoAim                                    = 19,
	COIID_MAX                                          = 20
};*/

// Enum CombatGame.CombatCommon_Option.E_SOUND_OPTION_ITEM_Index
/*enum E_SOUND_OPTION_ITEM_Index
{
	SOIID_Master                                       = 0,
	SOIID_Effect                                       = 1,
	SOIID_EffectMute                                   = 2,
	SOIID_Bgm                                          = 3,
	SOIID_BgmMute                                      = 4,
	SOIID_InGameBgm                                    = 5,
	SOIID_InGameBgmMute                                = 6,
	SOIID_Voice                                        = 7,
	SOIID_VoiceMute                                    = 8,
	SOIID_Hit                                          = 9,
	SOIID_HitMute                                      = 10,
	SOIID_VoiceChatAutoLogin                           = 11,
	SOIID_VoiceChatInputMode                           = 12,
	SOIID_VoiceChatInputDevice                         = 13,
	SOIID_VoiceChatInputVolume                         = 14,
	SOIID_VoiceChatInputMute                           = 15,
	SOIID_VoiceChatOutputVolume                        = 16,
	SOIID_VoiceChatOutputMute                          = 17,
	SOIID_MAX                                          = 18
};*/

// Enum CombatGame.CombatCommon_Option.E_OPTION_MODE_Index
/*enum E_OPTION_MODE_Index
{
	OM_FrontEnd                                        = 0,
	OM_InGame                                          = 1,
	OM_MAX                                             = 2
};*/

// Enum CombatGame.CombatCommon_Option.E_OPTION_TAB_Index
/*enum E_OPTION_TAB_Index
{
	OTI_Graphic                                        = 0,
	OTI_Control                                        = 1,
	OTI_Sound                                          = 2,
	OTI_GamePlay                                       = 3,
	OTI_Rating                                         = 4,
	OTI_MAX                                            = 5
};*/

// Enum CombatGame.CombatCommon_Option.E_GAMEPLAY_SUBTAB_Index
/*enum E_GAMEPLAY_SUBTAB_Index
{
	GSTI_CrossHair                                     = 0,
	GSTI_GameEnv                                       = 1,
	GSTI_MAX                                           = 2
};*/

// Enum CombatGame.CombatProfileSettings.EGenericQualityLevel4
/*enum EGenericQualityLevel4
{
	CBPID_QUALITY4_Lowest                              = 0,
	CBPID_QUALITY4_Low                                 = 1,
	CBPID_QUALITY4_Normal                              = 2,
	CBPID_QUALITY4_High                                = 3,
	CBPID_QUALITY4_Highest                             = 4,
	CBPID_QUALITY4_MAX                                 = 5
};*/

// Enum CombatGame.CombatProfileSettings.EGenericQualityLevel5
/*enum EGenericQualityLevel5
{
	CBPID_QUALITY5_Disable                             = 0,
	CBPID_QUALITY5_Low                                 = 1,
	CBPID_QUALITY5_Normal                              = 2,
	CBPID_QUALITY5_High                                = 3,
	CBPID_QUALITY5_Highest                             = 4,
	CBPID_QUALITY5_MAX                                 = 5
};*/

// Enum CombatGame.CombatProfileSettings.EGenericYesNo
/*enum EGenericYesNo
{
	CBPID_VALUE_No                                     = 0,
	CBPID_VALUE_Yes                                    = 1,
	CBPID_VALUE_MAX                                    = 2
};*/

// Enum CombatGame.CombatProfileSettings.EGenericEnableDisable
/*enum EGenericEnableDisable
{
	CBPID_USE_Disable                                  = 0,
	CBPID_USE_Enable                                   = 1,
	CBPID_USE_MAX                                      = 2
};*/

// Enum CombatGame.CombatProfileSettings.EGraphicQuality
/*enum EGraphicQuality
{
	CBGQ_Lowest                                        = 0,
	CBGQ_Low                                           = 1,
	CBGQ_Normal                                        = 2,
	CBGQ_High                                          = 3,
	CBGQ_Highest                                       = 4,
	CBGQ_Custom                                        = 5,
	CBGQ_MAX                                           = 6
};*/

// Enum CombatGame.CombatProfileSettings.EScreenMode
/*enum EScreenMode
{
	CBSM_FullScreen                                    = 0,
	CBSM_Window                                        = 1,
	CBSM_FullWindow                                    = 2,
	CBSM_MAX                                           = 3
};*/

// Enum CombatGame.CombatProfileSettings.EScreenColor
/*enum EScreenColor
{
	CBEC_ORIGINAL                                      = 0,
	CBEC_COOL                                          = 1,
	CBEC_WARM                                          = 2,
	CBEC_FILM                                          = 3,
	CBEC_VINTAGE                                       = 4,
	CBEC_VIVID                                         = 5,
	CBEC_GRACEFUL                                      = 6,
	CBEC_DISABLE                                       = 7,
	CBEC_MAX                                           = 8
};*/

// Enum CombatGame.CombatProfileSettings.ETeenGoreLevel
/*enum ETeenGoreLevel
{
	CBTGL_BLOOD_White                                  = 0,
	CBTGL_BLOOD_None                                   = 1,
	CBTGL_BLOOD_MAX                                    = 2
};*/

// Enum CombatGame.CombatProfileSettings.EAdultGoreLevel
/*enum EAdultGoreLevel
{
	CBAGL_BLOOD_Red                                    = 0,
	CBAGL_BLOOD_White                                  = 1,
	CBAGL_BLOOD_None                                   = 2,
	CBAGL_BLOOD_MAX                                    = 3
};*/

// Enum CombatGame.CombatProfileSettings.EDigitalButtonActions
/*enum EDigitalButtonActions
{
	DBA_None                                           = 0,
	DBA_MoveForward                                    = 1,
	DBA_MoveBackward                                   = 2,
	DBA_StrafeLeft                                     = 3,
	DBA_StrafeRight                                    = 4,
	DBA_TurnLeft                                       = 5,
	DBA_TurnRight                                      = 6,
	DBA_Jump                                           = 7,
	DBA_Duck                                           = 8,
	DBA_Sprint                                         = 9,
	DBA_Fire                                           = 10,
	DBA_AltFire                                        = 11,
	DBA_Reload                                         = 12,
	DBA_Use                                            = 13,
	DBA_HostageTalk                                    = 14,
	DBA_SwitchToBestWeapon                             = 15,
	DBA_PrevWeapon                                     = 16,
	DBA_NextWeapon                                     = 17,
	DBA_UseSkill0                                      = 18,
	DBA_UseSkill1                                      = 19,
	DBA_UseSkill2                                      = 20,
	DBA_UseSkill3                                      = 21,
	DBA_SwitchPreWeapon                                = 22,
	DBA_SetWalking                                     = 23,
	DBA_ToggleSilencer                                 = 24,
	DBA_ToggleLaserSite                                = 25,
	DBA_ToggleGrenadeLauncher                          = 26,
	DBA_ThrowWeapon                                    = 27,
	DBA_PresetWeapon1                                  = 28,
	DBA_PresetWeapon2                                  = 29,
	DBA_PresetWeapon3                                  = 30,
	DBA_ShowMenu                                       = 31,
	DBA_ShowScores                                     = 32,
	DBA_ShowMap                                        = 33,
	DBA_ToggleMinimap                                  = 34,
	DBA_Jump_Gamepad                                   = 35,
	DBA_StrafeLeft_Gamepad                             = 36,
	DBA_MoveForward_Gamepad                            = 37,
	DBA_TurnLeft_Gamepad                               = 38,
	DBA_SwitchToBestWeapon_Gamepad                     = 39,
	DBA_SensitiveDown                                  = 40,
	DBA_SensitiveUp                                    = 41,
	DBA_AutoAssist                                     = 42,
	DBA_ToggleRadioChat1                               = 43,
	DBA_ToggleRadioChat2                               = 44,
	DBA_ShowHelpImage                                  = 45,
	DBA_ShowWholeMap                                   = 46,
	DBA_SwitchWeapon1                                  = 47,
	DBA_SwitchWeapon2                                  = 48,
	DBA_SwitchWeapon3                                  = 49,
	DBA_SwitchWeapon4                                  = 50,
	DBA_SwitchWeapon5                                  = 51,
	DBA_PrintScreen                                    = 52,
	DBA_PickupWeapon                                   = 53,
	DBA_Stare                                          = 54,
	DBA_DashSwap                                       = 55,
	DBA_ToggleHideHUD                                  = 56,
	DBA_ToggleChaItemFX                                = 57,
	DBA_Respawn_Ground                                 = 58,
	DBA_Respawn_Air                                    = 59,
	DBA_ToggleAllChat                                  = 60,
	DBA_ToggleTeamChat                                 = 61,
	DBA_LookBack                                       = 62,
	DBA_ToggleHideTeamIFF                              = 63,
	DBA_StartSecZoom                                   = 64,
	DBA_UseSpray                                       = 65,
	DBA_ToggleVivoxInput                               = 66,
	DBA_MAX                                            = 67
};*/

// Enum CombatGame.CombatProfileSettings.ECombatBindableKeys
/*enum ECombatBindableKeys
{
	CBBND_Unbound                                      = 0,
	CBBND_MouseX                                       = 1,
	CBBND_MouseY                                       = 2,
	CBBND_MouseScrollUp                                = 3,
	CBBND_MouseScrollDown                              = 4,
	CBBND_LeftMouseButton                              = 5,
	CBBND_RightMouseButton                             = 6,
	CBBND_MiddleMouseButton                            = 7,
	CBBND_ThumbMouseButton                             = 8,
	CBBND_ThumbMouseButton2                            = 9,
	CBBND_BackSpace                                    = 10,
	CBBND_Tab                                          = 11,
	CBBND_Enter                                        = 12,
	CBBND_Pause                                        = 13,
	CBBND_CapsLock                                     = 14,
	CBBND_Escape                                       = 15,
	CBBND_SpaceBar                                     = 16,
	CBBND_PageUp                                       = 17,
	CBBND_PageDown                                     = 18,
	CBBND_End                                          = 19,
	CBBND_Home                                         = 20,
	CBBND_Left                                         = 21,
	CBBND_Up                                           = 22,
	CBBND_Right                                        = 23,
	CBBND_Down                                         = 24,
	CBBND_Insert                                       = 25,
	CBBND_Delete                                       = 26,
	CBBND_Zero                                         = 27,
	CBBND_One                                          = 28,
	CBBND_Two                                          = 29,
	CBBND_Three                                        = 30,
	CBBND_Four                                         = 31,
	CBBND_Five                                         = 32,
	CBBND_Six                                          = 33,
	CBBND_Seven                                        = 34,
	CBBND_Eight                                        = 35,
	CBBND_Nine                                         = 36,
	CBBND_A                                            = 37,
	CBBND_B                                            = 38,
	CBBND_C                                            = 39,
	CBBND_D                                            = 40,
	CBBND_E                                            = 41,
	CBBND_F                                            = 42,
	CBBND_G                                            = 43,
	CBBND_H                                            = 44,
	CBBND_I                                            = 45,
	CBBND_J                                            = 46,
	CBBND_K                                            = 47,
	CBBND_L                                            = 48,
	CBBND_M                                            = 49,
	CBBND_N                                            = 50,
	CBBND_O                                            = 51,
	CBBND_P                                            = 52,
	CBBND_Q                                            = 53,
	CBBND_R                                            = 54,
	CBBND_S                                            = 55,
	CBBND_T                                            = 56,
	CBBND_U                                            = 57,
	CBBND_V                                            = 58,
	CBBND_W                                            = 59,
	CBBND_X                                            = 60,
	CBBND_Y                                            = 61,
	CBBND_Z                                            = 62,
	CBBND_NumPadZero                                   = 63,
	CBBND_NumPadOne                                    = 64,
	CBBND_NumPadTwo                                    = 65,
	CBBND_NumPadThree                                  = 66,
	CBBND_NumPadFour                                   = 67,
	CBBND_NumPadFive                                   = 68,
	CBBND_NumPadSix                                    = 69,
	CBBND_NumPadSeven                                  = 70,
	CBBND_NumPadEight                                  = 71,
	CBBND_NumPadNine                                   = 72,
	CBBND_Multiply                                     = 73,
	CBBND_Add                                          = 74,
	CBBND_Subtract                                     = 75,
	CBBND_Decimal                                      = 76,
	CBBND_Divide                                       = 77,
	CBBND_F1                                           = 78,
	CBBND_F2                                           = 79,
	CBBND_F3                                           = 80,
	CBBND_F4                                           = 81,
	CBBND_F5                                           = 82,
	CBBND_F6                                           = 83,
	CBBND_F7                                           = 84,
	CBBND_F8                                           = 85,
	CBBND_F9                                           = 86,
	CBBND_F10                                          = 87,
	CBBND_F11                                          = 88,
	CBBND_F12                                          = 89,
	CBBND_NumLock                                      = 90,
	CBBND_ScrollLock                                   = 91,
	CBBND_LeftShift                                    = 92,
	CBBND_RightShift                                   = 93,
	CBBND_LeftControl                                  = 94,
	CBBND_RightControl                                 = 95,
	CBBND_LeftAlt                                      = 96,
	CBBND_RightAlt                                     = 97,
	CBBND_Semicolon                                    = 98,
	CBBND_Equals                                       = 99,
	CBBND_Minus                                        = 100,
	CBBND_Comma                                        = 101,
	CBBND_Underscore                                   = 102,
	CBBND_Period                                       = 103,
	CBBND_Slash                                        = 104,
	CBBND_Tilde                                        = 105,
	CBBND_LeftBracket                                  = 106,
	CBBND_Backslash                                    = 107,
	CBBND_RightBracket                                 = 108,
	CBBND_Quote                                        = 109,
	CBBND_PrintScreen                                  = 110,
	CBBND_Convert                                      = 111,
	CBBND_NonConvert                                   = 112,
	CBBND_OEM102                                       = 113,
	CBBND_MAX                                          = 114
};*/

// Enum CombatGame.CombatCommon_OverImmersionGuard.E_RATINGICON
/*enum E_RATINGICON
{
	RATINGICON_All                                     = 0,
	RATINGICON_12Years                                 = 1,
	RATINGICON_15Years                                 = 2,
	RATINGICON_18Years                                 = 3,
	RATINGICON_Test                                    = 4,
	RATINGICON_Violence                                = 5,
	RATINGICON_Slang                                   = 6,
	RATINGICON_Sexuality                               = 7,
	RATINGICON_Horror                                  = 8,
	RATINGICON_Gambling                                = 9,
	RATINGICON_Drug                                    = 10,
	RATINGICON_Crime                                   = 11,
	RATINGICON_MAX                                     = 12
};*/

// Enum CombatGame.CombatCommon_SystemCounter.E_SYSTEM_COUNT_TYPE
/*enum E_SYSTEM_COUNT_TYPE
{
	E_SYSTEM_COUNT_TYPE_FPS                            = 0,
	E_SYSTEM_COUNT_TYPE_PING                           = 1,
	E_SYSTEM_COUNT_TYPE_VRAM                           = 2,
	E_SYSTEM_COUNT_TYPE_RAM                            = 3,
	E_SYSTEM_COUNT_TYPE_MAX                            = 4
};*/

// Enum CombatGame.CombatDataTableRefAchievement.ACHIEVEMENT_TYPE
/*enum ACHIEVEMENT_TYPE
{
	ACHIEVEMENT_NONE                                   = 0,
	ACHIEVEMENT_BADGE                                  = 1,
	ACHIEVEMENT_RIBBON                                 = 2,
	ACHIEVEMENT_MEDAL                                  = 3,
	ACHIEVEMENT_RIBBON_POST                            = 4,
	ACHIEVEMENT_MAX                                    = 5
};*/

// Enum CombatGame.CombatDataTableRefDefine.E_VALUE_TYPE
/*enum E_VALUE_TYPE
{
	E_VALUE_TYPE_NONE                                  = 0,
	E_VALUE_TYPE_INT                                   = 1,
	E_VALUE_TYPE_FLAOT                                 = 2,
	E_VALUE_TYPE_STRING                                = 3,
	E_VALUE_TYPE_MAX                                   = 4
};*/

// Enum CombatGame.CombatDataTableRefFilter.E_FILTER_ITEM_TYPE
/*enum E_FILTER_ITEM_TYPE
{
	E_FILTER_ITEM_TYPE                                 = 0,
	E_FILTER_ITEM_TYPE01                               = 1,
	E_FILTER_ITEM_TYPE02                               = 2,
	E_FILTER_ITEM_TYPE_MAX                             = 3
};*/

// Enum CombatGame.CombatDataTableRefItem.E_TICKET_TYPE
/*enum E_TICKET_TYPE
{
	E_TICKET_TYPE_NONE                                 = 0,
	E_TICKET_TYPE_ONLINE_CHAMPIONSHIP                  = 1,
	E_TICKET_TYPE_OFFLINE_CHAMPIONSHIP                 = 2,
	E_TICKET_TYPE_CLAN                                 = 3,
	E_TICKET_TYPE_TEST_CHANNEL                         = 4,
	E_TICKET_TYPE_MAX                                  = 5
};*/

// Enum CombatGame.CombatDataTableRefMailCategory.E_MAIL_TAB_TYPE
/*enum E_MAIL_TAB_TYPE
{
	E_MAIL_TAB_TYPE_NONE                               = 0,
	E_MAIL_TAB_TYPE_NORMAL                             = 1,
	E_MAIL_TAB_TYPE_CASH                               = 2,
	E_MAIL_TAB_TYPE_MAX                                = 3
};*/

// Enum CombatGame.CombatDataTableRefShopCategory.E_SERVICE_TYPE
/*enum E_SERVICE_TYPE
{
	EST_HIDE                                           = 0,
	EST_DISPLAY                                        = 1,
	EST_MAX                                            = 2
};*/

// Enum CombatGame.CombatDataTableRefShopCategory.E_SHOP_CATEGORY_TYPE
/*enum E_SHOP_CATEGORY_TYPE
{
	ESCT_NORMAL                                        = 0,
	ESCT_SPECIAL                                       = 1,
	ESCT_REFUND                                        = 2,
	ESCT_MAX                                           = 3
};*/

// Enum CombatGame.CombatDataTableRefShopItem.E_SHOPITEM_SERVICE_TYPE
/*enum E_SHOPITEM_SERVICE_TYPE
{
	ESIST_NONE                                         = 0,
	ESIST_NEW                                          = 1,
	ESIST_HOT                                          = 2,
	ESIST_EVENT                                        = 3,
	ESIST_MAX                                          = 4
};*/

// Enum CombatGame.CombatDataTableRefSystemImage.E_SYSTEM_IMAGE_TYPE
/*enum E_SYSTEM_IMAGE_TYPE
{
	E_SYSTEM_IMAGE_TYPE_INVEN_LIST_B                   = 0,
	E_SYSTEM_IMAGE_TYPE_INVEN_LIST_F                   = 1,
	E_SYSTEM_IMAGE_TYPE_SHOP_LIST_B                    = 2,
	E_SYSTEM_IMAGE_TYPE_SHOP_LIST_F                    = 3,
	E_SYSTEM_IMAGE_TYPE_PRESET_B                       = 4,
	E_SYSTEM_IMAGE_TYPE_PRESET_F                       = 5,
	E_SYSTEM_IMAGE_TYPE_PRESET_GRENADE_B               = 6,
	E_SYSTEM_IMAGE_TYPE_PRESET_GRENADE_F               = 7,
	E_SYSTEM_IMAGE_TYPE_BACKGROUND                     = 8,
	E_SYSTEM_IMAGE_TYPE_MAX                            = 9
};*/

// Enum CombatGame.CombatDroppedSupplies.ETeamIdentifyState
/*enum ETeamIdentifyState
{
	EVIS_Normal                                        = 0,
	EVIS_OurTeam                                       = 1,
	EVIS_EnemyTeam                                     = 2,
	EVIS_MAX                                           = 3
};*/

// Enum CombatGame.CombatErrorMessage.GameErrorMessageType
/*enum GameErrorMessageType
{
	EGEMT_ErrorPlayerStartCount                        = 0,
	EGEMT_ErrorHitStat_Attacker                        = 1,
	EGEMT_MAX                                          = 2
};*/

// Enum CombatGame.CombatFlashExplosionActor.EFlashEffectIntensityType
/*enum EFlashEffectIntensityType
{
	EFEIT_Flash                                        = 0,
	EFEIT_AfterImage                                   = 1,
	EFEIT_MAX                                          = 2
};*/

// Enum CombatGame.CombatFlashExplosionActor.EFalshEffectSettingType
/*enum EFalshEffectSettingType
{
	EFEST_Normal                                       = 0,
	EFEST_Obstacle                                     = 1,
	EFEST_MAX                                          = 2
};*/

// Enum CombatGame.CombatFrontEnd_Base.E_EQUIP_SOUND_TYPE
/*enum E_EQUIP_SOUND_TYPE
{
	E_EQUIP_SOUND_TYPE_PRI                             = 0,
	E_EQUIP_SOUND_TYPE_SUB                             = 1,
	E_EQUIP_SOUND_TYPE_MELEE                           = 2,
	E_EQUIP_SOUND_TYPE_THROW                           = 3,
	E_EQUIP_SOUND_TYPE_CHAR                            = 4,
	E_EQUIP_SOUND_TYPE_ACTIVE                          = 5,
	E_EQUIP_SOUND_TYPE_ARMOR                           = 6,
	E_EQUIP_SOUND_TYPE_MAX                             = 7
};*/

// Enum CombatGame.CombatFrontEnd_Achieve.E_SHOW_TYPE
/*enum E_SHOW_TYPE
{
	E_SHOW_TYPE_NONE                                   = 0,
	E_SHOW_TYPE_LEVEL_UP                               = 1,
	E_SHOW_TYPE_LEVEL_UP_REWARD                        = 2,
	E_SHOW_TYPE_TIER_UP                                = 3,
	E_SHOW_TYPE_MAX                                    = 4
};*/

// Enum CombatGame.CombatFrontEnd_Achieve.E_ITEM_TIME_TYPE
/*enum E_ITEM_TIME_TYPE
{
	E_ITEM_TIME_TYPE_FOREVER                           = 0,
	E_ITEM_TIME_TYPE_PERIOD                            = 1,
	E_ITEM_TIME_TYPE_MAX                               = 2
};*/

// Enum CombatGame.CombatFrontEnd_AwaitList.EAwaitListShowType
/*enum EAwaitListShowType
{
	E_AL_ST_LOBBY                                      = 0,
	E_AL_ST_MATCHROOM                                  = 1,
	E_AL_ST_MAX                                        = 2
};*/

// Enum CombatGame.CombatFrontEnd_AwaitList.EAwaitListPopupType
/*enum EAwaitListPopupType
{
	E_AL_PT_USERINFO                                   = 0,
	E_AL_PT_ADD_FRIEND                                 = 1,
	E_AL_PT_WHISPER                                    = 2,
	E_AL_PT_INVITE_ROOM                                = 3,
	E_AL_PT_MAX                                        = 4
};*/

// Enum CombatGame.CombatFrontEnd_BaseShop.EShopButtonState
/*enum EShopButtonState
{
	E_STATE_DEFAULT                                    = 0,
	E_STATE_SELECTED                                   = 1,
	E_STATE_DISABLED                                   = 2,
	E_STATE_MAX                                        = 3
};*/

// Enum CombatGame.CombatFrontEnd_BaseShop.EShopPopupSetType
/*enum EShopPopupSetType
{
	E_TYPE_PRESET                                      = 0,
	E_TYPE_NONE                                        = 1,
	E_TYPE_PACKAGE                                     = 2,
	E_TYPE_MAX                                         = 3
};*/

// Enum CombatGame.CombatFrontEnd_BaseShop.EShopDetailScene
/*enum EShopDetailScene
{
	E_SCENE_SHOPLIST                                   = 0,
	E_SCENE_POPUP                                      = 1,
	E_SCENE_MAX                                        = 2
};*/

// Enum CombatGame.CombatFrontEnd_BaseShop.eShopWeaponIndex
/*enum eShopWeaponIndex
{
	SHOPWEAPON_PRIMARY_WEAPON                          = 0,
	SHOPWEAPON_SUB_WEAPON                              = 1,
	SHOPWEAPON_MELEE_WEAPON                            = 2,
	SHOPWEAPON_THROW_WEAPON                            = 3,
	SHOPWEAPON_CHARACTER                               = 4,
	SHOPWEAPON_MAX                                     = 5
};*/

// Enum CombatGame.CombatFrontEnd_BuyItem.EAbilityType
/*enum EAbilityType
{
	E_ABILITY_TYPE_ACCURACY                            = 0,
	E_ABILITY_TYPE_DAMAGE                              = 1,
	E_ABILITY_TYPE_RANGE                               = 2,
	E_ABILITY_TYPE_RATE_OF_FIRE                        = 3,
	E_ABILITY_TYPE_RECOIL                              = 4,
	E_ABILITY_TYPE_MOBILITY                            = 5,
	E_ABILITY_TYPE_AMMO                                = 6,
	E_ABILITY_TYPE_MAX                                 = 7
};*/

// Enum CombatGame.CombatFrontEnd_BuyItem.EPriceIconType
/*enum EPriceIconType
{
	E_PRICE_ICON_TYPE_MONEY                            = 0,
	E_PRICE_ICON_TYPE_CASH                             = 1,
	E_PRICE_ICON_TYPE_MEDAL                            = 2,
	E_PRICE_ICON_TYPE_HANCOIN                          = 3,
	E_PRICE_ICON_TYPE_BSCOIN                           = 4,
	E_PRICE_ICON_TYPE_BULLET                           = 5,
	E_PRICE_ICON_TYPE_MAX                              = 6
};*/

// Enum CombatGame.CombatFrontEnd_CallingCardPage.ECallingCardButton
/*enum ECallingCardButton
{
	E_CC_BTN_APPLY                                     = 0,
	E_CC_BTN_CLOSE                                     = 1,
	E_CC_BTN_MAX                                       = 2
};*/

// Enum CombatGame.CombatFrontEnd_CallingCardPage.ECallingCardTab
/*enum ECallingCardTab
{
	E_CC_TAB_ALL                                       = 0,
	E_CC_TAB_TEMP                                      = 1,
	E_CC_TAB_MAX                                       = 2
};*/

// Enum CombatGame.CombatFrontEnd_ChangePropernounPopup.PropernounPopupMode
/*enum PropernounPopupMode
{
	PPM_Callsign                                       = 0,
	PPM_MAX                                            = 1
};*/

// Enum CombatGame.CombatFrontEnd_Channel.E_CHANNEL_BUTTON_TYPE
/*enum E_CHANNEL_BUTTON_TYPE
{
	E_CHANNEL_BUTTON_TYPE_REFLESH                      = 0,
	E_CHANNEL_BUTTON_TYPE_TUTORIAL                     = 1,
	E_CHANNEL_BUTTON_TYPE_JOIN                         = 2,
	E_CHANNEL_BUTTON_TYPE_MAX                          = 3
};*/

// Enum CombatGame.CombatFrontEnd_Channel.E_CHANNEL_BOOSTER_TYPE
/*enum E_CHANNEL_BOOSTER_TYPE
{
	E_CHANNEL_BOOSTER_TYPE_EXP                         = 0,
	E_CHANNEL_BOOSTER_TYPE_GOLD                        = 1,
	E_CHANNEL_BOOSTER_TYPE_MAX                         = 2
};*/

// Enum CombatGame.CombatFrontEnd_Channel.E_CHANNEL_STATE
/*enum E_CHANNEL_STATE
{
	E_CHANNEL_STATE_NORMAL                             = 0,
	E_CHANNEL_STATE_NORMAL01                           = 1,
	E_CHANNEL_STATE_NORMAL02                           = 2,
	E_CHANNEL_STATE_NORMAL03                           = 3,
	E_CHANNEL_STATE_HOT                                = 4,
	E_CHANNEL_STATE_MAX                                = 5
};*/

// Enum CombatGame.CombatFrontEnd_CharacterInfo.CharacterInfoTab
/*enum CharacterInfoTab
{
	ECharTab_Profile                                   = 0,
	ECharTab_Battle                                    = 1,
	ECharTab_Weapon                                    = 2,
	ECharTab_MAX                                       = 3
};*/

// Enum CombatGame.CombatFrontEnd_Chat.EPopupType
/*enum EPopupType
{
	E_POPUP_TYPE_PLAYERINFO                            = 0,
	E_POPUP_TYPE_WHISPER                               = 1,
	E_POPUP_TYPE_ADDFRIEND                             = 2,
	E_POPUP_TYPE_INIVTE_TO_MY_CLAN                     = 3,
	E_POPUP_TYPE_BLOCK                                 = 4,
	E_POPUP_TYPE_MAX                                   = 5
};*/

// Enum CombatGame.CombatFrontEnd_Chat.ETabType
/*enum ETabType
{
	E_TAB_TYPE_ALL                                     = 0,
	E_TAB_TYPE_WHISPER                                 = 1,
	E_TAB_TYPE_CLAN                                    = 2,
	E_TAB_TYPE_MAX                                     = 3
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanAcceptErrorType
/*enum ClanAcceptErrorType
{
	ENNET_ClanAccept_NotSet                            = 0,
	ENNET_ClanAccept_Invalid_REQ                       = 1,
	ENNET_ClanAccept_Invalid_Clan                      = 2,
	ENNET_ClanAccept_AlreadyInClan                     = 3,
	ENNET_ClanAccept_Member_Is_Full                    = 4,
	ENNET_ClanAccept_Duplicate                         = 5,
	ENNET_ClanAccept_MAX                               = 6
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanSuggestErrorType
/*enum ClanSuggestErrorType
{
	ENNET_ClanSuggest_NotSet                           = 0,
	ENNET_ClanSuggest_Invalid_REQ                      = 1,
	ENNET_ClanSuggest_Duplicate                        = 2,
	ENNET_ClanSuggest_Invalid_User                     = 3,
	ENNET_ClanSuggest_AlreadyInClan                    = 4,
	ENNET_ClanSuggest_AuthLevel                        = 5,
	ENNET_ClanSuggest_OnPenalty                        = 6,
	ENNET_ClanSuggest_MAX                              = 7
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanBreakAwayErrorType
/*enum ClanBreakAwayErrorType
{
	ENNET_ClanBreakAway_NotSet                         = 0,
	ENNET_ClanBreakAway_Invalid_State                  = 1,
	ENNET_ClanBreakAway_Invalid_REQ                    = 2,
	ENNET_ClanBreakAway_Invalid_Operation              = 3,
	ENNET_ClanBreakAway_MAX                            = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanKickMemberErrorType
/*enum ClanKickMemberErrorType
{
	ENNET_ClanKick_NotSet                              = 0,
	ENNET_ClanKick_Invalid_REQ                         = 1,
	ENNET_ClanKick_Invalid_Auth_Level                  = 2,
	ENNET_ClanKick_Invalid_User                        = 3,
	ENNET_ClanKick_MAX                                 = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanNameErrorType
/*enum ClanNameErrorType
{
	ENNET_ClanName_NotSet                              = 0,
	ENNET_ClanName_InvalidLength                       = 1,
	ENNET_ClanName_HaveForbiddenWord                   = 2,
	ENNET_ClanName_UnableWord                          = 3,
	ENNET_ClanName_Duplicate                           = 4,
	ENNET_ClanName_ServerForbidden                     = 5,
	ENNET_ClanName_ConsecutivelyWord                   = 6,
	ENNET_ClanName_BadPassword                         = 7,
	ENNET_ClanName_OnPenalty                           = 8,
	ENNET_ClanName_RankNotQualified                    = 9,
	ENNET_ClanName_NotRequiredMoney                    = 10,
	ENNET_ClanName_MAX                                 = 11
};*/

// Enum CombatGame.OnlineSubsystemCombat.EMuteType
/*enum EMuteType
{
	MUTE_None                                          = 0,
	MUTE_AllButFriends                                 = 1,
	MUTE_All                                           = 2,
	MUTE_MAX                                           = 3
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanGradeChangeErrorType
/*enum ClanGradeChangeErrorType
{
	ENNET_ClanGradeChange_State                        = 0,
	ENNET_ClanGradeChange_FindTarget                   = 1,
	ENNET_ClanGradeChange_Permission                   = 2,
	ENNET_ClanGradeChange_Exists                       = 3,
	ENNET_ClanGradeChange_MAX                          = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanMasterDelegateErrorType
/*enum ClanMasterDelegateErrorType
{
	ENNET_ClanMasterDelegate_State                     = 0,
	ENNET_ClanMasterDelegate_FindTarget                = 1,
	ENNET_ClanMasterDelegate_Permission                = 2,
	ENNET_ClanMasterDelegate_MAX                       = 3
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanJoinRefuseErrorType
/*enum ClanJoinRefuseErrorType
{
	ENNET_ClanJoinRefuse_State                         = 0,
	ENNET_ClanJoinRefuse_Permission                    = 1,
	ENNET_ClanJoinRefuse_Invalid                       = 2,
	ENNET_ClanJoinRefuse_MAX                           = 3
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanJoinApproveErrorType
/*enum ClanJoinApproveErrorType
{
	ENNET_ClanJoinApprove_State                        = 0,
	ENNET_ClanJoinApprove_Invalid                      = 1,
	ENNET_ClanJoinApprove_Exists                       = 2,
	ENNET_ClanJoinApprove_OverMaxCount                 = 3,
	ENNET_ClanJoinApprove_MAX                          = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanJoinCancelErrorType
/*enum ClanJoinCancelErrorType
{
	ENNET_ClanJoinCancel_State                         = 0,
	ENNET_ClanJoinCancel_Invalid                       = 1,
	ENNET_ClanJoinCancel_MAX                           = 2
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanJoinApplyErrorType
/*enum ClanJoinApplyErrorType
{
	ENNET_ClanJoinApply_State                          = 0,
	ENNET_ClanJoinApply_Exists                         = 1,
	ENNET_ClanJoinApply_OverMaxCount                   = 2,
	ENNET_ClanJoinApply_Denied                         = 3,
	ENNET_ClanJoinApply_OnPenalty                      = 4,
	ENNET_ClanJoinApply_MAX                            = 5
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanShutDownErrorType
/*enum ClanShutDownErrorType
{
	ENNET_ClanShutDown_State                           = 0,
	ENNET_ClanShutDown_Permission                      = 1,
	ENNET_ClanShutDown_Operation                       = 2,
	ENNET_ClanShutDown_Password                        = 3,
	ENNET_ClanShutDown_MAX                             = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanFindErrorType
/*enum ClanFindErrorType
{
	ENNET_ClanFind_NotSet                              = 0,
	ENNET_ClanFind_NoTARGE                             = 1,
	ENNET_ClanFind_Close                               = 2,
	ENNET_ClanFind_MAX                                 = 3
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanHomePopupSetType
/*enum EClanHomePopupSetType
{
	E_TYPE_CLAN_NICK_NAME                              = 0,
	E_TYPE_CLAN_USERINFO                               = 1,
	E_TYPE_CLAN_ADD_FRIEND                             = 2,
	E_TYPE_CLAN_BREAK_AWAY                             = 3,
	E_TYPE_CLAN_KICK_AWAY                              = 4,
	E_TYPE_CLAN_GRADE_NAME                             = 5,
	E_TYPE_CLAN_MASTER                                 = 6,
	E_TYPE_CLAN_MANAGER                                = 7,
	E_TYPE_CALN_NORMAL                                 = 8,
	E_TYPE_CLAN_MAX                                    = 9,
	E_TYPE_MAX                                         = 10
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanHomeUserOffLineType
/*enum EClanHomeUserOffLineType
{
	E_TYPE_ONLINE                                      = 0,
	E_TYPE_OFFLine                                     = 1,
	E_TYPE_MAX                                         = 2
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanHomeUserDivisionType
/*enum EClanHomeUserDivisionType
{
	E_TYPE_CLAN_MEMBER_ME                              = 0,
	E_TYPE_CLAN_MEMBER_OTHER                           = 1,
	E_TYPE_CLAN_MEMBER_MAX                             = 2
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanHomeButtonType
/*enum EClanHomeButtonType
{
	E_TYPE_CLAN_NOTICE                                 = 0,
	E_TYPE_CALN_INTRODUCE                              = 1,
	E_TYPE_MAX                                         = 2
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanMatchTabType
/*enum EClanMatchTabType
{
	E_TYPE_CLAN_RECENTYLY                              = 0,
	E_TYPE_CLAN_RANKMATCH                              = 1,
	E_TYPE_CLAN_AMATCH                                 = 2,
	E_TYPE_CLAN_MAX                                    = 3
};*/

// Enum CombatGame.CombatFrontEnd_ClanJoinPopup.ClanPopupMode
/*enum ClanPopupMode
{
	CPM_InitPw                                         = 0,
	CPM_ChangePw                                       = 1,
	CPM_ShutdownPw                                     = 2,
	CPM_Join                                           = 3,
	CPM_Notice                                         = 4,
	CPM_Introduce                                      = 5,
	CPM_Max                                            = 6
};*/

// Enum CombatGame.CombatFrontEnd_ClanList.EClanListJoinType
/*enum EClanListJoinType
{
	E_TYPE_CLAN_HOLD                                   = 0,
	E_TYPE_CLAN_JOIN                                   = 1,
	E_TYPE_CLAN_CALCEL                                 = 2,
	E_TYPE_CLAN_MAX                                    = 3
};*/

// Enum CombatGame.CombatFrontEnd_ClanList.E_CLAN_LIST_WAY_BUTTON_TYPE
/*enum E_CLAN_LIST_WAY_BUTTON_TYPE
{
	E_CLAN_LIST_WAY_BUTTON_TYPE_PREV                   = 0,
	E_CLAN_LIST_WAY_BUTTON_TYPE_NEXT                   = 1,
	E_CLAN_LIST_WAY_BUTTON_TYPE_MAX                    = 2
};*/

// Enum CombatGame.CombatFrontEnd_Community.EMessengerUserStateType
/*enum EMessengerUserStateType
{
	MUSER_STATE_NONE                                   = 0,
	MUSER_STATE_OFFLINE                                = 1,
	MUSER_STATE_ONLINE                                 = 2,
	MUSER_STATE_PLAYING                                = 3,
	MUSER_STATE_AWAY                                   = 4,
	MUSER_STATE_MATCHROOM_WATING                       = 5,
	MUSER_STATE_MAX                                    = 6
};*/

// Enum CombatGame.CombatFrontEnd_Community.EMessengerPopupType
/*enum EMessengerPopupType
{
	MPOPUP_PLAYERINFO                                  = 0,
	MPOPUP_WHISPER                                     = 1,
	MPOPUP_FOLLOW                                      = 2,
	MPOPUP_INIVTE_TO_MATCHROOM                         = 3,
	MPOPUP_INIVTE_TO_MY_CLAN                           = 4,
	MPOPUP_DELETE                                      = 5,
	MPOPUP_BLOCK                                       = 6,
	MPOPUP_UNBLOCK                                     = 7,
	MPOPUP_FRIEND_REQUEST                              = 8,
	MPOPUP_MAX                                         = 9
};*/

// Enum CombatGame.CombatFrontEnd_Community.EMessengerListType
/*enum EMessengerListType
{
	MLIST_SUGGESTION                                   = 0,
	MLIST_FRIEND_ONLINE                                = 1,
	MLIST_FRIEND_OFFLINE                               = 2,
	MLIST_BLOCK                                        = 3,
	MLIST_CLAN_ONLINE                                  = 4,
	MLIST_CLAN_OFFLINE                                 = 5,
	MLIST_MAX                                          = 6
};*/

// Enum CombatGame.CombatFrontEnd_Community.EMessengerStateType
/*enum EMessengerStateType
{
	MESSENGER_STATE_FRIEND                             = 0,
	MESSENGER_STATE_CLAN                               = 1,
	MESSENGER_STATE_MAX                                = 2
};*/

// Enum CombatGame.CombatFrontEnd_Dashboard.EDashBoardPopupType
/*enum EDashBoardPopupType
{
	DBPOPUP_PLAYERINFO                                 = 0,
	DBPOPUP_CALLINGCARD                                = 1,
	DBPOPUP_MAX                                        = 2
};*/

// Enum CombatGame.CombatFrontEnd_Dashboard.EMyMoneyType
/*enum EMyMoneyType
{
	EMT_None                                           = 0,
	EMT_Point                                          = 1,
	EMT_Medal                                          = 2,
	EMT_BSCoin                                         = 3,
	EMT_Cash                                           = 4,
	EMT_HanCoin                                        = 5,
	EMT_Event                                          = 6,
	EMT_Bullet                                         = 7,
	EMT_MAX                                            = 8
};*/

// Enum CombatGame.CombatFrontEnd_Dashboard.EDashboardPosition
/*enum EDashboardPosition
{
	EDP_Top                                            = 0,
	EDP_Bottom                                         = 1,
	EDP_MAX                                            = 2
};*/

// Enum CombatGame.CombatFrontEnd_Event.EventPageTab
/*enum EventPageTab
{
	EEventPageTabe_AttendanceCheck                     = 0,
	EEventPageTabe_DailyMission                        = 1,
	EEventPageTabe_WeeklyMission                       = 2,
	EEventPageTabe_SpecialEvent                        = 3,
	EEventPageTabe_PCBangEvent                         = 4,
	EEventPageTabe_HiredSoldierEventTab                = 5,
	EEventPageTabe_AiEvent                             = 6,
	EEventPageTabe_Achievement                         = 7,
	EEventPageTabe_MAX                                 = 8
};*/

// Enum CombatGame.CombatFrontEnd_Exchange.EExchangeCoinType
/*enum EExchangeCoinType
{
	EExchangeCoinType_GCoin                            = 0,
	EExchangeCoinType_MCoin                            = 1,
	EExchangeCoinType_BSCoin                           = 2,
	EExchangeCoinType_MAX                              = 3
};*/

// Enum CombatGame.CombatFrontEnd_Exit.EQuestCountType
/*enum EQuestCountType
{
	EQCT_None                                          = 0,
	EQCT_Time                                          = 1,
	EQCT_MAX                                           = 2
};*/

// Enum CombatGame.CombatFrontEnd_Inventory.E_INVEN_ITEM_SET_TYPE
/*enum E_INVEN_ITEM_SET_TYPE
{
	E_INVEN_ITEM_SET_TYPE_CHECK                        = 0,
	E_INVEN_ITEM_SET_TYPE_PRESET                       = 1,
	E_INVEN_ITEM_SET_TYPE_REAL                         = 2,
	E_INVEN_ITEM_SET_TYPE_CONSUME                      = 3,
	E_INVEN_ITEM_SET_TYPE_MAX                          = 4
};*/

// Enum CombatGame.CombatFrontEnd_Inventory.E_INVEN_ITEM_BUTTON_TYPE
/*enum E_INVEN_ITEM_BUTTON_TYPE
{
	E_INVEN_ITEM_BUTTON_TYPE_PRESET                    = 0,
	E_INVEN_ITEM_BUTTON_TYPE_PRESET01                  = 1,
	E_INVEN_ITEM_BUTTON_TYPE_PRESET02                  = 2,
	E_INVEN_ITEM_BUTTON_TYPE_CHECK                     = 3,
	E_INVEN_ITEM_BUTTON_TYPE_REPAIR                    = 4,
	E_INVEN_ITEM_BUTTON_TYPE_SELL                      = 5,
	E_INVEN_ITEM_BUTTON_TYPE_USE                       = 6,
	E_INVEN_ITEM_BUTTON_TYPE_MAX                       = 7
};*/

// Enum CombatGame.CombatFrontEnd_Inventory.E_INVEN_ITEM_BUTTON_STATE_TYPE
/*enum E_INVEN_ITEM_BUTTON_STATE_TYPE
{
	E_INVEN_ITEM_BUTTON_STATE_TYPE_DEFAULT             = 0,
	E_INVEN_ITEM_BUTTON_STATE_TYPE_SELECTED            = 1,
	E_INVEN_ITEM_BUTTON_STATE_TYPE_DISABLED            = 2,
	E_INVEN_ITEM_BUTTON_STATE_TYPE_MAX                 = 3
};*/

// Enum CombatGame.CombatFrontEnd_Inventory.E_INVEN_ITEM_SORT_TYPE
/*enum E_INVEN_ITEM_SORT_TYPE
{
	E_INVEN_ITEM_SORT_TYPE_BASIC                       = 0,
	E_INVEN_ITEM_SORT_TYPE_EQUIP                       = 1,
	E_INVEN_ITEM_SORT_TYPE_NAME                        = 2,
	E_INVEN_ITEM_SORT_TYPE_KILL_COUNT                  = 3,
	E_INVEN_ITEM_SORT_TYPE_ITEM_GRADE                  = 4,
	E_INVEN_ITEM_SORT_TYPE_REMAIN_TIME                 = 5,
	E_INVEN_ITEM_SORT_TYPE_MAX                         = 6
};*/

// Enum CombatGame.CombatFrontEnd_ToolTip.EWeaponTooltip
/*enum EWeaponTooltip
{
	EWT_ACCURACY                                       = 0,
	EWT_DAMAGE                                         = 1,
	EWT_RANGE                                          = 2,
	EWT_FIREPOWER                                      = 3,
	EWT_STABILITY                                      = 4,
	EWT_AMMO                                           = 5,
	EWT_MAX                                            = 6
};*/

// Enum CombatGame.CombatFrontEnd_ToolTip.EClthesChipToolTip
/*enum EClthesChipToolTip
{
	ECCT_RAPID_RELOAD                                  = 0,
	ECCT_QUICK_CHANGE                                  = 1,
	ECCT_ADD_MAIN_AMMO                                 = 2,
	ECCT_ADD_SUB_AMMO                                  = 3,
	ECCT_MAX_HEALTH                                    = 4,
	ECCT_MAX_HEALTH_CURE_RATE                          = 5,
	ECCT_MAX_AUTO_CURE_HEALTH                          = 6,
	ECCT_GROUND_TPS_SPEED_RATE                         = 7,
	ECCT_GROUND_FPS_SPEED_RATE                         = 8,
	ECCT_GROUND_CROUCH_SPEED_RATE                      = 9,
	ECCT_GROUND_ACCELATION_SPEED_RATE                  = 10,
	ECCT_SPRINT_SPEED_RAGE                             = 11,
	ECCT_GUN_DAMAGE_RATE                               = 12,
	ECCT_GUN_GUARD_RATE                                = 13,
	ECCT_MELEE_DAMAGE_RATE                             = 14,
	ECCT_MELLE_GUARD_RATE                              = 15,
	ECCT_EXPLOSIVE_ATTACK_DAMAGE_RATE                  = 16,
	ECCT_EXPLOSIVE_ATTACK_GUARD_RATE                   = 17,
	ECCT_RADER_DETAIL_DISTANCE                         = 18,
	ECCT_RAGER_RANGE                                   = 19,
	ECCT_MAX                                           = 20
};*/

// Enum CombatGame.CombatFrontEnd_Login.ELoginTextInputError
/*enum ELoginTextInputError
{
	ELOGIN_ERROR_ID_NULL                               = 0,
	ELOGIN_ERROR_PW_NULL                               = 1,
	ELOGIN_ERROR_MAX                                   = 2
};*/

// Enum CombatGame.CombatFrontEnd_MainLobby.E_MAIN_LOBBY_SORT_BUTTON_TYPE
/*enum E_MAIN_LOBBY_SORT_BUTTON_TYPE
{
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_NO                   = 0,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_TITLE                = 1,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_MODE                 = 2,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_MAP                  = 3,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_PERSONS              = 4,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_STATE                = 5,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_MAX                  = 6
};*/

// Enum CombatGame.CombatFrontEnd_MainLobby.E_MAIN_LOBBY_ROOM_BUTTON_TYPE
/*enum E_MAIN_LOBBY_ROOM_BUTTON_TYPE
{
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_MAKE                 = 0,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_PRACTICE             = 1,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_JOIN                 = 2,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_ENROLLMENT           = 3,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_QUICK_MATCH          = 4,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_MAX                  = 5
};*/

// Enum CombatGame.CombatFrontEnd_MainLobby.E_MAIN_LOBBY_LAY_OUT_TYPE
/*enum E_MAIN_LOBBY_LAY_OUT_TYPE
{
	E_MAIN_LOBBY_LAY_OUT_TYPE_DEFAULT                  = 0,
	E_MAIN_LOBBY_LAY_OUT_TYPE_QUICK_MATCH              = 1,
	E_MAIN_LOBBY_LAY_OUT_TYPE_COMPENTITION_MATCH       = 2,
	E_MAIN_LOBBY_LAY_OUT_TYPE_MAX                      = 3
};*/

// Enum CombatGame.CombatFrontEnd_MainLobby.E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE
/*enum E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE
{
	E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE_WAITING         = 0,
	E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE_PLAYING         = 1,
	E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE_MAX             = 2
};*/

// Enum CombatGame.CombatLobbyTransaction.E_UPDATE_MATCHROOM_TYPE
/*enum E_UPDATE_MATCHROOM_TYPE
{
	E_UPDATE_MATCHROOM_TYPE_ADD                        = 0,
	E_UPDATE_MATCHROOM_TYPE_DELETE                     = 1,
	E_UPDATE_MATCHROOM_TYPE_UPDATE                     = 2,
	E_UPDATE_MATCHROOM_TYPE_MAX                        = 3
};*/

// Enum CombatGame.CombatFrontEnd_MakeRoom.EMakeRoomButton
/*enum EMakeRoomButton
{
	E_MR_BTN_CANCEL                                    = 0,
	E_MR_BTN_CHANGE                                    = 1,
	E_MR_BTN_COMPLETE                                  = 2,
	E_MR_BTN_TOTAL                                     = 3,
	E_MR_BTN_LARGE                                     = 4,
	E_MR_BTN_MEDIUM                                    = 5,
	E_MR_BTN_SMALL                                     = 6,
	E_MR_BTN_MAX                                       = 7
};*/

// Enum CombatGame.CombatFrontEnd_MakeRoom.EMakeRoomScene
/*enum EMakeRoomScene
{
	ESCENE_SETUP_MODE                                  = 0,
	ESCENE_SETUP_MAP                                   = 1,
	ESCENE_SETUP_MAX                                   = 2
};*/

// Enum CombatGame.CombatFrontEnd_MakeRoom.EMakeRoomMode
/*enum EMakeRoomMode
{
	EMODE_CREATE                                       = 0,
	EMODE_CHANGE                                       = 1,
	EMODE_PRACTICE                                     = 2,
	EMODE_MAX                                          = 3
};*/

// Enum CombatGame.CombatFrontEnd_MakeRoom.EPassWord
/*enum EPassWord
{
	E_PASSWORD_TRUE                                    = 0,
	E_PASSWORD_FALSE                                   = 1,
	E_PASSWORD_MAX                                     = 2
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.EMatchroomButton
/*enum EMatchroomButton
{
	EMB_TeamSwap                                       = 0,
	EMB_Change                                         = 1,
	EMB_KickUser                                       = 2,
	EMB_Watch                                          = 3,
	EMB_Invitation                                     = 4,
	EMB_Ready                                          = 5,
	EMB_MODEMAP                                        = 6,
	EMB_MAX                                            = 7
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.EAutoMatchState
/*enum EAutoMatchState
{
	EMS_Compose                                        = 0,
	EMS_StartPossible                                  = 1,
	EMS_TeamSearch                                     = 2,
	EMS_MAX                                            = 3
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.EMatchInfo
/*enum EMatchInfo
{
	EMI_NormalMatch                                    = 0,
	EMI_AutoMatch                                      = 1,
	EMI_AiMatch                                        = 2,
	EMI_MAX                                            = 3
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.ETeamIndex
/*enum ETeamIndex
{
	ETI_VcVsPm                                         = 0,
	ETI_PmVsVc                                         = 1,
	ETI_MAX                                            = 2
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.EReadyButtonType
/*enum EReadyButtonType
{
	ERBT_Ready                                         = 0,
	ERBT_UnReady                                       = 1,
	ERBT_Intrude                                       = 2,
	ERBT_Start                                         = 3,
	ERBT_Abort                                         = 4,
	ERBT_MAX                                           = 5
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.ERClickPopupMenu
/*enum ERClickPopupMenu
{
	E_RCPM_USERINFO                                    = 0,
	E_RCPM_WHISPER                                     = 1,
	E_RCPM_ADDFRIEND                                   = 2,
	E_RCPM_INVITE                                      = 3,
	E_RCPM_INVITE_TO_MY_CLAN                           = 4,
	E_RCPM_BLOCK                                       = 5,
	E_RCPM_CHANGEHOST                                  = 6,
	E_RCPM_KICK                                        = 7,
	E_RCPM_MAX                                         = 8
};*/

// Enum CombatGame.CombatFrontEnd_PlayerInfoPage.EPlayStats
/*enum EPlayStats
{
	E_PI_PS_RANK                                       = 0,
	E_PI_PS_TOTALPLAYTIME                              = 1,
	E_PI_PS_EXPERIENCE                                 = 2,
	E_PI_PS_ALLCAREER                                  = 3,
	E_PI_PS_KAD                                        = 4,
	E_PI_PS_KADRATIO                                   = 5,
	E_PI_PS_HEADSHOT                                   = 6,
	E_PI_PS_FATALSHOT                                  = 7,
	E_PI_PS_CLAN_CAREER                                = 8,
	E_PI_PS_CLAN_KAD                                   = 9,
	E_PI_PS_CLAN_RANKINGPOINT                          = 10,
	E_PI_PS_MAX                                        = 11
};*/

// Enum CombatGame.CombatFrontEnd_PlayerInfoPage.EClanStats
/*enum EClanStats
{
	E_PI_CS_RECORD                                     = 0,
	E_PI_CS_KAD                                        = 1,
	E_PI_CS_KADRATIO                                   = 2,
	E_PI_CS_HEADSHOT                                   = 3,
	E_PI_CS_FOREHEADSHOT                               = 4,
	E_PI_CS_MATCHRECORD_TITLE                          = 5,
	E_PI_CS_MATCHRECORD_SUMMARY                        = 6,
	E_PI_CS_MATCHRECORD_ITEM                           = 7,
	E_PI_CS_MAX                                        = 8
};*/

// Enum CombatGame.CombatFrontEnd_QuickStart.EQStartDropDown
/*enum EQStartDropDown
{
	E_QS_DDN_MISSIONS                                  = 0,
	E_QS_DDN_MODES                                     = 1,
	E_QS_DDN_MAPS                                      = 2,
	E_QS_DDN_STATUS                                    = 3,
	E_QS_DDN_PLAYERS                                   = 4,
	E_QS_DDN_MAX                                       = 5
};*/

// Enum CombatGame.CombatFrontEnd_QuickStart.EQStartButton
/*enum EQStartButton
{
	E_QS_BTN_CANCEL                                    = 0,
	E_QS_BTN_SAVEANDCLOSE                              = 1,
	E_QS_BTN_SAVEANDSTART                              = 2,
	E_QS_BTN_MAX                                       = 3
};*/

// Enum CombatGame.CombatFrontEnd_RandomBox.RandomBoxActionState
/*enum RandomBoxActionState
{
	E_RndBoxAct_MakeCard                               = 0,
	E_RndBoxAct_CardFaceUp                             = 1,
	E_RndBoxAct_CardAutoFaceUp                         = 2,
	E_RndBoxAct_AllCardOpened                          = 3,
	E_RndBoxAct_Finished                               = 4,
	E_RndBoxAct_MAX                                    = 5
};*/

// Enum CombatGame.CombatFrontEnd_Sort.E_INVENTORY_SORT_LIST_TYPE
/*enum E_INVENTORY_SORT_LIST_TYPE
{
	E_INVENTORY_SORT_LIST_TYPE_EQUIP                   = 0,
	E_INVENTORY_SORT_LIST_TYPE_NAME                    = 1,
	E_INVENTORY_SORT_LIST_TYPE_KILL                    = 2,
	E_INVENTORY_SORT_LIST_TYPE_GRADE                   = 3,
	E_INVENTORY_SORT_LIST_TYPE_TIME                    = 4,
	E_INVENTORY_SORT_LIST_TYPE_MAX                     = 5
};*/

// Enum CombatGame.CombatFrontEnd_Sort.E_BUTTON_SELECT_TYPE
/*enum E_BUTTON_SELECT_TYPE
{
	E_BUTTON_SELECT_TYPE_ASCEND                        = 0,
	E_BUTTON_SELECT_TYPE_DESCEND                       = 1,
	E_BUTTON_SELECT_TYPE_MAX                           = 2
};*/

// Enum CombatGame.CombatMailTransaction.E_MAIL_MONEY_TYPE
/*enum E_MAIL_MONEY_TYPE
{
	E_MAIL_MONEY_TYPE_GOLD                             = 0,
	E_MAIL_MONEY_TYPE_MEDAL                            = 1,
	E_MAIL_MONEY_TYPE_GCOIN                            = 2,
	E_MAIL_MONEY_TYPE_MCOIN                            = 3,
	E_MAIL_MONEY_TYPE_BSOIN                            = 4,
	E_MAIL_MONEY_TYPE_MAX                              = 5
};*/

// Enum CombatGame.CombatFrontEnd_Storage.E_STORAGE_BUTTON_TYPE
/*enum E_STORAGE_BUTTON_TYPE
{
	E_STORAGE_BUTTON_TYPE_STORAGE                      = 0,
	E_STORAGE_BUTTON_TYPE_GIFT                         = 1,
	E_STORAGE_BUTTON_TYPE_PREV                         = 2,
	E_STORAGE_BUTTON_TYPE_NEXT                         = 3,
	E_STORAGE_BUTTON_TYPE_RECEIVE                      = 4,
	E_STORAGE_BUTTON_TYPE_DELMSG                       = 5,
	E_STORAGE_BUTTON_TYPE_ALLRECEIVE                   = 6,
	E_STORAGE_BUTTON_TYPE_SELECTEDRECEIVE              = 7,
	E_STORAGE_BUTTON_TYPE_ALLCHECK                     = 8,
	E_STORAGE_BUTTON_TYPE_MAX                          = 9
};*/

// Enum CombatGame.CombatFrontEnd_Storage.E_STORAGE_CHECK_BOX_STATE
/*enum E_STORAGE_CHECK_BOX_STATE
{
	E_STORAGE_CHECK_BOX_STATE_UNCHECK                  = 0,
	E_STORAGE_CHECK_BOX_STATE_CHECK                    = 1,
	E_STORAGE_CHECK_BOX_STATE_DISABLED                 = 2,
	E_STORAGE_CHECK_BOX_STATE_MAX                      = 3
};*/

// Enum CombatGame.CombatFrontEndPC.FE_ZoomState
/*enum FE_ZoomState
{
	FEZoom_In                                          = 0,
	FEZoom_Out                                         = 1,
	FEZoom_MAX                                         = 2
};*/

// Enum CombatGame.CombatGameTableDepot.RefTableType
/*enum RefTableType
{
	ERTT_Map                                           = 0,
	ERTT_Mode                                          = 1,
	ERTT_ModeOption                                    = 2,
	ERTT_Mission                                       = 3,
	ERTT_ModeMap                                       = 4,
	ERTT_ModeGroupBindMode                             = 5,
	ERTT_Exp                                           = 6,
	ERTT_BasicChat                                     = 7,
	ERTT_Preset                                        = 8,
	ERTT_InitItem                                      = 9,
	ERTT_SteamItem                                     = 10,
	ERTT_Item                                          = 11,
	ERTT_Scoring                                       = 12,
	ERTT_Achievement                                   = 13,
	ERTT_StatGroup                                     = 14,
	ERTT_Pickup                                        = 15,
	ERTT_Drop                                          = 16,
	ERTT_MailForm                                      = 17,
	ERTT_Skill                                         = 18,
	ERTT_SkillLICENSE                                  = 19,
	ERTT_RankUp                                        = 20,
	ERTT_Rank                                          = 21,
	ERTT_ItemDetailinfo                                = 22,
	ERTT_Shop                                          = 23,
	ERTT_ShopTab                                       = 24,
	ERTT_ShopCategory                                  = 25,
	ERTT_ShopItem                                      = 26,
	ERTT_ShopValue                                     = 27,
	ERTT_Filter                                        = 28,
	ERTT_CallingCard                                   = 29,
	ERTT_Gear                                          = 30,
	ERTT_Emblem                                        = 31,
	ERTT_Quest                                         = 32,
	ERTT_BoosterItem                                   = 33,
	ERTT_HelpTab                                       = 34,
	ERTT_HelpTabDetailInfo                             = 35,
	ERTT_ModeGroup                                     = 36,
	ERTT_SystemImage                                   = 37,
	ERTT_GameServer                                    = 38,
	ERTT_GameChannel                                   = 39,
	ERTT_GameChannelProperty                           = 40,
	ERTT_RoomName                                      = 41,
	ERTT_Stat                                          = 42,
	ERTT_Reward                                        = 43,
	ERTT_ModeGuide                                     = 44,
	ERTT_FrontEndMode                                  = 45,
	ERTT_ModeTip                                       = 46,
	ERTT_BGM                                           = 47,
	ERTT_Attend                                        = 48,
	ERTT_REGION                                        = 49,
	ERTT_Define                                        = 50,
	ERTT_ClanExp                                       = 51,
	ERTT_RandomBox                                     = 52,
	ERTT_CubeBox                                       = 53,
	ERTT_RandomBoxCost                                 = 54,
	ERTT_ImagePath                                     = 55,
	ERTT_ResultReward                                  = 56,
	ERTT_Crosshair                                     = 57,
	ERTT_KillCombo                                     = 58,
	ERTT_AIRewardRank                                  = 59,
	ERTT_TypeDefine                                    = 60,
	ERTT_ShopSellItem                                  = 61,
	ERTT_ClanSection                                   = 62,
	ERTT_PickUpDisplay                                 = 63,
	ERTT_MoneyDisplay                                  = 64,
	ERTT_MatchMaking                                   = 65,
	ERTT_ExchangeCash                                  = 66,
	ERTT_SystemTextColor                               = 67,
	ERTT_LimitSale                                     = 68,
	ERTT_MailCategory                                  = 69,
	ERTT_Tier                                          = 70,
	ERTT_Penalty                                       = 71,
	ERTT_PenaltyBind                                   = 72,
	ERTT_Formula                                       = 73,
	ERTT_TodayGame                                     = 74,
	ERTT_TodayGameBindMode                             = 75,
	ERTT_ItemUnLockRecipe                              = 76,
	ERTT_TierSeason                                    = 77,
	ERTT_MAX                                           = 78
};*/

// Enum CombatGame.CombatHostageActor.HostageAnimType
/*enum HostageAnimType
{
	EHAT_Captivity                                     = 0,
	EHAT_Moving                                        = 1,
	EHAT_Groggy                                        = 2,
	EHAT_Waiting                                       = 3,
	EHAT_MAX                                           = 4
};*/

// Enum CombatGame.CombatHUDEntity_Base.EActivateType
/*enum EActivateType
{
	EAT_Ignore                                         = 0,
	EAT_Show                                           = 1,
	EAT_Hide                                           = 2,
	EAT_Custom                                         = 3,
	EAT_MAX                                            = 4
};*/

// Enum CombatGame.CombatHUD_ObserverInfo.E_HUDMode
/*enum E_HUDMode
{
	EHUD_NORMAL                                        = 0,
	EHUD_COMPETITIVE                                   = 1,
	EHUD_MAX                                           = 2
};*/

// Enum CombatGame.CombatHUD_RoundStatusBar.E_TIMER_STATE_TYPE
/*enum E_TIMER_STATE_TYPE
{
	E_TIMER_STATE_TYPE_OFF                             = 0,
	E_TIMER_STATE_TYPE_ON                              = 1,
	E_TIMER_STATE_TYPE_WAIT                            = 2,
	E_TIMER_STATE_TYPE_MAX                             = 3
};*/

// Enum CombatGame.CombatInGameBattleLog.EKillType
/*enum EKillType
{
	EKT_NORMAL                                         = 0,
	EKT_KILL                                           = 1,
	EKT_DEAD                                           = 2,
	EKT_MAX                                            = 3
};*/

// Enum CombatGame.CombatInGameOptionMenu.EMenuType
/*enum EMenuType
{
	E_MENU_TYPE_BACK                                   = 0,
	E_MENU_TYPE_VOICE_CHAT                             = 1,
	E_MENU_TYPE_OPTION                                 = 2,
	E_MENU_TYPE_BLOCKANDREPORT                         = 3,
	E_MENU_TYPE_SURRENDER                              = 4,
	E_MENU_TYPE_RETURNTOMATCHROOM                      = 5,
	E_MENU_TYPE_MAX                                    = 6
};*/

// Enum CombatGame.CombatItemFXBase.EItemFXView
/*enum EItemFXView
{
	EItemFXView_1P                                     = 0,
	EItemFXView_3P                                     = 1,
	EItemFXView_MAX                                    = 2
};*/

// Enum CombatGame.CombatLocalPlayer.eCombatPostProcess
/*enum eCombatPostProcess
{
	CBPP_NONE                                          = 0,
	CBPP_EXPOSED                                       = 1,
	CBPP_FLASHBANG                                     = 2,
	CBPP_WARMUP                                        = 3,
	CBPP_COUNTDOWN                                     = 4,
	CBPP_ROUND_WIN                                     = 5,
	CBPP_ROUND_OVER                                    = 6,
	CBPP_ROUND_LOSE                                    = 7,
	CBPP_MATCH_OVER_WIN                                = 8,
	CBPP_MATCH_OVER_LOSE                               = 9,
	CBPP_MAX                                           = 10
};*/

// Enum CombatGame.CombatLuaSystem.CombatLuaSystemCallback
/*enum CombatLuaSystemCallback
{
	E_LUA_STAT_UPDATE                                  = 0,
	E_LUA_ACHIEVEMENT_CHECK                            = 1,
	E_LUA_DISPLAY_AWARD                                = 2,
	E_LUA_PROGRESS_UPDATED                             = 3,
	E_LUA_POST_DISPLAY_AWARD                           = 4,
	E_LUA_REQUEST_PROGRESS                             = 5,
	E_LUA_MAX                                          = 6
};*/

// Enum CombatGame.CombatMain_Base.E_PLAY_SOUND_TYPE
/*enum E_PLAY_SOUND_TYPE
{
	E_PLAY_SOUND_TYPE_ESC_POPUP                        = 0,
	E_PLAY_SOUND_TYPE_MAX                              = 1
};*/

// Enum CombatGame.CombatMain_Base.E_SYSTEM_COUNTER_POSITION_TYPE
/*enum E_SYSTEM_COUNTER_POSITION_TYPE
{
	E_SYSTEM_COUNTER_POSITION_TYPE_TOP_LEFT            = 0,
	E_SYSTEM_COUNTER_POSITION_TYPE_TOP_RIGHT           = 1,
	E_SYSTEM_COUNTER_POSITION_TYPE_BOTTOM_RIGHT        = 2,
	E_SYSTEM_COUNTER_POSITION_TYPE_BOTTOM_LEFT         = 3,
	E_SYSTEM_COUNTER_POSITION_TYPE_MAX                 = 4
};*/

// Enum CombatGame.CombatMeshBuilder.EMeshGroup
/*enum EMeshGroup
{
	MESHGROUP_NONE                                     = 0,
	MESHGROUP_WEAPON_1STVIEW                           = 1,
	MESHGROUP_WEAPON_3RDVIEW                           = 2,
	MESHGROUP_MAX                                      = 3
};*/

// Enum CombatGame.CombatMeshBuilder.EMeshCompositionType
/*enum EMeshCompositionType
{
	MESHCOMPOSITIONTYPE_COMPONENT                      = 0,
	MESHCOMPOSITIONTYPE_MERGE                          = 1,
	MESHCOMPOSITIONTYPE_MAX                            = 2
};*/

// Enum CombatGame.CombatOccupiedAreaVolume.EOccupyState
/*enum EOccupyState
{
	EOS_Unoccupied                                     = 0,
	EOS_Battling                                       = 1,
	EOS_Occupying                                      = 2,
	EOS_Occupied                                       = 3,
	EOS_MAX                                            = 4
};*/

// Enum CombatGame.CombatPawn_FlyingVehicle.DamageEffectStep
/*enum DamageEffectStep
{
	DamageEffectStep_None                              = 0,
	DamageEffectStep_Damage                            = 1,
	DamageEffectStep_Explosion                         = 2,
	DamageEffectStep_MAX                               = 3
};*/

// Enum CombatGame.CombatPawn_TrophyTurret.ETrophyState
/*enum ETrophyState
{
	TrophyState_Idle                                   = 0,
	TrophyState_Aimming                                = 1,
	TrophyState_AimmingComplete                        = 2,
	TrophyState_MAX                                    = 3
};*/

// Enum CombatGame.CombatRSCGameReplicationInfo.SceneType
/*enum SceneType
{
	eSCENE_Waiting                                     = 0,
	eSCENE_Moving                                      = 1,
	eSCENE_LastScene                                   = 2,
	eSCENE_MAX                                         = 3
};*/

// Enum CombatGame.CombatSteamAchivementManager.ESteamAchievements
/*enum ESteamAchievements
{
	ESA_NewBeginning                                   = 0,
	ESA_SeniorSoldier                                  = 1,
	ESA_Officer                                        = 2,
	ESA_SeniorOfficer                                  = 3,
	ESA_HigherOfficer                                  = 4,
	ESA_FieldOfficer                                   = 5,
	ESA_ShiningStar                                    = 6,
	ESA_BlackSquad                                     = 7,
	ESA_BestSniper                                     = 8,
	ESA_SeniorSniper                                   = 9,
	ESA_SniperMaster                                   = 10,
	ESA_WarVeteran                                     = 11,
	ESA_MassDestruction                                = 12,
	ESA_OneManArmy                                     = 13,
	ESA_Slaughterer                                    = 14,
	ESA_Samurai                                        = 15,
	ESA_GoodMelee                                      = 16,
	ESA_PlayTime                                       = 17,
	ESA_WinnerI                                        = 18,
	ESA_WinnerII                                       = 19,
	ESA_WinnerIII                                      = 20,
	ESA_FirstBlood                                     = 21,
	ESA_BombDefusal                                    = 22,
	ESA_LastMan                                        = 23,
	ESA_Terminator                                     = 24,
	ESA_POTG                                           = 25,
	ESA_SuicideSquad                                   = 26,
	ESA_ClanMember                                     = 27,
	ESA_FirstClanMatch                                 = 28,
	ESA_ItemPurchase                                   = 29,
	ESA_theBoss                                        = 30,
	ESA_LuckyDay                                       = 31,
	ESA_ItemDelivery                                   = 32,
	ESA_GoodFriends                                    = 33,
	ESA_PartyTime                                      = 34,
	ESA_Destroyer                                      = 35,
	ESA_MAX                                            = 36
};*/

// Enum CombatGame.CombatTrigger_Bomb.EBombIndicatorState
/*enum EBombIndicatorState
{
	EBIS_Default                                       = 0,
	EBIS_Planted                                       = 1,
	EBIS_Explode                                       = 2,
	EBIS_Defused                                       = 3,
	EBIS_MAX                                           = 4
};*/

// Enum CombatGame.CombatTrigger_Bomb.EBombTickState
/*enum EBombTickState
{
	EBTS_Tic                                           = 0,
	EBTS_Tac                                           = 1,
	EBTS_MAX                                           = 2
};*/

// Enum CombatGame.CombatTutorialLevelObject.Tutorial_LO_Type
/*enum Tutorial_LO_Type
{
	TLOT_Target                                        = 0,
	TLOT_Waypoint                                      = 1,
	TLOT_MAX                                           = 2
};*/

// Enum CombatGame.CombatVoiceChatUserList.VOICE_CHAT_STATE
/*enum VOICE_CHAT_STATE
{
	EVS_DISABLE                                        = 0,
	EVS_ON                                             = 1,
	EVS_TALK                                           = 2,
	EVS_OFF                                            = 3,
	EVS_MAX                                            = 4
};*/

// Enum CombatGame.CombatWeapon.EBoneGimmickType
/*enum EBoneGimmickType
{
	E_BG_None                                          = 0,
	E_BG_BulletBelt                                    = 1,
	E_BG_Reverse_BulletBelt                            = 2,
	E_BG_Revolver                                      = 3,
	E_BG_MAX                                           = 4
};*/

// Enum CombatGame.CombatWeapon.EBloodTexOnWeaponStatus
/*enum EBloodTexOnWeaponStatus
{
	E_Blood_Tex_None                                   = 0,
	E_Blood_Tex_Start                                  = 1,
	E_Blood_Tex_First                                  = 2,
	E_Blood_Tex_Next                                   = 3,
	E_Blood_Tex_Random                                 = 4,
	E_Blood_Tex_Duration                               = 5,
	E_Blood_Tex_FadeOut                                = 6,
	E_Blood_Tex_Finish                                 = 7,
	E_Blood_Tex_MAX                                    = 8
};*/

// Enum CombatGame.CombatWeapon.EAltFireBlockStatus
/*enum EAltFireBlockStatus
{
	EAltFireBlock_WeaponEquipping                      = 0,
	EAltFireBlock_NotZoomToZoomLev1                    = 1,
	EAltFireBlock_ZoomLev1ToZoomLev2                   = 2,
	EAltFireBlock_ZoomLev1ToNotZoom                    = 3,
	EAltFireBlock_ZoomLev2ToNotZoom                    = 4,
	EAltFireBlock_MAX                                  = 5
};*/

// Enum CombatGame.CombatWeapon.MovingSkelControlType
/*enum MovingSkelControlType
{
	FW                                                 = 0,
	BW                                                 = 1,
	TR_LT                                              = 2,
	TR_RT                                              = 3,
	MovingSkelControlType_MAX                          = 4
};*/

// Enum CombatGame.CombatWeapon.RecoilYawSkelControlType
/*enum RecoilYawSkelControlType
{
	LT                                                 = 0,
	RT                                                 = 1,
	RecoilYawSkelControlType_MAX                       = 2
};*/

// Enum CombatGame.CombatWeapon.RecoilPitchSkelControlType
/*enum RecoilPitchSkelControlType
{
	Up                                                 = 0,
	DN                                                 = 1,
	RecoilPitchSkelControlType_MAX                     = 2
};*/

// Enum CombatGame.CombatWeapon.EFirstRecoilDir
/*enum EFirstRecoilDir
{
	E_Recolil_Random                                   = 0,
	E_Recolil_Left_Dir                                 = 1,
	E_Recolil_Right_Dir                                = 2,
	E_Recolil_MAX                                      = 3
};*/

// Enum CombatGame.GamePlayEvent_Kill.EKillTargetType
/*enum EKillTargetType
{
	EKillType_Player                                   = 0,
	EKillType_AIPawn                                   = 1,
	EKillType_Suicide                                  = 2,
	EKillType_MAX                                      = 3
};*/

// Enum CombatGame.ParticleModuleKillVolume.ParticleKillVolumeType
/*enum ParticleKillVolumeType
{
	ParticleKillVolumeType_None                        = 0,
	ParticleKillVolumeType_Height                      = 1,
	ParticleKillVolumeType_AABB                        = 2,
	ParticleKillVolumeType_MAX                         = 3
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class CombatGame.ActorFactoryCombatWeapAttachMeshActor
// 0x0010 (0x00C4 - 0x00B4)
class UActorFactoryCombatWeapAttachMeshActor : public UActorFactorySkeletalMesh
{
public:
	struct FString                                     DefaultSkeletalMesh;                              		// 0x00B4 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1491 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatWeapAttachMeshActor::pClassPointer = NULL;

// Class CombatGame.AIBeacon
// 0x0018 (0x0354 - 0x033C)
class AAIBeacon : public ANavigationPoint
{
public:
	unsigned char                                      EnableAITypeIndex;                                		// 0x033C (0x0001) [0x0000000000000000]              
	unsigned char                                      EnableTeamIndex;                                  		// 0x033D (0x0001) [0x0000000000000000]              
	int                                                EnableMaxClaim;                                   		// 0x0340 (0x0004) [0x0000000000000000]              
	TArray< class ACombatBotController* >              ClaimAIArray;                                     		// 0x0344 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1492 ];

		return pClassPointer;
	};

	void RefreshClaim ( );
	void UnClaim ( );
	void Claim ( );
	void IsUsable ( );
	void GetCurClaimNumber ( );
	void IsVaildTeam ( );
	void Reset ( );
};

UClass* AAIBeacon::pClassPointer = NULL;

// Class CombatGame.AIDebugCameraHUD
// 0x0018 (0x0580 - 0x0568)
class AAIDebugCameraHUD : public ADebugCameraHUD
{
public:
	int                                                CrossHairLength;                                  		// 0x0568 (0x0004) [0x0000000000000000]              
	TArray< class ALadderVolume* >                     LadderVolumeArray;                                		// 0x056C (0x0010) [0x0000000000000000]              
	unsigned long                                      bInit : 1;                                        		// 0x057C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1493 ];

		return pClassPointer;
	};

	void eventPostRender ( );
	void DrawActorText ( );
	void DrawGripHUD ( );
};

UClass* AAIDebugCameraHUD::pClassPointer = NULL;

// Class CombatGame.AISpawnPoint
// 0x0010 (0x034C - 0x033C)
class AAISpawnPoint : public ANavigationPoint
{
public:
	unsigned char                                      TeamIndex;                                        		// 0x033C (0x0001) [0x0000000000000000]              
	struct FColor                                      TeamColor[ 0x3 ];                                 		// 0x0340 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1494 ];

		return pClassPointer;
	};

};

UClass* AAISpawnPoint::pClassPointer = NULL;

// Class CombatGame.CBCheatManager
// 0x009C (0x0338 - 0x029C)
class ACBCheatManager : public AGripCheatManager
{
public:
	class UCombatGameTableDepot*                       TableDepot;                                       		// 0x029C (0x0008) [0x0000000000000000]              
	TArray< struct FDSConnectionDelayInfo >            DSConnectionDelay;                                		// 0x02A4 (0x0010) [0x0000000000000000]              
	float                                              CameraRollSpeed;                                  		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              CameraRollAcceleration;                           		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              CameraRollFriction;                               		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              CurrentCamRollAcceleration;                       		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              CurrentCamRollSpeed;                              		// 0x02C4 (0x0004) [0x0000000000000000]              
	struct FFontRenderInfo                             FontInfo;                                         		// 0x02C8 (0x0028) [0x0000000000000000]              
	unsigned long                                      bShowMyPawnAnimNodeSeq : 1;                       		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowOtherPawnAnimNodeSeq : 1;                    		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowDebugOtherPawn : 1;                          		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowWeaponAnimNodeSeq : 1;                       		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowWeapAttachAnimNodeSeq : 1;                   		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowFirstZoomAnimNodeSeq : 1;                    		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowPawnBuff : 1;                                		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDisplayClassSystemLog : 1;                       		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDebugSoundMode : 1;                              		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bScreenShotMode : 1;                              		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bSwitchObjectuse : 1;                             		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bWeaponAsyncLoadedActor : 1;                      		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDrawArcAttackLine : 1;                           		// 0x02F0 (0x0004) [0x0000000000000000] [0x00001000] 
	struct FName                                       PawnBoneName;                                     		// 0x02F4 (0x0008) [0x0000000000000000]              
	TArray< struct FName >                             CameraTypeList;                                   		// 0x02FC (0x0010) [0x0000000000000000]              
	class UClass*                                      TestProjectileClass;                              		// 0x030C (0x0008) [0x0000000000000000]              
	float                                              TestProjectileRadius;                             		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              TestProjectileHeight;                             		// 0x0318 (0x0004) [0x0000000000000000]              
	unsigned char                                      TestProjectileNum;                                		// 0x031C (0x0001) [0x0000000000000000]              
	unsigned char                                      TestProjectileTeamNum;                            		// 0x031D (0x0001) [0x0000000000000000]              
	float                                              TestProjectileDelay;                              		// 0x0320 (0x0004) [0x0000000000000000]              
	struct FVector                                     TestProjectileDestination;                        		// 0x0324 (0x000C) [0x0000000000000000]              
	class UCombatStatUnitTest*                         StatUnitTest;                                     		// 0x0330 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1495 ];

		return pClassPointer;
	};

	void ResetVoiceMeterEnergyValue ( );
	void SetVoiceMeterEnergyValue ( );
	void GetPCTeamNum ( );
	void VivoxSetParticipantAudioOutputDeviceVolumeForMe ( );
	void VivoxSetParticipantMutedForMe ( );
	void VivoxCombineLogin ( );
	void VivoxSetAudioOutputDeviceMuted ( );
	void VivoxSetMasterAudioOutputDeviceVolume ( );
	void VivoxSetAudioInputDeviceMuted ( );
	void VivoxSetMasterAudioInputDeviceVolume ( );
	void VivoxTeamChannelLogin ( );
	void VivoxEchoChannelLogin ( );
	void VivoxNoChannelLogin ( );
	void VivoxSetPlayerName ( );
	void VivoxConnect ( );
	void TrophyTurret1P ( );
	void Sentry1P ( );
	void SetOneFrameThreadLag ( );
	void ServerSetInvulnerable ( );
	void SetInvulnerable ( );
	void UnlockForceSpamGrade ( );
	void SetForceSpamGradeLevel ( );
	void UpdateWeaponForegroundFOV ( );
	void SetPing ( );
	void SetImmersionCylcleTime ( );
	void ClearAllSteamAcheivement ( );
	void ClearSteamAcheivement ( );
	void SetSteamAcheivement ( );
	void RequestSteamStats ( );
	void SetMouseAutoScale ( );
	void ProjectileHackTest ( );
	void ProjectileHack ( );
	void IsLocalPlayerTalking ( );
	void StopSpeechRecognition ( );
	void StartSpeechRecognition ( );
	void AddGearSet ( );
	void SetAdvancedColor ( );
	void SetFPS ( );
	void RandomBoxSMT ( );
	void ServerCombo ( );
	void Combo ( );
	void GetProfileValueIntByName ( );
	void SetProfileValueIntByName ( );
	void GetProfileValueFloatByName ( );
	void SetProfileValueFloatByName ( );
	void GetProfileValueStringByName ( );
	void SetProfileValueStringByName ( );
	void ServerMissionActorGod ( );
	void MissionActorGod ( );
	void ServerMissionActorHealth ( );
	void TestItemREVISAL ( );
	void MissionActorHealth ( );
	void NextAIWave ( );
	void ServerNextAIWave ( );
	void OnRequestComplete ( );
	void TestHttpCombat ( );
	void KillPawns ( );
	void Loaded ( );
	void ViewClass ( );
	void ViewBot ( );
	void ViewActor ( );
	void ViewPlayer ( );
	void ViewSelf ( );
	void KillAllPawns ( );
	void KillAll ( );
	void Summon ( );
	void SetSpeed ( );
	void SetGravity ( );
	void SetJumpZ ( );
	void ChangeSize ( );
	void Teleport ( );
	void KillViewedActor ( );
	void FreezeFrame ( );
	void ServerTotalKill ( );
	void VCKill ( );
	void PMKill ( );
	void ClientSetCameraMode ( );
	void ServerSetCameraMode ( );
	void SetCameraMode ( );
	void DisplayHit ( );
	void ForceLog ( );
	void PrevCameraMode ( );
	void NextCameraMode ( );
	void GetCurrentCameraType ( );
	void ServerScreenshotMode ( );
	void ClientScreenshotMode ( );
	void ScreenshotMode ( );
	void ServerInfiniteAmmo ( );
	void InfiniteAmmoInner ( );
	void ClientInfiniteAmmo ( );
	void InfiniteAmmo ( );
	void ServerGhost ( );
	void Ghost ( );
	void ServerWalk ( );
	void Walk ( );
	void ServerFly ( );
	void Fly ( );
	void ServerGod ( );
	void God ( );
	void ServerSlomo ( );
	void Slomo ( );
	void BroadCastCheatMessage ( );
	void SetInputExpireTimer ( );
	void RemoveSuppress ( );
	void AddSuppress ( );
	void DisplaySuppressList ( );
	void ClientAddRankExp ( );
	void Server_AddRankExp ( );
	void AddRankExp ( );
	void ServerAddCR ( );
	void AddCR ( );
	void ServerSetRemainingTime ( );
	void SetRemainingTime ( );
	void ServerEndRound ( );
	void EndRound ( );
	void ServerEndGame ( );
	void EndGame ( );
	void ServerAddCRAndExp ( );
	void AddCRAndExp ( );
	void ServerBusterScore ( );
	void PMBusterScore ( );
	void VCBusterScore ( );
	void ClearDebugLines ( );
	void TeenVersionTest ( );
	void SetGoreLevel ( );
	void GetTableDepot ( );
	void PostBeginPlay ( );
	void TestC4Defuse ( );
	void TestC4Planted ( );
	void ResetQuest ( );
	void ResetQuestTime ( );
	void BoosterScheduleRegister ( );
	void SetSteamItemBuyAutoConfirm ( );
	void BEStop ( );
	void BECommand ( );
	void RootDir ( );
	void SilentScreenFileName ( );
	void SetCameraRollSpeed ( );
	void CookReferenceShaderCache ( );
	void SaveLocalShaderCaches ( );
	void SetForceCPUSkinning ( );
	void RandomStreamTest ( );
	void ResCheck ( );
	void ClearBoosterItem ( );
	void SetActiveBoosterItem ( );
	void RemoveBoosterItem ( );
	void AddBoosterItem ( );
	void QRReportSend ( );
	void SetUseQPC ( );
	void GetSecurePackageName ( );
	void FlushAsyncLoading ( );
	void DebugAsyncLoading ( );
	void SetTitleMsg ( );
	void ShowSplineViewModeFlag ( );
	void SaveINI ( );
	void IgnoreDropDetail ( );
	void ReloadCfgRunTime ( );
};

UClass* ACBCheatManager::pClassPointer = NULL;

// Class CombatGame.CBEmitter
// 0x0000 (0x0258 - 0x0258)
class ACBEmitter : public AEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1496 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void SetLightEnvironment ( );
	void eventSetTemplate ( );
};

UClass* ACBEmitter::pClassPointer = NULL;

// Class CombatGame.CBFamilyInfo
// 0x0168 (0x01C8 - 0x0060)
class UCBFamilyInfo : public UObject
{
public:
	struct FMeshPart                                   CharacterMesh;                                    		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FString                                     PortraitIconPath;                                 		// 0x007C (0x0010) [0x0000000000000000]              
	class USkeletalMesh*                               ArmMesh;                                          		// 0x008C (0x0008) [0x0000000000000000]              
	class UPhysicsAsset*                               PhysAsset;                                        		// 0x0094 (0x0008) [0x0000000000000000]              
	class UPhysicsAsset*                               PhysAssetForDeath;                                		// 0x009C (0x0008) [0x0000000000000000]              
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x00A4 (0x0010) [0x0000000000000000]              
	class UClass*                                      SoundGroupClass;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultRadioVoiceClassName;                       		// 0x00BC (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           RadioVoice_TargetModeName;                        		// 0x00CC (0x0010) [0x0000000000000000]              
	TArray< class UMaterialInstance* >                 BloodSplatterDecalMaterials;                      		// 0x00DC (0x0010) [0x0000000000000000]              
	TArray< class UMaterialInstance* >                 BloodSplatterDecalMaterialFloors;                 		// 0x00EC (0x0010) [0x0000000000000000]              
	TArray< class UMaterialInstance* >                 LowGoreBloodSplatterDecalMaterials;               		// 0x00FC (0x0010) [0x0000000000000000]              
	TArray< class UMaterialInstance* >                 LowGoreBloodSplatterDecalMaterialFloors;          		// 0x010C (0x0010) [0x0000000000000000]              
	class UParticleSystem*                             HeadBloodForFPPSCTemplate;                        		// 0x011C (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             BloodForFPMuzzleFlashPSCTemplate;                 		// 0x0124 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             LowgoreHeadBloodloodForFPPSCTemplate;             		// 0x012C (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             LowGoreBloodForFPMuzzleFlashPSCTemplate;          		// 0x0134 (0x0008) [0x0000000000000000]              
	float                                              DefaultMeshScale;                                 		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              MaxHealthRate_Buff;                               		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              MaxAutoCureHealthModifier_Buff;                   		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              HealthCureRate_Buff;                              		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              AddMainAmmo_Buff;                                 		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              AddSubAmmo_Buff;                                  		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              AddMainMagazineAmmo_Buff;                         		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              AddSubMagazineAmmo_Buff;                          		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              MaxMainMagazineAmmo_Buff;                         		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              MaxSubMagazineAmmo_Buff;                          		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              WeaponReloadSpeedRate_Buff;                       		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              WeaponChangeRate_Buff;                            		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              GroundCrouchSpeedRate_Buff;                       		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              GroundWalkingSpeedRate_Buff;                      		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              GroundRunSpeedRate_Buff;                          		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              MaxGroundSpeed;                                   		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              GroundAccelationRate_Buff;                        		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              GunAttackRate_Buff;                               		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              GunGuardRate_Buff;                                		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              MeleeAttackRate_Buff;                             		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              MeleeGuardRate_Buff;                              		// 0x018C (0x0004) [0x0000000000000000]              
	float                                              ExplosiveAttackRate_Buff;                         		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              ExplosiveGuardRate_Buff;                          		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              DetailedRadarDistance_Buff;                       		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              RadarRange_Buff;                                  		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              ShortenRespawnDelay_Buff;                         		// 0x01A0 (0x0004) [0x0000000000000000]              
	struct FName                                       RefDropCodeName;                                  		// 0x01A4 (0x0008) [0x0000000000000000]              
	float                                              AdditionalDamagedDecelerationRatio;               		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              MaxDamagedDecelerationRatio;                      		// 0x01B0 (0x0004) [0x0000000000000000]              
	struct FName                                       FamilyInfoType;                                   		// 0x01B4 (0x0008) [0x0000000000000000]              
	int                                                OverridePostProcessChain;                         		// 0x01BC (0x0004) [0x0000000000000000]              
	int                                                OverrideLowPostProcessChain;                      		// 0x01C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsFemale : 1;                                    		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanPickupWeapon : 1;                             		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanSelectSkillClass : 1;                         		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCanPickupSupplies : 1;                           		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1497 ];

		return pClassPointer;
	};

	void GetCachedResources ( );
	void GetFPBloodEffect ( );
	void GetBloodMaterial ( );
	void GetMaxDamagedDecelerationRatio ( );
	void GetAdditionalDamagedDecelerationRatio ( );
	void GetRadarRange_Buff ( );
	void GetDetailedRadarDistance_Buff ( );
	void GetExplosiveGuardRate_Buff ( );
	void GetExplosiveAttackRate_Buff ( );
	void GetMeleeGuardRate_Buff ( );
	void GetMeleeAttackRate_Buff ( );
	void GetGunGuardRate_Buff ( );
	void GetGunAttackRate_Buff ( );
	void GetGroundAccelationRate_Buff ( );
	void GetMaxGroundSpeed ( );
	void GetGroundRunSpeedRate_Buff ( );
	void GetGroundFPSpeedRate_Buff ( );
	void GetGroundCrouchSpeedRate_Buff ( );
	void GetWeaponChangeRate_Buff ( );
	void GetWeaponReloadSpeedRate_Buff ( );
	void GetMaxSubMagazineAmmo_Buff ( );
	void GetMaxMainMagazineAmmo_Buff ( );
	void GetAddSubMagazineAmmo_Buff ( );
	void GetAddMainMagazineAmmo_Buff ( );
	void GetAddSubAmmo_Buff ( );
	void GetAddMainAmmo_Buff ( );
	void GetHealthCureRate_Buff ( );
	void GetMaxAutoCureHealthModifier_Buff ( );
	void GetMaxHealthRate_Buff ( );
	void GetOverridePostProcessChain ( );
	void GetFamilyInfoType ( );
	void CanPickupSupplies ( );
	void CanSelectSkillClass ( );
	void CanPickupWeapon ( );
	void GetFirstPersonArms ( );
};

UClass* UCBFamilyInfo::pClassPointer = NULL;

// Class CombatGame.CBInventoryManager
// 0x000C (0x027C - 0x0270)
class ACBInventoryManager : public AInventoryManager
{
public:
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 
	class ACombatWeapon*                               PreviousWeapon;                                   		// 0x0274 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1498 ];

		return pClassPointer;
	};

	void SetBuff ( );
	void ReleaseUse ( );
	void Use ( );
	void NotifyAllWeaponAmmoChanged ( );
	void GetSkillRelatedWeaponsByID ( );
	void RemoveSkillRelatedWeaponsByID ( );
	void ClearAllSkillRelatedWeapons ( );
	void FindWeaponByGroup ( );
	void FindPickupableWeaponByGroup ( );
	void GetPendingWeapon ( );
	void GetWeaponRefList ( );
	void GetWeaponRatingFor ( );
	void SwitchToPreviousWeapon ( );
	void ClientSwitchToPreviousWeapon ( );
	void SwapInventory ( );
	void RemoveFromInventory ( );
	void DiscardInventory ( );
	void eventSetPreviousWeapon ( );
	void SetInventoryInstigator ( );
	void ClientDiscardInventory ( );
	void SetCurrentWeapon ( );
	void ServerSetCurrentWeapon ( );
	void ClientSwapWeapon ( );
	void SwitchToBestWeapon ( );
	void ReselectCurrentWeapon ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	void AdjustWeapon ( );
	void CreateInventory ( );
	void SwitchWeapon ( );
	void WeaponSlotSort ( );
	void GetWeaponList ( );
	void OwnerEvent ( );
};

UClass* ACBInventoryManager::pClassPointer = NULL;

// Class CombatGame.CBPawnSoundGroup
// 0x0E98 (0x0EF8 - 0x0060)
class UCBPawnSoundGroup : public UObject
{
public:
	class USoundCue*                                   DyingSound;                                       		// 0x0060 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   HealStartSound;                                   		// 0x0068 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   HealEndSound;                                     		// 0x0070 (0x0008) [0x0000000000000000]              
	TArray< struct FFootstepSoundInfo >                FootstepSounds;                                   		// 0x0078 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   DefaultFootstepSound;                             		// 0x0088 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DefaultCrouchFootstepSound;                       		// 0x0090 (0x0008) [0x0000000000000000]              
	TArray< struct FFootstepSoundInfo >                JumpingSounds;                                    		// 0x0098 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   DefaultJumpingSound;                              		// 0x00A8 (0x0008) [0x0000000000000000]              
	TArray< struct FFootstepSoundInfo >                LandingSounds;                                    		// 0x00B0 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   DefaultLandingSound;                              		// 0x00C0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   FallingDamageLandSound;                           		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct FTextWithVoice                              ReloadingSound;                                   		// 0x00D0 (0x000C) [0x0000000000000000]              
	struct FTextWithVoice                              SeeOurTeamDeathSound;                             		// 0x00DC (0x000C) [0x0000000000000000]              
	struct FTextWithVoice                              SeeEnemyDeathSound;                               		// 0x00E8 (0x000C) [0x0000000000000000]              
	struct FTextWithVoice                              ThrowGreSound;                                    		// 0x00F4 (0x000C) [0x0000000000000000]              
	struct FTextWithVoice                              GrenadeWarningSound;                              		// 0x0100 (0x000C) [0x0000000000000000]              
	struct FTextWithVoice                              SpecialGreSound;                                  		// 0x010C (0x000C) [0x0000000000000000]              
	class USoundCue*                                   KillVoiceSound;                                   		// 0x0118 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   OutOfAmmoVoice;                                   		// 0x0120 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   AutoHealVoice;                                    		// 0x0128 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SpawnVoice;                                       		// 0x0130 (0x0008) [0x0000000000000000]              
	struct FEffectTypeHitSound                         EffectTypeHitSounds[ 0xB ];                       		// 0x0138 (0x0DC0) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1499 ];

		return pClassPointer;
	};

	void PlayKillVoice ( );
	void PlaySpawnVoice ( );
	void PlayAutoHealVoice ( );
	void PlayOutOfAmmoVoice ( );
	void PlayGrenadeWarningSound ( );
	void PlayThrowSpecialGreSound ( );
	void HasGrenadeWarningSound ( );
	void PlayThrowGreSound ( );
	void HasThrowGreSound ( );
	void PlaySeeEnemyDeathSound ( );
	void HasSeeEnemyDeathSound ( );
	void PlaySeeOurTeamDeathSound ( );
	void HasSeeOurTeamDeathSound ( );
	void PlayReloadingSound ( );
	void HasReloadingSound ( );
	void PlayHealEndSound ( );
	void PlayHealStartSound ( );
	void GetHitSound ( );
	void PlayHitSound ( );
	void PlayDyingSound ( );
	void GetLandSound ( );
	void GetJumpSound ( );
	void GetFootstepSound ( );
	void PlayFallingDamageLandSound ( );
	void PlayFootStepSound ( );
	void PlayLandSound ( );
	void PlayJumpSound ( );
};

UClass* UCBPawnSoundGroup::pClassPointer = NULL;

// Class CombatGame.CBPhysicalMaterialProperty
// 0x0078 (0x00D8 - 0x0060)
class UCBPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	struct FName                                       MaterialType;                                     		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      TempletType;                                      		// 0x0068 (0x0001) [0x0000000000000000]              
	unsigned char                                      PenetrationType;                                  		// 0x0069 (0x0001) [0x0000000000000000]              
	TArray< struct FMaterialImpactEffect >             ImpactEffects;                                    		// 0x006C (0x0010) [0x0000000000000000]              
	TArray< struct FMaterialImpactEffect >             LowGoreImpactEffects;                             		// 0x007C (0x0010) [0x0000000000000000]              
	class USoundCue*                                   FootStepSound;                                    		// 0x008C (0x0008) [0x0000000000000000]              
	class USoundCue*                                   JumpingSound;                                     		// 0x0094 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   LandedSound;                                      		// 0x009C (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             FootStepParticleTemplate;                         		// 0x00A4 (0x0008) [0x0000000000000000]              
	int                                                HitPriority;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FPointLightInfo                             ImpactPointLightInfo;                             		// 0x00B0 (0x0018) [0x0000000000000000]              
	TArray< struct FExplosionDatum >                   ExplosionData;                                    		// 0x00C8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1500 ];

		return pClassPointer;
	};

	void DetermineExplosionResource ( );
	void GetEffectByGoreLevel ( );
	void GetMaterialImpactEffect ( );
	void GetImpactEffect ( );
	void GetPentrationType ( );
};

UClass* UCBPhysicalMaterialProperty::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_ETC
// 0x01D8 (0x0270 - 0x0098)
class UCBUIDataStore_ETC : public UUIDataStore_Settings
{
public:
	unsigned char                                      InputExpireGoalScene;                             		// 0x0098 (0x0001) [0x0000000000000000]              
	TArray< struct FString >                           ModeCodenameSetForSingleRoundUI;                  		// 0x009C (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           ModeCodenameSetForMultiRoundUI;                   		// 0x00AC (0x0010) [0x0000000000000000]              
	struct FString                                     LoadingUI_Title;                                  		// 0x00BC (0x0010) [0x0000000000000000]              
	struct FString                                     LoadingUI_DefaultBGImage;                         		// 0x00CC (0x0010) [0x0000000000000000]              
	struct FString                                     LoadingUI_DefaultBGImagePath;                     		// 0x00DC (0x0010) [0x0000000000000000]              
	struct FString                                     LoadingUI_DefaultMinimapImage;                    		// 0x00EC (0x0010) [0x0000000000000000]              
	struct FString                                     LoadingUI_DefaultMinimapImagePath;                		// 0x00FC (0x0010) [0x0000000000000000]              
	struct FLoadingUIInfo                              LoadingUIInfos;                                   		// 0x010C (0x015C) [0x0000000000000000]              
	int                                                ClanRankGradePoint;                               		// 0x0268 (0x0004) [0x0000000000000000]              
	unsigned long                                      IntrudeState : 1;                                 		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1501 ];

		return pClassPointer;
	};

	void GetModeTipMessage ( );
	void GetLoadingUIMimimapImagePath ( );
	void GetLoadingUIBGImagePath ( );
	void GetRefCallingCardTable ( );
	void GetRefModeMapTable ( );
	void GetRefMapTable ( );
	void GetRefModeTable ( );
	void SetIntrudeState ( );
	void eventSetLoadingUILabels ( );
	void eventClearLoadingUILabels ( );
	void SetLoadingCompUserData ( );
	void InitClanRankGradePoint ( );
	void InitLoadingUIDatas ( );
	void GetRoundCountTypeByModeIndex ( );
};

UClass* UCBUIDataStore_ETC::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_HUD
// 0x0191 (0x0229 - 0x0098)
class UCBUIDataStore_HUD : public UUIDataStore_Settings
{
public:
	struct FCachedWeaponInfo_BaseInfo                  myCachedWeaponInfo_BaseInfo;                      		// 0x0098 (0x0020) [0x0000000000000000]              
	struct FCachedWeaponInfo_AmmoCntInfo               myCachedWeaponInfo_AmmoCntInfo;                   		// 0x00B8 (0x001C) [0x0000000000000000]              
	struct FCachedWeaponInfo_GrenadeInfo               myCachedWeaponInfo_GrenadeInfo;                   		// 0x00D4 (0x0014) [0x0000000000000000]              
	TArray< struct FCachedPlayerInfo >                 CachedPlayerInfoList;                             		// 0x00E8 (0x0010) [0x0000000000000000]              
	struct FCachedPlayerInfo                           MyInfo;                                           		// 0x00F8 (0x00D4) [0x0000000000000000]              
	unsigned long                                      bNeedUpdateMyInfo : 1;                            		// 0x01CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedUpdateScoreboard_VC : 1;                     		// 0x01CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedUpdateScoreboard_PM : 1;                     		// 0x01CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNeedUpdataScoreboard_FPS : 1;                    		// 0x01CC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowLog : 1;                                     		// 0x01CC (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                LastFPS;                                          		// 0x01D0 (0x0004) [0x0000000000000000]              
	int                                                LastAIPlayTime;                                   		// 0x01D4 (0x0004) [0x0000000000000000]              
	struct FKillerInfoStruct                           KillerInfoForUI;                                  		// 0x01D8 (0x0038) [0x0000000000000000]              
	TArray< struct FCachedChampionshipPlayerInfoStruct > CachedChampionshipPlayerInfoList;                 		// 0x0210 (0x0010) [0x0000000000000000]              
	struct FChampionshipObserverKeyState               ObserverKeyState;                                 		// 0x0220 (0x0004) [0x0000000000000000]              
	struct FSuicideStateStruct                         SuicideStateForUI;                                		// 0x0224 (0x0004) [0x0000000000000000]              
	unsigned char                                      RoundWinType;                                     		// 0x0228 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1502 ];

		return pClassPointer;
	};

	void PrintCachedPlayerInfoList ( );
	void GetRoundWinType ( );
	void SetRoundWinType ( );
	void InitRoundWinType ( );
	void SetSuicideState ( );
	void SaveKillerInfo ( );
	void InitObserverKeyState ( );
	void InitDeathRecord ( );
	void SortScoreboard ( );
	void InitScoreboardInfo ( );
	void InitWeaponInfo ( );
	void InitChampionshipPlayerInfoList ( );
	void InitAllData ( );
	void NotifyGameSessionEnded ( );
	void eventRegistered ( );
};

UClass* UCBUIDataStore_HUD::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_Mission
// 0x00C0 (0x0158 - 0x0098)
class UCBUIDataStore_Mission : public UUIDataStore_Settings
{
public:
	TArray< struct FUIMissionStruct >                  MissionList;                                      		// 0x0098 (0x0010) [0x0000000000000000]              
	TArray< struct FUIModeGroupStruct >                ModeGroupList;                                    		// 0x00A8 (0x0010) [0x0000000000000000]              
	TArray< struct FUIModeStruct >                     ModeList;                                         		// 0x00B8 (0x0010) [0x0000000000000000]              
	TArray< struct FUIMapStruct >                      MapList;                                          		// 0x00C8 (0x0010) [0x0000000000000000]              
	TArray< struct FUIModeGroupBindStruct >            ModeGroupBindList;                                		// 0x00D8 (0x0010) [0x0000000000000000]              
	TArray< struct FUIModeMapStruct >                  ModeMapList;                                      		// 0x00E8 (0x0010) [0x0000000000000000]              
	TArray< int >                                      MissionServiceOffList;                            		// 0x00F8 (0x0010) [0x0000000000000000]              
	TArray< int >                                      MissionModeServiceOffList;                        		// 0x0108 (0x0010) [0x0000000000000000]              
	TArray< int >                                      ModeServiceOffList;                               		// 0x0118 (0x0010) [0x0000000000000000]              
	TArray< int >                                      ModeMapServiceOffList;                            		// 0x0128 (0x0010) [0x0000000000000000]              
	TArray< int >                                      MapServiceOffList;                                		// 0x0138 (0x0010) [0x0000000000000000]              
	TArray< int >                                      ModeGroupServiceOffList;                          		// 0x0148 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1503 ];

		return pClassPointer;
	};

	void GetMakeroomnumberData ( );
	void GetDefaultGoalString ( );
	void GetStarableMinUser ( );
	void GetAllGameOptionDataProviders ( );
	void eventGetDefaultOptionIndex ( );
	void eventGetClanRequiredMember ( );
	void IsChangeabelGameOption ( );
	void eventGetModeOptionValue_MaxUser ( );
	void GetBetaByModeGroupBindMode ( );
	void GetBetaByModeMap ( );
	void GetMapNameBy ( );
	void GetMapListBy ( );
	void GetModeGroupNameBy ( );
	void GetModeNameBy ( );
	void GetModeBy ( );
	void GetModeCodenameBy ( );
	void GetMapListByModeList ( );
	void GetModeListByModeGroup ( );
	void GetHudType ( );
	void GetModeUIType ( );
	void eventIsAiMatchingSystem ( );
	void eventIsAutoMatchingSystem ( );
	void GetModeGroupListByMission ( );
	void ClearUIModeStruct ( );
	void SetUIModeOptionData ( );
	void InitModeGroupList ( );
	void InitModeMapList ( );
	void InitModeGroupBindList ( );
	void InitMapList ( );
	void InitModeList ( );
	void InitMissionList ( );
	void InitUIGameInfo ( );
};

UClass* UCBUIDataStore_Mission::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_PendingDialogMessage
// 0x0010 (0x00A8 - 0x0098)
class UCBUIDataStore_PendingDialogMessage : public UUIDataStore_Settings
{
public:
	TArray< struct FDialogMessage >                    DialogMessageList;                                		// 0x0098 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1504 ];

		return pClassPointer;
	};

};

UClass* UCBUIDataStore_PendingDialogMessage::pClassPointer = NULL;

// Class CombatGame.CCSActorFactory
// 0x006C (0x0108 - 0x009C)
class UCCSActorFactory : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x009C (0x0008) [0x0000000000000000]              
	class UCCSBTTree*                                  BehaviorTree;                                     		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UClass*                                      PawnClass;                                        		// 0x00AC (0x0008) [0x0000000000000000]              
	struct FString                                     PawnName;                                         		// 0x00B4 (0x0010) [0x0000000000000000]              
	struct FCCSSystemConfigData                        Config;                                           		// 0x00C4 (0x002C) [0x0000000000000000]              
	unsigned long                                      bGiveDefaultInventory : 1;                        		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UClass* >                            InventoryList;                                    		// 0x00F4 (0x0010) [0x0000000000000000]              
	int                                                TeamIndex;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1505 ];

		return pClassPointer;
	};

};

UClass* UCCSActorFactory::pClassPointer = NULL;

// Class CombatGame.ActorFactoryTutorialAI
// 0x0004 (0x010C - 0x0108)
class UActorFactoryTutorialAI : public UCCSActorFactory
{
public:
	int                                                PawnNameLocalizationID;                           		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1506 ];

		return pClassPointer;
	};

	void eventSetPawnNameLocalization ( );
};

UClass* UActorFactoryTutorialAI::pClassPointer = NULL;

// Class CombatGame.CombatCCSActorFactory
// 0x0010 (0x0118 - 0x0108)
class UCombatCCSActorFactory : public UCCSActorFactory
{
public:
	int                                                AISpreadMin;                                      		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                AISpreadRandom;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                Health;                                           		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              AIGroundSpeed;                                    		// 0x0114 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1507 ];

		return pClassPointer;
	};

};

UClass* UCombatCCSActorFactory::pClassPointer = NULL;

// Class CombatGame.CCSAFEnterCover
// 0x0010 (0x0074 - 0x0064)
class UCCSAFEnterCover : public UGripAFActionHandle
{
public:
	class ACoverLink*                                  CoverLink;                                        		// 0x0064 (0x0008) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1508 ];

		return pClassPointer;
	};

};

UClass* UCCSAFEnterCover::pClassPointer = NULL;

// Class CombatGame.CCSAFExitCover
// 0x0000 (0x0064 - 0x0064)
class UCCSAFExitCover : public UGripAFActionHandle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1509 ];

		return pClassPointer;
	};

};

UClass* UCCSAFExitCover::pClassPointer = NULL;

// Class CombatGame.CCSAFFireBurst
// 0x0008 (0x006C - 0x0064)
class UCCSAFFireBurst : public UGripAFActionHandle
{
public:
	class AActor*                                      Target;                                           		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1510 ];

		return pClassPointer;
	};

};

UClass* UCCSAFFireBurst::pClassPointer = NULL;

// Class CombatGame.CCSAFGetInCover
// 0x0010 (0x0074 - 0x0064)
class UCCSAFGetInCover : public UGripAFActionHandle
{
public:
	class ACoverLink*                                  CoverLink;                                        		// 0x0064 (0x0008) [0x0000000000000000]              
	class APawn*                                       Target;                                           		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1511 ];

		return pClassPointer;
	};

};

UClass* UCCSAFGetInCover::pClassPointer = NULL;

// Class CombatGame.CCSAFGetOutCover
// 0x0010 (0x0074 - 0x0064)
class UCCSAFGetOutCover : public UGripAFActionHandle
{
public:
	class ACoverLink*                                  CoverLink;                                        		// 0x0064 (0x0008) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1512 ];

		return pClassPointer;
	};

};

UClass* UCCSAFGetOutCover::pClassPointer = NULL;

// Class CombatGame.CCSAFIdle
// 0x0001 (0x0065 - 0x0064)
class UCCSAFIdle : public UGripAFActionHandle
{
public:
	unsigned char                                      Alertness;                                        		// 0x0064 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1513 ];

		return pClassPointer;
	};

};

UClass* UCCSAFIdle::pClassPointer = NULL;

// Class CombatGame.CCSAFMoveTo
// 0x000E (0x0072 - 0x0064)
class UCCSAFMoveTo : public UGripAFActionHandle
{
public:
	struct FVector                                     Target;                                           		// 0x0064 (0x000C) [0x0000000000000000]              
	unsigned char                                      MovementType;                                     		// 0x0070 (0x0001) [0x0000000000000000]              
	unsigned char                                      Alertness;                                        		// 0x0071 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1514 ];

		return pClassPointer;
	};

};

UClass* UCCSAFMoveTo::pClassPointer = NULL;

// Class CombatGame.CCSAFMoveToActor
// 0x000A (0x006E - 0x0064)
class UCCSAFMoveToActor : public UGripAFActionHandle
{
public:
	class AActor*                                      Target;                                           		// 0x0064 (0x0008) [0x0000000000000000]              
	unsigned char                                      MovementType;                                     		// 0x006C (0x0001) [0x0000000000000000]              
	unsigned char                                      Alertness;                                        		// 0x006D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1515 ];

		return pClassPointer;
	};

};

UClass* UCCSAFMoveToActor::pClassPointer = NULL;

// Class CombatGame.CCSAFOrientToward
// 0x000D (0x0071 - 0x0064)
class UCCSAFOrientToward : public UGripAFActionHandle
{
public:
	struct FVector                                     Target;                                           		// 0x0064 (0x000C) [0x0000000000000000]              
	unsigned char                                      Alertness;                                        		// 0x0070 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1516 ];

		return pClassPointer;
	};

};

UClass* UCCSAFOrientToward::pClassPointer = NULL;

// Class CombatGame.CCSATAnimNodeSlot
// 0x0000 (0x0124 - 0x0124)
class UCCSATAnimNodeSlot : public UAnimNodeSlot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1517 ];

		return pClassPointer;
	};

	void ActivateChild ( );
	void eventActivateInput ( );
};

UClass* UCCSATAnimNodeSlot::pClassPointer = NULL;

// Class CombatGame.CCSATBlendListBase
// 0x0004 (0x0124 - 0x0120)
class UCCSATBlendListBase : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x0120 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1518 ];

		return pClassPointer;
	};

};

UClass* UCCSATBlendListBase::pClassPointer = NULL;

// Class CombatGame.USSATBlendByAlertness
// 0x0000 (0x0124 - 0x0124)
class UUSSATBlendByAlertness : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1519 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByAlertness::pClassPointer = NULL;

// Class CombatGame.USSATBlendByCover
// 0x0000 (0x0124 - 0x0124)
class UUSSATBlendByCover : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1520 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByCover::pClassPointer = NULL;

// Class CombatGame.USSATBlendByCoverPose
// 0x0000 (0x0124 - 0x0124)
class UUSSATBlendByCoverPose : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1521 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByCoverPose::pClassPointer = NULL;

// Class CombatGame.USSATBlendByMove
// 0x0000 (0x0124 - 0x0124)
class UUSSATBlendByMove : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1522 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByMove::pClassPointer = NULL;

// Class CombatGame.USSATBlendByPosture
// 0x0000 (0x0124 - 0x0124)
class UUSSATBlendByPosture : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1523 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByPosture::pClassPointer = NULL;

// Class CombatGame.CCSBlackboard
// 0x0000 (0x0068 - 0x0068)
class UCCSBlackboard : public UGripBlackboard
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1524 ];

		return pClassPointer;
	};

	void FlagTargetsAsUsed ( );
	void FlagCoversAsUsed ( );
	void FlagHealthAsUsed ( );
	void GetClosestMissionActor ( );
	void GetClosestPlayer ( );
	void GetClosestVisibleEnemy ( );
	void GetClosestEnemy ( );
	void ClearMoveCommand ( );
	void GetMoveCommand ( );
	void GetTargets ( );
	void GetCurrentTarget ( );
	void GetCovers ( );
	void SetHealth ( );
	void GetHealth ( );
	void GetCurTargetActor ( );
};

UClass* UCCSBlackboard::pClassPointer = NULL;

// Class CombatGame.CCSBTEnemyAware
// 0x0000 (0x00C0 - 0x00C0)
class UCCSBTEnemyAware : public UGripBTBooleanCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1525 ];

		return pClassPointer;
	};

};

UClass* UCCSBTEnemyAware::pClassPointer = NULL;

// Class CombatGame.CCSBTEnemyClosestRange
// 0x0000 (0x00C8 - 0x00C8)
class UCCSBTEnemyClosestRange : public UGripBTNumericCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1526 ];

		return pClassPointer;
	};

};

UClass* UCCSBTEnemyClosestRange::pClassPointer = NULL;

// Class CombatGame.CCSBTEnemyLowestLKPAge
// 0x0000 (0x00C8 - 0x00C8)
class UCCSBTEnemyLowestLKPAge : public UGripBTFloatCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1527 ];

		return pClassPointer;
	};

};

UClass* UCCSBTEnemyLowestLKPAge::pClassPointer = NULL;

// Class CombatGame.CCSBTIdle
// 0x0001 (0x00BD - 0x00BC)
class UCCSBTIdle : public UGripBTNode
{
public:
	unsigned char                                      Alertness;                                        		// 0x00BC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1528 ];

		return pClassPointer;
	};

};

UClass* UCCSBTIdle::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveTo
// 0x0007 (0x00C3 - 0x00BC)
class UCCSBTMoveTo : public UGripBTNode
{
public:
	unsigned long                                      DummyVarToAvoidUnrealScriptCompilerErrorWhenDeclaringAnEnumVarAsFirstVariable : 1;		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Speed;                                            		// 0x00C0 (0x0001) [0x0000000000000000]              
	unsigned char                                      Alertness;                                        		// 0x00C1 (0x0001) [0x0000000000000000]              
	unsigned char                                      MovementType;                                     		// 0x00C2 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1529 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveTo::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveIntoCover
// 0x0001 (0x00C4 - 0x00C3)
class UCCSBTMoveIntoCover : public UCCSBTMoveTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1530 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveIntoCover::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveIntoBestCover
// 0x0008 (0x00CC - 0x00C4)
class UCCSBTMoveIntoBestCover : public UCCSBTMoveIntoCover
{
public:
	float                                              IdealShootingDistance;                            		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      ExcludeCurrentCover : 1;                          		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1531 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveIntoBestCover::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveIntoClosestCover
// 0x0000 (0x00C4 - 0x00C4)
class UCCSBTMoveIntoClosestCover : public UCCSBTMoveIntoCover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1532 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveIntoClosestCover::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveIntoInitialCover
// 0x0000 (0x00C4 - 0x00C4)
class UCCSBTMoveIntoInitialCover : public UCCSBTMoveIntoCover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1533 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveIntoInitialCover::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveToActor
// 0x0001 (0x00C4 - 0x00C3)
class UCCSBTMoveToActor : public UCCSBTMoveTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1534 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveToActor::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveToTarget
// 0x0001 (0x00C4 - 0x00C3)
class UCCSBTMoveToTarget : public UCCSBTMoveTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1535 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveToTarget::pClassPointer = NULL;

// Class CombatGame.CCSBTSearch
// 0x0001 (0x00C4 - 0x00C3)
class UCCSBTSearch : public UCCSBTMoveTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1536 ];

		return pClassPointer;
	};

};

UClass* UCCSBTSearch::pClassPointer = NULL;

// Class CombatGame.CCSBTOrientTowardTarget
// 0x0001 (0x00BD - 0x00BC)
class UCCSBTOrientTowardTarget : public UGripBTNode
{
public:
	unsigned char                                      Alertness;                                        		// 0x00BC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1537 ];

		return pClassPointer;
	};

};

UClass* UCCSBTOrientTowardTarget::pClassPointer = NULL;

// Class CombatGame.CCSBTScriptBehavior
// 0x0008 (0x00D4 - 0x00CC)
class UCCSBTScriptBehavior : public UGripBTScriptBehavior
{
public:
	class ACCSController*                              Controller;                                       		// 0x00CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1538 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UCCSBTScriptBehavior::pClassPointer = NULL;

// Class CombatGame.CCSBTScriptCover
// 0x0051 (0x0125 - 0x00D4)
class UCCSBTScriptCover : public UCCSBTScriptBehavior
{
public:
	class UGripAFActionHandle*                         CurrHandle;                                       		// 0x00D4 (0x0008) [0x0000000000000000]              
	class UCCSAFEnterCover*                            EnterHandle;                                      		// 0x00DC (0x0008) [0x0000000000000000]              
	class UCCSAFGetOutCover*                           GetOutHandle;                                     		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UCCSAFFireBurst*                             FireHandle;                                       		// 0x00EC (0x0008) [0x0000000000000000]              
	class UCCSAFExitCover*                             ExitHandle;                                       		// 0x00F4 (0x0008) [0x0000000000000000]              
	struct FCCSCoverData                               Cover;                                            		// 0x00FC (0x0028) [0x0000000000000000]              
	unsigned char                                      CoverState;                                       		// 0x0124 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1539 ];

		return pClassPointer;
	};

	void FindClosestValidCover ( );
	void ExecutePost ( );
	void Execute ( );
	void ExecutePre ( );
	void FlagUsedBBMembers ( );
};

UClass* UCCSBTScriptCover::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNodeBase
// 0x0020 (0x00F4 - 0x00D4)
class UCombatAIActionNodeBase : public UCCSBTScriptBehavior
{
public:
	class UClass*                                      AIActionClass;                                    		// 0x00D4 (0x0008) [0x0000000000000000]              
	class ACombatBotController*                        Bot;                                              		// 0x00DC (0x0008) [0x0000000000000000]              
	class UCombatAIActionBase*                         AIAction;                                         		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UCCSBlackboard*                              Blackboard;                                       		// 0x00EC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1540 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void Execute ( );
	void ExecutePre ( );
	void Initialize ( );
	void SetGripDirty ( );
};

UClass* UCombatAIActionNodeBase::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNode_MoveToward
// 0x0004 (0x00F8 - 0x00F4)
class UCombatAIActionNode_MoveToward : public UCombatAIActionNodeBase
{
public:
	unsigned long                                      bIsWalking : 1;                                   		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1541 ];

		return pClassPointer;
	};

	void GetGoal ( );
};

UClass* UCombatAIActionNode_MoveToward::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNode_Roamming
// 0x0008 (0x00FC - 0x00F4)
class UCombatAIActionNode_Roamming : public UCombatAIActionNodeBase
{
public:
	unsigned long                                      bIsWalking : 1;                                   		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              MaxPathLength;                                    		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1542 ];

		return pClassPointer;
	};

};

UClass* UCombatAIActionNode_Roamming::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNode_SelectTarget
// 0x0020 (0x0114 - 0x00F4)
class UCombatAIActionNode_SelectTarget : public UCombatAIActionNodeBase
{
public:
	float                                              VisibleWeight;                                    		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              DistanceWeight;                                   		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              OrientWeight;                                     		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              RecentlyDamagedWeight;                            		// 0x0100 (0x0004) [0x0000000000000000]              
	TArray< struct FSClassAgroScore >                  ClassAgroScores;                                  		// 0x0104 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1543 ];

		return pClassPointer;
	};

	void ExecutePre ( );
	void Initialize ( );
};

UClass* UCombatAIActionNode_SelectTarget::pClassPointer = NULL;

// Class CombatGame.GripActionNode_MoveRightAndLeft
// 0x0008 (0x00FC - 0x00F4)
class UGripActionNode_MoveRightAndLeft : public UCombatAIActionNodeBase
{
public:
	unsigned long                                      bIsWalking : 1;                                   		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              DirChangeTime;                                    		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1544 ];

		return pClassPointer;
	};

	void eventGetNodeTitle ( );
};

UClass* UGripActionNode_MoveRightAndLeft::pClassPointer = NULL;

// Class CombatGame.GripActionNode_MoveToward
// 0x000C (0x0100 - 0x00F4)
class UGripActionNode_MoveToward : public UCombatAIActionNodeBase
{
public:
	unsigned char                                      DestinationType;                                  		// 0x00F4 (0x0001) [0x0000000000000000]              
	unsigned long                                      bIsWalking : 1;                                   		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              RePathFindChangeDist;                             		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1545 ];

		return pClassPointer;
	};

	void eventGetNodeTitle ( );
};

UClass* UGripActionNode_MoveToward::pClassPointer = NULL;

// Class CombatGame.GripActionNode_SelectEnemy
// 0x001C (0x0110 - 0x00F4)
class UGripActionNode_SelectEnemy : public UCombatAIActionNodeBase
{
public:
	unsigned char                                      AITargetSelectType;                               		// 0x00F4 (0x0001) [0x0000000000000000]              
	unsigned long                                      bDistanceCheck : 1;                               		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVisibleCheck : 1;                                		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bReachableCheck : 1;                              		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FSDistanceCheck                             DistanceCheckInfo;                                		// 0x00FC (0x000C) [0x0000000000000000]              
	struct FSVsibleCheck                               VisibleCheckInfo;                                 		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FSReachableCheck                            ReachableCheckInfo;                               		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1546 ];

		return pClassPointer;
	};

	void Execute ( );
	void FlagUsedBBMembers ( );
	void eventGetNodeTitle ( );
	void NativeExecute ( );
};

UClass* UGripActionNode_SelectEnemy::pClassPointer = NULL;

// Class CombatGame.CCSBTScriptCondition
// 0x0008 (0x00D4 - 0x00CC)
class UCCSBTScriptCondition : public UGripBTScriptCondition
{
public:
	class ACCSController*                              Controller;                                       		// 0x00CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1547 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UCCSBTScriptCondition::pClassPointer = NULL;

// Class CombatGame.GripConditionNode
// 0x0018 (0x00EC - 0x00D4)
class UGripConditionNode : public UCCSBTScriptCondition
{
public:
	class UCCSBlackboard*                              ScriptBlackBoard;                                 		// 0x00D4 (0x0008) [0x0000000000000000]              
	class ACombatBotController*                        Bot;                                              		// 0x00DC (0x0008) [0x0000000000000000]              
	class ACombatPawn*                                 BotPawn;                                          		// 0x00E4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1548 ];

		return pClassPointer;
	};

	void ComputeCondition ( );
	void Initialize ( );
};

UClass* UGripConditionNode::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetDirection
// 0x0008 (0x00F4 - 0x00EC)
class UGripCondNode_TargetDirection : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00EC (0x0001) [0x0000000000000000]              
	unsigned char                                      Op;                                               		// 0x00ED (0x0001) [0x0000000000000000]              
	float                                              dotValue;                                         		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1549 ];

		return pClassPointer;
	};

	void ComputeCondition ( );
	void eventGetNodeTitle ( );
	void NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetDirection::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetExistence
// 0x0008 (0x00F4 - 0x00EC)
class UGripCondNode_TargetExistence : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00EC (0x0001) [0x0000000000000000]              
	unsigned long                                      bNegative : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1550 ];

		return pClassPointer;
	};

	void ComputeCondition ( );
	void eventGetNodeTitle ( );
	void NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetExistence::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetRange
// 0x000C (0x00F8 - 0x00EC)
class UGripCondNode_TargetRange : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00EC (0x0001) [0x0000000000000000]              
	unsigned char                                      Op;                                               		// 0x00ED (0x0001) [0x0000000000000000]              
	unsigned long                                      bIs2DRange : 1;                                   		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              Distance;                                         		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1551 ];

		return pClassPointer;
	};

	void ComputeCondition ( );
	void eventGetNodeTitle ( );
	void NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetRange::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetReachable
// 0x0008 (0x00F4 - 0x00EC)
class UGripCondNode_TargetReachable : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00EC (0x0001) [0x0000000000000000]              
	unsigned long                                      bNegative : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1552 ];

		return pClassPointer;
	};

	void ComputeCondition ( );
	void eventGetNodeTitle ( );
	void NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetReachable::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetVisible
// 0x0008 (0x00F4 - 0x00EC)
class UGripCondNode_TargetVisible : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00EC (0x0001) [0x0000000000000000]              
	unsigned long                                      bNegative : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1553 ];

		return pClassPointer;
	};

	void ComputeCondition ( );
	void eventGetNodeTitle ( );
	void NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetVisible::pClassPointer = NULL;

// Class CombatGame.CCSBTSelectTarget
// 0x0001 (0x00BD - 0x00BC)
class UCCSBTSelectTarget : public UGripBTNode
{
public:
	unsigned char                                      TargetSelectionAlgorithm;                         		// 0x00BC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1554 ];

		return pClassPointer;
	};

};

UClass* UCCSBTSelectTarget::pClassPointer = NULL;

// Class CombatGame.CCSBTShoot
// 0x0008 (0x00C4 - 0x00BC)
class UCCSBTShoot : public UGripBTNode
{
public:
	int                                                FireBurstPerShot;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              DelayBetweenBursts;                               		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1555 ];

		return pClassPointer;
	};

};

UClass* UCCSBTShoot::pClassPointer = NULL;

// Class CombatGame.CCSBTShootFromCover
// 0x0008 (0x00C4 - 0x00BC)
class UCCSBTShootFromCover : public UGripBTNode
{
public:
	int                                                FireBurstPerShot;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              DelayBetweenBursts;                               		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1556 ];

		return pClassPointer;
	};

};

UClass* UCCSBTShootFromCover::pClassPointer = NULL;

// Class CombatGame.CCSBTTargetHealth
// 0x0000 (0x00C8 - 0x00C8)
class UCCSBTTargetHealth : public UGripBTNumericCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1557 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTargetHealth::pClassPointer = NULL;

// Class CombatGame.CCSBTTargetRange
// 0x0000 (0x00C8 - 0x00C8)
class UCCSBTTargetRange : public UGripBTNumericCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1558 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTargetRange::pClassPointer = NULL;

// Class CombatGame.CCSBTTargetShootable
// 0x0000 (0x00C0 - 0x00C0)
class UCCSBTTargetShootable : public UGripBTBooleanCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1559 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTargetShootable::pClassPointer = NULL;

// Class CombatGame.CCSBTTargetVisible
// 0x0000 (0x00C0 - 0x00C0)
class UCCSBTTargetVisible : public UGripBTBooleanCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1560 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTargetVisible::pClassPointer = NULL;

// Class CombatGame.CCSBTTimeSinceDamage
// 0x0000 (0x00C8 - 0x00C8)
class UCCSBTTimeSinceDamage : public UGripBTFloatCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1561 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTimeSinceDamage::pClassPointer = NULL;

// Class CombatGame.CCSBTVisibleToPlayerCamera
// 0x0000 (0x00C0 - 0x00C0)
class UCCSBTVisibleToPlayerCamera : public UGripBTBooleanCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1562 ];

		return pClassPointer;
	};

};

UClass* UCCSBTVisibleToPlayerCamera::pClassPointer = NULL;

// Class CombatGame.CCSBTWaitInCover
// 0x0000 (0x00BC - 0x00BC)
class UCCSBTWaitInCover : public UGripBTNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1563 ];

		return pClassPointer;
	};

};

UClass* UCCSBTWaitInCover::pClassPointer = NULL;

// Class CombatGame.CCSController
// 0x00E0 (0x0534 - 0x0454)
class ACCSController : public AAIController
{
public:
	class UCCSBTTree*                                  BehaviorTreeTemplate;                             		// 0x0454 (0x0008) [0x0000000000000000]              
	class UGripBTScriptNodeCache*                      ScriptNodeCache;                                  		// 0x045C (0x0008) [0x0000000000000000]              
	class UGripBTInterface*                            BTInterface;                                      		// 0x0464 (0x0008) [0x0000000000000000]              
	struct FPointer                                    Brain;                                            		// 0x046C (0x0008) [0x0000000000000000]              
	struct FPointer                                    MeatPuppet;                                       		// 0x0474 (0x0008) [0x0000000000000000]              
	struct FCCSSystemConfigData                        SystemConfig;                                     		// 0x047C (0x002C) [0x0000000000000000]              
	TArray< unsigned char >                            TargetSelection;                                  		// 0x04A8 (0x0010) [0x0000000000000000]              
	class UCCSPawn*                                    CCSPawn;                                          		// 0x04B8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x04C0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UNavigationHandle*                           SecondaryNavigationHandle;                        		// 0x04C8 (0x0008) [0x0000000000000000]              
	int                                                FireBurstCount;                                   		// 0x04D0 (0x0004) [0x0000000000000000]              
	class AActor*                                      AimingFocus;                                      		// 0x04D4 (0x0008) [0x0000000000000000]              
	struct FRotator                                    AimingRot;                                        		// 0x04DC (0x000C) [0x0000000000000000]              
	unsigned char                                      CCSTeam;                                          		// 0x04E8 (0x0001) [0x0000000000000000]              
	unsigned char                                      TargetType;                                       		// 0x04E9 (0x0001) [0x0000000000000000]              
	unsigned char                                      PathFindErrCount;                                 		// 0x04EA (0x0001) [0x0000000000000000]              
	class UCCSVisualizationComponent*                  DebugVizComponent;                                		// 0x04EC (0x0008) [0x0000000000000000]              
	TArray< class AActor* >                            NoiseMakers;                                      		// 0x04F4 (0x0010) [0x0000000000000000]              
	struct FSMoveTowardState                           paramMoveTowardState;                             		// 0x0504 (0x0018) [0x0000000000000000]              
	unsigned long                                      bPauseBTWhenScriptedMove : 1;                     		// 0x051C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     PathFindDestPosition;                             		// 0x0520 (0x000C) [0x0000000000000000]              
	class AActor*                                      PathFindPrevPathActor;                            		// 0x052C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1564 ];

		return pClassPointer;
	};

	void eventPushMoveTowardState ( );
	void SetDisableBrain ( );
	void IsForceScripteMoving ( );
	void PollMoveComplete ( );
	void TriggerEvent ( );
	void SetInitialCover ( );
	void RemoveState ( );
	void SetState ( );
	void TakePossession ( );
	void eventCreateDebugVizComponent ( );
	void OnCCSTriggerEvent ( );
	void OnSetInitialCover ( );
	void OnRemoveState ( );
	void OnSetState ( );
	void GetTeamNum ( );
	void DebugTrace ( );
	void eventFindNavMeshDistance ( );
	void eventFindNavMeshPath ( );
	void GetAdjustedAimFor ( );
	void NotifyBurstFinished ( );
	void eventActionStopFiring ( );
	void eventFireWeapon ( );
	void UpdateAimingRotation ( );
	void CanHitTarget ( );
	void eventStopFireBurst ( );
	void eventStartFireBurst ( );
	void CanFireAtFromLoc ( );
	void eventCanFireAt ( );
	void SetDesiredPosition ( );
	void eventNotifyAIMoveToActorCompleted ( );
	void OnAIMoveToActor ( );
	void UnPossess ( );
	void Possess ( );
	void InitNavigationHandle ( );
};

UClass* ACCSController::pClassPointer = NULL;

// Class CombatGame.CombatBotController
// 0x00B4 (0x05E8 - 0x0534)
class ACombatBotController : public ACCSController
{
public:
	struct FPointer                                    VfTable_Iinterface_SplinePath;                    		// 0x0534 (0x0008) [0x0000000000000000]              
	unsigned long                                      bCanTick : 1;                                     		// 0x053C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasCaller : 1;                                   		// 0x053C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      FixedRotation : 1;                                		// 0x053C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWriteDamagedActorList : 1;                       		// 0x053C (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                AISpreadMin;                                      		// 0x0540 (0x0004) [0x0000000000000000]              
	int                                                AISpreadRandom;                                   		// 0x0544 (0x0004) [0x0000000000000000]              
	float                                              DamageMultiflyer;                                 		// 0x0548 (0x0004) [0x0000000000000000]              
	class ACombatGuy_NPC*                              CombatPawn;                                       		// 0x054C (0x0008) [0x0000000000000000]              
	class AController*                                 CallerController;                                 		// 0x0554 (0x0008) [0x0000000000000000]              
	class ACombatSplineActor*                          StartSplineActor;                                 		// 0x055C (0x0008) [0x0000000000000000]              
	class ACombatSplineActor*                          GoalSplineActor;                                  		// 0x0564 (0x0008) [0x0000000000000000]              
	TArray< class ACombatSplineActor* >                SplineRoute;                                      		// 0x056C (0x0010) [0x0000000000000000]              
	float                                              PassedSplineLength;                               		// 0x057C (0x0004) [0x0000000000000000]              
	struct FVector                                     SplineCenter;                                     		// 0x0580 (0x000C) [0x0000000000000000]              
	struct FVector                                     SplinePositionOffset;                             		// 0x058C (0x000C) [0x0000000000000000]              
	unsigned char                                      SplineAIType;                                     		// 0x0598 (0x0001) [0x0000000000000000]              
	TArray< class UCombatAIActionBase* >               AIActionList;                                     		// 0x059C (0x0010) [0x0000000000000000]              
	class ACombatAIManager*                            AIManager;                                        		// 0x05AC (0x0008) [0x0000000000000000]              
	int                                                OverrideShotPerFireBurst;                         		// 0x05B4 (0x0004) [0x0000000000000000]              
	TArray< struct FSDamagedActorInfo >                DamagedActorList;                                 		// 0x05B8 (0x0010) [0x0000000000000000]              
	struct FPointer                                    CCSBB;                                            		// 0x05C8 (0x0008) [0x0000000000000000]              
	class AAIBeacon*                                   CurAIBeacon;                                      		// 0x05D0 (0x0008) [0x0000000000000000]              
	TArray< struct FSAIBeaconVisitInfo >               AIBeaconVisitInfoArray;                           		// 0x05D8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1565 ];

		return pClassPointer;
	};

	void DisplayDebug ( );
	void UpdateDamagedActorList ( );
	void NotifyTakeHit ( );
	void SetEnemy ( );
	void eventActionStopFiring ( );
	void DoReload ( );
	void SwitchWeapon ( );
	void CanSwitchWeapon ( );
	void PawnDied ( );
	void CanHitTarget ( );
	void Possess ( );
	void eventSetPassedSplineLength ( );
	void eventGetPassedSplineLength ( );
	void UpdateMovementSpeedModifier ( );
	void eventSetStartSplineActor ( );
	void eventGetSplinePositionOffset ( );
	void eventGetNextSplineActor ( );
	void eventGetGoalSplineActor ( );
	void eventGetStartSplineActor ( );
	void eventClearPathContraint ( );
	void eventAddPathConstraint_AvoidActor ( );
	void UpdateSplinePositionOffset ( );
	void InitStartSplineActor ( );
	void InitPlayerReplicationInfo ( );
	void GetTeamNum ( );
	void Reset ( );
	void SetCaller ( );
	void OnAIMoveToActor ( );
	void UnClaimAIBeacon ( );
	void ClaimAIBeacon ( );
	void GetAIBeaconVisit ( );
	void ClearAIBeaconVisit ( );
	void AddAIBeaconVisit ( );
	void SetCurAIBeacon ( );
	void ClearAIAction ( );
	void DestroyAIAction ( );
	void RegisterAIAction ( );
	void NotifyBurstFinished ( );
	void GetUsableAIBeaconIndex ( );
};

UClass* ACombatBotController::pClassPointer = NULL;

// Class CombatGame.CombatBotController_GuyBase
// 0x0000 (0x05E8 - 0x05E8)
class ACombatBotController_GuyBase : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1566 ];

		return pClassPointer;
	};

	void NotifyChangedWeapon ( );
	void ActionStopFiring ( );
	void GetAdjustedAimFor ( );
	void JumpOverWall ( );
};

UClass* ACombatBotController_GuyBase::pClassPointer = NULL;

// Class CombatGame.USSController
// 0x0000 (0x0534 - 0x0534)
class AUSSController : public ACCSController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1567 ];

		return pClassPointer;
	};

};

UClass* AUSSController::pClassPointer = NULL;

// Class CombatGame.CCSCover
// 0x0000 (0x0060 - 0x0060)
class UCCSCover : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1568 ];

		return pClassPointer;
	};

	void UnlockCover ( );
	void LockCover ( );
	void IsLocked ( );
};

UClass* UCCSCover::pClassPointer = NULL;

// Class CombatGame.CCSPawn
// 0x0000 (0x0060 - 0x0060)
class UCCSPawn : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1569 ];

		return pClassPointer;
	};

	void IsInCover ( );
	void MoveToInCover ( );
	void CoverPoseTransitionOver ( );
	void SetNoCoverPose ( );
	void SetCoverPose ( );
	void CanAim ( );
	void PostureTransitionOver ( );
	void SetPostureDefault ( );
	void SetCrouched ( );
	void IsCrouched ( );
	void SetMovementSpeedDefault ( );
	void SetSpeed ( );
	void GetSpeed ( );
	void SetAlertnessDefault ( );
	void SetAlertness ( );
	void GetAlertness ( );
	void SetMovementTypeDefault ( );
	void SetMovementType ( );
	void GetMovementType ( );
};

UClass* UCCSPawn::pClassPointer = NULL;

// Class CombatGame.CCSSystemConfig
// 0x0000 (0x0060 - 0x0060)
class UCCSSystemConfig : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1570 ];

		return pClassPointer;
	};

};

UClass* UCCSSystemConfig::pClassPointer = NULL;

// Class CombatGame.CCSTarget
// 0x0000 (0x0060 - 0x0060)
class UCCSTarget : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1571 ];

		return pClassPointer;
	};

};

UClass* UCCSTarget::pClassPointer = NULL;

// Class CombatGame.CCSVisualizationComponent
// 0x0008 (0x0258 - 0x0250)
class UCCSVisualizationComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    SceneProxy;                                       		// 0x0250 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1572 ];

		return pClassPointer;
	};

};

UClass* UCCSVisualizationComponent::pClassPointer = NULL;

// Class CombatGame.ColorGradingEffect
// 0x0026 (0x00AC - 0x0086)
class UColorGradingEffect : public UPostProcessEffect
{
public:
	struct FLUTBlender                                 PreviousLUTBlender;                               		// 0x0088 (0x0024) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1573 ];

		return pClassPointer;
	};

};

UClass* UColorGradingEffect::pClassPointer = NULL;

// Class CombatGame.CombatAIActionBase
// 0x0018 (0x0078 - 0x0060)
class UCombatAIActionBase : public UObject
{
public:
	unsigned long                                      bUseScriptTick : 1;                               		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LastExecuteResult;                                		// 0x0064 (0x0001) [0x0000000000000000]              
	class ACombatBotController*                        Bot;                                              		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FName                                       DebugName;                                        		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1574 ];

		return pClassPointer;
	};

	void DisplayDebug ( );
	void ExecutePost ( );
	void eventScriptTick ( );
	void ExecutePre ( );
	void CreateAIAction ( );
};

UClass* UCombatAIActionBase::pClassPointer = NULL;

// Class CombatGame.CombatAIAction_MoveToward
// 0x0010 (0x0088 - 0x0078)
class UCombatAIAction_MoveToward : public UCombatAIActionBase
{
public:
	class UCombatAIActionNode_MoveToward*              ActionNode;                                       		// 0x0078 (0x0008) [0x0000000000000000]              
	class AActor*                                      LastPathFindResultActor;                          		// 0x0080 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1575 ];

		return pClassPointer;
	};

	void DisplayDebug ( );
	void ExecutePost ( );
	void ExecutePre ( );
};

UClass* UCombatAIAction_MoveToward::pClassPointer = NULL;

// Class CombatGame.CombatAIAction_Roamming
// 0x0018 (0x0090 - 0x0078)
class UCombatAIAction_Roamming : public UCombatAIActionBase
{
public:
	class UCombatAIActionNode_Roamming*                ActionNode;                                       		// 0x0078 (0x0008) [0x0000000000000000]              
	class AActor*                                      Goal;                                             		// 0x0080 (0x0008) [0x0000000000000000]              
	class AActor*                                      NextActor;                                        		// 0x0088 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1576 ];

		return pClassPointer;
	};

	void DisplayDebug ( );
	void ExecutePost ( );
	void ExecutePre ( );
};

UClass* UCombatAIAction_Roamming::pClassPointer = NULL;

// Class CombatGame.CombatAIAction_SelectTarget
// 0x0008 (0x0080 - 0x0078)
class UCombatAIAction_SelectTarget : public UCombatAIActionBase
{
public:
	class UCombatAIActionNode_SelectTarget*            ActionNode;                                       		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1577 ];

		return pClassPointer;
	};

	void ExecutePre ( );
};

UClass* UCombatAIAction_SelectTarget::pClassPointer = NULL;

// Class CombatGame.GripAction_MoveRightAndLeft
// 0x0010 (0x0088 - 0x0078)
class UGripAction_MoveRightAndLeft : public UCombatAIActionBase
{
public:
	class UGripActionNode_MoveRightAndLeft*            ActionNode;                                       		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned char                                      CurDir;                                           		// 0x0080 (0x0001) [0x0000000000000000]              
	float                                              MoveStartTime;                                    		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1578 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void ExecutePre ( );
};

UClass* UGripAction_MoveRightAndLeft::pClassPointer = NULL;

// Class CombatGame.GripAction_MoveToward
// 0x0008 (0x0080 - 0x0078)
class UGripAction_MoveToward : public UCombatAIActionBase
{
public:
	class UGripActionNode_MoveToward*                  ActionNode;                                       		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1579 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void ExecutePre ( );
};

UClass* UGripAction_MoveToward::pClassPointer = NULL;

// Class CombatGame.CombatAIDecisionComponent
// 0x0007 (0x008C - 0x0085)
class UCombatAIDecisionComponent : public UActorComponent
{
public:
	unsigned long                                      bTriggered : 1;                                   		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1580 ];

		return pClassPointer;
	};

};

UClass* UCombatAIDecisionComponent::pClassPointer = NULL;

// Class CombatGame.CombatAudioChannelSystem
// 0x0058 (0x00B8 - 0x0060)
class UCombatAudioChannelSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0060 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatAudioChannelSystem.ChannelMap
	TArray< struct FChannelData >                      Channels;                                         		// 0x00A8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1581 ];

		return pClassPointer;
	};

	void PlaySound ( );
	void AddChannel ( );
};

UClass* UCombatAudioChannelSystem::pClassPointer = NULL;

// Class CombatGame.CombatAwaitTransaction
// 0x0094 (0x00F4 - 0x0060)
class UCombatAwaitTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0060 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatAwaitTransaction.AwaitListMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x00A8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatAwaitTransaction.InviteInfoMap
	int                                                AwaitListTotalPage;                               		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1582 ];

		return pClassPointer;
	};

	void GetAwaitListTotalPage ( );
	void ClearInviteInfo ( );
	void GetInviteInfo ( );
	void AddNewInviteInfo ( );
	void ClearAwaitListInfo ( );
	void GetAwaitListDataByUserID ( );
	void GetAwaitListCount ( );
	void GetAwaitListInfo ( );
	void AddNewAwaitListInfo ( );
};

UClass* UCombatAwaitTransaction::pClassPointer = NULL;

// Class CombatGame.CombatAwesomium
// 0x0018 (0x0078 - 0x0060)
class UCombatAwesomium : public UObject
{
public:
	TArray< struct FAwesomiumInfo >                    AwesomiumList;                                    		// 0x0060 (0x0010) [0x0000000000000000]              
	float                                              AwesomiumDurationTime;                            		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              AwesomiumLastTime;                                		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1583 ];

		return pClassPointer;
	};

};

UClass* UCombatAwesomium::pClassPointer = NULL;

// Class CombatGame.CombatBarricade
// 0x00F0 (0x0344 - 0x0254)
class ACombatBarricade : public ATrigger
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0254 (0x0008) [0x0000000000000000]              
	int                                                Health;                                           		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                OldHealth;                                        		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                HealthMax;                                        		// 0x0264 (0x0004) [0x0000000000150000]              ( CPF_Travel | CPF_GlobalConfig )
	int                                                CurrentHealth;                                    		// 0x0268 (0x0004) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	int                                                LastSubObjectIndex;                               		// 0x026C (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x0270 (0x0004) [0x0000000000170000] [0x00000001] ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	unsigned long                                      OldbIsActive : 1;                                 		// 0x0270 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIgnoreSameTeamDamage : 1;                        		// 0x0270 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGod : 1;                                         		// 0x0270 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      OwnerTeam;                                        		// 0x0274 (0x0001) [0x0000000000000000]              
	unsigned char                                      UIState;                                          		// 0x0275 (0x0001) [0x0000000000000000]              
	struct FOutlineProperty                            OutlineColorForComrade;                           		// 0x0278 (0x003C) [0x0000000000000000]              
	struct FOutlineProperty                            OutlineColorForEnemy;                             		// 0x02B4 (0x003C) [0x0000000000000000]              
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x02F0 (0x0008) [0x0000000000000000]              
	TArray< struct FSubObjectInfo >                    SubObjectInfos;                                   		// 0x02F8 (0x0010) [0x0000000000000000]              
	TArray< struct FDamageInfo >                       DamageInfoList;                                   		// 0x0308 (0x0010) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0318 (0x0008) [0x0000000000000000]              
	TArray< class AActor* >                            DestinationList;                                  		// 0x0320 (0x0010) [0x0000000000000000]              
	TArray< struct FSOccupyPawnInfo >                  OccupyDestination;                                		// 0x0330 (0x0010) [0x0000000000000000]              
	int                                                CurOccupyDestIndex;                               		// 0x0340 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1584 ];

		return pClassPointer;
	};

	void GetMissionActorSortPriority ( );
	void InitMissionActor ( );
	void AddDamageInfo ( );
	void eventGetHealth ( );
	void SetHealth ( );
	void DoExplosion ( );
	void StopDamagedParticle ( );
	void PlayDamagedParticle ( );
	void PlayDamagedSound ( );
	void eventDeactivate ( );
	void eventActivate ( );
	void ScriptGetTeamNum ( );
	void GetHighestDamageDealer ( );
	void ClearDamagedUIState ( );
	void UpdateUIState ( );
	void ApplySubObjectInfo ( );
	void RestoreSubObjectInfo ( );
	void GetSubObjectIndex ( );
	void eventNotifyChangedHealth ( );
	void eventTakeDamage ( );
	void InitHealth ( );
	void Reset ( );
	void RoundEnd ( );
	void PostBeginPlay ( );
	void GetDestination ( );
};

UClass* ACombatBarricade::pClassPointer = NULL;

// Class CombatGame.CombatBGMPlayer
// 0x0010 (0x0070 - 0x0060)
class UCombatBGMPlayer : public UObject
{
public:
	class UAudioComponent*                             BGM_AC;                                           		// 0x0060 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   BGMSoundCue;                                      		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1585 ];

		return pClassPointer;
	};

	void SetSoundCuePath ( );
	void PlayBGM ( );
};

UClass* UCombatBGMPlayer::pClassPointer = NULL;

// Class CombatGame.CombatBot
// 0x0104 (0x0558 - 0x0454)
class ACombatBot : public AAIController
{
public:
	class ACombatSquadAI*                              Squad;                                            		// 0x0454 (0x0008) [0x0000000000000000]              
	class UCombatAIDecisionComponent*                  DecisionComponent;                                		// 0x045C (0x0008) [0x0000000000000000]              
	class AActor*                                      TemporaryFocus;                                   		// 0x0464 (0x0008) [0x0000000000000000]              
	unsigned long                                      bExecutingWhatToDoNext : 1;                       		// 0x046C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bScriptSpecialJumpCost : 1;                       		// 0x046C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForceRefreshRoute : 1;                           		// 0x046C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTargetAlternateLoc : 1;                          		// 0x046C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnemyInfoValid : 1;                              		// 0x046C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnemyIsVisible : 1;                              		// 0x046C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bLeadTarget : 1;                                  		// 0x046C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bJumpOverWall : 1;                                		// 0x046C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bPlannedJump : 1;                                 		// 0x046C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bInDodgeMove : 1;                                 		// 0x046C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bEnemyAcquired : 1;                               		// 0x046C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNeedDelayedLeaveVehicle : 1;                     		// 0x046C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bAllowRouteReuse : 1;                             		// 0x046C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bUsingSquadRoute : 1;                             		// 0x046C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bUsePreviousSquadRoute : 1;                       		// 0x046C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned char                                      ScriptedFireMode;                                 		// 0x0470 (0x0001) [0x0000000000000000]              
	float                                              EnemyVisibilityTime;                              		// 0x0474 (0x0004) [0x0000000000000000]              
	class AActor*                                      VisibleEnemy;                                     		// 0x0478 (0x0008) [0x0000000000000000]              
	class AVehicle*                                    LastBlockingVehicle;                              		// 0x0480 (0x0008) [0x0000000000000000]              
	class AActor*                                      CurrentlyTrackedEnemy;                            		// 0x0488 (0x0008) [0x0000000000000000]              
	TArray< struct FEnemyPosition >                    SavedPositions;                                   		// 0x0490 (0x0010) [0x0000000000000000]              
	struct FVector                                     ImpactVelocity;                                   		// 0x04A0 (0x000C) [0x0000000000000000]              
	int                                                AcquisitionYawRate;                               		// 0x04AC (0x0004) [0x0000000000000000]              
	float                                              HearingThreshold;                                 		// 0x04B0 (0x0004) [0x0000000000000000]              
	float                                              RespawnPredictionTime;                            		// 0x04B4 (0x0004) [0x0000000000000000]              
	float                                              WarningDelay;                                     		// 0x04B8 (0x0004) [0x0000000000000000]              
	class AProjectile*                                 WarningProjectile;                                		// 0x04BC (0x0008) [0x0000000000000000]              
	struct FVector                                     MonitorStartLoc;                                  		// 0x04C4 (0x000C) [0x0000000000000000]              
	class APawn*                                       MonitoredPawn;                                    		// 0x04D0 (0x0008) [0x0000000000000000]              
	float                                              MonitorMaxDistSq;                                 		// 0x04D8 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastSeenPos;                                      		// 0x04DC (0x000C) [0x0000000000000000]              
	struct FVector                                     LastSeeingPos;                                    		// 0x04E8 (0x000C) [0x0000000000000000]              
	float                                              LastSeenTime;                                     		// 0x04F4 (0x0004) [0x0000000000000000]              
	float                                              TrackingReactionTime;                             		// 0x04F8 (0x0004) [0x0000000000000000]              
	float                                              BaseTrackingReactionTime;                         		// 0x04FC (0x0004) [0x0000000000000000]              
	struct FVector                                     TrackedVelocity;                                  		// 0x0500 (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            SquadRouteGoal;                                   		// 0x050C (0x0008) [0x0000000000000000]              
	class AActor*                                      BlockedAimTarget;                                 		// 0x0514 (0x0008) [0x0000000000000000]              
	float                                              LastIterativeCheck;                               		// 0x051C (0x0004) [0x0000000000000000]              
	float                                              AimUpdateFrequency;                               		// 0x0520 (0x0004) [0x0000000000000000]              
	float                                              LastAimUpdateTime;                                		// 0x0524 (0x0004) [0x0000000000000000]              
	float                                              ErrorUpdateFrequency;                             		// 0x0528 (0x0004) [0x0000000000000000]              
	float                                              LastErrorUpdateTime;                              		// 0x052C (0x0004) [0x0000000000000000]              
	float                                              CurrentAimError;                                  		// 0x0530 (0x0004) [0x0000000000000000]              
	float                                              DodgeLandZ;                                       		// 0x0534 (0x0004) [0x0000000000000000]              
	class AActor*                                      FearSpots[ 0x2 ];                                 		// 0x0538 (0x0010) [0x0000000000000000]              
	float                                              DodgeToGoalPct;                                   		// 0x0548 (0x0004) [0x0000000000000000]              
	float                                              MultiJumpZ;                                       		// 0x054C (0x0004) [0x0000000000000000]              
	class UPresetManager*                              PresetManager;                                    		// 0x0550 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1586 ];

		return pClassPointer;
	};

	void eventDelayedLeaveVehicle ( );
	void eventDelayedWarning ( );
	void eventMissedDodge ( );
	void eventAdjustAimError ( );
	void eventSuperDesireability ( );
	void eventSpecialJumpCost ( );
	void eventMayDodgeToMoveTarget ( );
	void eventTimeDJReset ( );
	void eventMonitoredPawnAlert ( );
	void eventWhatToDoNext ( );
	void FindBestSuperPickup ( );
	void BuildSquadRoute ( );
	void FindPathToSquadRoute ( );
	void FindBestInventoryPath ( );
	void CanMakePathTo ( );
	void LatentWhatToDoNext ( );
	void WaitToSeeEnemy ( );
	void eventExecuteWhatToDoNext ( );
	void FaceActor ( );
};

UClass* ACombatBot::pClassPointer = NULL;

// Class CombatGame.CBBot
// 0x0000 (0x0558 - 0x0558)
class ACBBot : public ACombatBot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1587 ];

		return pClassPointer;
	};

};

UClass* ACBBot::pClassPointer = NULL;

// Class CombatGame.CombatCameraLensEffect
// 0x0003 (0x0290 - 0x028D)
class ACombatCameraLensEffect : public AEmitterCameraLensEffectBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1588 ];

		return pClassPointer;
	};

};

UClass* ACombatCameraLensEffect::pClassPointer = NULL;

// Class CombatGame.CombatChampionshipCameraManager
// 0x0030 (0x0090 - 0x0060)
class UCombatChampionshipCameraManager : public UObject
{
public:
	struct FString                                     filePath;                                         		// 0x0060 (0x0010) [0x0000000000000000]              
	struct FString                                     Section_MapName;                                  		// 0x0070 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           Key_SpotName;                                     		// 0x0080 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1589 ];

		return pClassPointer;
	};

	void GetFreeCam ( );
	void SaveFreeCam ( );
	void Init ( );
};

UClass* UCombatChampionshipCameraManager::pClassPointer = NULL;

// Class CombatGame.CombatChampionshipManager
// 0x0010 (0x0070 - 0x0060)
class UCombatChampionshipManager : public UObject
{
public:
	TArray< struct FChampionshipTeamData >             ChampionshipTeamList;                             		// 0x0060 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1590 ];

		return pClassPointer;
	};

	void GarbageDataRemove ( );
	void RemovePlayer ( );
	void AddPlayer ( );
	void IsPlayingPlayer ( );
	void FindTargetPlayer ( );
	void IsAlivePlayer ( );
	void GetTeamPlayerNum ( );
};

UClass* UCombatChampionshipManager::pClassPointer = NULL;

// Class CombatGame.CombatChannelTransaction
// 0x00A0 (0x0100 - 0x0060)
class UCombatChannelTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0060 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatChannelTransaction.ServerInfoMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x00A8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatChannelTransaction.ChannelInfoMap
	int                                                LastServerIndex;                                  		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                LastChannelIndex;                                 		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                LastChannelPropertyNumber;                        		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                SigleGameType;                                    		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1591 ];

		return pClassPointer;
	};

	void GetSigleGameType ( );
	void SetSigleGameType ( );
	void GetLastChannelPropertyNumber ( );
	void SetLastChannelPropertyNumber ( );
	void GetLastChannelIndex ( );
	void SetLastChannelIndex ( );
	void GetLastServerIndex ( );
	void SetLastServerIndex ( );
	void GetChannelList ( );
	void GetChannelInfo ( );
	void InitChannelList ( );
	void GetServerData ( );
	void GetServerList ( );
	void InitServerList ( );
};

UClass* UCombatChannelTransaction::pClassPointer = NULL;

// Class CombatGame.CombatCharacterTransaction
// 0x01D0 (0x0230 - 0x0060)
class UCombatCharacterTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0060 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCharacterTransaction.PlayerCompetitionPointInfo
	unsigned long                                      NeedBackToCompetitionGame : 1;                    		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                Penalty_UI_Index;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FCharacterTransactionData                   PlayerData;                                       		// 0x00B0 (0x0120) [0x0000000000000000]              
	TArray< struct FRecordRecentlyPlayed >             TempMyRecordRecentlyPlayed;                       		// 0x01D0 (0x0010) [0x0000000000000000]              
	TArray< struct FRecordRecentlyPlayedList >         MyRecordRecentlyPlayedList;                       		// 0x01E0 (0x0010) [0x0000000000000000]              
	unsigned char                                      MAX_RECORD_RECENTLY_PLAYED;                       		// 0x01F0 (0x0001) [0x0000000000000000]              
	struct FLevelExpData                               UI_LevelData;                                     		// 0x01F4 (0x0008) [0x0000000000000000]              
	int                                                UI_Money;                                         		// 0x01FC (0x0004) [0x0000000000000000]              
	TArray< struct FMatchOnOffInfo >                   PlayerPageMatchOnOffInfoList;                     		// 0x0200 (0x0010) [0x0000000000000000]              
	TArray< struct FMatchOnOffInfo >                   MyPageMatchOnOffInfoList;                         		// 0x0210 (0x0010) [0x0000000000000000]              
	TArray< struct FMatchOnOffInfo >                   ClanPageMatchOnOffInfoList;                       		// 0x0220 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1592 ];

		return pClassPointer;
	};

	void SetNeedBackToCompetitionGame ( );
	void GetNeedBackToCompetitionGame ( );
	void IsStartMatchBlockPenalty ( );
	void GetChannelEnterBlockPenalty ( );
	void GetCurrentSquadModeID ( );
	void GetCurrentSoloDuoModeID ( );
	void GetMaxPlacementCount ( );
	void GetCurrentPlacementCount ( );
	void GetPrevTier ( );
	void GetMaxTier ( );
	void GetCurrentTier ( );
	void GetMostHighTierPoint ( );
	void GetCategoryHide ( );
	void GetMatchOnOffInfoListByCheckType ( );
	void GetMTS ( );
	void AddMTS ( );
	void SetMTS ( );
	void GetLastTakeStat ( );
	void GetWeaponKillCount ( );
	void eventGetUserID ( );
	void GetClassicKAD ( );
	void DelNeedDisplayTierPointPenalty ( );
	void GetNeedDisplayTierPointPenalty ( );
	void AddNeedDisplayTierPointPenalty ( );
	void GetOnClanShutdownPenalty ( );
	void SetOnClanShutdownPenalty ( );
	void GetPrevMoney ( );
	void GetPrevLevelData ( );
	void GetStartingLevelExp ( );
	void GetStartingLevel ( );
	void GetAccountExp ( );
	void GetAccountLevel ( );
	void eventGetCreateIDTime ( );
	void GetLastAccessTime ( );
	void SetTutorialFinishes ( );
	void GetTutorialFinishes ( );
	void GetLastRank ( );
	void GetRank ( );
	void GetNickname ( );
	void SavePrevLevelData ( );
	void UpdateCurrentLevelData ( );
};

UClass* UCombatCharacterTransaction::pClassPointer = NULL;

// Class CombatGame.CombatClanTransaction
// 0x00D4 (0x0134 - 0x0060)
class UCombatClanTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0060 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatClanTransaction.ClanListMap
	int                                                ClanListTotalPage;                                		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x00AC (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatClanTransaction.ClanJoinMap
	struct FClanListDetailData                         ClanListDetailInfo;                               		// 0x00F4 (0x0040) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1593 ];

		return pClassPointer;
	};

	void GetClanDetailData ( );
	void GetClanListTotalPage ( );
	void ClearClanListDetailData ( );
	void ClearJoinClanList ( );
	void GetJoinClanListCount ( );
	void CompareJoinClanList ( );
	void RemoveJoinClanList ( );
	void AddJoinClanList ( );
	void ClearClanListInfo ( );
	void FindClanListName ( );
	void GetClanListInfoByClanID ( );
	void GetClanListInfo ( );
	void GetClanListCount ( );
	void AddNewClanListInfo ( );
};

UClass* UCombatClanTransaction::pClassPointer = NULL;

// Class CombatGame.CombatClassSystem
// 0x0014 (0x0074 - 0x0060)
class UCombatClassSystem : public UObject
{
public:
	class ACombatPlayerReplicationInfo*                OwnerActor;                                       		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      bTestMode : 1;                                    		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAlreadySeverChangeClassNotify : 1;               		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAlreadySelectMilitaryClass : 1;                  		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSelectMilitaryClass : 1;                         		// 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      BeforGroupIndex;                                  		// 0x006C (0x0001) [0x0000000000000000]              
	float                                              AutoSelectMilitaryClassTime;                      		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1594 ];

		return pClassPointer;
	};

	void UseGroupKey ( );
	void ForcedSelectedClass ( );
	void ForcedSelectAnyClass ( );
	void NotifyRankUp ( );
	void SetMilitaryClass ( );
	void ResetMilitaryClass ( );
	void SelectingClass ( );
	void CanSelectClass ( );
	void CheckUnlockClass ( );
	void SetTestMode ( );
	void IsDisplayLog ( );
	void Init ( );
};

UClass* UCombatClassSystem::pClassPointer = NULL;

// Class CombatGame.CombatCommon_Base
// 0x000C (0x00AC - 0x00A0)
class UCombatCommon_Base : public UGFxObject
{
public:
	class UCombatGFxMoviePlayer*                       Owner;                                            		// 0x00A0 (0x0008) [0x0000000000000000]              
	unsigned long                                      bNeedInit : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPopUp : 1;                                       		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisplayed : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1595 ];

		return pClassPointer;
	};

	void CallHide ( );
	void CallShow ( );
	void SetOwner ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatCommon_Base::pClassPointer = NULL;

// Class CombatGame.CombatCommon_Command
// 0x00E0 (0x018C - 0x00AC)
class UCombatCommon_Command : public UCombatCommon_Base
{
public:
	struct FString                                     CommandList[ 0xE ];                               		// 0x00AC (0x00E0) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1596 ];

		return pClassPointer;
	};

	void registerCommandMessage ( );
	void HideScene ( );
	void ShowScene ( );
	void CheckCommand ( );
};

UClass* UCombatCommon_Command::pClassPointer = NULL;

// Class CombatGame.CombatCommon_SystemCounter
// 0x0010 (0x00BC - 0x00AC)
class UCombatCommon_SystemCounter : public UCombatCommon_Base
{
public:
	TArray< struct FSystemCountInfo >                  SystemCountList;                                  		// 0x00AC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1597 ];

		return pClassPointer;
	};

	void CallTextAllClear ( );
	void CallUpdateText ( );
	void CallSetVisible ( );
	void GetSystemCountListCount ( );
	void Update ( );
	void LastInfo ( );
	void GetPing ( );
	void InitData ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatCommon_SystemCounter::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_SystemCounter
// 0x0000 (0x00BC - 0x00BC)
class UCombatFrontEnd_SystemCounter : public UCombatCommon_SystemCounter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1598 ];

		return pClassPointer;
	};

	void GetPing ( );
	void InitData ( );
};

UClass* UCombatFrontEnd_SystemCounter::pClassPointer = NULL;

// Class CombatGame.CombatHUD_SystemCounter
// 0x000C (0x00C8 - 0x00BC)
class UCombatHUD_SystemCounter : public UCombatCommon_SystemCounter
{
public:
	class UCBUIDataStore_HUD*                          UIDataStore_HUD;                                  		// 0x00BC (0x0008) [0x0000000000000000]              
	int                                                MyUserID;                                         		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1599 ];

		return pClassPointer;
	};

	void GetPing ( );
	void InitData ( );
};

UClass* UCombatHUD_SystemCounter::pClassPointer = NULL;

// Class CombatGame.CombatCommunityTransaction
// 0x0204 (0x0264 - 0x0060)
class UCombatCommunityTransaction : public UObject
{
public:
	unsigned char                                      MySessionState;                                   		// 0x0060 (0x0001) [0x0000000000000000]              
	unsigned long                                      bMyAFKState : 1;                                  		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInMaintenanceScene : 1;                          		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedChangeClanPassword : 1;                      		// 0x0064 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bMessengerVisible : 1;                            		// 0x0064 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsGMChatPenalty : 1;                             		// 0x0064 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0068 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCommunityTransaction.MessengerMap
	int                                                Count_SuggestionList;                             		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                Count_FriendList;                                 		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                Count_BlockList;                                  		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                ClanID;                                           		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FString                                     ClanName;                                         		// 0x00C0 (0x0010) [0x0000000000000000]              
	int                                                ClanPoint;                                        		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                ClanLevel;                                        		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanLevelColor;                                   		// 0x00D8 (0x0010) [0x0000000000000000]              
	int                                                ClanTotalPoint;                                   		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                ClanMaxMember;                                    		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FClanMatchData                              ClanMatchRecord;                                  		// 0x00F0 (0x0028) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0118 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCommunityTransaction.ClanNameMap
	TArray< struct FClanMatchRecordData >              ClanRankMatchRecordDataList;                      		// 0x0160 (0x0010) [0x0000000000000000]              
	TArray< struct FClanMatchRecordData >              ClanAMatchRecordDataList;                         		// 0x0170 (0x0010) [0x0000000000000000]              
	TArray< struct FClanMatchRecordData >              ClanBMatchRecordDataList;                         		// 0x0180 (0x0010) [0x0000000000000000]              
	TArray< struct FClanMatchRecordData >              ClanAllMatchRecordDataList;                       		// 0x0190 (0x0010) [0x0000000000000000]              
	int                                                Count_ClanList;                                   		// 0x01A0 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x01A4 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatCommunityTransaction.EmblemID
	struct FTimeData                                   ClanRegistrationTime;                             		// 0x01A8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x2 ];                             		// 0x01B0 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatCommunityTransaction.RegionID
	int                                                ClanRankPoint;                                    		// 0x01B4 (0x0004) [0x0000000000000000]              
	int                                                MyRankPoint;                                      		// 0x01B8 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x48 ];                            		// 0x01BC (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCommunityTransaction.ClanJoinMemberMap
	TArray< struct FString >                           LastWhisperList;                                  		// 0x0204 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData05[ 0x2 ];                             		// 0x0214 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatCommunityTransaction.CCardID
	unsigned char                                      UnknownData06[ 0x48 ];                            		// 0x0218 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCommunityTransaction.ScrNoticeInfoMap
	float                                              PenaltySec;                                       		// 0x0260 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1600 ];

		return pClassPointer;
	};

	void GetClanLevelColor ( );
	void GetClanLevel ( );
	void UpdateCurrentClanLevelData ( );
	void GetClanRecordInfo ( );
	void GetMyRankPoint ( );
	void GetClanRankPoint ( );
	void GetClanMatchRecord ( );
	void GetClanMaxMember ( );
	void GetClanTotalPoint ( );
	void GetClanPoint ( );
	void GetLastWhisperList ( );
	void GetClanName ( );
	void GetClanID ( );
	void GetClanRegistrationTime ( );
	void SetClanRegionID ( );
	void GetClanRegionID ( );
	void GetClanEmblemID ( );
	void GetScrNoticeListCount ( );
	void GetScrNotice ( );
	void TimeoutScrNotice ( );
	void DelScrnotice ( );
	void SetScrNotice ( );
	void ClearJoinMemberList ( );
	void GetClanJoinMemberCount ( );
	void GetClanJoinInfoList ( );
	void FindClanJoinMember ( );
	void RemoveClanJoinMemberInfo ( );
	void AddNewClanJoinMemberInfo ( );
	void GetClanInfoList ( );
	void GetClanInfo ( );
	void GetCCardID ( );
	void IsUsedCCardID ( );
	void IsNeedChangeClanPassword ( );
	void SetNeedChangeClanPassword ( );
	void AmIInClan ( );
	void ClearClanList ( );
	void GetClanListCount ( );
	void FindClanMember ( );
	void ChangeRankPoint ( );
	void ChangeClanPoint ( );
	void RemoveClanInfo ( );
	void AddNewClanInfo ( );
	void GetClanGradeInfo ( );
	void ClearClanMessengerList ( );
	void GetClanManagerList ( );
	void GetClanMasterID ( );
	void GetClanMasterList ( );
	void GetClanList_Offline ( );
	void GetClanList_Online ( );
	void ChangeClanMessengerInfo ( );
	void GetMessengerVisible ( );
	void SetMessengerVisible ( );
	void IsOffline ( );
	void IsOnline ( );
	void GetFriendListCount_Online ( );
	void GetBlockListCount ( );
	void GetFriendListCount ( );
	void GetSuggestionListCount ( );
	void IsSameMessengerType ( );
	void GetFriendList_Offline ( );
	void GetFriendList_Online ( );
	void GetMessengerInfoListByType ( );
	void GetMessengerInfo ( );
	void ChangeMessengerInfo ( );
	void ClearMessengerList ( );
	void RemoveMessengerInfo ( );
	void AddNewMessengerInfo ( );
	void IsInMaintenanceScene ( );
	void SetInMaintenanceScene ( );
	void IsMyAFKState ( );
	void GetMySessionState ( );
	void SetMySessionState ( );
	void UpdateLastWhisperList ( );
	void UpdateClanMatchRecord ( );
	void GetPenaltySec ( );
	void SetPenaltySec ( );
	void IsGMChatPenalty ( );
	void SetGMChatPenalty ( );
};

UClass* UCombatCommunityTransaction::pClassPointer = NULL;

// Class CombatGame.CombatCubeMapActor
// 0x0008 (0x0264 - 0x025C)
class ACombatCubeMapActor : public ASceneCaptureCubeMapActor
{
public:
	class UTextureCube*                                CapturedTextureCube;                              		// 0x025C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1601 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
	void ForceNetRelevant ( );
};

UClass* ACombatCubeMapActor::pClassPointer = NULL;

// Class CombatGame.CombatCubeMapBoxVolume
// 0x0034 (0x02B4 - 0x0280)
class ACombatCubeMapBoxVolume : public AVolume
{
public:
	struct FBoxSphereBounds                            BrushBounds;                                      		// 0x0280 (0x001C) [0x0000000000000000]              
	struct FVector                                     BoxMin;                                           		// 0x029C (0x000C) [0x0000000000000000]              
	struct FVector                                     BoxMax;                                           		// 0x02A8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1602 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void PostBeginPlay ( );
};

UClass* ACombatCubeMapBoxVolume::pClassPointer = NULL;

// Class CombatGame.CombatDamageType
// 0x0088 (0x0118 - 0x0090)
class UCombatDamageType : public UDamageType
{
public:
	struct FPointer                                    VfTable_IInterface_CombatWeaponType;              		// 0x0090 (0x0008) [0x0000000000000000]              
	unsigned long                                      bCausesBlood : 1;                                 		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSimplifiedAnimDeath : 1;                         		// 0x0098 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCausesBloodSplatterDecals : 1;                   		// 0x0098 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFriendlyFire : 1;                                		// 0x0098 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIgnoreReward : 1;                                		// 0x0098 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPlacedWorld : 1;                                 		// 0x0098 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDamagedBySkill : 1;                              		// 0x0098 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDamagedByPlayer : 1;                             		// 0x0098 (0x0004) [0x0000000000000000] [0x00000080] 
	class UTimeDilationAnim*                           DeathTimeDilationAnim;                            		// 0x009C (0x0008) [0x0000000000000000]              
	float                                              SimplifiedMomentumFactor;                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              SimplifiedDeathUpkick;                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FName                                       DeathStatsName;                                   		// 0x00AC (0x0008) [0x0000000000000000]              
	struct FName                                       SuicideStatsName;                                 		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     DeathString;                                      		// 0x00BC (0x0010) [0x0000000000000000]              
	struct FString                                     FemaleSuicide;                                    		// 0x00CC (0x0010) [0x0000000000000000]              
	struct FString                                     MaleSuicide;                                      		// 0x00DC (0x0010) [0x0000000000000000]              
	float                                              TeammateDamageRate;                               		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              SelfDamageRate;                                   		// 0x00F0 (0x0004) [0x0000000000000000]              
	unsigned char                                      WeaponType;                                       		// 0x00F4 (0x0001) [0x0000000000000000]              
	unsigned char                                      DamageType;                                       		// 0x00F5 (0x0001) [0x0000000000000000]              
	unsigned char                                      DamageAnimIndex;                                  		// 0x00F6 (0x0001) [0x0000000000000000]              
	unsigned char                                      SubIndex;                                         		// 0x00F7 (0x0001) [0x0000000000000000]              
	struct FString                                     WeaponStatType;                                   		// 0x00F8 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             WeaponTypeName;                                   		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1603 ];

		return pClassPointer;
	};

	void IsGunWeapon ( );
	void IsExplosionWeapon ( );
	void IsBulletWeapon ( );
	void IsGrenade ( );
	void IsMeleeWeapon ( );
	void GetWeaponStatType ( );
	void GetWeaponType ( );
	void IsEquipWeapon ( );
	void IsPlacedUseItem ( );
	void IsPlacedWeapon ( );
	void IsPlacedActor ( );
	void IsSkillUseItem ( );
	void IsSkillWeapon ( );
	void IsSkillActor ( );
	void GetDamageType ( );
	void IsSimpleAnimDeath ( );
	void CalcDeathCamera ( );
	void DoCustomDamageEffects ( );
	void PawnTornOff ( );
	void IncrementSuicides ( );
	void IncrementDeaths ( );
	void IncrementKills ( );
	void GetHitEffectDuration ( );
	void SpawnHitEffect ( );
	void SuicideMessage ( );
	void DeathMessage ( );
};

UClass* UCombatDamageType::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_BulletWeapon
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_BulletWeapon : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1604 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_BulletWeapon::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Buzz
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Buzz : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1605 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Buzz::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Explosion
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Explosion : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1606 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Explosion::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_AirStrike
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_AirStrike : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1607 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_AirStrike::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_C4
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_C4 : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1608 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_C4::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Claymore
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Claymore : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1609 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Claymore::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_ExplosionWeapon
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_ExplosionWeapon : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1610 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_ExplosionWeapon::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_AttachGL
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_AttachGL : public UCombatDamageType_ExplosionWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1611 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_AttachGL::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Grenade
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Grenade : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1612 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Grenade::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Howitzer
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Howitzer : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1613 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Howitzer::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Predator
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Predator : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1614 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Predator::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Fell
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Fell : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1615 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Fell::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_HelicopterCannon
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_HelicopterCannon : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1616 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_HelicopterCannon::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Melee
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Melee : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1617 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Melee::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_SentrygunCannon
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_SentrygunCannon : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1618 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_SentrygunCannon::pClassPointer = NULL;

// Class CombatGame.CombatDataTable
// 0x00A8 (0x0108 - 0x0060)
class UCombatDataTable : public UObject
{
public:
	class UClass*                                      EntryClass;                                       		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< struct FDataEntry >                        table;                                            		// 0x0068 (0x0010) [0x0000000000000000]              
	struct FString                                     Description;                                      		// 0x0078 (0x0010) [0x0000000000000000]              
	struct FString                                     XMLPath;                                          		// 0x0088 (0x0010) [0x0000000000000000]              
	struct FString                                     ReferenceDataTablePath;                           		// 0x0098 (0x0010) [0x0000000000000000]              
	int                                                CopyIndex;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForcedProperty : 1;                              		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      AutoSortEnable : 1;                               		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00B0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatDataTable.TableMap
	TArray< struct FTypeAliasInfo >                    TypeAlias;                                        		// 0x00F8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1619 ];

		return pClassPointer;
	};

	void GetAllTableObject ( );
	void eventForcedProperty ( );
	void GetTableObject ( );
	void eventFindItemByIndex ( );
	void CreateTable ( );
	void GetTableDataCount ( );
	void AddEntry ( );
	void Empty ( );
	void MergeTable ( );
	void FindEntryBySubIndex ( );
	void FindEntry ( );
	void UnloadAllEntries ( );
	void LoadAllEntries ( );
	void SetEntryIndex ( );
};

UClass* UCombatDataTable::pClassPointer = NULL;

// Class CombatGame.CombatDataTableType
// 0x000C (0x006C - 0x0060)
class UCombatDataTableType : public UObject
{
public:
	int                                                EntryIndex;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	class UCombatDataTable*                            DataTable;                                        		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1620 ];

		return pClassPointer;
	};

};

UClass* UCombatDataTableType::pClassPointer = NULL;

// Class CombatGame.CombatDataRefAttend
// 0x0028 (0x0094 - 0x006C)
class UCombatDataRefAttend : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                Day;                                              		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     RewardTableCodeName;                              		// 0x0084 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1621 ];

		return pClassPointer;
	};

	void GetRewardTableCodeName ( );
	void GetDay ( );
};

UClass* UCombatDataRefAttend::pClassPointer = NULL;

// Class CombatGame.CombatDataRefDecorationColor
// 0x0007 (0x0073 - 0x006C)
class UCombatDataRefDecorationColor : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      Color_R;                                          		// 0x0070 (0x0001) [0x0000000000000000]              
	unsigned char                                      Color_G;                                          		// 0x0071 (0x0001) [0x0000000000000000]              
	unsigned char                                      Color_B;                                          		// 0x0072 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1622 ];

		return pClassPointer;
	};

	void GetLinearColor ( );
};

UClass* UCombatDataRefDecorationColor::pClassPointer = NULL;

// Class CombatGame.CombatDataRefDecorationDecal
// 0x0014 (0x0080 - 0x006C)
class UCombatDataRefDecorationDecal : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     DecalTexture;                                     		// 0x0070 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1623 ];

		return pClassPointer;
	};

};

UClass* UCombatDataRefDecorationDecal::pClassPointer = NULL;

// Class CombatGame.CombatDataRefDecorationParticle
// 0x0014 (0x0080 - 0x006C)
class UCombatDataRefDecorationParticle : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     DecalParticle;                                    		// 0x0070 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1624 ];

		return pClassPointer;
	};

};

UClass* UCombatDataRefDecorationParticle::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefAchievement
// 0x006C (0x00D8 - 0x006C)
class UCombatDataTableRefAchievement : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     Stat;                                             		// 0x0080 (0x0010) [0x0000000000000000]              
	int                                                Type;                                             		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                Activation;                                       		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                Level;                                            		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                RelativeGoal;                                     		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                Goal;                                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                Money;                                            		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                ExpPoint;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                AchievementPoint;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                Param[ 0x3 ];                                     		// 0x00B0 (0x000C) [0x0000000000000000]              
	int                                                NameCode;                                         		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                Step;                                             		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FString                                     ImagePath;                                        		// 0x00C4 (0x0010) [0x0000000000000000]              
	int                                                StatNumber;                                       		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1625 ];

		return pClassPointer;
	};

	void IsActivated ( );
	void GetAchievementPoint ( );
	void GetImagePath ( );
	void GetStep ( );
	void GetRefStatNumber ( );
	void GetRelativeGoal ( );
	void GetType ( );
	void GetStat ( );
	void GetScoringType ( );
	void GetNameCode ( );
	void GetGoal ( );
	void GetCodeName ( );
	void GetID ( );
};

UClass* UCombatDataTableRefAchievement::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefAIRewardRank
// 0x001C (0x0088 - 0x006C)
class UCombatDataTableRefAIRewardRank : public UCombatDataTableType
{
public:
	struct FString                                     modeCodename;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	unsigned char                                      GRADE;                                            		// 0x007C (0x0001) [0x0000000000000000]              
	int                                                Object_Min;                                       		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                Object_Max;                                       		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1626 ];

		return pClassPointer;
	};

};

UClass* UCombatDataTableRefAIRewardRank::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefBasicChat
// 0x0028 (0x0094 - 0x006C)
class UCombatDataTableRefBasicChat : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                Size;                                             		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     DisplayName;                                      		// 0x0084 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1627 ];

		return pClassPointer;
	};

	void GetDisplayName ( );
	void GetSize ( );
	void GetID ( );
};

UClass* UCombatDataTableRefBasicChat::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefBGM
// 0x003C (0x00A8 - 0x006C)
class UCombatDataTableRefBGM : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     Country;                                          		// 0x0080 (0x0010) [0x0000000000000000]              
	unsigned char                                      SceneIndex;                                       		// 0x0090 (0x0001) [0x0000000000000000]              
	unsigned char                                      StartMonth;                                       		// 0x0091 (0x0001) [0x0000000000000000]              
	unsigned char                                      StartDate;                                        		// 0x0092 (0x0001) [0x0000000000000000]              
	unsigned char                                      EndMonth;                                         		// 0x0093 (0x0001) [0x0000000000000000]              
	unsigned char                                      EndDate;                                          		// 0x0094 (0x0001) [0x0000000000000000]              
	struct FString                                     BGMPath;                                          		// 0x0098 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1628 ];

		return pClassPointer;
	};

	void eventGetBGMPath ( );
	void eventGetEndDate ( );
	void eventGetEndMonth ( );
	void eventGetStartDate ( );
	void eventGetStartMonth ( );
	void eventGetSceneIndex ( );
	void eventGetCountry ( );
	void eventGetCodeName ( );
};

UClass* UCombatDataTableRefBGM::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefBoosterItem
// 0x005B (0x00C7 - 0x006C)
class UCombatDataTableRefBoosterItem : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     CHANNEL_CODENAME;                                 		// 0x0080 (0x0010) [0x0000000000000000]              
	struct FString                                     ITEM_CODENAME;                                    		// 0x0090 (0x0010) [0x0000000000000000]              
	int                                                TOOLTIP_ID;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                BUFF_EXP;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                BUFF_GOLD;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                BUFF_ATTEND_REWARD;                               		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                DAY_INFO;                                         		// 0x00B0 (0x0004) [0x0000000000000000]              
	struct FTimeData                                   BOOSTER_START;                                    		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   BOOSTER_END;                                      		// 0x00BC (0x0008) [0x0000000000000000]              
	unsigned char                                      BOOSTER_TYPE;                                     		// 0x00C4 (0x0001) [0x0000000000000000]              
	unsigned char                                      Level;                                            		// 0x00C5 (0x0001) [0x0000000000000000]              
	unsigned char                                      UI_VISIBLE;                                       		// 0x00C6 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1629 ];

		return pClassPointer;
	};

	void IsUIVisible ( );
	void GetLevel ( );
	void GetAttendReward ( );
	void GetGold ( );
	void GetExp ( );
	void GetToolTipID ( );
	void IsChannelCodeName ( );
	void GetBoosterType ( );
};

UClass* UCombatDataTableRefBoosterItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCallingCard
// 0x002C (0x0098 - 0x006C)
class UCombatDataTableRefCallingCard : public UCombatDataTableType
{
public:
	int                                                NAME_TEXT;                                        		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Id;                                               		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FString                                     CCard_AssetName;                                  		// 0x0078 (0x0010) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0088 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1630 ];

		return pClassPointer;
	};

	void GetCodeName ( );
	void GetImageID ( );
	void GetAsset ( );
	void GetID ( );
	void GetNameText ( );
};

UClass* UCombatDataTableRefCallingCard::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefClanExp
// 0x0018 (0x0084 - 0x006C)
class UCombatDataTableRefClanExp : public UCombatDataTableType
{
public:
	int                                                Level;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                GoalExp;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelColor;                                       		// 0x0074 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1631 ];

		return pClassPointer;
	};

	void GetLevelColor ( );
	void GetGoalExp ( );
	void GetLevel ( );
};

UClass* UCombatDataTableRefClanExp::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefClanRegion
// 0x0008 (0x0074 - 0x006C)
class UCombatDataTableRefClanRegion : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                RegionStringID;                                   		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1632 ];

		return pClassPointer;
	};

	void GetLegionIndex ( );
};

UClass* UCombatDataTableRefClanRegion::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefClanSection
// 0x000C (0x0078 - 0x006C)
class UCombatDataTableRefClanSection : public UCombatDataTableType
{
public:
	unsigned char                                      GRADE;                                            		// 0x006C (0x0001) [0x0000000000000000]              
	int                                                SectionStart;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                SectionEnd;                                       		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1633 ];

		return pClassPointer;
	};

	void GetSectionEnd ( );
	void GetSectionStart ( );
	void GetGrade ( );
};

UClass* UCombatDataTableRefClanSection::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCrosshair
// 0x000A (0x0076 - 0x006C)
class UCombatDataTableRefCrosshair : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned long                                      DotOnly : 1;                                      		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      UseCenterDot : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      BasicCrosshairType;                               		// 0x0074 (0x0001) [0x0000000000000000]              
	unsigned char                                      Thickness;                                        		// 0x0075 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1634 ];

		return pClassPointer;
	};

	void GetThickness ( );
	void GetUseCenterDot ( );
	void GetBasicCrosshairType ( );
	void GetDotOnly ( );
	void GetID ( );
};

UClass* UCombatDataTableRefCrosshair::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCubeBox
// 0x0040 (0x00AC - 0x006C)
class UCombatDataTableRefCubeBox : public UCombatDataTableType
{
public:
	struct FString                                     CubeCodeName;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                GiveType;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                ValueMin;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                ValueMax;                                         		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     OutputCodeName;                                   		// 0x0088 (0x0010) [0x0000000000000000]              
	int                                                JackpotValue;                                     		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                OutputGrade;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                EffectType;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                FrameType;                                        		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                TagType;                                          		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1635 ];

		return pClassPointer;
	};

	void eventGetTagType ( );
	void GetFrameType ( );
	void GetEffectType ( );
	void GetOutputGrade ( );
	void GetJackpotValue ( );
	void GetOutputCodeName ( );
	void GetValueMax ( );
	void GetValueMin ( );
	void eventGetGiveType ( );
	void GetCubeCodeName ( );
	void eventGetIndex ( );
};

UClass* UCombatDataTableRefCubeBox::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefDefine
// 0x0028 (0x0094 - 0x006C)
class UCombatDataTableRefDefine : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     DefineName;                                       		// 0x0070 (0x0010) [0x0000000000000000]              
	unsigned char                                      ValueType;                                        		// 0x0080 (0x0001) [0x0000000000000000]              
	struct FString                                     Value;                                            		// 0x0084 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1636 ];

		return pClassPointer;
	};

	void GetValue_String ( );
	void GetValue_Float ( );
	void GetValue_Int ( );
};

UClass* UCombatDataTableRefDefine::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefDrop
// 0x0078 (0x00E4 - 0x006C)
class UCombatDataTableRefDrop : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     RefPickupCodeName[ 0x5 ];                         		// 0x0080 (0x0050) [0x0000000000000000]              
	int                                                DropRate[ 0x5 ];                                  		// 0x00D0 (0x0014) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1637 ];

		return pClassPointer;
	};

	void GetPickup ( );
	void GetDropRate ( );
};

UClass* UCombatDataTableRefDrop::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefEmblem
// 0x0018 (0x0084 - 0x006C)
class UCombatDataTableRefEmblem : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     Emblem_AssetName;                                 		// 0x0074 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1638 ];

		return pClassPointer;
	};

	void GetImageID ( );
	void GetAsset ( );
	void GetID ( );
};

UClass* UCombatDataTableRefEmblem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefExchangeCash
// 0x00AC (0x0118 - 0x006C)
class UCombatDataTableRefExchangeCash : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                CashType;                                         		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                Value[ 0xA ];                                     		// 0x0074 (0x0028) [0x0000000000000000]              
	int                                                Price[ 0xA ];                                     		// 0x009C (0x0028) [0x0000000000000000]              
	int                                                SalePrice[ 0xA ];                                 		// 0x00C4 (0x0028) [0x0000000000000000]              
	struct FString                                     ItemCodeName;                                     		// 0x00EC (0x0010) [0x0000000000000000]              
	int                                                SaleCategoryString;                               		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                LobbyNotifierString;                              		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      PopupNotifier : 1;                                		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FTimeData                                   SaleTimeStart;                                    		// 0x0108 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   SaleTimeEnd;                                      		// 0x0110 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1639 ];

		return pClassPointer;
	};

	void GetSaleTimeEndSeconds ( );
	void GetSaleTimeStartSeconds ( );
	void isSalePrice ( );
	void isSale ( );
	void GetSalePrice ( );
	void GetPrice ( );
	void GetSaleTimeEnd ( );
	void GetSaleTimeStart ( );
	void GetPopupNotifier ( );
	void GetLobbyNotifierString ( );
	void GetSaleCategoryString ( );
	void GetItemCodeName ( );
	void GetValue ( );
	void GetCashType ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefExchangeCash::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefExp
// 0x0070 (0x00DC - 0x006C)
class UCombatDataTableRefExp : public UCombatDataTableType
{
public:
	int                                                Level;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                GoalExp;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     SmallImage;                                       		// 0x0074 (0x0010) [0x0000000000000000]              
	int                                                ImageID_Small;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     BigImage;                                         		// 0x0088 (0x0010) [0x0000000000000000]              
	int                                                ImageID_Big;                                      		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                LevelNameID;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	struct FString                                     LevelUpTopImage;                                  		// 0x00A0 (0x0010) [0x0000000000000000]              
	int                                                ImageID_LevelUpTop;                               		// 0x00B0 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelUpBottomImage;                               		// 0x00B4 (0x0010) [0x0000000000000000]              
	int                                                ImageID_LevelUpBottom;                            		// 0x00C4 (0x0004) [0x0000000000000000]              
	struct FString                                     RewardCodeName;                                   		// 0x00C8 (0x0010) [0x0000000000000000]              
	int                                                ImageID_RewardCode;                               		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1640 ];

		return pClassPointer;
	};

	void GetRewardCodeID ( );
	void GetRewardCodeName ( );
	void GetLevelUpBottomImageID ( );
	void GetLevelUpBottomImage ( );
	void GetLevelUpTopImageID ( );
	void GetLevelUpTopImage ( );
	void eventGetLevelNameID ( );
	void eventGetLevelImageID ( );
	void eventGetLevelImageName ( );
	void GetGoalExp ( );
	void GetLevel ( );
};

UClass* UCombatDataTableRefExp::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefFilter
// 0x0020 (0x008C - 0x006C)
class UCombatDataTableRefFilter : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                SceneType;                                        		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                MainMenu;                                         		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                SubMenu;                                          		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                MenuNameID;                                       		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                ItemType[ 0x3 ];                                  		// 0x0080 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1641 ];

		return pClassPointer;
	};

	void GetItemType ( );
	void GetMenuNameID ( );
	void GetSubMenu ( );
	void GetMainMenu ( );
	void GetSceneType ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefFilter::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefFormula
// 0x00B0 (0x011C - 0x006C)
class UCombatDataTableRefFormula : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x006C (0x0010) [0x0000000000000000]              
	struct FString                                     Params[ 0xA ];                                    		// 0x007C (0x00A0) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1642 ];

		return pClassPointer;
	};

	void GetParam ( );
	void GetCodeName ( );
	void GetFomulaParamInt ( );
	void GetFomulaParamFloat ( );
};

UClass* UCombatDataTableRefFormula::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefFrontEndMode
// 0x0011 (0x007D - 0x006C)
class UCombatDataTableRefFrontEndMode : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x006C (0x0010) [0x0000000000000000]              
	unsigned char                                      ActivationType;                                   		// 0x007C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1643 ];

		return pClassPointer;
	};

	void IsHide ( );
	void IsDisable ( );
	void GetCodeName ( );
};

UClass* UCombatDataTableRefFrontEndMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGameChannel
// 0x005C (0x00C8 - 0x006C)
class UCombatDataTableRefGameChannel : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                Level_Block;                                      		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                Level_Low;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                Level_High;                                       		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                KAD_Block;                                        		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                KAD_Min;                                          		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                KAD_Max;                                          		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                Clan_Block;                                       		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                Championship_Block;                               		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                ChampionshipTF;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                OpenChannel;                                      		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                TitleId;                                          		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                DescriptionID;                                    		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                Ping_Block;                                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                PingCount;                                        		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                PingTolerance;                                    		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                DesignType;                                       		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                Server;                                           		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                ChannelState;                                     		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1644 ];

		return pClassPointer;
	};

	void GetChannelState ( );
	void GetServer ( );
	void GetDesignType ( );
	void GetPingTolerance ( );
	void GetPingCount ( );
	void GetPingBlock ( );
	void GetDescriptionID ( );
	void GetTitleID ( );
	void GetOpenChannel ( );
	void GetChampionshipTF ( );
	void GetChampionshipBlock ( );
	void GetClanBlock ( );
	void GetKADMax ( );
	void GetKADMin ( );
	void GetKADBlock ( );
	void GetLevelHigh ( );
	void GetLevelLow ( );
	void GetLevelBlock ( );
	void GetCodeName ( );
	void GetIndex ( );
	void GetRefGameChannel ( );
};

UClass* UCombatDataTableRefGameChannel::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGameChannelProperty
// 0x0014 (0x0080 - 0x006C)
class UCombatDataTableRefGameChannelProperty : public UCombatDataTableType
{
public:
	struct FString                                     GameChannel;                                      		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                DescriptionID;                                    		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1645 ];

		return pClassPointer;
	};

	void GetDescriptionID ( );
};

UClass* UCombatDataTableRefGameChannelProperty::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGameScoring
// 0x005C (0x00C8 - 0x006C)
class UCombatDataTableRefGameScoring : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                Score;                                            		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                SeizeScore;                                       		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                CreditPoint;                                      		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                RankExp;                                          		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                ScoreName;                                        		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FString                                     ImagePath;                                        		// 0x0094 (0x0010) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                BGImgType;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                CountImgType;                                     		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                Count;                                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned char                                      Type;                                             		// 0x00B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      GRADE;                                            		// 0x00B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      ScoringDisplayLocation;                           		// 0x00B6 (0x0001) [0x0000000000000000]              
	unsigned char                                      ScoringTextColorNumber;                           		// 0x00B7 (0x0001) [0x0000000000000000]              
	struct FString                                     SoundPath;                                        		// 0x00B8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1646 ];

		return pClassPointer;
	};

	void GetScoringTextColorNumber ( );
	void GetScoringDisplayLocation ( );
	void GetModeDependencyScore ( );
	void GetGrade ( );
	void GetSoundPath ( );
	void GetDisplayType ( );
	void GetCount ( );
	void GetCountImage ( );
	void GetBGImage ( );
	void GetImageID ( );
	void GetImagePath ( );
	void GetRankExp ( );
	void GetCreditPoint ( );
	void GetCodeName ( );
	void GetScore ( );
	void GetNameID ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefGameScoring::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGameServer
// 0x000C (0x0078 - 0x006C)
class UCombatDataTableRefGameServer : public UCombatDataTableType
{
public:
	int                                                Server;                                           		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                TitleId;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                DescriptionID;                                    		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1647 ];

		return pClassPointer;
	};

	void GetDescriptionID ( );
	void GetTitleID ( );
};

UClass* UCombatDataTableRefGameServer::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGear
// 0x0030 (0x009C - 0x006C)
class UCombatDataTableRefGear : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Cost;                                             		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                NameID;                                           		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                TooltipDescID;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     IconName;                                         		// 0x007C (0x0010) [0x0000000000000000]              
	struct FString                                     ScriptFile;                                       		// 0x008C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1648 ];

		return pClassPointer;
	};

	void GetScriptFile ( );
	void GetIconName ( );
	void GetTooltipDescID ( );
	void GetNameID ( );
	void GetCost ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefGear::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefHelpDetailInfo
// 0x0030 (0x009C - 0x006C)
class UCombatDataTableRefHelpDetailInfo : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                TabNameID;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                HighlightTextID;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                DetailInfoTextID;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     ImageName;                                        		// 0x0088 (0x0010) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1649 ];

		return pClassPointer;
	};

	void GetImageID ( );
	void GetImageName ( );
	void GetDetailInfoTextID ( );
	void GetHighlightTextID ( );
	void GetTabNameID ( );
	void GetCodeName ( );
};

UClass* UCombatDataTableRefHelpDetailInfo::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefHelpTab
// 0x0158 (0x01C4 - 0x006C)
class UCombatDataTableRefHelpTab : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                Category;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                TabNameID;                                        		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     SubCodeName[ 0x14 ];                              		// 0x0084 (0x0140) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1650 ];

		return pClassPointer;
	};

	void GetSubCodeName ( );
	void GetTabNameID ( );
	void GetCategory ( );
	void GetCodeName ( );
};

UClass* UCombatDataTableRefHelpTab::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefImagePath
// 0x0014 (0x0080 - 0x006C)
class UCombatDataTableRefImagePath : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     FullImagePath;                                    		// 0x0070 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1651 ];

		return pClassPointer;
	};

	void GetFullImagePath ( );
};

UClass* UCombatDataTableRefImagePath::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefInitItem
// 0x0020 (0x008C - 0x006C)
class UCombatDataTableRefInitItem : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                bActive;                                          		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                PresetEquip[ 0x3 ];                               		// 0x0080 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1652 ];

		return pClassPointer;
	};

	void IsPresetEquip ( );
	void IsActive ( );
	void GetCodeName ( );
	void GetRefInitItem ( );
};

UClass* UCombatDataTableRefInitItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefItem
// 0x00CC (0x0138 - 0x006C)
class UCombatDataTableRefItem : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                ItemStringID;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                ChaNameID;                                        		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                ExclusiveMode;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                RequireLevel;                                     		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                DetailOverall;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                ItemGrade;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                ImageID_HUDWeaapon;                               		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Lobby;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                ImageID_Preset;                                   		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                AbilityDescriptionID;                             		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                DescriptionID;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned char                                      Service;                                          		// 0x009C (0x0001) [0x0000000000000000]              
	unsigned char                                      Type1;                                            		// 0x009D (0x0001) [0x0000000000000000]              
	unsigned char                                      Type2;                                            		// 0x009E (0x0001) [0x0000000000000000]              
	unsigned char                                      Type3;                                            		// 0x009F (0x0001) [0x0000000000000000]              
	unsigned char                                      Type4;                                            		// 0x00A0 (0x0001) [0x0000000000000000]              
	unsigned char                                      RequireTarget;                                    		// 0x00A1 (0x0001) [0x0000000000000000]              
	unsigned char                                      StackCount;                                       		// 0x00A2 (0x0001) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x00A4 (0x0010) [0x0000000000000000]              
	struct FString                                     OriginalCodeName;                                 		// 0x00B4 (0x0010) [0x0000000000000000]              
	struct FString                                     PRIScriptFile;                                    		// 0x00C4 (0x0010) [0x0000000000000000]              
	struct FString                                     SUBScriptFile;                                    		// 0x00D4 (0x0010) [0x0000000000000000]              
	struct FString                                     PRIVoiceFile;                                     		// 0x00E4 (0x0010) [0x0000000000000000]              
	struct FString                                     SUBVoiceFile;                                     		// 0x00F4 (0x0010) [0x0000000000000000]              
	struct FString                                     StackViewCodeName;                                		// 0x0104 (0x0010) [0x0000000000000000]              
	struct FName                                       PRIAttachmentWeapon;                              		// 0x0114 (0x0008) [0x0000000000000000]              
	struct FName                                       SUBAttachmentWeapon;                              		// 0x011C (0x0008) [0x0000000000000000]              
	unsigned long                                      bSteamItem : 1;                                   		// 0x0124 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     ScriptPrePix;                                     		// 0x0128 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1653 ];

		return pClassPointer;
	};

	void IsMCoinItem ( );
	void IsBSCoinItem ( );
	void IsGCoinItem ( );
	void IsMedalItem ( );
	void IsGameMoneyItem ( );
	void IsSkillReconItem4 ( );
	void IsSkillReconItem3 ( );
	void IsSkillReconItem2 ( );
	void IsSkillReconItem1 ( );
	void IsSkillCommandItem4 ( );
	void IsSkillCommandItem3 ( );
	void IsSkillCommandItem2 ( );
	void IsSkillCommandItem1 ( );
	void IsSkillSupportItem4 ( );
	void IsSkillSupportItem3 ( );
	void IsSkillSupportItem2 ( );
	void IsSkillSupportItem1 ( );
	void IsSkillAssaultItem4 ( );
	void IsSkillAssaultItem3 ( );
	void IsSkillAssaultItem2 ( );
	void IsSkillAssaultItem1 ( );
	void IsPlaceWeaponPistolItem ( );
	void IsPlaceWeaponGLItem ( );
	void IsPlaceWeaponRLItem ( );
	void IsPlaceUseTiggerItem ( );
	void IsSkillWeaponGLItem ( );
	void IsSkillWeaponRLItem ( );
	void IsClaymoreItem ( );
	void IsHowitzerItem ( );
	void IsPredatorItem ( );
	void IsChopperItem ( );
	void IsAirstrikeItem ( );
	void IsUAVItem ( );
	void IsAmmokitItem ( );
	void IsMedikitItem ( );
	void IsTestChannelTicketItem ( );
	void IsClanTicketItem ( );
	void IsOfflineChampionshipItem ( );
	void IsOnlineChampionshipItem ( );
	void IsResetStatItem ( );
	void IsCallsignChangeItem ( );
	void IsKeyItem ( );
	void IsLockedBoxItem ( );
	void IsRandomBoxItem ( );
	void IsMoneyTypeItem ( );
	void IsCallingCardItem ( );
	void IsAddMedalItem ( );
	void IsAddGoldItem ( );
	void IsAddIncreaseClanMemberItem ( );
	void IsArmorCommonItem ( );
	void IsSkillReconItem ( );
	void IsSkillCommandItem ( );
	void IsSkillSupportItem ( );
	void IsSkillAssaultItem ( );
	void IsBoosterAttendRewardItem ( );
	void IsBoosterGoldItem ( );
	void IsBoosterExpItem ( );
	void IsBoosterGoldExpItem ( );
	void IsChaFXUpperItem ( );
	void IsChaFXFootItem ( );
	void IsC4KitItem ( );
	void IsMachinePistolItem ( );
	void IsPistolItem ( );
	void IsShotGunItem ( );
	void IsBASRItem ( );
	void IsLMGItem ( );
	void IsDMRItem ( );
	void IsRifleItem ( );
	void IsSMGItem ( );
	void IsPlaceWeaponItem ( );
	void IsPlaceUseItem ( );
	void IsSkillWeaponItem ( );
	void IsSkillUseItem ( );
	void IsEventItem ( );
	void IsPermissionItem ( );
	void IsConsumeHiddenItem ( );
	void IsInitializeItem ( );
	void IsPackageItem ( );
	void IsImmediateUseItem ( );
	void IsAddMoneyItem ( );
	void IsAddIncreaseItem ( );
	void IsSprayItem ( );
	void IsArmorItem ( );
	void IsHiddenItem ( );
	void IsSkillLicenseItem ( );
	void IsBoosterItem ( );
	void IsVisualItem ( );
	void IsFunctionItem ( );
	void IsSpecialAvatar ( );
	void IsNormalAvatar ( );
	void IsChip ( );
	void IsThrowWeapon ( );
	void IsWeapon ( );
	void IsChipC ( );
	void IsChipB ( );
	void IsChipA ( );
	void IsGrenadeC ( );
	void IsGrenadeB ( );
	void IsGrenadeA ( );
	void IsMeleeWeapon ( );
	void IsSubWeapon ( );
	void IsPrimaryWeapon ( );
	void IsInGamePlaceItem ( );
	void IsInGameSkillItem ( );
	void IsRealItem ( );
	void IsPassiveItem ( );
	void IsConsumeItem ( );
	void IsActiveItem ( );
	void IsClothsItem ( );
	void IsEquipItem ( );
	void GetSystemImagePath ( );
	void GetItemCategoryStringID ( );
	void GetTypeDefineCodeID ( );
	void GetEquipType ( );
	void IsAlwaysActiveItem ( );
	void GetSuitScriptFileName ( );
	void IsSteamItem ( );
	void GetStackViewCodeName ( );
	void GetSUBAttachmentWeaponName ( );
	void GetPRIAttachmentWeaponName ( );
	void GetVoiceFile ( );
	void GetSUBScriptFileName ( );
	void GetPRIScriptFileName ( );
	void GetOriginalCodeName ( );
	void GetCodeName ( );
	void GetStackCount ( );
	void GetRequireTarget ( );
	void GetType4 ( );
	void GetType3 ( );
	void GetType2 ( );
	void GetType1 ( );
	void GetService ( );
	void GetDescriptionID ( );
	void GetAbilityDescriptionID ( );
	void GetImageID_Preset ( );
	void GetImageID_Lobby ( );
	void GetImageID_HUDWeaapon ( );
	void GetItemGrade ( );
	void IsDestroyable ( );
	void GetRequiredLevel ( );
	void GetExclusiveMode ( );
	void GetChaNameID ( );
	void GetItemStringID ( );
	void GetIndex ( );
	void GetRefItem ( );
};

UClass* UCombatDataTableRefItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefItemDetailinfo
// 0x014C (0x01B8 - 0x006C)
class UCombatDataTableRefItemDetailinfo : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                Accuracy;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                Damage;                                           		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                Range;                                            		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                RateOfFire;                                       		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                Recoil;                                           		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                Mobility;                                         		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                CurrentAmmo;                                      		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                ReserveAmmo;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	struct FString                                     AddImage_Path[ 0xA ];                             		// 0x00A0 (0x00A0) [0x0000000000000000]              
	int                                                AddImage_ID[ 0xA ];                               		// 0x0140 (0x0028) [0x0000000000000000]              
	int                                                AddImage_NameID[ 0xA ];                           		// 0x0168 (0x0028) [0x0000000000000000]              
	int                                                AddImage_DescID[ 0xA ];                           		// 0x0190 (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1654 ];

		return pClassPointer;
	};

	void GetAddImage_DescID ( );
	void GetAddImage_NameID ( );
	void GetAddImage_ID ( );
	void eventGetAddImage_Path ( );
	void GetReserveAmmo ( );
	void GetCurrentAmmo ( );
	void GetMobility ( );
	void GetRecoil ( );
	void GetRateOfFire ( );
	void GetRange ( );
	void GetDamage ( );
	void GetAccuracy ( );
	void GetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefItemDetailinfo::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefItemUnLockRecipe
// 0x0030 (0x009C - 0x006C)
class UCombatDataTableRefItemUnLockRecipe : public UCombatDataTableType
{
public:
	struct FString                                     ItemCodeName;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	struct FString                                     KeyCodeName;                                      		// 0x007C (0x0010) [0x0000000000000000]              
	struct FString                                     OutPutItemCodeName;                               		// 0x008C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1655 ];

		return pClassPointer;
	};

	void GetOutPutItemCodeName ( );
	void GetKeyCodeName ( );
	void GetItemCodeName ( );
};

UClass* UCombatDataTableRefItemUnLockRecipe::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefKillCombo
// 0x0034 (0x00A0 - 0x006C)
class UCombatDataTableRefKillCombo : public UCombatDataTableType
{
public:
	struct FString                                     modeCodename;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                ComboTime;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                Count;                                            		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                Description;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     SoundCue;                                         		// 0x0088 (0x0010) [0x0000000000000000]              
	int                                                BonusPoint;                                       		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                ModeID;                                           		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1656 ];

		return pClassPointer;
	};

	void GetBonusPoint ( );
	void GetSoundCue ( );
	void GetDescription ( );
	void GetCount ( );
	void eventGetComboTime ( );
};

UClass* UCombatDataTableRefKillCombo::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefLimitSale
// 0x0018 (0x0084 - 0x006C)
class UCombatDataTableRefLimitSale : public UCombatDataTableType
{
public:
	struct FString                                     ItemCodeName;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                Level;                                            		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                LimitCount;                                       		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1657 ];

		return pClassPointer;
	};

	void GetLimitCount ( );
	void GetLevel ( );
	void GetItemCodeName ( );
};

UClass* UCombatDataTableRefLimitSale::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMailCategory
// 0x0008 (0x0074 - 0x006C)
class UCombatDataTableRefMailCategory : public UCombatDataTableType
{
public:
	int                                                TabType;                                          		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                MailType;                                         		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1658 ];

		return pClassPointer;
	};

	void GetMailType ( );
	void GetTabType ( );
	void GetTabTypeFromMailType ( );
};

UClass* UCombatDataTableRefMailCategory::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMailForm
// 0x0020 (0x008C - 0x006C)
class UCombatDataTableRefMailForm : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                WriterStringID;                                   		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                TitleStringID;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                DescStringID;                                     		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1659 ];

		return pClassPointer;
	};

	void GetDescStringID ( );
	void GetTitleStringID ( );
	void GetWriterStringID ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefMailForm::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMap
// 0x0044 (0x00B0 - 0x006C)
class UCombatDataTableRefMap : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     Filename;                                         		// 0x0080 (0x0010) [0x0000000000000000]              
	int                                                DisplayName;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned char                                      MapSize;                                          		// 0x0094 (0x0001) [0x0000000000000000]              
	int                                                DescAi;                                           		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                ImageID_DisplayThumbnail;                         		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                ImageID_Title;                                    		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Loading;                                  		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Minimap;                                  		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                ImageID_BGThumbnail;                              		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1660 ];

		return pClassPointer;
	};

	void GetDescAi ( );
	void GetImageID_BGThumbnail ( );
	void GetMapSize ( );
	void GetImageID_Minimap ( );
	void GetImageID_Loading ( );
	void GetImageID_Title ( );
	void GetImageID_DisplayThumbnail ( );
	void eventGetFilename ( );
	void GetDisplayName ( );
	void eventGetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefMap::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMatchMaking
// 0x0024 (0x0090 - 0x006C)
class UCombatDataTableRefMatchMaking : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                MaxUser;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                StartableMinUser;                                 		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                TeamMaxUser;                                      		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                TeamMinUser;                                      		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      ReturnBackPlayedGame : 1;                         		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                RatingLowLock;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                RatingHighLock;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                SearchTimeOut;                                    		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1661 ];

		return pClassPointer;
	};

	void GetSearchTimeOut ( );
	void GetRatingHighLock ( );
	void GetRatingLowLock ( );
	void GetReturnBackPlayedGame ( );
	void GetTeamMinUser ( );
	void GetTeamMaxUser ( );
	void GetStartableMinUser ( );
	void GetMaxUser ( );
	void GetID ( );
};

UClass* UCombatDataTableRefMatchMaking::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMission
// 0x0040 (0x00AC - 0x006C)
class UCombatDataTableRefMission : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     DefaultModeCodename;                              		// 0x0080 (0x0010) [0x0000000000000000]              
	int                                                DisplayName;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultModeGroupCodename;                         		// 0x0094 (0x0010) [0x0000000000000000]              
	int                                                OpenChannel;                                      		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Bg;                                       		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1662 ];

		return pClassPointer;
	};

	void GetImageID_Bg ( );
	void GetOpenChannel ( );
	void GetDefaultModeGroupCodename ( );
	void GetDisplayName ( );
	void GetDefaultModeCodename ( );
	void GetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefMission::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMode
// 0x01AC (0x0218 - 0x006C)
class UCombatDataTableRefMode : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     DefaultMapCodename;                               		// 0x0080 (0x0010) [0x0000000000000000]              
	struct FString                                     modeType;                                         		// 0x0090 (0x0010) [0x0000000000000000]              
	int                                                ModeUIType;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                HUDType;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                RankSysID;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                DisplayName;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                DisplayOption;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                DisplayName_NoHtml;                               		// 0x00B4 (0x0004) [0x0000000000000000]              
	struct FString                                     AiModeMatchRoomThumbnail;                         		// 0x00B8 (0x0010) [0x0000000000000000]              
	struct FString                                     AiModeSocreBoardThumbnail;                        		// 0x00C8 (0x0010) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                AiModeMatchRoomThumbnailID;                       		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                AiModeSocreBoardThumbnailID;                      		// 0x00E0 (0x0004) [0x0000000000000000]              
	struct FString                                     MaxUser;                                          		// 0x00E4 (0x0010) [0x0000000000000000]              
	struct FString                                     Goal;                                             		// 0x00F4 (0x0010) [0x0000000000000000]              
	struct FString                                     Mission;                                          		// 0x0104 (0x0010) [0x0000000000000000]              
	struct FString                                     MatchEndScore;                                    		// 0x0114 (0x0010) [0x0000000000000000]              
	struct FString                                     PlayTime;                                         		// 0x0124 (0x0010) [0x0000000000000000]              
	struct FString                                     ThirdCameraView;                                  		// 0x0134 (0x0010) [0x0000000000000000]              
	struct FString                                     FreeCameraView;                                   		// 0x0144 (0x0010) [0x0000000000000000]              
	struct FString                                     DeathChat;                                        		// 0x0154 (0x0010) [0x0000000000000000]              
	struct FString                                     AllChat;                                          		// 0x0164 (0x0010) [0x0000000000000000]              
	struct FString                                     Rush;                                             		// 0x0174 (0x0010) [0x0000000000000000]              
	struct FString                                     AutoTeamBalance;                                  		// 0x0184 (0x0010) [0x0000000000000000]              
	struct FString                                     LimitLevel;                                       		// 0x0194 (0x0010) [0x0000000000000000]              
	struct FString                                     Observer;                                         		// 0x01A4 (0x0010) [0x0000000000000000]              
	struct FString                                     Difficulty;                                       		// 0x01B4 (0x0010) [0x0000000000000000]              
	struct FString                                     HalfChange;                                       		// 0x01C4 (0x0010) [0x0000000000000000]              
	unsigned char                                      ApplyGearSet;                                     		// 0x01D4 (0x0001) [0x0000000000000000]              
	struct FString                                     AutoTeamChange;                                   		// 0x01D8 (0x0010) [0x0000000000000000]              
	struct FString                                     ApplyClanRecord;                                  		// 0x01E8 (0x0010) [0x0000000000000000]              
	struct FString                                     RequiredClanMember;                               		// 0x01F8 (0x0010) [0x0000000000000000]              
	int                                                Category;                                         		// 0x0208 (0x0004) [0x0000000000000000]              
	int                                                StartableMinUser;                                 		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                PasswordSet;                                      		// 0x0210 (0x0004) [0x0000000000000000]              
	int                                                LimitedClanMember;                                		// 0x0214 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1663 ];

		return pClassPointer;
	};

	void GetLimitedClanMember ( );
	void GetPasswordSet ( );
	void GetAiModeSocreBoardThumbnailID ( );
	void GetAiModeMatchRoomThumbnailID ( );
	void GetAiModeSocreBoardThumbnail ( );
	void GetAiModeMatchRoomThumbnail ( );
	void GetOptionBy ( );
	void GetStartableMinUser ( );
	void GetCategory ( );
	void GetRequiredClanMember ( );
	void GetApplyClanRecord ( );
	void GetAutoTeamChange ( );
	void GetApplyGearSet ( );
	void GetHalfChange ( );
	void GetDifficulty ( );
	void GetObserver ( );
	void GetLimitLevel ( );
	void GetAutoTeamBalance ( );
	void GetRush ( );
	void GetAllChat ( );
	void GetDeathChat ( );
	void GetFreeCameraView ( );
	void GetThirdCameraView ( );
	void GetPlayTime ( );
	void GetMatchEndScore ( );
	void GetMission ( );
	void GetGoal ( );
	void GetMaxUser ( );
	void GetRankSystemID ( );
	void GetImageID ( );
	void GetDisplayName_NoHtml ( );
	void GetDisplayOption ( );
	void GetDisplayName ( );
	void GetHudType ( );
	void GetModeUIType ( );
	void GetModeType ( );
	void GetDefaultMapCodename ( );
	void GetCodeName ( );
	void eventGetIndex ( );
};

UClass* UCombatDataTableRefMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeGroup
// 0x0058 (0x00C4 - 0x006C)
class UCombatDataTableRefModeGroup : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                Index;                                            		// 0x007C (0x0004) [0x0000000000000000]              
	struct FString                                     BindMission;                                      		// 0x0080 (0x0010) [0x0000000000000000]              
	struct FString                                     DefaultMode;                                      		// 0x0090 (0x0010) [0x0000000000000000]              
	int                                                SelectType;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                DisplayName;                                      		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                DisplayDescription;                               		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                DisplayModeName;                                  		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                ImageID_DisplayThumbnail;                         		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                ImageID_BGThumbnail;                              		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Title;                                    		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                ImageID_ModeThumbnail;                            		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                MatchMakingID;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1664 ];

		return pClassPointer;
	};

	void GetMatchMakingID ( );
	void GetImageID_ModeThumbnail ( );
	void GetDisplayModeName ( );
	void GetSelectType ( );
	void GetDisplayDescription ( );
	void GetImageID_Title ( );
	void GetImageID_BGThumbnail ( );
	void GetImageID_DisplayThumbnail ( );
	void GetDisplayName ( );
	void GetDefaultMode ( );
	void GetBindMission ( );
	void GetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefModeGroup::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeGroupBindMode
// 0x0024 (0x0090 - 0x006C)
class UCombatDataTableRefModeGroupBindMode : public UCombatDataTableType
{
public:
	struct FString                                     modeCodename;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	struct FString                                     ModeGroupCodename;                                		// 0x007C (0x0010) [0x0000000000000000]              
	int                                                BetaVersion;                                      		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1665 ];

		return pClassPointer;
	};

	void GetBetaVersion ( );
	void GetModeCodename ( );
	void GetModeGroupCodename ( );
};

UClass* UCombatDataTableRefModeGroupBindMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeGuide
// 0x0060 (0x00CC - 0x006C)
class UCombatDataTableRefModeGuide : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                Type;                                             		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                ModeNameText;                                     		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                ModeHighlightText;                                		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                AttackTitleText;                                  		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                DefenseTitleText;                                 		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                AttackDetailText;                                 		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                DefenseDetailText;                                		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FString                                     ImageName;                                        		// 0x009C (0x0010) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                WeaponText[ 0x3 ];                                		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct FString                                     modeCodename;                                     		// 0x00BC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1666 ];

		return pClassPointer;
	};

	void GetModeCodename ( );
	void GetWeaponText ( );
	void GetImageID ( );
	void GetImageName ( );
	void GetDefenseDetailText ( );
	void GetAttackDetailText ( );
	void GetDefenseTitleText ( );
	void GetAttackTitleText ( );
	void GetModeHighlightText ( );
	void GetModeNameText ( );
	void GetType ( );
	void GetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefModeGuide::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeMap
// 0x0038 (0x00A4 - 0x006C)
class UCombatDataTableRefModeMap : public UCombatDataTableType
{
public:
	struct FString                                     modeCodename;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	struct FString                                     ModeGroupName;                                    		// 0x007C (0x0010) [0x0000000000000000]              
	struct FString                                     mapCodename;                                      		// 0x008C (0x0010) [0x0000000000000000]              
	int                                                ImageID_Minimap;                                  		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                BetaVersion;                                      		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1667 ];

		return pClassPointer;
	};

	void GetBetaVersion ( );
	void GetImageID_Minimap ( );
	void GetMapCodename ( );
	void GetModeGroupname ( );
	void GetModeCodename ( );
};

UClass* UCombatDataTableRefModeMap::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeOption
// 0x0044 (0x00B0 - 0x006C)
class UCombatDataTableRefModeOption : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                Show;                                             		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                DefaultOption;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                OptionCount;                                      		// 0x0088 (0x0004) [0x0000000000000000]              
	TArray< int >                                      Option;                                           		// 0x008C (0x0010) [0x0000000000000000]              
	int                                                UsingStringAll;                                   		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                StringAll;                                        		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                String0;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                String1;                                          		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                String2;                                          		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1668 ];

		return pClassPointer;
	};

	void GetDefaultOptionValue ( );
	void GetDescriptionID ( );
	void GetOption ( );
	void GetOptionCount ( );
	void GetDefaultOption ( );
	void IsShow ( );
	void GetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefModeOption::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeTip
// 0x002C (0x0098 - 0x006C)
class UCombatDataTableRefModeTip : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     Reference;                                        		// 0x0080 (0x0010) [0x0000000000000000]              
	int                                                StringID_MIN;                                     		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                StringID_MAX;                                     		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1669 ];

		return pClassPointer;
	};

	void GetStringID_MAX ( );
	void GetStringID_MIN ( );
	void GetReference ( );
	void GetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefModeTip::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMoneyDisplay
// 0x0014 (0x0080 - 0x006C)
class UCombatDataTableRefMoneyDisplay : public UCombatDataTableType
{
public:
	int                                                MoneyID;                                          		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Display_Tooltip;                                  		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                Renew_Tooltip;                                    		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                Charge_Tooltip;                                   		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      Toggle_Renew : 1;                                 		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      Toggle_Charge : 1;                                		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1670 ];

		return pClassPointer;
	};

	void GetToggle_Charge ( );
	void GetToggle_Renew ( );
	void GetCharge_Tooltip ( );
	void GetRenew_Tooltip ( );
	void GetDisplay_Tooltip ( );
	void GetMoneyID ( );
};

UClass* UCombatDataTableRefMoneyDisplay::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPenalty
// 0x001C (0x0088 - 0x006C)
class UCombatDataTableRefPenalty : public UCombatDataTableType
{
public:
	int                                                Idx;                                              		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                ApplyRunawayCount;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                CountAlleviationMinute;                           		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1671 ];

		return pClassPointer;
	};

	void GetCountAlleviationMinute ( );
	void GetApplyRunawayCount ( );
	void GetCodeName ( );
	void GetIdx ( );
};

UClass* UCombatDataTableRefPenalty::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPenaltyBind
// 0x0020 (0x008C - 0x006C)
class UCombatDataTableRefPenaltyBind : public UCombatDataTableType
{
public:
	struct FString                                     Penalty;                                          		// 0x006C (0x0010) [0x0000000000000000]              
	struct FString                                     ModeGroup;                                        		// 0x007C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1672 ];

		return pClassPointer;
	};

	void GetModeGroup ( );
	void GetPenalty ( );
};

UClass* UCombatDataTableRefPenaltyBind::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPickup
// 0x0040 (0x00AC - 0x006C)
class UCombatDataTableRefPickup : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                MainAmmoRate;                                     		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                SubAmmoRate;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_A;                                    		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_B;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_C;                                    		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                CureHealthRate;                                   		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FString                                     ScriptFileName;                                   		// 0x0098 (0x0010) [0x0000000000000000]              
	int                                                StringID;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1673 ];

		return pClassPointer;
	};

	void GetScriptFileName ( );
	void GetCureHealthRate ( );
	void GetGrenadeRate_C ( );
	void GetGrenadeRate_B ( );
	void GetGrenadeRate_A ( );
	void GetSubAmmoRate ( );
	void GetMainAmmoRate ( );
};

UClass* UCombatDataTableRefPickup::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPickUpDisplay
// 0x000C (0x0078 - 0x006C)
class UCombatDataTableRefPickUpDisplay : public UCombatDataTableType
{
public:
	int                                                Min;                                              		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Max;                                              		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                String_ID;                                        		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1674 ];

		return pClassPointer;
	};

	void GetStringID ( );
	void GetMax ( );
	void GetMin ( );
};

UClass* UCombatDataTableRefPickUpDisplay::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPreset
// 0x00A8 (0x0114 - 0x006C)
class UCombatDataTableRefPreset : public UCombatDataTableType
{
public:
	int                                                PresetNum;                                        		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                PresetNameID;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     PrimaryWeapon;                                    		// 0x0074 (0x0010) [0x0000000000000000]              
	struct FString                                     SubWeapon;                                        		// 0x0084 (0x0010) [0x0000000000000000]              
	struct FString                                     MeleeWeapon;                                      		// 0x0094 (0x0010) [0x0000000000000000]              
	struct FString                                     GrenadeA;                                         		// 0x00A4 (0x0010) [0x0000000000000000]              
	struct FString                                     GrenadeB;                                         		// 0x00B4 (0x0010) [0x0000000000000000]              
	struct FString                                     GrenadeC;                                         		// 0x00C4 (0x0010) [0x0000000000000000]              
	struct FString                                     Chip_A;                                           		// 0x00D4 (0x0010) [0x0000000000000000]              
	struct FString                                     Chip_B;                                           		// 0x00E4 (0x0010) [0x0000000000000000]              
	struct FString                                     Chip_C;                                           		// 0x00F4 (0x0010) [0x0000000000000000]              
	struct FString                                     Chip_D;                                           		// 0x0104 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1675 ];

		return pClassPointer;
	};

	void GetChip_D ( );
	void GetChip_C ( );
	void GetChip_B ( );
	void GetChip_A ( );
	void GetGrenadeC ( );
	void GetGrenadeB ( );
	void GetGrenadeA ( );
	void GetMeleeWeapon ( );
	void GetSubWeapon ( );
	void GetPrimaryWeapon ( );
	void GetPresetNameID ( );
	void GetPresetNum ( );
};

UClass* UCombatDataTableRefPreset::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefQuest
// 0x0034 (0x00A0 - 0x006C)
class UCombatDataTableRefQuest : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                QuestNameID;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                QuestObjectiveID;                                 		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                QuestDescriptionID;                               		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                TotalCount;                                       		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                TotalCountType;                                   		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                TotalStep;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                MissionProgressStringID;                          		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned char                                      QuestGroup;                                       		// 0x008C (0x0001) [0x0000000000000000]              
	unsigned char                                      QuestType;                                        		// 0x008D (0x0001) [0x0000000000000000]              
	TArray< struct FStepByStepRewardType >             StepByStepReward;                                 		// 0x0090 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1676 ];

		return pClassPointer;
	};

	void GetStepByStepReward ( );
	void GetQuestType ( );
	void GetQuestGroup ( );
	void GetMissionProgressStringID ( );
	void GetTotalStep ( );
	void GetTotalCountType ( );
	void GetTotalCount ( );
	void GetQuestDescriptionID ( );
	void GetQuestObjectiveID ( );
	void GetQuestNameID ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefQuest::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRandomBox
// 0x0024 (0x0090 - 0x006C)
class UCombatDataTableRefRandomBox : public UCombatDataTableType
{
public:
	struct FString                                     ItemCodeName;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	struct FString                                     CubeCodeName;                                     		// 0x007C (0x0010) [0x0000000000000000]              
	int                                                OutputGrade;                                      		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1677 ];

		return pClassPointer;
	};

	void GetOutputGrade ( );
	void GetCubeCodeName ( );
	void GetItemCodeName ( );
};

UClass* UCombatDataTableRefRandomBox::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRandomBoxCost
// 0x0018 (0x0084 - 0x006C)
class UCombatDataTableRefRandomBoxCost : public UCombatDataTableType
{
public:
	struct FString                                     ItemCodeName;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                BoxResourceIndex;                                 		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      bChangeScene : 1;                                 		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1678 ];

		return pClassPointer;
	};

	void GetBoxResourceIndex ( );
	void IsChangeScene ( );
	void GetItemCodeName ( );
};

UClass* UCombatDataTableRefRandomBoxCost::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRank
// 0x0040 (0x00AC - 0x006C)
class UCombatDataTableRefRank : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                RankName;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     BigIconName;                                      		// 0x0084 (0x0010) [0x0000000000000000]              
	struct FString                                     SmallIconName;                                    		// 0x0094 (0x0010) [0x0000000000000000]              
	int                                                ImageID_Big;                                      		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Small;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1679 ];

		return pClassPointer;
	};

	void GetImageID_Small ( );
	void GetImageID_Big ( );
	void GetSmallIconName ( );
	void GetBigIconName ( );
	void GetRankName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefRank::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRankUp
// 0x0030 (0x009C - 0x006C)
class UCombatDataTableRefRankUp : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Rank;                                             		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                GoalExp;                                          		// 0x0074 (0x0004) [0x0000000000000000]              
	TArray< struct FUnlockSkillData >                  UnlockSkillList;                                  		// 0x0078 (0x0010) [0x0000000000000000]              
	unsigned long                                      bLastRank : 1;                                    		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     RankCodeName;                                     		// 0x008C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1680 ];

		return pClassPointer;
	};

	void GetActiveSkill ( );
	void GetUnlockSkill ( );
	void CheckLastRank ( );
	void GetRankTableCodeName ( );
	void GetGoalExp ( );
	void GetRank ( );
	void GetID ( );
};

UClass* UCombatDataTableRefRankUp::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefResultReward
// 0x0020 (0x008C - 0x006C)
class UCombatDataTableRefResultReward : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     ItemCodeName;                                     		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                EffectType;                                       		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                StringID;                                         		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                SmallIconID;                                      		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1681 ];

		return pClassPointer;
	};

	void GetSmallIconID ( );
	void GetStringID ( );
	void GetEffectType ( );
	void GetItemCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefResultReward::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefReward
// 0x004C (0x00B8 - 0x006C)
class UCombatDataTableRefReward : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                ShowItemImage;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                RewardGameMoney;                                  		// 0x0084 (0x0004) [0x0000000000000000]              
	TArray< struct FRewardData >                       RewardDataList;                                   		// 0x0088 (0x0010) [0x0000000000000000]              
	struct FString                                     MailFormCodename;                                 		// 0x0098 (0x0010) [0x0000000000000000]              
	int                                                Medal;                                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                BSCoin;                                           		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                MCoin;                                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                GCoin;                                            		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1682 ];

		return pClassPointer;
	};

	void GetRewardItemSize ( );
	void GetRewardItemValueType ( );
	void GetRewardItemValue ( );
	void GetRewardItemCodeName ( );
	void GetRewardGCoin ( );
	void GetRewardMCoin ( );
	void GetRewardBSCoin ( );
	void GetRewardMedal ( );
	void GetRewardGameMoney ( );
	void GetShowItemImage ( );
};

UClass* UCombatDataTableRefReward::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRoomName
// 0x0008 (0x0074 - 0x006C)
class UCombatDataTableRefRoomName : public UCombatDataTableType
{
public:
	int                                                Code;                                             		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                DisplayID;                                        		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1683 ];

		return pClassPointer;
	};

	void GetDisplayID ( );
};

UClass* UCombatDataTableRefRoomName::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShop
// 0x0018 (0x0084 - 0x006C)
class UCombatDataTableRefShop : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                ShopNameID;                                       		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1684 ];

		return pClassPointer;
	};

	void GetShopNameID ( );
	void GetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefShop::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopCategory
// 0x0030 (0x009C - 0x006C)
class UCombatDataTableRefShopCategory : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     ShopCodename;                                     		// 0x0080 (0x0010) [0x0000000000000000]              
	int                                                ServiceType;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                SubCategoryType;                                  		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                DisplaynameID;                                    		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1685 ];

		return pClassPointer;
	};

	void GetShopCodename ( );
	void GetCodeName ( );
	void GetDisplaynameID ( );
	void GetCategoryType ( );
	void IsService ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefShopCategory::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopItem
// 0x0064 (0x00D0 - 0x006C)
class UCombatDataTableRefShopItem : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                CategoryIndex;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                Service;                                          		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FTimeData                                   SellStart;                                        		// 0x0088 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   SellEnd;                                          		// 0x0090 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   RentalEndDate;                                    		// 0x0098 (0x0008) [0x0000000000000000]              
	int                                                RentalID;                                         		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                DisplaynameID;                                    		// 0x00A4 (0x0004) [0x0000000000000000]              
	struct FString                                     Thumbnail;                                        		// 0x00A8 (0x0010) [0x0000000000000000]              
	int                                                BackImage;                                        		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                EffectDescID;                                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                ItemDescID;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                ItemTag;                                          		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                GetType;                                          		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1686 ];

		return pClassPointer;
	};

	void GetGetType ( );
	void GetItemDescID ( );
	void GetEffectDescID ( );
	void eventIsHotTagShopItem ( );
	void eventIsNewTagShopItem ( );
	void eventGetBackImage ( );
	void eventGetImageID ( );
	void eventGetThumbnail ( );
	void eventGetDisplaynameID ( );
	void eventGetRentalID ( );
	void GetRentalEndDate ( );
	void eventGetCodeName ( );
	void eventGetIndex ( );
	void IsCashItem ( );
	void GetSellEnd ( );
	void GetSellStart ( );
	void GetCategoryIndex ( );
};

UClass* UCombatDataTableRefShopItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopSellItem
// 0x0020 (0x008C - 0x006C)
class UCombatDataTableRefShopSellItem : public UCombatDataTableType
{
public:
	int                                                TimeCondition;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                OverlapCondition;                                 		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                MoneyType;                                        		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                SellCost;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x007C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1687 ];

		return pClassPointer;
	};

	void GetCodeName ( );
	void GetSellCost ( );
	void GetMoneyType ( );
	void GetOverlapCondition ( );
	void GetTimeCondition ( );
	void GetRefShopSellItem ( );
};

UClass* UCombatDataTableRefShopSellItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopTab
// 0x0024 (0x0090 - 0x006C)
class UCombatDataTableRefShopTab : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     MainTab;                                          		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     SubTab;                                           		// 0x0080 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1688 ];

		return pClassPointer;
	};

	void GetSubTab ( );
	void GetMainTab ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefShopTab::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopValue
// 0x0098 (0x0104 - 0x006C)
class UCombatDataTableRefShopValue : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                RentalID;                                         		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                ValueType;                                        		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                ValueRange[ 0x5 ];                                		// 0x0078 (0x0014) [0x0000000000000000]              
	int                                                PriceType;                                        		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                ItemPrice[ 0x5 ];                                 		// 0x0090 (0x0014) [0x0000000000000000]              
	int                                                Mainprice;                                        		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                SalePrice[ 0x5 ];                                 		// 0x00A8 (0x0014) [0x0000000000000000]              
	int                                                AddPriceType;                                     		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                AddPrice[ 0x5 ];                                  		// 0x00C0 (0x0014) [0x0000000000000000]              
	struct FTimeData                                   SellStart;                                        		// 0x00D4 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   SellEnd;                                          		// 0x00DC (0x0008) [0x0000000000000000]              
	struct FString                                     AddReplaceItem;                                   		// 0x00E4 (0x0010) [0x0000000000000000]              
	struct FString                                     MailFormCodename;                                 		// 0x00F4 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1689 ];

		return pClassPointer;
	};

	void GetSalePrice ( );
	void GetMainPrice ( );
	void GetItemPrice ( );
	void GetPriceType ( );
	void GetItemValueRange ( );
	void GetValueType ( );
	void GetRentalID ( );
	void GetIndex ( );
	void GetSaleEnd ( );
	void GetSaleStart ( );
};

UClass* UCombatDataTableRefShopValue::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSkill
// 0x0080 (0x00EC - 0x006C)
class UCombatDataTableRefSkill : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     GroupCodeName;                                    		// 0x0080 (0x0010) [0x0000000000000000]              
	struct FString                                     LicenseCodeName;                                  		// 0x0090 (0x0010) [0x0000000000000000]              
	int                                                ActiveUser;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                Skilltype;                                        		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                SkillCategory;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                Cost;                                             		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                Count;                                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned char                                      CoolTimeType;                                     		// 0x00B4 (0x0001) [0x0000000000000000]              
	int                                                CoolTime;                                         		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FString                                     ScriptFile;                                       		// 0x00BC (0x0010) [0x0000000000000000]              
	unsigned long                                      HoldSkill : 1;                                    		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                ItemName;                                         		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FString                                     HUDIcon;                                          		// 0x00D4 (0x0010) [0x0000000000000000]              
	int                                                Description;                                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1690 ];

		return pClassPointer;
	};

	void GetHoldSkill ( );
	void GetImageID ( );
	void GetHUDIcon ( );
	void GetScriptFile ( );
	void GetCoolTime ( );
	void GetCoolTimeType ( );
	void GetCategory ( );
	void GetCount ( );
	void GetCost ( );
	void GetGroupCodeName ( );
	void eventGetLicenseCodeName ( );
	void GetCodeName ( );
	void eventGetSkillType ( );
	void DescriptionID ( );
	void GetNameID ( );
	void eventGetIndex ( );
};

UClass* UCombatDataTableRefSkill::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSkillLicense
// 0x0028 (0x0094 - 0x006C)
class UCombatDataTableRefSkillLicense : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                GRADE;                                            		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     LicenseCodeName;                                  		// 0x0074 (0x0010) [0x0000000000000000]              
	struct FString                                     ItemCodeName;                                     		// 0x0084 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1691 ];

		return pClassPointer;
	};

	void GetItemCodeName ( );
	void eventGetLicenseCodeName ( );
	void GetSkillGrade ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefSkillLicense::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefStat
// 0x0088 (0x00F4 - 0x006C)
class UCombatDataTableRefStat : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                StatName;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                StatDesc;                                         		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                RecordType;                                       		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned char                                      GameSetTableKey;                                  		// 0x008C (0x0001) [0x0000000000000000]              
	unsigned char                                      DataSetTableKey;                                  		// 0x008D (0x0001) [0x0000000000000000]              
	unsigned char                                      ConstValueKey;                                    		// 0x008E (0x0001) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0090 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatDataTableRefStat.Event
	struct FString                                     RefModeCodeName;                                  		// 0x0094 (0x0010) [0x0000000000000000]              
	struct FString                                     RefMapCodeName;                                   		// 0x00A4 (0x0010) [0x0000000000000000]              
	struct FString                                     RefStatGroupCodeName;                             		// 0x00B4 (0x0010) [0x0000000000000000]              
	struct FString                                     RefItemCodeName;                                  		// 0x00C4 (0x0010) [0x0000000000000000]              
	struct FString                                     RefRankCodeName;                                  		// 0x00D4 (0x0010) [0x0000000000000000]              
	struct FString                                     RefScoringCodeName;                               		// 0x00E4 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1692 ];

		return pClassPointer;
	};

	void GetEventIndex ( );
	void GetStatId ( );
	void GetRecordType ( );
	void GetStatDesc ( );
	void GetStatName ( );
	void GetCodeName ( );
	void GetIndex ( );
};

UClass* UCombatDataTableRefStat::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSteamItem
// 0x0010 (0x007C - 0x006C)
class UCombatDataTableRefSteamItem : public UCombatDataTableType
{
public:
	struct FString                                     ITEM_CODE_NAME;                                   		// 0x006C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1693 ];

		return pClassPointer;
	};

	void GetItemCodeName ( );
};

UClass* UCombatDataTableRefSteamItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSystemImage
// 0x0009 (0x0075 - 0x006C)
class UCombatDataTableRefSystemImage : public UCombatDataTableType
{
public:
	int                                                ImageID;                                          		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                GRADE;                                            		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned char                                      ImageType;                                        		// 0x0074 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1694 ];

		return pClassPointer;
	};

	void GetImageID ( );
};

UClass* UCombatDataTableRefSystemImage::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSystemTextColor
// 0x0014 (0x0080 - 0x006C)
class UCombatDataTableRefSystemTextColor : public UCombatDataTableType
{
public:
	int                                                GRADE;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     TextColor;                                        		// 0x0070 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1695 ];

		return pClassPointer;
	};

	void GetGrade ( );
	void GetTextColor ( );
};

UClass* UCombatDataTableRefSystemTextColor::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTier
// 0x005C (0x00C8 - 0x006C)
class UCombatDataTableRefTier : public UCombatDataTableType
{
public:
	struct FString                                     TierCodeName;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                Tier;                                             		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                GoalTierPoint;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                NameID;                                           		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     Img1;                                             		// 0x0088 (0x0010) [0x0000000000000000]              
	struct FString                                     Img2;                                             		// 0x0098 (0x0010) [0x0000000000000000]              
	struct FString                                     TierUpImg;                                        		// 0x00A8 (0x0010) [0x0000000000000000]              
	int                                                ImageID_Small;                                    		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Big;                                      		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                ImageID_TierUp;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                Profile_Tier_Edge;                                		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1696 ];

		return pClassPointer;
	};

	void GetProfile_Tier_Edge ( );
	void GetImageID_TierUp ( );
	void GetImageID_Big ( );
	void GetImageID_Small ( );
	void GetTierUpImg ( );
	void GetImg2 ( );
	void GetImg1 ( );
	void GetNameID ( );
	void GetGoalTierPoint ( );
	void GetTier ( );
	void GetTierCodeName ( );
	void GetTierTableFromScore ( );
};

UClass* UCombatDataTableRefTier::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTierSeason
// 0x0030 (0x009C - 0x006C)
class UCombatDataTableRefTierSeason : public UCombatDataTableType
{
public:
	struct FString                                     modeCodename;                                     		// 0x006C (0x0010) [0x0000000000000000]              
	struct FString                                     TierCodeName;                                     		// 0x007C (0x0010) [0x0000000000000000]              
	struct FString                                     SeasonString;                                     		// 0x008C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1697 ];

		return pClassPointer;
	};

	void GetSeasonString ( );
	void GetTierCodeName ( );
	void GetModeCodename ( );
	void GetSeasonStringFromModeCodeName ( );
	void GetTierSeasonTableFromModeCodeName ( );
};

UClass* UCombatDataTableRefTierSeason::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTodayGame
// 0x0038 (0x00A4 - 0x006C)
class UCombatDataTableRefTodayGame : public UCombatDataTableType
{
public:
	int                                                Idx;                                              		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	int                                                DayInfo;                                          		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     ModeGroupCodename;                                		// 0x0084 (0x0010) [0x0000000000000000]              
	struct FTimeData                                   StartDay;                                         		// 0x0094 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   EndDay;                                           		// 0x009C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1698 ];

		return pClassPointer;
	};

	void GetEndDay ( );
	void GetStartDay ( );
	void GetModeGroupCodename ( );
	void GetDayInfo ( );
	void GetCodeName ( );
	void GetIdx ( );
};

UClass* UCombatDataTableRefTodayGame::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTodayGameBindMode
// 0x0038 (0x00A4 - 0x006C)
class UCombatDataTableRefTodayGameBindMode : public UCombatDataTableType
{
public:
	struct FString                                     TodayGameCodeName;                                		// 0x006C (0x0010) [0x0000000000000000]              
	struct FString                                     modeCodename;                                     		// 0x007C (0x0010) [0x0000000000000000]              
	int                                                DisplaynameID;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                DisplayDescriptionID;                             		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                DisplayModeNameID;                                		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                DisplayThumbnailImageID;                          		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                BGThumbnailImageID;                               		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                ModeThumbnailImageID;                             		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1699 ];

		return pClassPointer;
	};

	void GetModeThumbnailImageID ( );
	void GetBGThumbnailImageID ( );
	void GetDisplayThumbnailImageID ( );
	void GetDisplayModeNameID ( );
	void GetDisplayDescriptionID ( );
	void GetDisplaynameID ( );
	void GetModeCodename ( );
	void GetTodayGameCodeName ( );
};

UClass* UCombatDataTableRefTodayGameBindMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTypeDefine
// 0x002C (0x0098 - 0x006C)
class UCombatDataTableRefTypeDefine : public UCombatDataTableType
{
public:
	int                                                CodeID;                                           		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      BUY_AFTER;                                        		// 0x0070 (0x0001) [0x0000000000000000]              
	struct FString                                     BUY_UC_FILE;                                      		// 0x0074 (0x0010) [0x0000000000000000]              
	int                                                String_ID;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     CODE_NAME;                                        		// 0x0088 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1700 ];

		return pClassPointer;
	};

	void GetCodeName ( );
	void GetUCFile ( );
	void GetBuyAfter ( );
	void GetStringID ( );
};

UClass* UCombatDataTableRefTypeDefine::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefWeaponGroup
// 0x0014 (0x0080 - 0x006C)
class UCombatDataTableRefWeaponGroup : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     GroupName;                                        		// 0x0070 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1701 ];

		return pClassPointer;
	};

};

UClass* UCombatDataTableRefWeaponGroup::pClassPointer = NULL;

// Class CombatGame.CombatLocaizedChatCommandData
// 0x0024 (0x0090 - 0x006C)
class UCombatLocaizedChatCommandData : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     StringVal_INT;                                    		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     StringVal_LOCAL;                                  		// 0x0080 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1702 ];

		return pClassPointer;
	};

};

UClass* UCombatLocaizedChatCommandData::pClassPointer = NULL;

// Class CombatGame.CombatLocaizedTextData
// 0x0014 (0x0080 - 0x006C)
class UCombatLocaizedTextData : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     StringVal;                                        		// 0x0070 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1703 ];

		return pClassPointer;
	};

};

UClass* UCombatLocaizedTextData::pClassPointer = NULL;

// Class CombatGame.CombatDBManager
// 0x0098 (0x00F8 - 0x0060)
class UCombatDBManager : public UObject
{
public:
	TArray< struct FExcelExternalCallType >            ExcelExternalCallStorage;                         		// 0x0060 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0070 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatDBManager.ModeGrouping
	TArray< int >                                      PrimaryWeaponGroupping;                           		// 0x00B8 (0x0010) [0x0000000000000000]              
	TArray< int >                                      SubWeaponGroupping;                               		// 0x00C8 (0x0010) [0x0000000000000000]              
	TArray< int >                                      MeleeWeaponGroupping;                             		// 0x00D8 (0x0010) [0x0000000000000000]              
	TArray< int >                                      ThrowWeaponGroupping;                             		// 0x00E8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1704 ];

		return pClassPointer;
	};

	void GetMyStatEx ( );
	void GetMyStat ( );
	void GetMakeID ( );
	void GetStatDBID ( );
	void IsExternalCallItem ( );
	void GetExternalCallItemData ( );
	void AddExternalCallItem ( );
	void InitExternalCallData ( );
};

UClass* UCombatDBManager::pClassPointer = NULL;

// Class CombatGame.CombatDecalManager
// 0x003C (0x02BC - 0x0280)
class ACombatDecalManager : public ADecalManager
{
public:
	float                                              MinDecalDistanceSq;                               		// 0x0280 (0x0004) [0x0000000000000000]              
	TArray< class ACombatSprayDecalActor* >            ActiveSprays;                                     		// 0x0284 (0x0010) [0x0000000000000000]              
	TArray< class ADecalActorBase* >                   LevelDecals;                                      		// 0x0294 (0x0010) [0x0000000000000000]              
	float                                              SprayDecalBaseDepthBias;                          		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              LevelDecalBaseDepthBias;                          		// 0x02A8 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __SpraySort__Delegate;                            		// 0x02AC (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02B0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1705 ];

		return pClassPointer;
	};

	void CacheLevelDecals ( );
	void SpraySort ( );
	void IsSprayOverlapped ( );
	void CalcSprayDepth ( );
	void ReCalculateDepthBiasOfDynamicDecals ( );
	void ReCalculateDepthBiasOfImpactDecals ( );
	void ReCalculateDepthBiasOfLevelDecals ( );
	void OnSprayMoved ( );
	void UnRegisterSpray ( );
	void RegisterSpray ( );
	void ClientReset ( );
	void Reset ( );
	void SpawnDecalMinimal ( );
	void TooCloseToActiveDecal ( );
	void GetPooledComponent ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatDecalManager::pClassPointer = NULL;

// Class CombatGame.CombatDedicatedSvrNetwork
// 0x0000 (0x0060 - 0x0060)
class UCombatDedicatedSvrNetwork : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1706 ];

		return pClassPointer;
	};

	void eventEndGame ( );
	void GetOpenChannelType ( );
	void GetChannelPingTolerance ( );
	void GetChannelPingCount ( );
	void IsChannelPingBlock ( );
	void GetClanMatchRefModeID ( );
	void GetClanID ( );
	void GetClanMatchClanID ( );
	void SetEnteringState ( );
	void InvalidateTheMatch ( );
	void SetReadyToMatch ( );
	void SetSessionDisconnected ( );
	void SetSessionConnected ( );
	void GetDemoRec ( );
	void GetSlotNumber ( );
	void GetNickname ( );
	void GetHostUserID ( );
	void GetActivePlayerCount_Clan ( );
	void GetActivePlayerCount_Team ( );
	void GetActivePlayerCount ( );
	void GetConnectingPlayersCount_ClanDetail ( );
	void GetConnectingPlayersCount_Clan ( );
	void GetConnectingPlayersCount_Detail ( );
	void GetConnectingPlayersCount_PCType ( );
	void GetConnectingPlayersCount_Team ( );
	void GetConnectingPlayersCount ( );
	void GetPlayerType ( );
	void GetGrade ( );
	void GetTeam ( );
	void GetSessionInformation ( );
	void CheckSecurityCode ( );
	void GetChampionShipChannel ( );
	void GetCurrentGame_ChangeTeam ( );
	void GetCurrentGame_Difficulty ( );
	void GetCurrentGame_Observer ( );
	void GetCurrentGame_DeathChat ( );
	void GetCurrentGame_FreeCameraView ( );
	void GetCurrentGame_ThirdCameraView ( );
	void GetCurrentGame_PlayTime ( );
	void GetCurrentGame_GoalScore ( );
	void GetCurrentGame_GoalMission ( );
	void GetCurrentGame_GoalRound ( );
	void GetCurrentGame_RefMapID ( );
	void GetCurrentGame_RefModeID ( );
	void IsDedicatedServer ( );
};

UClass* UCombatDedicatedSvrNetwork::pClassPointer = NULL;

// Class CombatGame.CombatDedicatedSvrProfiler
// 0x0000 (0x0060 - 0x0060)
class UCombatDedicatedSvrProfiler : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1707 ];

		return pClassPointer;
	};

	void NSSProfiler_Exec ( );
	void NSSProfiler_SetAutoStart ( );
	void NSSProfiler_IsAutoStart ( );
	void NSSProfiler_ForcedTimeLimitsSecForTesting ( );
	void NSSProfiler_Stop ( );
	void NSSProfiler_Start ( );
};

UClass* UCombatDedicatedSvrProfiler::pClassPointer = NULL;

// Class CombatGame.CombatDestroyableActor
// 0x0010 (0x0254 - 0x0244)
class ACombatDestroyableActor : public AActor
{
public:
	int                                                Health;                                           		// 0x0244 (0x0004) [0x0000000000150000]              ( CPF_Travel | CPF_GlobalConfig )
	unsigned char                                      TeamIndex;                                        		// 0x0248 (0x0001) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x024C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1708 ];

		return pClassPointer;
	};

	void eventTakeDamage ( );
	void PlayDying ( );
	void eventScriptGetTeamNum ( );
	void GetTeamNum ( );
	void eventReplicatedEvent ( );
	void eventGetHealth ( );
	void SupportTakeDamageDataSave ( );
};

UClass* ACombatDestroyableActor::pClassPointer = NULL;

// Class CombatGame.CombatSkillActor_UAV
// 0x004C (0x02A0 - 0x0254)
class ACombatSkillActor_UAV : public ACombatDestroyableActor
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0254 (0x0008) [0x0000000000000000]              
	unsigned long                                      SmokingHot : 1;                                   		// 0x025C (0x0004) [0x0000000000170000] [0x00000001] ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	float                                              DetectionArea;                                    		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              DetectionAreaSquare;                              		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              DeathTime;                                        		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              SmokeThreshold;                                   		// 0x026C (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             ExploEmitter;                                     		// 0x0270 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             SmokePSCTemplate;                                 		// 0x0278 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    SmokePSC;                                         		// 0x0280 (0x0008) [0x0000000000000000]              
	class ULensFlareComponent*                         IFF_Effect;                                       		// 0x0288 (0x0008) [0x0000000000000000]              
	class ULensFlare*                                  IFF_FriendTemplate;                               		// 0x0290 (0x0008) [0x0000000000000000]              
	class ULensFlare*                                  IFF_FoeTemplate;                                  		// 0x0298 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1709 ];

		return pClassPointer;
	};

	void StopDamageEffect ( );
	void PlayDamageEffect ( );
	void SpawnExplosionParticleSystem ( );
	void PlayDying ( );
	void eventTakeDamage ( );
	void SetIFFBeacon ( );
	void RemoveFromLocalPC ( );
	void eventDestroyed ( );
	void RegisterAtLocalPC ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( );
	void eventGetActorName ( );
};

UClass* ACombatSkillActor_UAV::pClassPointer = NULL;

// Class CombatGame.CombatDestructibleObject
// 0x01D8 (0x041C - 0x0244)
class ACombatDestructibleObject : public AActor
{
public:
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x0244 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x024C (0x0008) [0x0000000000000000]              
	int                                                ObjInstanceVersion;                               		// 0x0254 (0x0004) [0x0000000000000000]              
	unsigned long                                      bComponentsSetUp : 1;                             		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShutDown : 1;                                    		// 0x0258 (0x0004) [0x0000000000150000] [0x00000002] ( CPF_Travel | CPF_GlobalConfig )
	unsigned long                                      bHasBeenDestroyed : 1;                            		// 0x0258 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bInitRBPhysCalled : 1;                            		// 0x0258 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bLimitDamageTypes : 1;                            		// 0x0258 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bAllowCompleteDestruction : 1;                    		// 0x0258 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bCastStaticShadow : 1;                            		// 0x0258 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bInternalPathsEnabled : 1;                        		// 0x0258 (0x0004) [0x0000000000000000] [0x00000080] 
	TArray< class UClass* >                            VulnerableToDamageType;                           		// 0x025C (0x0010) [0x0000000000000000]              
	TArray< class UClass* >                            InstaKillDamageType;                              		// 0x026C (0x0010) [0x0000000000000000]              
	TArray< class UClass* >                            IgnoreDamageType;                                 		// 0x027C (0x0010) [0x0000000000000000]              
	float                                              SelfDestructAllDelay;                             		// 0x028C (0x0004) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0290 (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironmentToUseForActorSpawnParams;         		// 0x0298 (0x0008) [0x0000000000000000]              
	struct FLightingChannelContainer                   LightingChannelsToUseForActorSpawnParams;         		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x02A4 (0x0008) [0x0000000000000000]              
	class AController*                                 CauserController;                                 		// 0x02AC (0x0008) [0x0000000000000000]              
	TArray< struct FDestructibleSubobject >            SubObjects;                                       		// 0x02B4 (0x0010) [0x0000000000000000]              
	TArray< struct FSubObjectStaticLightingInfo >      SubObjectLightingInfos;                           		// 0x02C4 (0x0010) [0x0000000000000000]              
	TArray< float >                                    SubObjectHealths;                                 		// 0x02D4 (0x0010) [0x0000000000000000]              
	TArray< float >                                    TempDamageCache;                                  		// 0x02E4 (0x0010) [0x0000000000000000]              
	unsigned char                                      ResetCount;                                       		// 0x02F4 (0x0001) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	unsigned char                                      ProcessedMods[ 0x20 ];                            		// 0x02F5 (0x0020) [0x0000000000000000]              
	struct FReplicatedDamageModInfo                    ReplicatedDamageMods[ 0x20 ];                     		// 0x0318 (0x0100) [0x0000000000170000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	float                                              ClosestLocalPlayerSqDist;                         		// 0x0418 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1710 ];

		return pClassPointer;
	};

	void GetBP ( );
	void GetGrade ( );
	void Reset ( );
	void ClearResetCount ( );
	void eventExplosion ( );
	void eventApplySplashDamage ( );
	void eventReplicateDamageMod ( );
	void eventReplicatedEvent ( );
	void eventTriggerDestroyedEvent ( );
	void eventTakeDamage ( );
	void TakeRadiusDamage ( );
	void MoveCollidingPawns ( );
	void eventUnShutDownObject ( );
	void eventShutDownSubObject ( );
	void eventDelayedShutDownObject ( );
	void ShutDownObject ( );
	void DamageSubObject ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void SetInternalPathsEnabled ( );
	void OneTimeInit ( );
	void RemoveDecals ( );
	void ApplyDamageMod ( );
	void SetSubObjectStaticMesh ( );
	void SetupComponents ( );
	void UnDestroy ( );
	void IsAlive ( );
};

UClass* ACombatDestructibleObject::pClassPointer = NULL;

// Class CombatGame.CombatDialogCombiinationAudio
// 0x0028 (0x0088 - 0x0060)
class UCombatDialogCombiinationAudio : public UObject
{
public:
	TArray< class USoundCue* >                         CombiinationSoundCues;                            		// 0x0060 (0x0010) [0x0000000000000000]              
	int                                                TotalWords;                                       		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                nowPlayingWordNum;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	class AActor*                                      Owner;                                            		// 0x0078 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             DialogAC;                                         		// 0x0080 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1711 ];

		return pClassPointer;
	};

	void OnWordFinished ( );
	void PlayWords ( );
	void ResetDialog ( );
};

UClass* UCombatDialogCombiinationAudio::pClassPointer = NULL;

// Class CombatGame.CombatDroppedBase
// 0x00BD (0x031D - 0x0260)
class ACombatDroppedBase : public ADroppedPickup
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x0260 (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           MyLightEnvironment;                               		// 0x0268 (0x0008) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0270 (0x0008) [0x0000000000000000]              
	float                                              PickupableDist;                                   		// 0x0278 (0x0004) [0x0000000000000000]              
	struct FRotator                                    DropRotation;                                     		// 0x027C (0x000C) [0x0000000000000000]              
	struct FRotator                                    LandedRotation;                                   		// 0x0288 (0x000C) [0x0000000000000000]              
	float                                              TossSpeed;                                        		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              TossZ;                                            		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              CylinderRadiusOnFalling;                          		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              CustomGravityScaling;                             		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              PickupableDelayTime;                              		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FOutlineProperty                            OutlineProperty;                                  		// 0x02A8 (0x003C) [0x0000000000000000]              
	class USoundCue*                                   PickupSound;                                      		// 0x02E4 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   EnemyPickupSound;                                 		// 0x02EC (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DroppedSound;                                     		// 0x02F4 (0x0008) [0x0000000000000000]              
	float                                              PickupableDistSq;                                 		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              MeshHeightOffset;                                 		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              InitialLifeSpan;                                  		// 0x0304 (0x0004) [0x0000000000170000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	TArray< struct FName >                             AdditionalHideBone;                               		// 0x0308 (0x0010) [0x0000000000000000]              
	unsigned long                                      bPickupable : 1;                                  		// 0x0318 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInitDroppedPickupMesh : 1;                       		// 0x0318 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPickUpByTouching : 1;                            		// 0x0318 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDropSameInventoryGroup : 1;                      		// 0x0318 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDestroySameInventoryGroup : 1;                   		// 0x0318 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bGiveInventory : 1;                               		// 0x0318 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      ValidTeamIndex;                                   		// 0x031C (0x0001) [0x000000000018000A]              ( CPF_Const | CPF_ExportObject | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1712 ];

		return pClassPointer;
	};

	void eventToggleCylinderSize ( );
	void eventLanded ( );
	void SetPickupable ( );
	void eventDestroyed ( );
	void Release ( );
	void IsValidMesh ( );
	void eventScriptGetTeamNum ( );
	void CanPickup ( );
	void eventLandedMesh ( );
	void PlayPickupSound ( );
	void eventTornOff ( );
	void GiveTo ( );
	void CheckTouching ( );
	void eventSetPickupMesh ( );
	void SetDrawOutLine ( );
	void SetTeamIdentify ( );
	void SetLifeSpan ( );
	void Init ( );
	void NotifyLocalPlayerTeamReceived ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( );
	void GotoFadeOut ( );
	void FindSlopeRotation ( );
	void InitPickupMesh ( );
	void UpdateAlwaysHideBone ( );
	void ApplyMaxMipMapOffset ( );
};

UClass* ACombatDroppedBase::pClassPointer = NULL;

// Class CombatGame.CombatDroppedWeapon
// 0x001D (0x033A - 0x031D)
class ACombatDroppedWeapon : public ACombatDroppedBase
{
public:
	unsigned long                                      bUseMeshInterpolation : 1;                        		// 0x0320 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bClearRemainAmmo : 1;                             		// 0x0320 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowPickupWeaponUI : 1;                          		// 0x0320 (0x0004) [0x0000000000000000] [0x00000004] 
	class ACombatWeapon*                               Weapon;                                           		// 0x0324 (0x0008) [0x0000000000190000]              ( CPF_Travel | CPF_Component )
	class ACombatPlayerReplicationInfoBase*            KillerPRI;                                        		// 0x032C (0x0008) [0x00000000001A000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component )
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0334 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatDroppedWeapon.RemainAmmoCount
	unsigned char                                      RemainSubAmmoCount;                               		// 0x0336 (0x0001) [0x00000000001C0000]              ( CPF_GlobalConfig | CPF_Component )
	unsigned char                                      RemainSubMagazineAmmo;                            		// 0x0337 (0x0001) [0x00000000001D0000]              ( CPF_Travel | CPF_GlobalConfig | CPF_Component )
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x0338 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatDroppedWeapon.RemainMagazineAmmo

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1713 ];

		return pClassPointer;
	};

	void SetIronSight ( );
	void SetDecal ( );
	void IsDisplayLocator ( );
	void InvalidatePickup ( );
	void ValidPickup ( );
	void eventDestroyed ( );
	void GetObjectIconType ( );
	void OnDetachDroppedWeapon ( );
	void UpdatePickupWeaponUI ( );
	void eventLandedMesh ( );
	void eventSetPickupMesh ( );
	void CanPickup ( );
	void eventUpdateMagazineAmmo ( );
	void IsValidInstigatorForInterpolatedMesh ( );
	void GetAttachmentSocketName ( );
	void GetPickupWeaponName ( );
	void Release ( );
	void SetInventory ( );
	void UpdateAlwaysHideBone ( );
	void InitPickupMesh ( );
};

UClass* ACombatDroppedWeapon::pClassPointer = NULL;

// Class CombatGame.CombatDummyClient
// 0x0000 (0x0060 - 0x0060)
class UCombatDummyClient : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1714 ];

		return pClassPointer;
	};

	void GetMatchRoomIDFromArgument ( );
	void GetDummyPasswd ( );
	void GetDummyLoginId ( );
	void IsDummy ( );
	void IsAlreadyLogin ( );
};

UClass* UCombatDummyClient::pClassPointer = NULL;

// Class CombatGame.CombatDynamicDecal
// 0x0014 (0x03E4 - 0x03D0)
class UCombatDynamicDecal : public UDecalComponent
{
public:
	class UMaterialInstanceTimeVarying*                MITV_Decal;                                       		// 0x03D0 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MIC_Decal;                                        		// 0x03D8 (0x0008) [0x0000000000000000]              
	float                                              Lifetime;                                         		// 0x03E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1715 ];

		return pClassPointer;
	};

	void SetMIC ( );
	void SetMITV ( );
	void eventSetMaterial ( );
	void eventOnDecalFinished ( );
};

UClass* UCombatDynamicDecal::pClassPointer = NULL;

// Class CombatGame.CombatExplosionLight
// 0x002C (0x026C - 0x0240)
class UCombatExplosionLight : public UPointLightComponent
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              Lifetime;                                         		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                TimeShiftIndex;                                   		// 0x0248 (0x0004) [0x0000000000000000]              
	TArray< struct FLightValues >                      TimeShift;                                        		// 0x024C (0x0010) [0x0000000000000000]              
	struct FScriptDelegate                             __OnLightFinished__Delegate;                      		// 0x025C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0260 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1716 ];

		return pClassPointer;
	};

	void ApplyDynamicLightOptions ( );
	void OnLightFinished ( );
	void ResetLight ( );
};

UClass* UCombatExplosionLight::pClassPointer = NULL;

// Class CombatGame.CombatFlocking
// 0x0020 (0x0080 - 0x0060)
class UCombatFlocking : public UObject
{
public:
	float                                              Apply_Distance;                                   		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              Cohesion_Force;                                   		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              Alignment_Force;                                  		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              Separation_Force;                                 		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              Separation_MaxDistance;                           		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              Avoidance_Force;                                  		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              Avoidance_MaxDistance;                            		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              Target_Weight;                                    		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1717 ];

		return pClassPointer;
	};

};

UClass* UCombatFlocking::pClassPointer = NULL;

// Class CombatGame.CombatFPMuzzleFlashLight
// 0x002C (0x026C - 0x0240)
class UCombatFPMuzzleFlashLight : public UPointLightComponent
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              Lifetime;                                         		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                TimeShiftIndex;                                   		// 0x0248 (0x0004) [0x0000000000000000]              
	TArray< struct FLightValues >                      TimeShift;                                        		// 0x024C (0x0010) [0x0000000000000000]              
	struct FScriptDelegate                             __OnLightFinished__Delegate;                      		// 0x025C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0260 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1718 ];

		return pClassPointer;
	};

	void ApplyDynamicLightOptions ( );
	void OnLightFinished ( );
	void ResetLight ( );
};

UClass* UCombatFPMuzzleFlashLight::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Base
// 0x002C (0x00CC - 0x00A0)
class UCombatFrontEnd_Base : public UGFxObject
{
public:
	class UCombatFrontEndMoviePlayer*                  Owner;                                            		// 0x00A0 (0x0008) [0x0000000000000000]              
	unsigned long                                      bNeedInit : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     ShowAction;                                       		// 0x00AC (0x0010) [0x0000000000000000]              
	struct FString                                     HideAction;                                       		// 0x00BC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1719 ];

		return pClassPointer;
	};

	void FloatToString ( );
	void GetKADRatio ( );
	void GetKADRatioText ( );
	void FormatAsNumber ( );
	void GetEquipSoundType ( );
	void GetItemPeriod ( );
	void GetPingInfoLocalizeText ( );
	void GetPriceTypeLocalizeText ( );
	void eventCalcRandomMinMax ( );
	void eventCalcDayPeriodMinMax ( );
	void CalcPeriod ( );
	void eventCalcDayPeriod ( );
	void TimeDataToString ( );
	void HideFrontEndPlayerActor ( );
	void ShowFrontEndPlayerActor ( );
	void OnInvalidPasswordDialogOK ( );
	void DisplayInvalidPasswordDialog ( );
	void HideDialog ( );
	void ShowDialog ( );
	void GetPlayerInfoData ( );
	void GetGameOptionTran ( );
	void GetRandomBoxTran ( );
	void GetAwaitTran ( );
	void GetMailTran ( );
	void GetClanTran ( );
	void GetCommunityTran ( );
	void GetLobbyTran ( );
	void GetStatisticsTran ( );
	void GetItemTran ( );
	void GetCharacterTran ( );
	void GetLobbyChatTran ( );
	void GetChannelTran ( );
	void GetOnlineSubsystem ( );
	void GetClientTableDepot ( );
	void OnFilterButtonInput ( );
	void GetGameInfo ( );
	void GetSoundGroup ( );
	void GetOwner ( );
	void SetOwner ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void Close ( );
	void Init ( );
	void UnLock ( );
	void Lock ( );
	void Hide ( );
	void Show ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Base::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Object
// 0x0004 (0x00D0 - 0x00CC)
class UCombatFrontEnd_Object : public UCombatFrontEnd_Base
{
public:
	unsigned long                                      bPopUp : 1;                                       		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayed : 1;                                   		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1720 ];

		return pClassPointer;
	};

	void RemovePopUp ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Object::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Exchange
// 0x0090 (0x0160 - 0x00D0)
class UCombatFrontEnd_Exchange : public UCombatFrontEnd_Object
{
public:
	class UGFxObject*                                  ExchangePopupClass;                               		// 0x00D0 (0x0008) [0x0000000000000000]              
	int                                                CurrentSelectedIndex;                             		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentMoneyCodeName;                             		// 0x00DC (0x0010) [0x0000000000000000]              
	int                                                CurrentExchangeMoneyIndex;                        		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                BuyMoneyType;                                     		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                CurrentExchangeMoneyType;                         		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                ChangedMoneyType;                                 		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                ChangedMainMoney;                                 		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                ChangedBonusMoney;                                		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                BuyBulletItemIndex;                               		// 0x0104 (0x0004) [0x0000000000000000]              
	unsigned long                                      OnSaleMoney : 1;                                  		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShow : 1;                                        		// 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< int >                                      BulletSaleList;                                   		// 0x010C (0x0010) [0x0000000000000000]              
	struct FString                                     ExchangeMoneyCoinCodeName[ 0x3 ];                 		// 0x011C (0x0030) [0x0000000000000000]              
	int                                                ExchangeBulletTableIndex;                         		// 0x014C (0x0004) [0x0000000000000000]              
	TArray< int >                                      SpecialDiscountIndexList;                         		// 0x0150 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1721 ];

		return pClassPointer;
	};

	void CallSetPriceHead ( );
	void CallSetPriceList ( );
	void CallsetSaleTxt ( );
	void CallsetSaleIconVisible ( );
	void CallvisibleHoldingsAndBalance ( );
	void CallsetBalanceMoney ( );
	void CallsetHoldingsMoney ( );
	void CalldisalbeCancelBtn ( );
	void CalldisableBuyBtn ( );
	void CalllabelingCancelBtn ( );
	void CalllabelingBuyBtn ( );
	void CallSetBalanceValue ( );
	void CallsetBalanceHead ( );
	void CallsetHoldingsValue ( );
	void CallsetHoldingsHead ( );
	void CalldisablePriceGroup ( );
	void CallshowTimer ( );
	void CallsetTimer ( );
	void CallselectPurchasePriceList ( );
	void CallsetPriceExplanation ( );
	void CallsetSecondSpecialPriceList ( );
	void CallsetFirstSpecialPriceList ( );
	void CallsetPurchasePriceList ( );
	void CallsetSecondSpecialPriceHead ( );
	void CallsetFirstSpecialPriceHead ( );
	void CallsetPurchasePriceHead ( );
	void CallsetExchangeCoin ( );
	void CallsetClanPwTitleTxt ( );
	void receiveRandomBoxShopExchangeListClick ( );
	void receiveRandomBoxShopExchangeCancelBtnClick ( );
	void RecvSuccessExchange ( );
	void GetSpecialDiscountIndexList ( );
	void GetExchangeBulletTableIndex ( );
	void OnBulletBuySuccess ( );
	void OnCashExchangeOK ( );
	void OnPopupBuyExchangeCancel ( );
	void OnPopupCashExchangeOK ( );
	void OnPopupExchangeOK ( );
	void isCanBuyBulletSpecialSale ( );
	void isBulletSpecialSale ( );
	void isBulletSale ( );
	void receiveRandomBoxShopExchangeBuyBtnClick ( );
	void GetExchangeData ( );
	void GetExchangedMoney ( );
	void CalcSetMoney ( );
	void CalcBonusMoney ( );
	void BulletSaleTimer ( );
	void SetBulletSaleTimerText ( );
	void SetBulletPurchaseSpecialPriceList ( );
	void SetBulletPurchasePriceList ( );
	void SetPurchasePriceList ( );
	void SetExchangeCoinList ( );
	void Close ( );
	void HideShopPopup ( );
	void ShowShopPopup ( );
	void IsShow ( );
	void HideScene ( );
	void ShowScene ( );
	void InitBulletLabel ( );
	void InitLabel ( );
	void Init ( );
	void SetExchangePopup ( );
};

UClass* UCombatFrontEnd_Exchange::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Repurchase
// 0x0044 (0x0114 - 0x00D0)
class UCombatFrontEnd_Repurchase : public UCombatFrontEnd_Object
{
public:
	unsigned long                                      IsBuyAndEquip : 1;                                		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInit : 1;                                        		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsShow : 1;                                      		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                CashUnit;                                         		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                priceID;                                          		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                BuyShopItemID;                                    		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                BuyItemSlotIndex;                                 		// 0x00E0 (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentPresetTab;                                 		// 0x00E4 (0x0001) [0x0000000000000000]              
	struct FString                                     CurrentCodeName;                                  		// 0x00E8 (0x0010) [0x0000000000000000]              
	TArray< struct FRepurchaseItem >                   RepurchaseItemList;                               		// 0x00F8 (0x0010) [0x0000000000000000]              
	int                                                CurrentSpendonMoney;                              		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                CurrentSpendonCash;                               		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                CurrentSpendonMedal;                              		// 0x0110 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1722 ];

		return pClassPointer;
	};

	void ClearRepurchaseItemList ( );
	void eventFindRepurchaseItem ( );
	void eventCallUpdateItemList ( );
	void eventCallSetItemList ( );
	void CallsetRepurchaseBtnLabel ( );
	void CallsetRepurchaseText ( );
	void HideRepurchasePopup ( );
	void ShowRepurchasePopup ( );
	void receiveRepurchaseCloseBtn ( );
	void receiveRepurchaseGoShopBtn ( );
	void RepurchaseAllSelected ( );
	void receiveRepurchaseItemView ( );
	void IsPossibleBuyItem ( );
	void eventIsVisibleItem ( );
	void GetRepurchaseExpiredItemCount ( );
	void GetRepurchaseItemListCount ( );
	void ShowRepurchase ( );
	void StartShowRepurchase ( );
	void Close ( );
	void IsShow ( );
	void HideScene ( );
	void ShowScene ( );
	void InitLabel ( );
	void Init ( );
	void GetRepurchaseItemData ( );
	void UpdateRepurchaseItem ( );
	void SetRepurchaseItemList ( );
};

UClass* UCombatFrontEnd_Repurchase::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Scene
// 0x0004 (0x00D0 - 0x00CC)
class UCombatFrontEnd_Scene : public UCombatFrontEnd_Base
{
public:
	unsigned long                                      bShowTopBar : 1;                                  		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedBGM : 1;                                     		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseMouse : 1;                                    		// 0x00CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWhiteListCheck : 1;                              		// 0x00CC (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1723 ];

		return pClassPointer;
	};

	void GetShopType ( );
	void GotoPrevScene ( );
	void Hide ( );
	void Show ( );
	void Init ( );
	void GetGameInfo ( );
};

UClass* UCombatFrontEnd_Scene::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo
// 0x0018 (0x00E8 - 0x00D0)
class UCombatFrontEnd_CharacterInfo : public UCombatFrontEnd_Scene
{
public:
	class UCombatFrontEnd_CharacterInfo_TabBase*       TabList[ 0x3 ];                                   		// 0x00D0 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1724 ];

		return pClassPointer;
	};

	void CallSelectMyInfoTab ( );
	void CallSetMyInfoTab ( );
	void Init ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void GotoPrevScene ( );
};

UClass* UCombatFrontEnd_CharacterInfo::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Maintenance
// 0x0014 (0x00E4 - 0x00D0)
class UCombatFrontEnd_Maintenance : public UCombatFrontEnd_Scene
{
public:
	int                                                ShopType;                                         		// 0x00D0 (0x0004) [0x0000000000000000]              
	TArray< struct FRISListDescStruct >                RISInfoList;                                      		// 0x00D4 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1725 ];

		return pClassPointer;
	};

	void GetShopType ( );
	void HideScene ( );
};

UClass* UCombatFrontEnd_Maintenance::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BaseShop
// 0x0110 (0x01F4 - 0x00E4)
class UCombatFrontEnd_BaseShop : public UCombatFrontEnd_Maintenance
{
public:
	class UGFxObject*                                  ItemListClass;                                    		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  ItemDetailinfoClass;                              		// 0x00EC (0x0008) [0x0000000000000000]              
	int                                                SelectedMainTab;                                  		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                SelectedSubTab;                                   		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTab;                                  		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTabType;                              		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                CashUnit;                                         		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                priceID;                                          		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentCodeName;                                  		// 0x010C (0x0010) [0x0000000000000000]              
	struct FString                                     CurrentSearchtext;                                		// 0x011C (0x0010) [0x0000000000000000]              
	unsigned char                                      CurrentPresetTab;                                 		// 0x012C (0x0001) [0x0000000000000000]              
	int                                                CurrentClothItemRefIndex;                         		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                CurrentSelectedItemID;                            		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSortRepurchaseItems : 1;                         		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSelectedHotItem : 1;                             		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelectedNewItem : 1;                             		// 0x0138 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSelectedCashItem : 1;                            		// 0x0138 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bMoveShop : 1;                                    		// 0x0138 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FString                                     ShopCodename;                                     		// 0x013C (0x0010) [0x0000000000000000]              
	TArray< struct FShopTabStruct >                    MainTabInfo;                                      		// 0x014C (0x0010) [0x0000000000000000]              
	struct FShopTabStruct                              SubTabAllInfo;                                    		// 0x015C (0x0028) [0x0000000000000000]              
	TArray< struct FShopTabStruct >                    SubTabWeaponInfo;                                 		// 0x0184 (0x0010) [0x0000000000000000]              
	TArray< struct FShopTabStruct >                    SubTabCharInfo;                                   		// 0x0194 (0x0010) [0x0000000000000000]              
	TArray< struct FShopTabStruct >                    SubTabItemInfo;                                   		// 0x01A4 (0x0010) [0x0000000000000000]              
	TArray< struct FShopTabStruct >                    SubTabPackageInfo;                                		// 0x01B4 (0x0010) [0x0000000000000000]              
	struct FInfoTabStruct                              ItemTabInfo[ 0x3 ];                               		// 0x01C4 (0x0030) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1726 ];

		return pClassPointer;
	};

	void CallSetInfoDesc ( );
	void CallSetAddon ( );
	void CallSetAttachmentTitle ( );
	void CallSetAbility ( );
	void CallSelectInfoTab ( );
	void CallSetInfoTab ( );
	void CallSetInfoExtendMode ( );
	void CallSetInfoMiniMode ( );
	void eventCallUpdateItemList ( );
	void eventCallSetItemList ( );
	void GetBuyItemData ( );
	void GetItemDescStructData ( );
	void GetItemAddonStructData ( );
	void RestItemAbilityInfoData ( );
	void GetItemAbilityInfoData ( );
	void GetItemBasicInfoData ( );
	void GetItemInfoTabData ( );
	void eventResetItemData ( );
	void GetShopItemData ( );
	void CallsetFilterButtonLayOut ( );
	void CallsetCashBtnSelected ( );
	void CallsetNewBtnSelected ( );
	void CallsetHotBtnSelected ( );
	void CallSetSearchWindowLabel ( );
	void CallSelectMainTab ( );
	void CallscrollingItemList ( );
	void eventCallSelectItemList ( );
	void CallSetPackageTab ( );
	void CallSetItemTab ( );
	void CallSetCharacterTab ( );
	void CallSetWeaponTab ( );
	void CallSetAllTab ( );
	void CallSetMainTab ( );
	void GotoPrevScene ( );
	void SetInfoItem ( );
	void receiveShopListItemBtn ( );
	void receiveShopListItemView ( );
	void receiveShopInfoClose ( );
	void receiveShopInfoOpen ( );
	void UpdateShopItemList ( );
	void ResetTagBtn ( );
	void receiveShopCashBtn ( );
	void receiveShopNewBtn ( );
	void receiveShopHotBtn ( );
	void receiveShopSearchBtn ( );
	void receiveShopSearchWord ( );
	void receiveShopInfoTabBtn ( );
	void receiveShopListSubTabBtn ( );
	void receiveShopListMainTabBtn ( );
	void eventGetShopButtonStringByRank ( );
	void eventGetToolTip ( );
	void eventIsPurchasableItemByRank ( );
	void GetServerTime ( );
	void ShowVisibleItem ( );
	void SetShopItemList ( );
	void GetSubTabAllData ( );
	void GetTabData ( );
	void SetSubTabPackageDataAll ( );
	void SetSubTabItemDataAll ( );
	void SetSubTabCharDataAll ( );
	void SetSubTabWeaponDataAll ( );
	void SetMainTabDataAll ( );
	void SetSubTabAllDataAll ( );
	void GetSelectedSubTab ( );
	void GetSelectedMainTab ( );
	void InitSubTab ( );
	void InitMainLabel ( );
	void SetFilterType ( );
	void GetSelectSlotClothRefID ( );
	void SetSelectSlotClothRefID ( );
	void SetSortRepurchaseItems ( );
	void ResetShop ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
	void HideItemInfo ( );
	void ShowItemInfo ( );
	void HideItemList ( );
	void ShowItemList ( );
	void UnLock ( );
	void Lock ( );
	void Close ( );
	void Hide ( );
	void SetitemDetailinfo ( );
	void SetItemList ( );
};

UClass* UCombatFrontEnd_BaseShop::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MedalShop
// 0x0000 (0x01F4 - 0x01F4)
class UCombatFrontEnd_MedalShop : public UCombatFrontEnd_BaseShop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1727 ];

		return pClassPointer;
	};

	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void ShowFrontEndPlayerActor ( );
	void SetTabDataAll ( );
	void InitSubTab ( );
	void InitMainLabel ( );
	void Init ( );
	void ShowScene ( );
	void SetShopItemList ( );
};

UClass* UCombatFrontEnd_MedalShop::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Shop
// 0x0000 (0x01F4 - 0x01F4)
class UCombatFrontEnd_Shop : public UCombatFrontEnd_BaseShop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1728 ];

		return pClassPointer;
	};

	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void ShowFrontEndPlayerActor ( );
	void SetTabDataAll ( );
	void InitSubTab ( );
	void InitMainLabel ( );
	void Init ( );
	void ShowScene ( );
	void SetShopItemList ( );
};

UClass* UCombatFrontEnd_Shop::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Inventory
// 0x0244 (0x0328 - 0x00E4)
class UCombatFrontEnd_Inventory : public UCombatFrontEnd_Maintenance
{
public:
	struct FInvenTabStruct                             MainTabInfo[ 0x4 ];                               		// 0x00E4 (0x0060) [0x0000000000000000]              
	struct FInvenTabStruct                             SubTabAllInfo;                                    		// 0x0144 (0x0018) [0x0000000000000000]              
	struct FInvenTabStruct                             SubTabWeaponInfo[ 0x6 ];                          		// 0x015C (0x0090) [0x0000000000000000]              
	struct FInvenTabStruct                             SubTabCharInfo[ 0x2 ];                            		// 0x01EC (0x0030) [0x0000000000000000]              
	struct FInvenTabStruct                             SubTabItemInfo[ 0x5 ];                            		// 0x021C (0x0078) [0x0000000000000000]              
	struct FInfoTabStruct                              ItemTabInfo[ 0x3 ];                               		// 0x0294 (0x0030) [0x0000000000000000]              
	int                                                SelectedMainTab;                                  		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                SelectedSubTab;                                   		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTabType;                              		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTab;                                  		// 0x02D0 (0x0004) [0x0000000000000000]              
	TArray< struct FS_BaseItemInfo >                   PresetItemlist;                                   		// 0x02D4 (0x0010) [0x0000000000000000]              
	unsigned long                                      bInvenOpen : 1;                                   		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitforChangeStateActiveItem : 1;                		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelectAscending : 1;                             		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                CurrentPresetTab;                                 		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                CurrentPresetSlotIndex;                           		// 0x02EC (0x0004) [0x0000000000000000]              
	int                                                CurrentSelectedItemListSlotIndex;                 		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                CurrentClothItemRefIndex;                         		// 0x02F4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ItemPresetClass;                                  		// 0x02F8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  ItemListClass;                                    		// 0x0300 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  ItemDetailinfoClass;                              		// 0x0308 (0x0008) [0x0000000000000000]              
	int                                                PendingConsumeItemRefIndex;                       		// 0x0310 (0x0004) [0x0000000000000000]              
	TArray< struct FInvenItemInfo >                    InvenItemList;                                    		// 0x0314 (0x0010) [0x0000000000000000]              
	int                                                SelectSortType;                                   		// 0x0324 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1729 ];

		return pClassPointer;
	};

	void UnEquipItem ( );
	void EquipItem ( );
	void CheckAndUpdateCharacter ( );
	void SetInvenItemState ( );
	void OnItemDeActivated ( );
	void OnItemActivated ( );
	void IsAbleDeActiveItem ( );
	void SetDeActiveItem ( );
	void SetActiveItem ( );
	void IsSellInvenItem ( );
	void UpdateInventoryItemUIData ( );
	void ShowPresetWeaponMeshBySlotIndex ( );
	void ShowPresetWeaponMesh ( );
	void IsWaitforActiveItem ( );
	void SetWaitforActiveItem ( );
	void receiveInventoryListItemView ( );
	void receiveInventoryInfoTabBtn ( );
	void DisplayDialog_UnLockItemFailureOK ( );
	void DisplayDialog_UnLockItemFailure ( );
	void OnItemUnLock ( );
	void UseLockedBoxItem ( );
	void OnDisplayDialog_UseItem_Cancel ( );
	void OnDisplayDialog_UseItem_OK ( );
	void DisplayDialog_UseItem ( );
	void receiveInventoryListUseUpBtn ( );
	void receiveInventoryListItemDoubleClick ( );
	void receiveInventoryListFunctionThreeBtn ( );
	void receiveInventoryListFunctionTwoBtn ( );
	void receiveInventoryListFunctionOneBtn ( );
	void receiveInventoryListDestroyBtn ( );
	void receiveInventoryListRepairBtn ( );
	void receiveInventoryListCheckBtn ( );
	void receiveInventoryListItemBtn ( );
	void receiveInventoryItemEquipBtn ( );
	void receiveInventoryListSubTabBtn ( );
	void receiveInventoryListMainTabBtn ( );
	void receiveInventoryPresetRepairBtn ( );
	void receiveInventoryPresetDoubleClick ( );
	void receiveInventoryPresetUnequipBtn ( );
	void receiveInventoryPresetSlotBtn ( );
	void receiveInventoryPresetUiToggleBtn ( );
	void receiveInventoryPresetTabBtn ( );
	void SetEffectItemIconTooltips ( );
	void eventCallTooltipFootItem ( );
	void eventCallTooltipUpperItem ( );
	void HideAllEffectItemIcons ( );
	void ShowCurrentEffectItemIcons ( );
	void eventCallSetFootItem ( );
	void eventCallSetUpperItem ( );
	void SetUnEquipPresetItem ( );
	void SetAllUnEquipPresetItem ( );
	void SelectPresetTab ( );
	void SetInfoItem ( );
	void CallPresetPlayEquipSound ( );
	void CallInvenListPlayEquipSound ( );
	void CallSetInfoDesc ( );
	void CallSetAddon ( );
	void CallSetAttachmentTitle ( );
	void CallSetAbility ( );
	void CallSetBasicInfo ( );
	void CallSelectInfoTab ( );
	void CallSetInfoTab ( );
	void CallSetInfoExtendMode ( );
	void CallSetInfoMiniMode ( );
	void CallscrollingItemList ( );
	void eventCallSelectItemList ( );
	void eventCallRemoveItemList ( );
	void eventCallUpdateItemList ( );
	void eventCallSetItemList ( );
	void CallSetItemTab ( );
	void CallSetCharacterTab ( );
	void CallSetWeaponTab ( );
	void CallSelectMainTab ( );
	void CallSetAllTab ( );
	void CallSetMainTab ( );
	void CallSetComparisonSlot ( );
	void CallSetUnequipBtnDisabled ( );
	void CallSetRepairBtnDisabled ( );
	void CallSetEquipSlot ( );
	void ResetAllCallSetEquipSlot ( );
	void CallSetEquipArmorSlotData ( );
	void CallSetEquipSlotData ( );
	void CallSelectPresetTab ( );
	void CallSetPresetTab ( );
	void CallSetSpreadMenuOnOff ( );
	void CallSetSpreadMenuText ( );
	void IsEquipItem ( );
	void eventIsActiveItem ( );
	void UpdateItemRemainTime ( );
	void SetEquipItem ( );
	void RefreshEquipItem ( );
	void SetUnEquipItem ( );
	void eventGetToolTip ( );
	void UpdateInvenItemList ( );
	void UpdateInvenForDestroyedItem ( );
	void ResetIsNewInventoryItem ( );
	void eventIsCheckEquipItemRank ( );
	void SetEffectItemIconTooltip ( );
	void ShowEffectItemIcon ( );
	void ShowVisibleItem ( );
	void SetInvenItemList ( );
	void GetSelectedSubTab ( );
	void GetSelectedMainTab ( );
	void InitSetInfoItem ( );
	void SetDefaultPresetItemList ( );
	void SetPresetItemList ( );
	void InitEquipSlot ( );
	void SetEquipSlotItem ( );
	void IsGrenadeSlot ( );
	void SetPresetTabInfo ( );
	void GetArmorSlotStructData ( );
	void GetEquipSlotStructData ( );
	void GetItemDescStructData ( );
	void GetItemAddonStructData ( );
	void RestItemAbilityInfoData ( );
	void GetItemAbilityInfoData ( );
	void GetItemBasicInfoData ( );
	void GetItemInfoTabData ( );
	void GetPresetTabData ( );
	void GotoPrevScene ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void GetSubTabItemData ( );
	void SetSubTabItemDataAll ( );
	void GetSubTabCharData ( );
	void SetSubTabCharDataAll ( );
	void GetSubTabWeaponData ( );
	void SetSubTabWeaponDataAll ( );
	void GetSubTabAllData ( );
	void SetSubTabAllDataAll ( );
	void GetMainTabData ( );
	void SetMainTabDataAll ( );
	void InitTab ( );
	void InitLabel ( );
	void SetFilterType ( );
	void GetSelectSlotClothRefID ( );
	void ResetInventory ( );
	void ShowFrontEndPlayerActor ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
	void HideItemInfo ( );
	void ShowItemInfo ( );
	void HideItemList ( );
	void ShowItemList ( );
	void HideItemPreset ( );
	void ShowItemPreset ( );
	void UnLock ( );
	void Lock ( );
	void Close ( );
	void SetitemDetailinfo ( );
	void SetItemList ( );
	void SetItemPreset ( );
	void Hide ( );
	void SortInventoryItem ( );
	void GetInvenItemInfo ( );
	void ClearInvenItemList ( );
	void InitInvenItemList ( );
};

UClass* UCombatFrontEnd_Inventory::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_RandomBoxShop
// 0x004C (0x0130 - 0x00E4)
class UCombatFrontEnd_RandomBoxShop : public UCombatFrontEnd_Maintenance
{
public:
	class UGFxObject*                                  PkgItemListGFxObj;                                		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  PkgItemInfoGFxObj;                                		// 0x00EC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  CoinBarGFxObj;                                    		// 0x00F4 (0x0008) [0x0000000000000000]              
	int                                                SelectedMainTab;                                  		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                SelectedItemID;                                   		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTab;                                  		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTabType;                              		// 0x0108 (0x0004) [0x0000000000000000]              
	TArray< struct FShopTabStruct >                    MainCoinTabInfo;                                  		// 0x010C (0x0010) [0x0000000000000000]              
	unsigned long                                      bViewItemInfo : 1;                                		// 0x011C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      CheckList;                                        		// 0x0120 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1730 ];

		return pClassPointer;
	};

	void eventIsPickUpRandomBoxCube ( );
	void eventIsPickUpRandomBox ( );
	void CoinBar_BSCoinSetActiveChargeBtn ( );
	void CoinBar_BSCoinSetValue ( );
	void CoinBar_BSCoinSetChargeBtnLabel ( );
	void CoinBar_MCoinSetActiveChargeBtn ( );
	void CoinBar_MCoinSetValue ( );
	void CoinBar_MCoinSetChargeBtnLabel ( );
	void CoinBar_GCoinSetActiveChargeBtn ( );
	void CoinBar_GCoinSetValue ( );
	void CoinBar_GCoinSetChargeBtnLabel ( );
	void CoinBar_HideUI ( );
	void CoinBar_ShowUI ( );
	void eventPkgItemInfo_SetInfoDesc ( );
	void PkgItemInfo_SetAttachmentTitle ( );
	void PkgItemInfo_AddOn ( );
	void PkgItemInfo_SetAbility ( );
	void PkgItemInfo_SelectInfoTab ( );
	void PkgItemInfo_SetInfoTab ( );
	void eventPkgItemInfo_ScrollList ( );
	void PkgItemInfo_SelectItemList ( );
	void eventPkgItemInfo_SetItemList ( );
	void PkgItemInfo_SetTitle ( );
	void PkgItemList_SetIconChargeBtn ( );
	void PkgItemList_SetActiveChargeBtn ( );
	void PkgItemList_SetChargeBtnLabel ( );
	void PkgItemList_SetActiveOpenBtn ( );
	void PkgItemList_SetOpenBtnLabel ( );
	void eventPkgItemList_ScrollList ( );
	void eventPkgItemList_SelectItem ( );
	void eventPkgItemList_SetItemList ( );
	void PkgItemList_SelectCoinTab ( );
	void PkgItemList_SetCoinTab ( );
	void PkgItemList_SetTitle ( );
	void OnBuyItem_Failure ( );
	void OnRandomBoxUsedFail_OK ( );
	void RandomBoxUsedFail ( );
	void eventSelectRandomBoxShopPackageItemList ( );
	void IsBuyableRandomBoxItem ( );
	void UpdateCoinInfo ( );
	void OpenPackageItem ( );
	void OnBuyPackageDialogCancel ( );
	void OnBuyPackageDialogOK ( );
	void OnNotOpenDialogOK ( );
	void BuyPackageItem ( );
	void CallSetCoinBarUI ( );
	void CallSetPackageItemInfoUI ( );
	void CallSetPackageItemListUI ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void GetItemDescStructData ( );
	void GetItemAddonStructData ( );
	void RestItemAbilityInfoData ( );
	void GetItemAbilityInfoData ( );
	void eventPackageItemListItemClick ( );
	void SetInfoItem ( );
	void ResetShop ( );
	void SetCoinChargeBtnDisable ( );
	void GetTabIconType ( );
	void InitShopSetting ( );
	void eventSetViewItemInfoList ( );
	void CoinBar_Hide ( );
	void CoinBar_Show ( );
	void PkgItemInfo_Hide ( );
	void PkgItemInfo_Show ( );
	void PkgItemList_Hide ( );
	void PkgItemList_Show ( );
	void GotoPrevScene ( );
	void UnLock ( );
	void Lock ( );
	void Hide ( );
	void Show ( );
	void Init ( );
	void PickOutViewItems ( );
	void SetPackageItemUIData ( );
	void SetPackageItemInfo ( );
	void SetPackageItemList ( );
};

UClass* UCombatFrontEnd_RandomBoxShop::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_TabBase
// 0x0008 (0x0068 - 0x0060)
class UCombatFrontEnd_CharacterInfo_TabBase : public UObject
{
public:
	class UCombatFrontEndMoviePlayer*                  ParentMoviePlayer;                                		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1731 ];

		return pClassPointer;
	};

	void eventGetLocalizeCombinationText ( );
	void CalcTime ( );
	void InitData ( );
	void InitCategoryButton ( );
	void Init ( );
};

UClass* UCombatFrontEnd_CharacterInfo_TabBase::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_BattleTab
// 0x0010 (0x0078 - 0x0068)
class UCombatFrontEnd_CharacterInfo_BattleTab : public UCombatFrontEnd_CharacterInfo_TabBase
{
public:
	TArray< int >                                      BattleTabList;                                    		// 0x0068 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1732 ];

		return pClassPointer;
	};

	void SetTabData ( );
	void CallSetCombatTitle ( );
	void CallSetCombat ( );
	void InitData ( );
	void InitCategoryButton ( );
};

UClass* UCombatFrontEnd_CharacterInfo_BattleTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_WeaponTab
// 0x0000 (0x0068 - 0x0068)
class UCombatFrontEnd_CharacterInfo_WeaponTab : public UCombatFrontEnd_CharacterInfo_TabBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1733 ];

		return pClassPointer;
	};

	void InitMeleeWeapon ( );
	void InitThrowWeapon ( );
	void InitSubWeapon ( );
	void InitPrimaryWeapon ( );
	void CallSetWeapon ( );
	void InitData ( );
	void InitCategoryButton ( );
};

UClass* UCombatFrontEnd_CharacterInfo_WeaponTab::pClassPointer = NULL;

// Class CombatGame.CombatGameDataCollector
// 0x0000 (0x0060 - 0x0060)
class UCombatGameDataCollector : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1734 ];

		return pClassPointer;
	};

	void OnMatchRoundEnd ( );
	void OnMatchRoundHasBegun ( );
	void OnMatchEnd ( );
	void OnMatchHasBegun ( );
};

UClass* UCombatGameDataCollector::pClassPointer = NULL;

// Class CombatGame.CombatGameEngine
// 0x00B4 (0x0C3C - 0x0B88)
class UCombatGameEngine : public UGameEngine
{
public:
	class UClass*                                      OnlineSubsystemDedicatedSvrClass;                 		// 0x0B88 (0x0008) [0x0000000000000000]              
	class UCombatGameTableDepot*                       TableDepot;                                       		// 0x0B90 (0x0008) [0x0000000000000000]              
	class UClass*                                      ServerTableDepotClass;                            		// 0x0B98 (0x0008) [0x0000000000000000]              
	class UClass*                                      ClientTableDepotClass;                            		// 0x0BA0 (0x0008) [0x0000000000000000]              
	class UCombatBGMPlayer*                            BGMPlayer;                                        		// 0x0BA8 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           SuppressList;                                     		// 0x0BB0 (0x0010) [0x0000000000000000]              
	TArray< struct FSYSTEMSETTING_DATA >               ChangedInGameSystemSetting;                       		// 0x0BC0 (0x0010) [0x0000000000000000]              
	TArray< struct FSYSTEMSETTING_DATA >               CacheInGameSystemSetting;                         		// 0x0BD0 (0x0010) [0x0000000000000000]              
	unsigned long                                      IsFrontEndScene : 1;                              		// 0x0BE0 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FWorldCube >                        WorldCubeList;                                    		// 0x0BE4 (0x0010) [0x0000000000000000]              
	class UPackage*                                    PendingLevelPackage;                              		// 0x0BF4 (0x0008) [0x0000000000000000]              
	class ULinkerLoad*                                 PendingLevelLinkerLoad;                           		// 0x0BFC (0x0008) [0x0000000000000000]              
	class UWorld*                                      PendingLevelWorld;                                		// 0x0C04 (0x0008) [0x0000000000000000]              
	float                                              DefaultMapLoadingDelay;                           		// 0x0C0C (0x0004) [0x0000000000000000]              
	class UCombatAwesomium*                            AE;                                               		// 0x0C10 (0x0008) [0x0000000000000000]              
	int                                                UpdateEnterFrameTime;                             		// 0x0C18 (0x0004) [0x0000000000000000]              
	int                                                GDIBrushCounter;                                  		// 0x0C1C (0x0004) [0x0000000000000000]              
	int                                                GDIDCCounter;                                     		// 0x0C20 (0x0004) [0x0000000000000000]              
	int                                                GDIFontCounter;                                   		// 0x0C24 (0x0004) [0x0000000000000000]              
	float                                              ObjectPoolTimerDelta;                             		// 0x0C28 (0x0004) [0x0000000000000000]              
	class UCombatVoiceInterfaceVivox*                  Vivox;                                            		// 0x0C2C (0x0008) [0x0000000000000000]              
	class UCombatVoiceChatUserList*                    VoiceChatUsers;                                   		// 0x0C34 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1735 ];

		return pClassPointer;
	};

	void eventUninitializeVivox ( );
	void GetVivox ( );
	void eventInitializeVivox ( );
	void eventGetPingCheckURLs ( );
	void eventReleaseObjectPool ( );
	void GetLoadingUI ( );
	void InitLoadingUIDatas ( );
	void GetAccountMinClanLevel ( );
	void GetAccountMaxClanLevel ( );
	void GetAccountMinLevel ( );
	void GetAccountMaxLevel ( );
	void GetAccountLevelImageID ( );
	void GetAccountLevelIcon ( );
	void SetLoadingUILabels ( );
	void ClearLoadingUILabels ( );
	void GetClanEmblemImageID ( );
	void GetClanEmblemName ( );
	void GetClanLevelByExp ( );
	void GetLevelByExp ( );
	void GetCombatProfileSettings ( );
	void eventGetRoundCountTypeByModeIndex ( );
	void IsShowGoreEffect ( );
	void SetGoreLevel ( );
	void GetRefModeOptionDataByCodename ( );
	void GetRefRankTableByRefModeIndex ( );
	void eventGetRefRankUpTableForInGame ( );
	void eventGetRefRankTableForInGame ( );
	void GetMeshBuilder ( );
	void IsTeenVersion ( );
	void DisplaySuppressList ( );
	void eventHasSuppress ( );
	void RemoveSuppress ( );
	void AddSuppress ( );
	void GetRAM ( );
	void GetVRM ( );
	void GetFPS ( );
	void SetFPS ( );
	void SetLocAndRotation ( );
	void SetForceRotation ( );
	void SetForceLocation ( );
	void PerformGarbageCollection ( );
	void GetMapFileNameByMapCodeName ( );
	void GetObjectPool ( );
	void SetRelevantDelay ( );
	void eventStartLoginForNative ( );
	void eventGetRefScoringTable ( );
	void eventGetRefSkillDataByCodename ( );
	void eventGetRefDropDataByCodeName ( );
	void eventGetRefPickupDataByCodeName ( );
	void eventGetRefAchievementDataByCodename ( );
	void eventGetRefMapDataByCodename ( );
	void eventGetRefItemDetailinfo ( );
	void eventGetRefModeDataByCodename ( );
	void eventGetRefAchievementTableDataCount ( );
	void eventGetRefAchievementTableItemByIndex ( );
	void eventGetRefAchievementTable ( );
	void eventGetLocalizedChatCommandID ( );
	void eventGetLocalizedString ( );
	void eventLoadAllDataTableForServer ( );
	void eventLoadAllDataTableForClient ( );
	void eventCalculateExpToLevel ( );
	void GetRefExpTable ( );
	void eventGetRefItemDetailinfoTable ( );
	void eventGetRefModeTable ( );
	void eventGetRefMapTableFileName ( );
	void eventGetRefMapTable ( );
	void eventGetRefQuestTable ( );
	void GetTableDepot ( );
	void IsFinishedLoadAllTables ( );
	void BGMPlay ( );
	void GetBGMPlayer ( );
	void SetForceMatchRoomInfo ( );
	void GetSpawnProtectionType ( );
	void EnableIME ( );
	void SetIMEConversionMode ( );
	void RestoreIMEConversionMode ( );
	void BackupIMEConversionMode ( );
	void CheckSecondsPerCycle ( );
	void CheckGDICounter ( );
	void CheckDXTable ( );
	void SendPingHigh ( );
	void SendHackReport ( );
	void JPGScreenShot ( );
	void QRReportSendString ( );
	void ClearWorldCubeList ( );
	void InitWorldCube ( );
	void AddWorldCube ( );
	void TerminateOtherProcess ( );
	void StackTrace ( );
	void Warn ( );
	void Log ( );
	void ConsoleCommand ( );
	void GFXMemReport ( );
	void ClearPendingLevel ( );
	void LoadPendingLevel ( );
	void StandAloneBrowse ( );
	void DefaultMapBrowse ( );
	void IPPortBrowse ( );
};

UClass* UCombatGameEngine::pClassPointer = NULL;

// Class CombatGame.CombatGameEventBase
// 0x0010 (0x0070 - 0x0060)
class UCombatGameEventBase : public UObject
{
public:
	struct FScriptDelegate                             __OnGetReward__Delegate;                          		// 0x0060 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0064 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1736 ];

		return pClassPointer;
	};

	void UpdateScore ( );
	void OnGetReward ( );
	void eventGetMode ( );
	void eventIsMode ( );
	void eventIsCanUsingSkill ( );
	void OnGameEvent ( );
};

UClass* UCombatGameEventBase::pClassPointer = NULL;

// Class CombatGame.CombatGameFrame
// 0x0000 (0x04C0 - 0x04C0)
class ACombatGameFrame : public AGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1737 ];

		return pClassPointer;
	};

	void AllowCheats ( );
	void GetSequence ( );
	void SetActiveDOF ( );
	void IsDefaultMap ( );
	void eventSetGameType ( );
};

UClass* ACombatGameFrame::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndInfo
// 0x0030 (0x04F0 - 0x04C0)
class ACombatFrontEndInfo : public ACombatGameFrame
{
public:
	TArray< struct FSceneInfo >                        SceneList;                                        		// 0x04C0 (0x0010) [0x0000000000000000]              
	unsigned char                                      CurrentScene;                                     		// 0x04D0 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentMainScene;                                 		// 0x04D1 (0x0001) [0x0000000000000000]              
	struct FName                                       CurrentCameraName;                                		// 0x04D4 (0x0008) [0x0000000000000000]              
	unsigned long                                      bShowSceneMessege : 1;                            		// 0x04DC (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              GameTitleDisplaySec;                              		// 0x04E0 (0x0004) [0x0000000000000000]              
	float                                              GameTitleDisplaySec_WithoutAge;                   		// 0x04E4 (0x0004) [0x0000000000000000]              
	float                                              LoadingSceneTime;                                 		// 0x04E8 (0x0004) [0x0000000000000000]              
	float                                              LoadingSceneTimeLimit;                            		// 0x04EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1738 ];

		return pClassPointer;
	};

	void ClearCheckLoaded ( );
	void CheckLoaded ( );
	void DisplayTierPointPenaltyDialog ( );
	void ShowRepurchase ( );
	void OnFrontendLoaded ( );
	void GetNotifyMessage ( );
	void AddChangeSceneMessage ( );
	void ChangeWindow ( );
	void ChangeCamera ( );
	void GetHUD ( );
	void GetStateNameBy ( );
	void GetCurrentSceneType ( );
	void IsAvailableScene ( );
	void GetUIState ( );
	void eventGetCurrentMainScene ( );
	void GetCurrentScene ( );
	void GotoSceneState ( );
	void GotoNextScene ( );
	void GotoPreviousScene ( );
};

UClass* ACombatFrontEndInfo::pClassPointer = NULL;

// Class CombatGame.CombatGame
// 0x01B8 (0x0678 - 0x04C0)
class ACombatGame : public ACombatGameFrame
{
public:
	class UClass*                                      CombatGameMessageClass;                           		// 0x04C0 (0x0008) [0x0000000000000000]              
	class UClass*                                      CombatErrorMessageClass;                          		// 0x04C8 (0x0008) [0x0000000000000000]              
	class UClass*                                      CombatStatStorageClass;                           		// 0x04D0 (0x0008) [0x0000000000000000]              
	class UClass*                                      BotReplicationInfoClass;                          		// 0x04D8 (0x0008) [0x0000000000000000]              
	class UClass*                                      CombatGameScoreClass;                             		// 0x04E0 (0x0008) [0x0000000000000000]              
	unsigned char                                      ModeDifficulty;                                   		// 0x04E8 (0x0001) [0x0000000000000000]              
	unsigned char                                      RoundResultReason;                                		// 0x04E9 (0x0001) [0x0000000000000000]              
	unsigned char                                      RankSystemID;                                     		// 0x04EA (0x0001) [0x0000000000000000]              
	unsigned char                                      e_MatchType;                                      		// 0x04EB (0x0001) [0x0000000000000000]              
	class ACombatSentinelManager*                      SentinelManager;                                  		// 0x04EC (0x0008) [0x0000000000000000]              
	unsigned long                                      bUseSentinel : 1;                                 		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCheckForceGameOver : 1;                          		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSupportsRespawn : 1;                             		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCountDown : 1;                                   		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDirtyRoundOverCheck : 1;                         		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCanBeBaseForPawns : 1;                           		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsWarmupHolding : 1;                             		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bUseClassSystem : 1;                              		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bInitPSListInGroup : 1;                           		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanTeamChange : 1;                               		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsBlockingJoin : 1;                              		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bUseParachuteRespawn : 1;                         		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bForfeitedMatch : 1;                              		// 0x04F4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bSkipSkillLicense : 1;                            		// 0x04F4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bOpenNewMatch : 1;                                		// 0x04F4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bDemoRec : 1;                                     		// 0x04F4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bInfiniteWeaponReload : 1;                        		// 0x04F4 (0x0004) [0x0000000000000000] [0x00010000] 
	TArray< class UClass* >                            PlayerStartClass;                                 		// 0x04F8 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           PlayerStartClassPath;                             		// 0x0508 (0x0010) [0x0000000000000000]              
	struct FString                                     SavePortal;                                       		// 0x0518 (0x0010) [0x0000000000000000]              
	TArray< int >                                      ReadiedPlayerList;                                		// 0x0528 (0x0010) [0x0000000000000000]              
	int                                                GoalRound;                                        		// 0x0538 (0x0004) [0x0000000000000000]              
	int                                                GoalMission;                                      		// 0x053C (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0540 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatGame.TimeLimitSec
	int                                                InitCR;                                           		// 0x0544 (0x0004) [0x0000000000000000]              
	float                                              DefaultInvulnerableTime;                          		// 0x0548 (0x0004) [0x0000000000000000]              
	TArray< float >                                    RespawnDelay;                                     		// 0x054C (0x0010) [0x0000000000000000]              
	float                                              DroppedWeaponLifeSpan;                            		// 0x055C (0x0004) [0x0000000000000000]              
	float                                              ReasonMsgWaitTime;                                		// 0x0560 (0x0004) [0x0000000000000000]              
	float                                              WinnerMsgWaitTime;                                		// 0x0564 (0x0004) [0x0000000000000000]              
	float                                              RestartWait;                                      		// 0x0568 (0x0004) [0x0000000000000000]              
	float                                              MatchEndWait;                                     		// 0x056C (0x0004) [0x0000000000000000]              
	float                                              MatchWarmingupTime;                               		// 0x0570 (0x0004) [0x0000000000000000]              
	float                                              CompetitiveMatchWarmingupTime;                    		// 0x0574 (0x0004) [0x0000000000000000]              
	float                                              CompetitiveMatchWarmingupMinimumTime;             		// 0x0578 (0x0004) [0x0000000000000000]              
	float                                              TempSecTime;                                      		// 0x057C (0x0004) [0x0000000000000000]              
	class UCombatLog*                                  CBLog;                                            		// 0x0580 (0x0008) [0x0000000000000000]              
	int                                                GameLogID;                                        		// 0x0588 (0x0004) [0x0000000000000000]              
	TArray< struct FInactiveStatInfo >                 InactiveStatArray;                                		// 0x058C (0x0010) [0x0000000000000000]              
	TArray< struct FForbiddenWeapon >                  ForbiddenWeaponList;                              		// 0x059C (0x0010) [0x0000000000000000]              
	TArray< unsigned char >                            ForbiddenEWeaponGroup;                            		// 0x05AC (0x0010) [0x0000000000000000]              
	TArray< unsigned char >                            ForbiddenRISList;                                 		// 0x05BC (0x0010) [0x0000000000000000]              
	float                                              HealthModifier;                                   		// 0x05CC (0x0004) [0x0000000000000000]              
	int                                                BotSpawnCount;                                    		// 0x05D0 (0x0004) [0x0000000000000000]              
	int                                                ClassSelectCondition;                             		// 0x05D4 (0x0004) [0x0000000000000000]              
	TArray< class AController* >                       PendingPlayers;                                   		// 0x05D8 (0x0010) [0x0000000000000000]              
	TArray< class ACombatPC* >                         CombatPCs;                                        		// 0x05E8 (0x0010) [0x0000000000000000]              
	class ACBGameReplicationInfo*                      CBGRI;                                            		// 0x05F8 (0x0008) [0x0000000000000000]              
	TArray< class ACombatPlayerStart* >                PSListInGroup;                                    		// 0x0600 (0x0010) [0x0000000000000000]              
	class UCombatDBManager*                            CombatDBManager;                                  		// 0x0610 (0x0008) [0x0000000000000000]              
	int                                                MapID;                                            		// 0x0618 (0x0004) [0x0000000000000000]              
	int                                                ModeID;                                           		// 0x061C (0x0004) [0x0000000000000000]              
	float                                              TeamChangeMsgWaitTime;                            		// 0x0620 (0x0004) [0x0000000000000000]              
	TArray< struct FClientConnectionInfo >             ClientConnections;                                		// 0x0624 (0x0010) [0x0000000000000000]              
	float                                              JoinBlockConditionTime;                           		// 0x0634 (0x0004) [0x0000000000000000]              
	float                                              JoinBlockConditionScore;                          		// 0x0638 (0x0004) [0x0000000000000000]              
	float                                              BlockJoinCheckTime;                               		// 0x063C (0x0004) [0x0000000000000000]              
	struct FString                                     GameModeGuideStr;                                 		// 0x0640 (0x0010) [0x0000000000000000]              
	float                                              LastTestMessageTime;                              		// 0x0650 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           PengindTestMessageList;                           		// 0x0654 (0x0010) [0x0000000000000000]              
	int                                                StartedMemberCount;                               		// 0x0664 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           SavePRIStatModeList;                              		// 0x0668 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1739 ];

		return pClassPointer;
	};

	void GetMatchType ( );
	void GetMessageType ( );
	void AllowPausing ( );
	void SpawnChampionshipObserverPC ( );
	void IsPlayerMission ( );
	void eventCombatBroadCastSuicideMessage ( );
	void GetGameModeGuideStr ( );
	void OnMissionEvent ( );
	void OnSpawnGroupIndex ( );
	void GetTeamInfoFromEventName ( );
	void IsContainPSListInGroup ( );
	void InitPSListInGroup ( );
	void DecrementBot ( );
	void IncrementBot ( );
	void GetTriggetEventType ( );
	void CanDropWeapon ( );
	void IsFirstSpawn ( );
	void IsCountdDown ( );
	void IsMatchInProgress ( );
	void eventIsWarmingUpScene ( );
	void eventIsDesertion ( );
	void eventForceMatchEnd ( );
	void eventBroadcastLocalizedEx ( );
	void eventAllowBroadcastLocalizedEx ( );
	void CanUseClassSystem ( );
	void GetClassSelectCondition ( );
	void GetRespawnDelay ( );
	void StartHumans ( );
	void StartBots ( );
	void StartMatch ( );
	void BroadcastGameMessageByTeam ( );
	void BroadcastGameMessage ( );
	void OnMissionSuccess ( );
	void IncrementMissionCount ( );
	void GetWinnerByDecision ( );
	void MakeDecisionWithSomething ( );
	void GetWinRound ( );
	void IncreaseRoundWin ( );
	void SetRoundWinner ( );
	void CheckMatchOver ( );
	void TryEndGame ( );
	void ReBroadCastTestMessage ( );
	void eventBroadCastTestMessage ( );
	void BroadcastDeathMessage ( );
	void BroadcastRoundResultMessage ( );
	void BroadcastGameResultMessage ( );
	void TerminatedMatch ( );
	void UpdateLives ( );
	void ScoreKill ( );
	void Killed ( );
	void UpdateAssist ( );
	void PendingCheckAssist ( );
	void NotifyArbitratedMatchEnd ( );
	void InvalidateTheMatch ( );
	void TeamSwap ( );
	void CanChangeTeam ( );
	void KillRemainingPlayers ( );
	void InitStatStorage ( );
	void CanUseStatStorage ( );
	void CanUseLockedPresetScene ( );
	void CheckRoundOver ( );
	void CheckTimeOver ( );
	void CheckLive ( );
	void CheckGoalScore ( );
	void CheckGoalMission ( );
	void UpdateSentinelData ( );
	void SetLockedPresetSceneAllPlayer ( );
	void InitPlayerStartingViewPoint ( );
	void CheckBlockJoin ( );
	void DecisionAtLockPresetScene ( );
	void NotifyRoundEndInterface ( );
	void GenericPlayerInitialization ( );
	void FindInactivePRI ( );
	void AddInactivePRI ( );
	void eventPostLogin ( );
	void OnNotifyDedicatedServerLog ( );
	void ReduceDamage ( );
	void PlayerCanRestartGame ( );
	void eventNowGoodToBeginTheMatch ( );
	void CanSpectate ( );
	void Logout ( );
	void ReportSessionDisconnected ( );
	void ReSpawnSuccess ( );
	void NotifyRealSpawn ( );
	void GetInvulnerableTime ( );
	void RemovePendingRestartPlayer ( );
	void PendingRestartPlayer ( );
	void RestartPlayer ( );
	void eventGetPlayerStartEnable ( );
	void SetSpawnGroupIndex ( );
	void GetSpawnGroupIndex ( );
	void eventGameBeginSentinelRun ( );
	void eventStartSentinel ( );
	void PlayerReadyToPlay ( );
	void eventevPlayerReadyToPlay ( );
	void CheckNeedLoadGameKillCount ( );
	void OnTimeOver ( );
	void SpawnDefaultPawnFor ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void InitGameReplicationInfo ( );
	void GetGameMode ( );
	void eventInitGame ( );
	void UpdateCurrentModeDifficulty ( );
	void ActiveSeqEventInitGame ( );
	void CheckValidDataTable ( );
	void ModifyInventoryForMode ( );
	void GetForbiddenInventoryByGroup ( );
	void IsForbbidenInventory ( );
	void SaveTakeDamageData ( );
	void eventPreLogin ( );
	void RegisterServer ( );
	void eventSubLevelLoaded ( );
	void SelectingVIP ( );
	void SortingPlayerOrder ( );
	void ProcessStatDatas ( );
	void OnCombatPCReleased ( );
	void OnCombatPCRegistered ( );
	void IsCanJoin ( );
};

UClass* ACombatGame::pClassPointer = NULL;

// Class CombatGame.CombatTeamGame
// 0x00F0 (0x0768 - 0x0678)
class ACombatTeamGame : public ACombatGame
{
public:
	class UClass*                                      TeamInfoClass;                                    		// 0x0678 (0x0008) [0x0000000000000000]              
	TArray< class ACBTeamInfo* >                       Teams;                                            		// 0x0680 (0x0010) [0x0000000000000000]              
	int                                                ParticipatingTeamCount;                           		// 0x0690 (0x0004) [0x0000000000000000]              
	TArray< int >                                      PlayerStartCount;                                 		// 0x0694 (0x0010) [0x0000000000000000]              
	TArray< float >                                    InvulnerableTime;                                 		// 0x06A4 (0x0010) [0x0000000000000000]              
	TArray< float >                                    InvulnerableTimeInTheAir;                         		// 0x06B4 (0x0010) [0x0000000000000000]              
	struct FDefaultInventoryInfo                       DefaultInventory[ 0x2 ];                          		// 0x06C4 (0x0040) [0x0000000000000000]              
	struct FDefaultInventoryInfo                       DefaultInventorySpawnInTheAir[ 0x2 ];             		// 0x0704 (0x0040) [0x0000000000000000]              
	unsigned char                                      RoundOverPointType;                               		// 0x0744 (0x0001) [0x0000000000000000]              
	unsigned char                                      MatchEndResultType;                               		// 0x0745 (0x0001) [0x0000000000000000]              
	int                                                ClanMemberCheckCount;                             		// 0x0748 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCheckClanMemberCount : 1;                        		// 0x074C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                SurrendTime;                                      		// 0x0750 (0x0004) [0x0000000000000000]              
	int                                                SurrendCoolTime;                                  		// 0x0754 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           VivoxTeamKeyword;                                 		// 0x0758 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1740 ];

		return pClassPointer;
	};

	void SwapVivoxTeamKeyword ( );
	void GetVivoxTeamKeyword ( );
	void GameSurrendCoolTimeDecrease ( );
	void GameSurrenderEnd ( );
	void GameSurrendEndCheck ( );
	void GameSurrenderReplyLogout ( );
	void GameSurrenderReply ( );
	void GameSurrender ( );
	void CalcPlayerPing ( );
	void AddTeamBonus ( );
	void UpdateScore ( );
	void AddMissionScore ( );
	void AddScore ( );
	void GetRoundOverPoint ( );
	void UpdateSentinelData ( );
	void ShouldRespawn ( );
	void IncrementMissionCount ( );
	void GetInvulnerableTime ( );
	void GetDefaultInventoryClass ( );
	void eventAddDefaultInventory ( );
	void IsForbbidenInventory ( );
	void OverridePRI ( );
	void TerminatedMatch ( );
	void CalcIntrudePoint ( );
	void GetWinRound ( );
	void IncreaseRoundWin ( );
	void GetWinnerByDecision ( );
	void GetWinnerByCondition ( );
	void CheckTimeOver ( );
	void CheckLive ( );
	void CheckGoalScore ( );
	void eventGetGoalScoreValue ( );
	void CheckGoalMission ( );
	void GetAreaIndex ( );
	void GetMaxAreaIndex ( );
	void BroadcastGameResultMessage ( );
	void BroadcastRoundResultMessage ( );
	void eventBroadcastLocalizedTeamEx ( );
	void CheckInvalidPlayerCountCondition ( );
	void ForceRemainTeamWinning ( );
	void Logout ( );
	void CheckPlayerStartError ( );
	void SetTeam ( );
	void SetTeamIndex ( );
	void CreateTeam ( );
	void NotifyLastPlayer ( );
	void HasLimitedLife ( );
	void Killed ( );
	void PickTeam ( );
	void MatchServer_PickTeam ( );
	void ChangeTeam ( );
	void TeamSwap ( );
	void CanChangeTeam ( );
	void ChoosePlayerStart ( );
	void FindPlayerStart ( );
	void GetPlayerStartClass ( );
	void ReSpawnSuccess ( );
	void UpdateLives ( );
	void eventLogin ( );
	void InitStandAloneLoginParam ( );
	void InitClanMatch ( );
	void CanSpectate ( );
	void IsCanJoin ( );
	void PlayerReadyToPlay ( );
	void eventPostLogin ( );
	void PreBeginPlay ( );
};

UClass* ACombatTeamGame::pClassPointer = NULL;

// Class CombatGame.CombatPVEGame
// 0x0000 (0x0768 - 0x0768)
class ACombatPVEGame : public ACombatTeamGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1741 ];

		return pClassPointer;
	};

	void SortingPlayerOrder ( );
};

UClass* ACombatPVEGame::pClassPointer = NULL;

// Class CombatGame.CombatAIGame
// 0x0020 (0x0788 - 0x0768)
class ACombatAIGame : public ACombatPVEGame
{
public:
	int                                                PlayerLifeCount;                                  		// 0x0768 (0x0004) [0x0000000000000000]              
	int                                                PlayerMaxLifeCount;                               		// 0x076C (0x0004) [0x0000000000000000]              
	int                                                RespawnWaitTime;                                  		// 0x0770 (0x0004) [0x0000000000000000]              
	unsigned char                                      BOT_TEAM;                                         		// 0x0774 (0x0001) [0x0000000000000000]              
	unsigned char                                      PLAYER_TEAM;                                      		// 0x0775 (0x0001) [0x0000000000000000]              
	class USequence*                                   CurrentSequence;                                  		// 0x0778 (0x0008) [0x0000000000000000]              
	int                                                WaveStartTime;                                    		// 0x0780 (0x0004) [0x0000000000000000]              
	int                                                PlayerHealthForNoLife;                            		// 0x0784 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1742 ];

		return pClassPointer;
	};

	void GetAIRewardRank ( );
	void OnWarning ( );
	void GetWavePawnNameID ( );
	void ReduceDamage ( );
	void Logout ( );
	void HasLimitedLife ( );
	void GetRoundOverPoint ( );
	void UpdatePlayTime ( );
	void TryEndGame ( );
	void eventOnSeqAllBotAllDied ( );
	void OnWaveEnd ( );
	void OnWaveStart ( );
	void OnMissionEvent ( );
	void GetWaveBotSpawnCount ( );
	void SpawnBot ( );
	void GiveLifeToPlayerNoLife ( );
	void AllPlayerIncrementLifeCount ( );
	void NotifyBotDied ( );
	void RestartPlayer ( );
	void GetRespawnDelay ( );
	void PickTeam ( );
	void eventLogin ( );
	void PostBeginPlay ( );
	void CheckTimeOver ( );
	void CheckLive ( );
	void CheckGoalScore ( );
	void CheckGoalMission ( );
};

UClass* ACombatAIGame::pClassPointer = NULL;

// Class CombatGame.CombatTutorialGame
// 0x0000 (0x0788 - 0x0788)
class ACombatTutorialGame : public ACombatAIGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1743 ];

		return pClassPointer;
	};

	void OnMissionEvent ( );
	void CanDropWeapon ( );
	void SendTutorialGameFinish ( );
};

UClass* ACombatTutorialGame::pClassPointer = NULL;

// Class CombatGame.CombatPVPGame
// 0x0000 (0x0768 - 0x0768)
class ACombatPVPGame : public ACombatTeamGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1744 ];

		return pClassPointer;
	};

	void SortingPlayerOrder ( );
};

UClass* ACombatPVPGame::pClassPointer = NULL;

// Class CombatGame.CombatBusterGame
// 0x0008 (0x0770 - 0x0768)
class ACombatBusterGame : public ACombatPVPGame
{
public:
	struct FObjectDestoryBounsInfo                     ObjectDestoryBouns;                               		// 0x0768 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1745 ];

		return pClassPointer;
	};

	void AddTeamBonus ( );
	void NotifyExplosionInPlaying ( );
	void NotifyEnemyObjDestroy ( );
	void eventGetGoalScoreValue ( );
	void CheckLive ( );
	void CheckGoalMission ( );
};

UClass* ACombatBusterGame::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionGame
// 0x0008 (0x0770 - 0x0768)
class ACombatDemolitionGame : public ACombatPVPGame
{
public:
	class ACombatTrigger_Bomb*                         PlantedBomb;                                      		// 0x0768 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1746 ];

		return pClassPointer;
	};

	void IsPlayerMission ( );
	void BroadcastDemolitionEventMessage ( );
	void Installed ( );
	void AddTeamBonus ( );
	void OnMissionSuccess ( );
	void CheckLive ( );
	void CheckTimeOver ( );
	void CheckGoalScore ( );
};

UClass* ACombatDemolitionGame::pClassPointer = NULL;

// Class CombatGame.CombatLCTFGame
// 0x000C (0x0774 - 0x0768)
class ACombatLCTFGame : public ACombatPVPGame
{
public:
	float                                              EnableTouchTime;                                  		// 0x0768 (0x0004) [0x0000000000000000]              
	struct FCarriedObjectBounsInfo                     CarriedObjectBouns;                               		// 0x076C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1747 ];

		return pClassPointer;
	};

	void AddTeamBonus ( );
	void InitTakeCountAllMemeber ( );
	void NotifyPickupFlag ( );
	void NotifyDropFlag ( );
	void NotifySpawnFlag ( );
	void UpdateScore ( );
	void NotifyCarriedTakePoint ( );
	void eventGetGoalScoreValue ( );
	void CheckLive ( );
	void CheckGoalMission ( );
};

UClass* ACombatLCTFGame::pClassPointer = NULL;

// Class CombatGame.CombatPracticeGame
// 0x0030 (0x0798 - 0x0768)
class ACombatPracticeGame : public ACombatPVPGame
{
public:
	unsigned char                                      MaxCheatPawns;                                    		// 0x0768 (0x0001) [0x0000000000000000]              
	float                                              RespawnTime;                                      		// 0x076C (0x0004) [0x0000000000000000]              
	TArray< struct FCheatPawnInfo >                    CheatPawnInfoList;                                		// 0x0770 (0x0010) [0x0000000000000000]              
	int                                                SpawnKeyCount;                                    		// 0x0780 (0x0004) [0x0000000000000000]              
	unsigned long                                      bProjectileCamera : 1;                            		// 0x0784 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTogglePracticeGameTimer : 1;                     		// 0x0784 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FSPracticeGameHotKeyInfo >          HotKeyUIs;                                        		// 0x0788 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1748 ];

		return pClassPointer;
	};

	void ResetPracticeGameTimer ( );
	void TogglePracticeGameTimer ( );
	void ToggleProjectileCamera ( );
	void CheatChangeTeam ( );
	void KillAllCheatPawns ( );
	void SpawnCheatPawn ( );
	void CheatPawnSpawn ( );
	void InitStandAloneLoginParam ( );
	void CanDropWeapon ( );
	void eventGetGoalScoreValue ( );
	void CheckTimeOver ( );
	void CheckRoundOver ( );
	void CheckSuddenDeathKill ( );
	void CheckGoalMission ( );
	void CheckLive ( );
	void SetInfiniteAmmor ( );
	void eventAddDefaultInventory ( );
	void AutoRespawn ( );
	void GetRespawnTime ( );
	void NotifyKilled ( );
	void GetLocalPlayer_PracticeGame ( );
	void UpdateCheatPawnInfoList ( );
	void SetCheatPawnCount ( );
	void GetCheatPawnCount ( );
	void UpdateScore ( );
	void FindPlayerStart ( );
	void Dev_ExitStandAloneGame ( );
};

UClass* ACombatPracticeGame::pClassPointer = NULL;

// Class CombatGame.CombatSingleGame
// 0x0000 (0x0768 - 0x0768)
class ACombatSingleGame : public ACombatTeamGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1749 ];

		return pClassPointer;
	};

};

UClass* ACombatSingleGame::pClassPointer = NULL;

// Class CombatGame.CombatGameOptionTransaction
// 0x0004 (0x0064 - 0x0060)
class UCombatGameOptionTransaction : public UObject
{
public:
	unsigned char                                      Invite_Auto_Regist;                               		// 0x0060 (0x0001) [0x0000000000000000]              
	unsigned char                                      Friend_Invite_Refuse;                             		// 0x0061 (0x0001) [0x0000000000000000]              
	unsigned char                                      Minimap_Size_Step;                                		// 0x0062 (0x0001) [0x0000000000000000]              
	unsigned char                                      Save_Minimap_Size_Step;                           		// 0x0063 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1750 ];

		return pClassPointer;
	};

	void GetGameOption ( );
	void SetGameOption ( );
};

UClass* UCombatGameOptionTransaction::pClassPointer = NULL;

// Class CombatGame.CombatGameScore
// 0x0000 (0x0060 - 0x0060)
class UCombatGameScore : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1751 ];

		return pClassPointer;
	};

	void GetRankExp ( );
	void GetCR ( );
	void GetMissionScore ( );
	void GetScore ( );
};

UClass* UCombatGameScore::pClassPointer = NULL;

// Class CombatGame.CombatGameTableDepot
// 0x0FD0 (0x1030 - 0x0060)
class UCombatGameTableDepot : public UObject
{
public:
	class UCombatDataTable*                            LocalizedTextTable;                               		// 0x0060 (0x0008) [0x0000000000000000]              
	class UCombatDataTable*                            LocalizedChatCommandDataTable;                    		// 0x0068 (0x0008) [0x0000000000000000]              
	TArray< class UCombatDataTable* >                  RefTable;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0080 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.MapCodeNameMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x00C8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeCodeNameMap
	unsigned char                                      UnknownData02[ 0x48 ];                            		// 0x0110 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeGroupCodeNameMap
	unsigned char                                      UnknownData03[ 0x48 ];                            		// 0x0158 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.MissionModeGroupCodeNameMap
	unsigned char                                      UnknownData04[ 0x48 ];                            		// 0x01A0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.InitItemCodeNameMap
	unsigned char                                      UnknownData05[ 0x48 ];                            		// 0x01E8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemCodeNameMap
	unsigned char                                      UnknownData06[ 0x48 ];                            		// 0x0230 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopCodeNameMap
	unsigned char                                      UnknownData07[ 0x48 ];                            		// 0x0278 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopCategoryTabMap
	unsigned char                                      UnknownData08[ 0x48 ];                            		// 0x02C0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopCategoryCodeNameMap
	unsigned char                                      UnknownData09[ 0x48 ];                            		// 0x0308 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopItemCodeNameMap
	unsigned char                                      UnknownData10[ 0x48 ];                            		// 0x0350 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.AchievementCodeNameMap
	unsigned char                                      UnknownData11[ 0x48 ];                            		// 0x0398 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.GameScoringCodeNameMap
	unsigned char                                      UnknownData12[ 0x48 ];                            		// 0x03E0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.StatCodeNameMap
	unsigned char                                      UnknownData13[ 0x48 ];                            		// 0x0428 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.PickupCodeNameMap
	unsigned char                                      UnknownData14[ 0x48 ];                            		// 0x0470 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.DropCodeNameMap
	unsigned char                                      UnknownData15[ 0x48 ];                            		// 0x04B8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.GroupSkillCodeNameMap
	unsigned char                                      UnknownData16[ 0x48 ];                            		// 0x0500 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SkillLicenseCodeNameMap
	unsigned char                                      UnknownData17[ 0x48 ];                            		// 0x0548 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.RankCodeNameMap
	unsigned char                                      UnknownData18[ 0x48 ];                            		// 0x0590 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeOptionCodeNameMap
	unsigned char                                      UnknownData19[ 0x48 ];                            		// 0x05D8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemDetailinfoMap
	unsigned char                                      UnknownData20[ 0x48 ];                            		// 0x0620 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemClassNameMap
	unsigned char                                      UnknownData21[ 0x48 ];                            		// 0x0668 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemAttachmentWeaponNameMap
	unsigned char                                      UnknownData22[ 0x48 ];                            		// 0x06B0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.CallingCardNameMap
	unsigned char                                      UnknownData23[ 0x48 ];                            		// 0x06F8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopSellItemMap
	unsigned char                                      UnknownData24[ 0x48 ];                            		// 0x0740 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.EmblemNameMap
	unsigned char                                      UnknownData25[ 0x48 ];                            		// 0x0788 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.QuestNameMap
	unsigned char                                      UnknownData26[ 0x48 ];                            		// 0x07D0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.HelpTabCodeNameMap
	unsigned char                                      UnknownData27[ 0x48 ];                            		// 0x0818 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.HelpDetailInfoCodeNameMap
	unsigned char                                      UnknownData28[ 0x48 ];                            		// 0x0860 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.StatWeaponGroupNameMap
	unsigned char                                      UnknownData29[ 0x48 ];                            		// 0x08A8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SystemImageMap
	unsigned char                                      UnknownData30[ 0x48 ];                            		// 0x08F0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.BoostCodeNameMap
	unsigned char                                      UnknownData31[ 0x48 ];                            		// 0x0938 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopItemPriceMap
	unsigned char                                      UnknownData32[ 0x48 ];                            		// 0x0980 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.RewardCodeNameMap
	unsigned char                                      UnknownData33[ 0x48 ];                            		// 0x09C8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeGuideCodeNameMap
	unsigned char                                      UnknownData34[ 0x48 ];                            		// 0x0A10 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.FrontEndModeMap
	unsigned char                                      UnknownData35[ 0x48 ];                            		// 0x0A58 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeTipCodeNameMap
	unsigned char                                      UnknownData36[ 0x48 ];                            		// 0x0AA0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.BGMNameMap
	unsigned char                                      UnknownData37[ 0x48 ];                            		// 0x0AE8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.AttendCodeNameMap
	unsigned char                                      UnknownData38[ 0x48 ];                            		// 0x0B30 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.DefineCodeNameMap
	unsigned char                                      UnknownData39[ 0x48 ];                            		// 0x0B78 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.KillComboCodeNameMap
	unsigned char                                      UnknownData40[ 0x48 ];                            		// 0x0BC0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.AIRewardRankCodeNameMap
	unsigned char                                      UnknownData41[ 0x48 ];                            		// 0x0C08 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TypeDefineDataMap
	unsigned char                                      UnknownData42[ 0x48 ];                            		// 0x0C50 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.RandomBoxCubeCodeNameMap
	unsigned char                                      UnknownData43[ 0x48 ];                            		// 0x0C98 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.GameChannelPropertyMap
	unsigned char                                      UnknownData44[ 0x48 ];                            		// 0x0CE0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SystemTextColorMap
	unsigned char                                      UnknownData45[ 0x48 ];                            		// 0x0D28 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.LimitSaleMap
	unsigned char                                      UnknownData46[ 0x48 ];                            		// 0x0D70 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SteamItemMap
	unsigned char                                      UnknownData47[ 0x48 ];                            		// 0x0DB8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TierMap
	unsigned char                                      UnknownData48[ 0x48 ];                            		// 0x0E00 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TierSeasonMap
	unsigned char                                      UnknownData49[ 0x48 ];                            		// 0x0E48 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.PenaltyMap
	unsigned char                                      UnknownData50[ 0x48 ];                            		// 0x0E90 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.PenaltyBindMap
	unsigned char                                      UnknownData51[ 0x48 ];                            		// 0x0ED8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.FormulaMap
	unsigned char                                      UnknownData52[ 0x48 ];                            		// 0x0F20 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TodayGameMap
	unsigned char                                      UnknownData53[ 0x48 ];                            		// 0x0F68 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TodayGameBindModeMap
	int                                                MaxRank;                                          		// 0x0FB0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFinishedLoadAllTables : 1;                       		// 0x0FB4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      UnknownData54[ 0x48 ];                            		// 0x0FB8 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemUnLockRecipeMap
	TArray< struct FDataTableInfo >                    DataTableList;                                    		// 0x1000 (0x0010) [0x0000000000000000]              
	TArray< unsigned char >                            UnnecessaryDataTableListOnDedi;                   		// 0x1010 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             StatTableEventKeyList;                            		// 0x1020 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1752 ];

		return pClassPointer;
	};

	void CheckItemUnLockRecipe ( );
	void GetTodayGameTableIdx ( );
	void GetTodayGameTable ( );
	void GetTodayGameBindMode ( );
	void GetTodayGameCodeName ( );
	void GetTodayGameModeCodeName ( );
	void GetOpenChannelFromPenaltyIdx ( );
	void GetPenaltyTable ( );
	void GetMissionTableFromModeGroup ( );
	void GetPenaltyBindTableFromPenaltyIdx ( );
	void GetRefSteamItem ( );
	void GetRefLimitSaleByCodename ( );
	void GetRefSystemTextColor ( );
	void GetRefExchangeCashTable ( );
	void GetRefGameChannelProperty ( );
	void GetRefGameChannel ( );
	void GetRefMatchMakingTable ( );
	void GetRefMoneyDisplayTable ( );
	void GetRefSystemImage ( );
	void GetRefPickUpDisplayByPercent ( );
	void GetRefTypeDefineByItemIndex ( );
	void GetRefImagePathTable ( );
	void GetRefClanRegionTable ( );
	void GetRefModeTipTableByIndex ( );
	void CalculateBulletSaleTimeDate ( );
	void CanTacticalGearEquip ( );
	void GetRefModeMapTableDataByMapCodename ( );
	void CalculateRankExpToRank ( );
	void GetRefRankUpTableByIndex ( );
	void GetRefRankUpTable ( );
	void GetAddReplaceItemCodename ( );
	void GetExchangeInfo ( );
	void GetPriceInfo ( );
	void GetSalePrice ( );
	void CheckPrice ( );
	void GetMainRentalDay ( );
	void GetRepurchaseMoneyType ( );
	void GetMainPriceIndex ( );
	void GetMainPrice ( );
	void GetShopItemMoneyType ( );
	void IsDisplayShopItem ( );
	void IsDisplayRepurchaseItem ( );
	void GetRefAchievementDataByStatCodename ( );
	void CalculateExpToLevel ( );
	void GetRefRandomBoxByCubeCodeName ( );
	void GetRefWeaponGroupByGroupName ( );
	void GetMapFileNameByMapCodeName ( );
	void GetRefModeName ( );
	void GetRefMapIndexBy ( );
	void GetRefItemDataByAttachmentWeaponName ( );
	void GetRefItemDataByClassName ( );
	void GetRefShopSellItemByCodeName ( );
	void GetRefCallingCardByCodeName ( );
	void GetRefDefineByCodeName ( );
	void GetRefModeTipByCodeName ( );
	void GetRefFrontEndModeByCodeName ( );
	void GetRefBoosterItemByCodeName ( );
	void GetRefModeGuideByCodeName ( );
	void GetRefRewardByCodeName ( );
	void GetRefShopCategoryDataByCodeName ( );
	void GetRefShopCategoryTabDataByCodeName ( );
	void GetRefItemDetailinfoByCodename ( );
	void GetRefModeOptionDataByCodename ( );
	void GetRefRankDataByCodeName ( );
	void GetRefSkillDataByCodename ( );
	void GetRefSkillLicenseByItemCodeName ( );
	void GetRefGroupSkillDataByCodeName ( );
	void GetRefDropDataByCodeName ( );
	void GetRefPickupDataByCodeName ( );
	void GetRefStatEntryDataByCodeName ( );
	void GetRefGameScoringDataByCodename ( );
	void GetRefAchievementDataByCodename ( );
	void GetRefItemDataByCodename ( );
	void GetRefInitItemDataByCodename ( );
	void GetRefModeGroupDataByCodename ( );
	void GetRefModeDataByCodename ( );
	void GetRefMapDataByCodename ( );
	void GetRefKillComboByIndex ( );
	void GetRefTableCount ( );
	void GetRefResultRewardByIndex ( );
	void GetRefRandomBoxByIndex ( );
	void GetRefCubeBoxByIndex ( );
	void GetRefBGMByIndex ( );
	void eventGetRefBoosterItemByIndex ( );
	void GetRefQuestByIndex ( );
	void GetRefEmblemByIndex ( );
	void GetRefGearByIndex ( );
	void GetUCombatDataTableRefShopSellItemByIndex ( );
	void GetRefCallingCardByIndex ( );
	void GetRefFilterByIndex ( );
	void GetRefShopItem ( );
	void GetRefSkill ( );
	void GetRefMission ( );
	void eventGetRefStat ( );
	void GetRefMailForm ( );
	void GetRefDropTable ( );
	void GetRefPickupTable ( );
	void GetRefAchievementTable ( );
	void eventGetRefClanExpTable ( );
	void eventGetRefScoringTable ( );
	void GetRefCrosshairTable ( );
	void eventGetRefItemTable ( );
	void eventGetRefExpTable ( );
	void GetRefItemDetailinfoTable ( );
	void eventGetRefModeGroupTable ( );
	void eventGetRefModeTable ( );
	void eventGetRefQuestTable ( );
	void eventGetRefMapTable ( );
	void GetRefBasicChatTable ( );
	void GetTotalTableCount ( );
	void GetDataTableArray ( );
	void InitializeUIDataStore ( );
	void InitializeAchievementSystem ( );
	void SetFinishedLoadAllTables ( );
	void IsFinishedLoadAllTables ( );
	void UnloadDataTables ( );
	void eventGetLocalizedChatCommandID ( );
	void eventGetLocalizedString ( );
	void LoadChatCommandDataTables ( );
	void UnnecessaryDataTableOnDedi ( );
	void LoadDataTables ( );
	void LoadXMLDataTables ( );
};

UClass* UCombatGameTableDepot::pClassPointer = NULL;

// Class CombatGame.CombatGameClientTableDepot
// 0x0000 (0x1030 - 0x1030)
class UCombatGameClientTableDepot : public UCombatGameTableDepot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1753 ];

		return pClassPointer;
	};

	void InitializeUIDataStore ( );
	void GetRefRandomBoxCostDatasByRandomBoxCodename ( );
	void GetOutputCubeListByRandomBoxCodename ( );
	void GetMapFileNameByMapCodeName ( );
	void GetRefHelpDetailInfoDataByCodeName ( );
	void GetRefHelpTabDataByCodeName ( );
	void GetRefShopItemEntryDataByCodeName ( );
	void GetRefAttendTabIndex ( );
	void GetRefAttendDataTable ( );
	void GetRefHelpTabCount ( );
	void GetRefHelpTabIndex ( );
	void eventGetRefShopItemDataByIndex ( );
	void GetRefShopItemDataTable ( );
};

UClass* UCombatGameClientTableDepot::pClassPointer = NULL;

// Class CombatGame.CombatGameServerTableDepot
// 0x0000 (0x1030 - 0x1030)
class UCombatGameServerTableDepot : public UCombatGameTableDepot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1754 ];

		return pClassPointer;
	};

};

UClass* UCombatGameServerTableDepot::pClassPointer = NULL;

// Class CombatGame.CombatGameTrophyTouchComponent
// 0x0014 (0x0264 - 0x0250)
class UCombatGameTrophyTouchComponent : public UPrimitiveComponent
{
public:
	float                                              MinRadius;                                        		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              MaxRadius;                                        		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              MinDegree_XYPlane;                                		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              MaxDegree_XYPlane;                                		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                SphereSides;                                      		// 0x0260 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1755 ];

		return pClassPointer;
	};

	void GetNativeOrigin ( );
};

UClass* UCombatGameTrophyTouchComponent::pClassPointer = NULL;

// Class CombatGame.CombatGameViewportClient
// 0x0044 (0x01E4 - 0x01A0)
class UCombatGameViewportClient : public UGameViewportClient
{
public:
	struct FString                                     HintLocFileName;                                  		// 0x01A0 (0x0010) [0x0000000000000000]              
	TArray< struct F__ASPECT >                         ScreenResList;                                    		// 0x01B0 (0x0010) [0x0000000000000000]              
	unsigned long                                      bShowReflectionsOnly : 1;                         		// 0x01C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowSpawnGroupIndex : 1;                         		// 0x01C0 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FColor >                            BitMapForScreenShot;                              		// 0x01C4 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             FlushkeyInputNames;                               		// 0x01D4 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1756 ];

		return pClassPointer;
	};

	void DrawTransition ( );
	void DebugRemovePlayer ( );
	void SSSwapControllers ( );
	void DebugCreatePlayer ( );
	void SetSplit ( );
	void ShowTitleSafeArea ( );
	void SetConsoleTarget ( );
	void eventInit ( );
	void SetResolutions ( );
	void NativeSetResolutions ( );
	void InitAvailableResolutions ( );
	void DisplayConnectionError ( );
	void NotifyConnectionError ( );
	void IsShowFlag ( );
	void LoadRandomLocalizedHintMessage ( );
};

UClass* UCombatGameViewportClient::pClassPointer = NULL;

// Class CombatGame.CombatGFxMoviePlayer
// 0x010C (0x02F0 - 0x01E4)
class UCombatGFxMoviePlayer : public UGFxMoviePlayer
{
public:
	class UCombatGameClientTableDepot*                 CBTableDepot;                                     		// 0x01E4 (0x0008) [0x0000000000000000]              
	class UOnlineSubsystemCombat*                      OSS;                                              		// 0x01EC (0x0008) [0x0000000000000000]              
	class UCombatChannelTransaction*                   ChannelTran;                                      		// 0x01F4 (0x0008) [0x0000000000000000]              
	class UCombatLobbyChatTransaction*                 LobbyChatTran;                                    		// 0x01FC (0x0008) [0x0000000000000000]              
	class UCombatCharacterTransaction*                 CTran;                                            		// 0x0204 (0x0008) [0x0000000000000000]              
	class UCombatItemTransaction*                      ITran;                                            		// 0x020C (0x0008) [0x0000000000000000]              
	class UCombatStatisticsTransaction*                STran;                                            		// 0x0214 (0x0008) [0x0000000000000000]              
	class UCombatLobbyTransaction*                     LTran;                                            		// 0x021C (0x0008) [0x0000000000000000]              
	class UCombatCommunityTransaction*                 CommuTran;                                        		// 0x0224 (0x0008) [0x0000000000000000]              
	class UCombatClanTransaction*                      ClanTran;                                         		// 0x022C (0x0008) [0x0000000000000000]              
	class UCombatMailTransaction*                      MailTran;                                         		// 0x0234 (0x0008) [0x0000000000000000]              
	class UCombatAwaitTransaction*                     AwaitTran;                                        		// 0x023C (0x0008) [0x0000000000000000]              
	class UCombatRandomBoxTransaction*                 RandomBoxTran;                                    		// 0x0244 (0x0008) [0x0000000000000000]              
	class UCombatGameOptionTransaction*                GameOptionTran;                                   		// 0x024C (0x0008) [0x0000000000000000]              
	class UCombatMain_Base*                            MainContainer;                                    		// 0x0254 (0x0008) [0x0000000000000000]              
	class UCombatCommon_Command*                       CommandMC;                                        		// 0x025C (0x0008) [0x0000000000000000]              
	class UCombatCommon_SystemCounter*                 SystemCounterMC;                                  		// 0x0264 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  NoticeMC;                                         		// 0x026C (0x0008) [0x0000000000000000]              
	struct FString                                     MoviePath;                                        		// 0x0274 (0x0010) [0x0000000000000000]              
	class ACombatHUD*                                  myHUD;                                            		// 0x0284 (0x0008) [0x0000000000000000]              
	struct FString                                     IconImageHeadPath;                                		// 0x028C (0x0010) [0x0000000000000000]              
	struct FString                                     EmptyImageName;                                   		// 0x029C (0x0010) [0x0000000000000000]              
	struct FString                                     PreLoadPackagePath;                               		// 0x02AC (0x0010) [0x0000000000000000]              
	class UCombatDialogManager*                        DialogManager;                                    		// 0x02BC (0x0008) [0x0000000000000000]              
	class UCombatChatManager*                          ChatManager;                                      		// 0x02C4 (0x0008) [0x0000000000000000]              
	class UClass*                                      ChatManagerClass;                                 		// 0x02CC (0x0008) [0x0000000000000000]              
	class UCombatCommon_Option*                        OptionClass;                                      		// 0x02D4 (0x0008) [0x0000000000000000]              
	class UCombatCommon_OverImmersionGuard*            OverImmersionGuardClass;                          		// 0x02DC (0x0008) [0x0000000000000000]              
	class UCombatCommon_VoiceChatOption*               VoiceChatOptionClass;                             		// 0x02E4 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsChatFocus : 1;                                 		// 0x02EC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1757 ];

		return pClassPointer;
	};

	void SetSpectatorFlashEffectGauge ( );
	void ShowSpectatorFlashEffect ( );
	void RecvDestroyedItem ( );
	void OnMatchroomSlotUpdateDel ( );
	void GetServerChannelName ( );
	void OnLeaveMatchChannel ( );
	void DisconnetClientResult ( );
	void SetChatFocus ( );
	void OnChangedCommonOptionControl ( );
	void UpdateMinimapSizeStep ( );
	void UpdateFriendInviteRefuse ( );
	void UpdateInviteAutoRegist ( );
	void OnUpdateGameOption ( );
	void RequestUpdateGameOption ( );
	void UpdateHoldmode ( );
	void UpdateTeamIFFView ( );
	void UpdateFlipMesh ( );
	void ReloadCrosshair ( );
	void CanDisplayPreMTSResetMessage ( );
	void NotifyPreMTSReset ( );
	void AddMTSMessage ( );
	void DisplayAddBlackList_Failure ( );
	void OnAddBlackList_Failure ( );
	void OnAddBlackList_Success ( );
	void TryAddBlackList ( );
	void AddBlackList ( );
	void ClanNoticeUpdate ( );
	void DisplayClanNotice_OnChat ( );
	void GetImgPath_ClanEmblem ( );
	void OnNotifyKeyInputSignal ( );
	void OnDisconnectMatchServerByAFK ( );
	void OnInputExpireTime ( );
	void SetImmersionHourString ( );
	void ShowImmersionGuardAnimaion ( );
	void registerMain_Excessive ( );
	void ResetVoiceChatUI ( );
	void ReloadVoiceChatAllList ( );
	void UpdateVoiceChatUserStatus ( );
	void receiveVoicechatTeamsettingStateBtn ( );
	void receiveVoicechatTeamsettingCloseBtn ( );
	void receiveVoicechatTeamsettingMuteAllBtn ( );
	void HideVoiceChatOption ( );
	void ShowVoiceChatOption ( );
	void registerVoiceChatTeamSetting ( );
	void receiveCommonOptionInputDeviceChange ( );
	void receiveCommonOptionInputModeChange ( );
	void receiveCommonOptionOutputVolumeBtnClick ( );
	void receiveCommonOptionInputVolumeBtnClick ( );
	void receiveCommonOptionOutputVolumeChange ( );
	void receiveCommonOptionInputVolumeChange ( );
	void receiveCommonOptionVoiceChannelBtnClick ( );
	void receiveCommonOptionGamePlayTeamOutLineBtnClick ( );
	void receiveCommonOptionGamePlayWFovChange ( );
	void receiveCommonOptionGamePlayCrossHairRecoilChange ( );
	void receiveCommonOptionGamePlayCrossHairAlphaChange ( );
	void receiveCommonOptionGamePlayCrossHairShadowChange ( );
	void receiveCommonOptionGamePlayCrossHairLengthChange ( );
	void receiveCommonOptionGamePlayCrossHairColorChange ( );
	void receiveCommonOptionGamePlayCrossHairFormChange ( );
	void receiveCommonOptionGamePlayHoldToAimChange ( );
	void receiveCommonOptionGamePlayIffVeiwOnOffChange ( );
	void receiveCommonOptionGamePlayWeaponFlipChange ( );
	void receiveCommonOptionGamePlayFovChange ( );
	void receiveCommonOptionGamePlayDeadChatBtnClik ( );
	void receiveCommonOptionGamePlayFriendRequestBtnClick ( );
	void receiveCommonOptionGamePlayTeamChatBtnClik ( );
	void receiveCommonOptionGamePlayFullChatBtnClick ( );
	void receiveCommonOptionHitSoundChange ( );
	void receiveCommonOptionVoiceSoundChange ( );
	void receiveCommonOptionEffectSoundChange ( );
	void receiveCommonOptionInGameBackgroundSoundChange ( );
	void receiveCommonOptionBackgroundSoundChange ( );
	void receiveCommonOptionMasterSoundChange ( );
	void receiveCommonOptionHitSoundMuteBtnClick ( );
	void receiveCommonOptionVoiceSoundMuteBtnClick ( );
	void receiveCommonOptionInGameBgSoundMuteBtnClick ( );
	void receiveCommonOptionBgSoundMuteBtnClick ( );
	void receiveCommonOptionEffectSoundMuteBtnClick ( );
	void receiveCommonOptionKeyboardKeyUp ( );
	void receiveCommonOptionKeyBindingBtnClick ( );
	void ReceiveCommonOptionPresetAllChkBtnClick ( );
	void receiveCommonOptionMouseSensitivity ( );
	void receiveCommonOptionPresetThreeSensitivityChange ( );
	void receiveCommonOptionPresetTwoSensitivityChange ( );
	void receiveCommonOptionPresetOntSensitivityChange ( );
	void receiveCommonOptionMasterSensitivityChange ( );
	void receiveCommonOptionReverseMouseBtnClick ( );
	void receiveCommonOptionIndividualMouseSensitivityBtnClick ( );
	void receiveCommonOptionMasterMouseSensitivityBtnClick ( );
	void receiveCommonOptionOneFrameThreadChange ( );
	void receiveCommonOptionSystemCountChange ( );
	void receiveCommonOptionFpsLimitChange ( );
	void receiveCommonOptionLightAndShadeChange ( );
	void receiveCommonOptionGunTrailChange ( );
	void receiveCommonOptionBrightChange ( );
	void receiveCommonOptionAmbOcclusionChange ( );
	void receiveCommonOptionPhysicalChange ( );
	void receiveCommonOptionEffectChange ( );
	void receiveCommonOptionShadowChange ( );
	void receiveCommonOptionLightReflectChange ( );
	void receiveCommonOptionLightChange ( );
	void receiveCommonOptionBackGroundChange ( );
	void receiveCommonOptionCharacterChange ( );
	void receiveCommonOptionRealTimeShadowChange ( );
	void receiveCommonOptionBloodEfChange ( );
	void receiveCommonOptionScanRateChange ( );
	void receiveCommonOptionAntiAliasingChange ( );
	void receiveCommonOptionVsyncChange ( );
	void receiveCommonOptionColorSenseChange ( );
	void receiveCommonOptionResolutionChange ( );
	void receiveCommonOptionAspectRatioChange ( );
	void receiveCommonOptionModeChange ( );
	void receiveCommonOptionGraphicQualityChange ( );
	void receiveCommonOptionCancelBtnClick ( );
	void receiveCommonOptionSaveBtnClick ( );
	void receiveCommonOptionApplyBtnClick ( );
	void receiveCommonOptionInitBtnClick ( );
	void receiveCommonOptionGamePlaySubTabClick ( );
	void receiveCommonOptionTabMenuClick ( );
	void CancelOption ( );
	void HideOption ( );
	void ShowOption ( );
	void registerCommonOption ( );
	void OnLoginUIUnLock ( );
	void OnLoginUILock ( );
	void CreateChatManager ( );
	void ControlAwesomiumUIVisible ( );
	void ChangeInputTarget ( );
	void SetMovieAllowInput ( );
	void eventGetImagePath ( );
	void eventGetFullImagePath ( );
	void UpdateProtocoalLog ( );
	void ShowNoticeMessage ( );
	void SetNoticeMessage ( );
	void registerInfo ( );
	void RecvFailBlockPlayGame_WrongActivatedType ( );
	void RecvSuccessBlockPlayGame ( );
	void KickPlayer ( );
	void NotifySpectatorMode ( );
	void OnRoundMonitoringOption_Failure ( );
	void OnRoundMonitoringOption_Success ( );
	void OnGMCMD_Failure ( );
	void OnGMCMD_Success ( );
	void RequestSendClanChat ( );
	void CheckChampionshipObserverCommand ( );
	void CheckUserCommand ( );
	void RequestSendNoticeMessage ( );
	void OnChampionShipUserBlockChatting_Failure ( );
	void OnChampionShipUserBlockChatting_Success ( );
	void OnChampionShipChannelNoticeChatting_Failure ( );
	void GetMessengerMessage ( );
	void OnSendWhisper_Failure ( );
	void OnSendClanChatting_Failure ( );
	void OnSendChatting_Failure ( );
	void UpdateTsMessage ( );
	void UpdateWhisperChatting ( );
	void UpdateClanLevelUp ( );
	void UpdateClanChatting ( );
	void Dev_UpdateDevelopeMessage ( );
	void AddGMChatMessage ( );
	void AddChatMessage ( );
	void SetIgnoreCreateDialog ( );
	void IsDialogShown ( );
	void UnloadDialog ( );
	void LoadDialog ( );
	void HideDialog ( );
	void OnShowDialogCancle ( );
	void OnShowDialogOK ( );
	void ShowDialog ( );
	void eventWidgetInitialized ( );
	void GetPlayerInfoData ( );
	void GetGameOptionTran ( );
	void GetRandomBoxTran ( );
	void GetAwaitTran ( );
	void GetMailTran ( );
	void GetClanTran ( );
	void GetCommunityTran ( );
	void GetLobbyTran ( );
	void GetStatisticsTran ( );
	void GetItemTran ( );
	void GetCharacterTran ( );
	void GetLobbyChatTran ( );
	void GetChannelTran ( );
	void GetOnlineSubsystem ( );
	void GetClientTableDepot ( );
	void GetSystemCountListCount ( );
	void UpdateSystemCounter ( );
	void StopSystemCounterTimer ( );
	void StartSystemCounterTimer ( );
	void HideSystemCounter ( );
	void ShowSystemCounter ( );
	void IsDisplayCommand ( );
	void HideCommand ( );
	void ShowCommand ( );
	void registerCommandMessage ( );
	void registerCommonCommand ( );
	void AllFlashLoaded ( );
	void SetVoiceChayPlayerPosition ( );
	void SetSystemCounterPosition ( );
	void PlaySound ( );
	void KeyEvent ( );
	void RestoreMouse ( );
	void BackUpMouse ( );
	void ToggleMouse ( );
	void Init ( );
	void ConvertTo2DVec ( );
	void ConsoleCommand ( );
	void GetCombatPC ( );
	void ShowHUD ( );
	void IsCanTick ( );
	void Reset ( );
	void PreTick ( );
	void Tick ( );
	void PostBeginPlay ( );
};

UClass* UCombatGFxMoviePlayer::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndMoviePlayer
// 0x0198 (0x0488 - 0x02F0)
class UCombatFrontEndMoviePlayer : public UCombatGFxMoviePlayer
{
public:
	class ACombatFrontEndInfo*                         CurrentGI;                                        		// 0x02F0 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Scene*                       FrontEndScenes[ 0x18 ];                           		// 0x02F8 (0x00C0) [0x0000000000000000]              
	class UCombatFrontEnd_Scene*                       CurrentScene;                                     		// 0x03B8 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Dashboard*                   DashboardClass;                                   		// 0x03C0 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Chat*                        ChatClass;                                        		// 0x03C8 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Community*                   MessengerClass;                                   		// 0x03D0 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_BuyItem*                     BuyItemClass;                                     		// 0x03D8 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_ItemSellPopup*               ItemSellPopupClass;                               		// 0x03E0 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_QuickStart*                  QuickStartClass;                                  		// 0x03E8 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_PlayerInfoPage*              PlayerInfoClass;                                  		// 0x03F0 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_CallingCardPage*             CallingCardClass;                                 		// 0x03F8 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Help*                        HelpClass;                                        		// 0x0400 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_AwaitList*                   AwaitListClass;                                   		// 0x0408 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Repurchase*                  RepurchaseClass;                                  		// 0x0410 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Exchange*                    ExchangePopupClass;                               		// 0x0418 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_RandomBoxPickUp*             RandomBoxPickUpClass;                             		// 0x0420 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_ClausePopup*                 ClausePopupClass;                                 		// 0x0428 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_ChangePropernounPopup*       ChangePropernounPopup;                            		// 0x0430 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Accessterms*                 AccessTermsClass;                                 		// 0x0438 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Sort*                        SortClass;                                        		// 0x0440 (0x0008) [0x0000000000000000]              
	unsigned long                                      bAllFlashLoaded : 1;                              		// 0x0448 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBuyItemTryPayment : 1;                           		// 0x0448 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIgnorePressEvent : 1;                            		// 0x0448 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPlayBGM : 1;                                     		// 0x0448 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDisplayedShowRoom : 1;                           		// 0x0448 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsOpenRandomBox : 1;                             		// 0x0448 (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                InviteDialogID;                                   		// 0x044C (0x0004) [0x0000000000000000]              
	TArray< class UCombatFrontEnd_Object* >            PopupList;                                        		// 0x0450 (0x0010) [0x0000000000000000]              
	class UCBUIDataStore_Mission*                      UIDataStore_Mission;                              		// 0x0460 (0x0008) [0x0000000000000000]              
	class UCBUIDataStore_ETC*                          UIDataStore_ETC;                                  		// 0x0468 (0x0008) [0x0000000000000000]              
	unsigned char                                      ReservedScene;                                    		// 0x0470 (0x0001) [0x0000000000000000]              
	class UGFxObject*                                  ShowRoomClass;                                    		// 0x0474 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_Exit*                        LogOut_BattleInfoPopUp;                           		// 0x047C (0x0008) [0x0000000000000000]              
	int                                                DevReserveOpenRandomBoxID;                        		// 0x0484 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1758 ];

		return pClassPointer;
	};

	void UpdateInviteAutoRegist ( );
	void receiveInventorySellItemNoticePopupCancelBtn ( );
	void receiveInventorySellItemNoticePopupOkBtn ( );
	void receiveInventorySellItemViewPopupCancelBtn ( );
	void receiveInventorySellItemViewPopupOkBtn ( );
	void registerInventoryItemSellPopup ( );
	void UpdateInventoryItemUIData ( );
	void OnTodayModeUpdateFailed ( );
	void OnTodayModeUpdate ( );
	void OnEscapedCompMatchIsEndDialogOK ( );
	void ShowEscapedCompMatchIsEndDialog ( );
	void OnReturnBackPlayProcessEnd ( );
	void OnItemUnLock ( );
	void IsSteamOverlayEnabled ( );
	void StopPingUpdateTimer ( );
	void StartPingUpdateTimer ( );
	void UpdatePingInfo ( );
	void OnMatchroomSlotUpdateDel ( );
	void CancelMatchMapPreload ( );
	void DisconnetClientResult ( );
	void UpdateStorageExpiresCount ( );
	void UpdateStorageNewCount ( );
	void ReceiveStorageContent_Failure ( );
	void ReceiveStorageFinish ( );
	void ReceiveStorageContent_Success ( );
	void UpdateStorageList ( );
	void MailBoxStateUpdate ( );
	void receiveArchiveCheckBox ( );
	void receiveArchiveReadedMsg ( );
	void receiveArchiveAllCheckBtn ( );
	void receiveArchiveAllReceiveBtn ( );
	void receiveArchiveReceiveSelectedBtn ( );
	void receiveArchiveReceiveArticleBtn ( );
	void receiveArchiveMsgDeleteBtn ( );
	void receiveArchiveNextBtn ( );
	void receiveArchivePrevBtn ( );
	void receiveArchiveGiftTab ( );
	void receiveArchiveStorageTab ( );
	void registerArchive ( );
	void receiveAccesstermsDisagreeBtn ( );
	void receiveAccesstermsAgreeBtn ( );
	void SendAccessTermAgree ( );
	void HideAccessterms ( );
	void ShowAccessterms ( );
	void registerAccessTerms ( );
	void receiveChangeProperNounPopupCancelBtn ( );
	void receiveChangeProperNounPopupOkBtn ( );
	void OnChangePropernounError ( );
	void OnChangePropernounSuccess ( );
	void ShowChangePropernounPopupPage ( );
	void registerChangePropernounPopup ( );
	void receiveClausePopupClauseBtn ( );
	void receiveClausePopupCancelBtn ( );
	void receiveClausePopupOkBtn ( );
	void ShowClausePopupPage ( );
	void registerCommonClausePopup ( );
	void receiveLobbyRoomCreatedMapPwTxtGetFocus ( );
	void OnUpdateMatchBanInfo ( );
	void OnUpdateMatchStartWaitTime ( );
	void HideRandomBoxPickInfo ( );
	void registerRandomBoxShopPickupInfo ( );
	void GetCurrentShopType ( );
	void OnEneterPracticeGame_Failure ( );
	void OnEneterPracticeGame ( );
	void OpenRandomBoxItem ( );
	void receiveRandomBoxShopCoinBarBScoinChargeBtnClick ( );
	void receiveRandomBoxShopCoinBarMcoinChargeBtnClick ( );
	void receiveRandomBoxShopCoinBarGcoinChargeBtnClick ( );
	void receiveRandomBoxShopTabBtnClick ( );
	void receiveRandomBoxShopInfoCompositionItemClick ( );
	void receiveRandomBoxShopPackageItemListClick ( );
	void receiveRandomBoxShopCashChargeBtnClick ( );
	void receiveRandomBoxShopPackageItemOpenBtnClick ( );
	void receiveRandomBoxShopCoinTabClick ( );
	void registerRandomBoxShopCoinBar ( );
	void registerRandomBoxShopPackageItemInfo ( );
	void registerRandomBoxShopPackageItemList ( );
	void registerRandomBoxShop ( );
	void GetSpecialDiscountIndexList ( );
	void GetExchangeBulletTableIndex ( );
	void isCanBuyBulletSpecialSale ( );
	void isBulletSpecialSale ( );
	void isBulletSale ( );
	void HideExchangePopup ( );
	void SetExchangeCoinList ( );
	void receiveRandomBoxShopExchangeListClick ( );
	void receiveRandomBoxShopExchangeCancelBtnClick ( );
	void receiveRandomBoxShopExchangeBuyBtnClick ( );
	void registerRandomBoxShopExchangePopup ( );
	void AddDashboardNotice ( );
	void AddGetRandomBoxNotice ( );
	void LeaveRandomBoxScene ( );
	void ForceLeaveRandomBoxScene ( );
	void EnterRandomBoxScene ( );
	void receiveOpenRandomBoxSlotDragEnd ( );
	void receiveOpenRandomBoxSlotDragStart ( );
	void receiveOpenRandomBoxEraseSlotComplete ( );
	void receiveOpenRandomBoxDrawSlotComplete ( );
	void receiveOpenRandomBoxSlotAllOpen ( );
	void receiveOpenRandomBoxResize ( );
	void receiveOpenRandomBoxAreaClick ( );
	void receiveOpenRandomBoxAreaOut ( );
	void receiveOpenRandomBoxAreaOver ( );
	void receiveOpenRandomBoxCloseBtnClick ( );
	void receiveOpenRandomBoxContinuityOpenBtnClick ( );
	void registerOpenRandomBox ( );
	void CheckRandomBoxInInventory ( );
	void RandomBoxUsedFail ( );
	void RandomBoxUsedSuccess ( );
	void RandomBoxSetFromScene ( );
	void IsContinuableRandomBox ( );
	void RequestBuyRandomBox ( );
	void NotifyRandomBoxClosedAction ( );
	void QuestPageRefresh ( );
	void OnQuestStatus_Change ( );
	void receiveTabBtn ( );
	void receiveRewardBtn ( );
	void RegisterEvent ( );
	void CanDisplayPreMTSResetMessage ( );
	void NotifyMTSReset ( );
	void ReceiveClanHomeLocalChange ( );
	void ReceiveClanHomeMatchListBtn ( );
	void ReceiveClanHomeBMatchBtn ( );
	void ReceiveClanHomeAMatchBtn ( );
	void ReceiveClanHomeRecentlyMatchBtn ( );
	void ReceiveClanHomeSecondTabBtn ( );
	void ReceiveClanHomeFirstTabBtn ( );
	void receiveCancleBtn ( );
	void receiveExitBtn ( );
	void HideClosingClientBattleInfoPopUp ( );
	void ShowClosingClientBattleInfoPopUp ( );
	void registerExit ( );
	void OnDisplayDialogMatchroomInvite_CANCEL ( );
	void OnDisplayDialogMatchroomInvite_OK ( );
	void DisplayDialogMatchroomInvite ( );
	void OnMatchroomInviteUser ( );
	void IsCurrentSceneTypeMain ( );
	void IsShowInviteDialog ( );
	void OnMatchroomInviteUser_Failed_OK ( );
	void OnMatchroomInviteUser_Failure ( );
	void OnMatchroomInviteUser_Sucess ( );
	void RequestMatchRoomInviteUser ( );
	void UpdateAwaitList ( );
	void HideAwaitList ( );
	void IsShowAwaitList ( );
	void TogleAwaitList ( );
	void receiveAwaitListPopupMenuBtn ( );
	void receiveAwaitListAwaiterLeftRightClick ( );
	void receiveAwaitListCloseBtn ( );
	void receiveAwaitListEnrollmentBtn ( );
	void receiveAwaitListNextBtn ( );
	void receiveAwaitListPrevBtn ( );
	void receiveAwaitListReflashBtn ( );
	void registerAwaitList ( );
	void GetString_CallingCard ( );
	void GetImgPath_CallingCard ( );
	void receiveHelpCloseBtn ( );
	void registerHelp ( );
	void OnDialog_Ok ( );
	void FailedChangeHost ( );
	void UpdateNewQuestAlarm ( );
	void receiveMyInfoScreenShotBtn ( );
	void registerMyInfo ( );
	void receiveListItemBtn ( );
	void receiveCloseBtn ( );
	void receiveApplyBtn ( );
	void receiveClanViewBtn ( );
	void receivePlayInfoCloseBtn ( );
	void registerCallingCard ( );
	void registerPlayInfo ( );
	void DoQuickstart ( );
	void receiveLobbyQuickStartSetupDropDownMenuChange ( );
	void receiveLobbyQuickStartSetupSaveAndRunBtn ( );
	void receiveLobbyQuickStartSetupSaveAndCloseBtn ( );
	void receiveLobbyQuickStartSetupCancelBtn ( );
	void registerLobbyQuickStartSetup ( );
	void DisplayDialog_NoticeModifiedByOther ( );
	void ClanNoticeUpdate ( );
	void ClanNoticeUpdateSucceded ( );
	void ClanNoticeUpdateFailed ( );
	void DisplayDialog_IntroduceModifiedByOther ( );
	void ClanIntroduceUpdate ( );
	void ClanIntroduceUpdateSucceded ( );
	void ClanIntroduceUpdateFailed ( );
	void RecvClanGradeChangeFail ( );
	void RecvClanMasterDelegateFail ( );
	void RecvClanJoinRefuseFail ( );
	void RecvClanJoinApproveFail ( );
	void RecvClanShutDownFail ( );
	void UpdateClanShutDownSucceed ( );
	void RecvClanClearInfoUpdate ( );
	void RecvBecameClanMaster ( );
	void RecvClanMasterChangeUpdate ( );
	void RecvClanChangInfoUpdate ( );
	void ReceiveClanHomeDrawBtn ( );
	void ReceiveClanHomePopupBtn ( );
	void ReceiveClanHomeRejectBtn ( );
	void ReceiveClanHomeApprovalBtn ( );
	void receiveClanHomePersonalLeftRightBtn ( );
	void ReceiveClanSubscriberTabBtn ( );
	void ReceiveClanHomeMemberTabBtn ( );
	void ReceiveClanHomePasswordChangeBtn ( );
	void ReceiveClanHomeClanCloseBtn ( );
	void SetSearchClanName ( );
	void RecvClanJoinCancelFail ( );
	void RecvClanJoinApplyFail ( );
	void RecvClanFindFailed ( );
	void receiveClanListSortDropDownMenuChange ( );
	void receiveClanListSearchBtn ( );
	void receiveClanListJoinBtn ( );
	void receiveClanListClanBtn ( );
	void receiveClanListNextBtn ( );
	void receiveClanListPrevBtn ( );
	void RecvClanJoinList ( );
	void FailChangeClanPassword ( );
	void OnSuccessChangeClanPassword_OK ( );
	void SuccessChangeClanPassword ( );
	void CheckChangeClanPassword ( );
	void CheckCreateClanPassword ( );
	void IsNeedChangeClanPassword ( );
	void receiveClanPopupPasswordForCloseOkBtn ( );
	void receiveClanPopupPasswordForChangeOkBtn ( );
	void receiveClanPopupPasswordForInputOkBtn ( );
	void ClanPasswordError ( );
	void HideClanPasswordPopup ( );
	void ShowClanPasswordPopup ( );
	void ClanIntroduceHasBadWords ( );
	void ClanNoticeHasBadWords ( );
	void receiveClanNoticeOkBtn ( );
	void ReceiveClanPopupCancelBtn ( );
	void ReceiveClanPopupJoinOkBtn ( );
	void RecvClanListDetailView ( );
	void RecvReNewalClanList ( );
	void receiveClanListClanFoundationBtn ( );
	void RecvMatchRoomClanUpdate ( );
	void ReceiveClanBreakAwayFailed ( );
	void ReceiveClanBreakAwaySucceed ( );
	void ReceiveClanBreakAway ( );
	void ReceiveClanRegionUpdateFailed ( );
	void ReceiveClanCancelBtn ( );
	void RecvClanKickMember ( );
	void RecvClanKickMemberSucceed ( );
	void RecvClanKickMemberFailed ( );
	void RecvClanAcceptSuggest ( );
	void RecvClanAcceptSuggestSucceed ( );
	void RecvClanAcceptSuggestFailed ( );
	void RecvClanInviteSuggestFailed ( );
	void RecvClanInviteSuggestSucceed ( );
	void RecvClanInviteSuggest ( );
	void RecvClanCreateNameFailed ( );
	void RecvClanCreateSuccess ( );
	void RequestCreateClan ( );
	void registerClanHome ( );
	void registerClanPopup ( );
	void registerClanList ( );
	void ClanNameCheckSuccess ( );
	void receiveClanCreateBtn ( );
	void registerClanFoundation ( );
	void CheckClanName ( );
	void UpdateBoosterIcon ( );
	void Dev_ShowShop ( );
	void Dev_ShowInventory ( );
	void receiveCommonTopBarChargeBtn ( );
	void receiveCommonTopBarRefreshBtn ( );
	void receiveTopBarPopupMenuBtn ( );
	void receiveTopBarLeftRightBtn ( );
	void UpdateMatchRoomChatting_GameResult ( );
	void receiveFinalResultTabButtonClick ( );
	void receiveFinalResultReadyButtonClick ( );
	void receiveFinalResultMatchRoomButtonClick ( );
	void receiveFinalResultCaptureButtonClick ( );
	void receiveFinalResultExpBarAnimationComplete ( );
	void registerFinalResult ( );
	void receiveMain_LastSceneAchieveButtonShow ( );
	void receiveMain_LastSceneAchieveAnimationComplete ( );
	void registerMain_LastSceneAchieve ( );
	void OnRemoveBlackList_Failure ( );
	void DisplayAddBlackList_Failure ( );
	void OnAddBlackList_Success ( );
	void TryAddBlackList ( );
	void OnRemoveFriend_Failure ( );
	void OnAnswerRejectFriendSuggestion_Failure ( );
	void OnAnswerAcceptFriendSuggestion_Failure ( );
	void AlramFriendSuggestion ( );
	void OnSuggestFriend_Failure ( );
	void OnSuggestFriend_Success ( );
	void UpdateMessenger_BlockList ( );
	void UpdateClanMessenger_ClanList_Offline ( );
	void UpdateClanMember_ClanList ( );
	void UpdateMessenger_FriendList_Offline ( );
	void UpdateMessenger_FriendList ( );
	void UpdateMessenger_SuggestionList ( );
	void receiveMessengerBlockButton ( );
	void receiveMessengerTapButton ( );
	void receiveMessengerPopupButton ( );
	void receiveMessengerListViewOutButton ( );
	void receiveMessengerListViewOverButton ( );
	void receiveMessengerListViewRequestFriendCancelButton ( );
	void receiveMessengerListViewRequestFriendOkButton ( );
	void receiveMessengerListViewLeftRightButton ( );
	void receiveMessengerListViewTitleOpenButton ( );
	void receiveMessengerListViewTitleCloseButton ( );
	void receiveMessengerAddFriendsKillFocus ( );
	void receiveMessengerAddFriendsSetFocus ( );
	void receiveMessengerAddFriendButton ( );
	void receiveMessengerCloseButton ( );
	void registerMessenger ( );
	void receiveCommonShowRoomVcEmblem ( );
	void receiveCommonShowRoomPmEmblem ( );
	void receiveCommonShowRoomScroll ( );
	void receiveCommonShowRoomDragUp ( );
	void receiveCommonShowRoomDragDown ( );
	void SetShowRoomInterfaceText ( );
	void SetShowRoomCharacterText ( );
	void SetShowRoomVCButtonDisabled ( );
	void SetShowRoomVCButtonSelected ( );
	void SetShowRoomPMButtonDisabled ( );
	void SetShowRoomPMButtonSelected ( );
	void ChangeShowRoomShop ( );
	void ChangeShowRoomInventory ( );
	void ChangeShowRoomWhole ( );
	void ShowWeaponMesh ( );
	void SetShowRoomButtonState ( );
	void ShowCharacterName ( );
	void ShowCharacterMesh ( );
	void SetSelectSlotClothRefID ( );
	void ShowFrontEndPlayerMesh ( );
	void ExistExpiredEquipItem ( );
	void GetWeaponInfoByRefItemIndex ( );
	void HideShowRoom ( );
	void ShowShowRoom ( );
	void registerShowRoom ( );
	void OnCloseClientDialogCancel ( );
	void OnCloseClientDialogOK ( );
	void DisplayCloseClientDialog ( );
	void StopBGM ( );
	void ForcePlayBGM ( );
	void PlayBGM ( );
	void ClearIgnorePressEvent ( );
	void eventFilterButtonInput ( );
	void receiveLobbyRoomCreatedMapListBtn ( );
	void receiveLobbyRoomCreatedModeListBtn ( );
	void receiveLobbyRoomCreatedMissionListBtn ( );
	void receiveLobbyRoomCreatedPasswordBtn ( );
	void receiveLobbyRoomCreatedMapSmallBtn ( );
	void receiveLobbyRoomCreatedMapMiddleBtn ( );
	void receiveLobbyRoomCreatedMapLargeBtn ( );
	void receiveLobbyRoomCreatedMapTotalBtn ( );
	void receiveLobbyRoomCreatedCompleteBtn ( );
	void receiveLobbyRoomCreatedSetChangeBtn ( );
	void receiveLobbyRoomCreatedCancelBtn ( );
	void ShowPracticeRoom ( );
	void HideMakeRoom ( );
	void ShowMakeRoomCompetitive ( );
	void ShowMakeRoom ( );
	void registerLobbyRoomCreated ( );
	void OnItemSell ( );
	void OnSteamItemObtain ( );
	void RecvFailDestroyedItem ( );
	void RecvDestroyedItem ( );
	void RecvExpiredItem ( );
	void OnBuyItemCancel_Failure ( );
	void OnBuyItemCancel_Success ( );
	void OnBuyItemTryPaymentOK ( );
	void OnBuyItem_TryPayment ( );
	void DisplayDialogSteamItemBuyFailure ( );
	void OnSteamItemBuyConfirm ( );
	void OnSteamItemBuy ( );
	void OnBuyItemFailureOK ( );
	void DisPlayDialog_BuyItemFailure ( );
	void OnBuyItem_Failure ( );
	void OnBuyItem_Success ( );
	void OnLeaveRoomSettingSucceed ( );
	void OnEnterRoomSettingSucceed ( );
	void OnLeavePersonalMaintenance_REVISAL ( );
	void OnLeavePersonalMaintenance_Failure ( );
	void OnLeavePersonalMaintenance_Success ( );
	void OnUpdateInventory_Failure ( );
	void OnUpdateInventory_Success ( );
	void HasAnyChangedEquippedItem ( );
	void OnConsumeItemFailDialogOK ( );
	void DisplayDialog_ConsumeItemFail ( );
	void SetConsumeItem_Failuse ( );
	void OnConsumeItemSucceeDialogOK ( );
	void DisplayDialog_ConsumeItemSucceed ( );
	void GetExchangedMoney ( );
	void RefreshInventoryItems ( );
	void SetConsumeItem_Succeed ( );
	void OnItemDeActivated ( );
	void OnItemActivated ( );
	void SetExpendChangeItem ( );
	void SetExpendItem ( );
	void SetActiveInventoryItems ( );
	void LeavePersonalMaintenance ( );
	void OnEnterPersonalMaintenance_Failure ( );
	void OnEnterPersonalMaintenance_Success ( );
	void receiveInventoryInfoTabBtn ( );
	void receiveInventoryListItemView ( );
	void receiveInventoryListUseUpBtn ( );
	void receiveInventoryListItemDoubleClick ( );
	void receiveInventoryListFunctionThreeBtn ( );
	void receiveInventoryListFunctionTwoBtn ( );
	void receiveInventoryListFunctionOneBtn ( );
	void receiveInventoryListSellBtn ( );
	void receiveInventoryListDestroyBtn ( );
	void receiveInventoryListRepairBtn ( );
	void receiveInventoryListCheckBtn ( );
	void receiveInventoryListItemBtn ( );
	void receiveInventoryItemEquipBtn ( );
	void receiveInventoryListSubTabBtn ( );
	void receiveInventoryListMainTabBtn ( );
	void receiveInventoryPresetRepairBtn ( );
	void receiveInventoryPresetUnequipBtn ( );
	void receiveInventoryPresetDoubleClick ( );
	void receiveInventoryPresetSlotBtn ( );
	void receiveInventoryPresetUiToggleBtn ( );
	void receiveInventoryPresetTabBtn ( );
	void receiveShopPopupInventoryBtn ( );
	void receiveShopPopupEquipBtn ( );
	void receiveShopPopupBuyCancelBtn ( );
	void receiveShopPopupBuyAndEquipBtn ( );
	void receiveShopPopupBuyBtn ( );
	void receiveShopPopupPriceBtn ( );
	void receiveShopPopupUnitBtn ( );
	void receiveShopPopupPresetViewBtn ( );
	void receiveShopListItemView ( );
	void receiveShopInfoClose ( );
	void receiveShopInfoOpen ( );
	void receiveShopCashBtn ( );
	void receiveShopNewBtn ( );
	void receiveShopHotBtn ( );
	void receiveShopSearchBtn ( );
	void receiveShopSearchWord ( );
	void receiveShopInfoTabBtn ( );
	void OnDoNotbuyDialogOK ( );
	void IsCheckItmeRankFailedDialog ( );
	void ShowBuyItemPopUp ( );
	void IsPurchasableItemByRank ( );
	void receiveShopListItemDoubleClick ( );
	void receiveShopListItemBuyBtn ( );
	void receiveShopListItemBtn ( );
	void receiveShopListSubTabBtn ( );
	void receiveShopListMainTabBtn ( );
	void receiveRepurchaseCloseBtn ( );
	void receiveRepurchaseGoShopBtn ( );
	void receiveRepurchaseItemView ( );
	void ShowRepurchase ( );
	void registerRepurchase ( );
	void registerShopPopup ( );
	void registerShopInfo ( );
	void registerShopList ( );
	void registerMedalShop ( );
	void registerShop ( );
	void UpdateItemRemainTime ( );
	void registerInventoryList ( );
	void registerInventoryInfo ( );
	void registerInventoryPreset ( );
	void registerInventory ( );
	void registerCommonOption ( );
	void SetWhisperName ( );
	void UpdateScrNotice ( );
	void HideWhisperList ( );
	void HideChat ( );
	void ShowChat ( );
	void NotifyRemoveChatChannelMember ( );
	void NotifyAddChatChannelMember ( );
	void UpdateMatchRoomChatting ( );
	void UpdateWhisperChatting ( );
	void UpdateTsMessage ( );
	void UpdateClanLevelUp ( );
	void UpdateClanChatting ( );
	void UpdateChampionshipObserverMatchRoomChatting ( );
	void UpdateChampionshipObserverChannelChatting ( );
	void UpdateChannelChatting ( );
	void Dev_UpdateDevelopeMessage ( );
	void CommandList ( );
	void ClanMemberList ( );
	void ClanBreakAway ( );
	void ClanMemberBanis ( );
	void ClanInvite ( );
	void OnCallingCardObtain_Failure ( );
	void OnCallingCardObtain_Sucess ( );
	void OnCallingCardExpire ( );
	void OnCallingCardChange_Failure ( );
	void OnCallingCardChange_Sucess ( );
	void RequestCallingCardChange ( );
	void RequestPlayerInfoByName ( );
	void RequestPlayerInfo ( );
	void VersionDiscrepancyError ( );
	void OnDisplayDialogOnFollowingUser_OK ( );
	void DisplayDialogOnFollowingUser ( );
	void OnFollowingUser ( );
	void RequestFollowingUser ( );
	void CompareCurrentSceneType ( );
	void BreakFriendsWith ( );
	void FriendsWith ( );
	void RemoveBlackList ( );
	void ChangeHost ( );
	void TryTeamSwap ( );
	void KickUser ( );
	void CheckUserCommand ( );
	void receiveCommonLobbyChattingPopupButton ( );
	void receiveCommonLobbyChattingListViewRightClick ( );
	void receiveCommonLobbyChattingListViewClick ( );
	void ClearIMEBuffer ( );
	void receiveCommonLobbyChattingFocus ( );
	void receiveCommonLobbyChattingTab ( );
	void receiveCommonLobbyChattingMessage ( );
	void registerCommonLobbyChatting ( );
	void UpdateMessengerButton_OnlineFriendCount ( );
	void UpdateMessengerButton_NewSuggestionFriend ( );
	void SetDashboardMoneyDisplayButton ( );
	void SetDashboardButton_Disabled ( );
	void SetDashboardButton_Selected ( );
	void OpenHelpButton ( );
	void ToggleSetupBtn ( );
	void ClosePopupScene ( );
	void GotoPrevScene ( );
	void UpdateDashboard_ClanButtons ( );
	void RefreshItemTime ( );
	void StopBulletSaleEventEffect ( );
	void StartBulletSaleEventEffect ( );
	void UpdateDashboardMoney ( );
	void UpdateDashboard ( );
	void receiveCommonBottomBarExitBtn ( );
	void receiveCommonBottomBarHelpBtn ( );
	void receiveCommonBottomBarOptionBtn ( );
	void receiveCommonBottomBarRandomShopBtn ( );
	void receiveCommonBottomBarMedalShopBtn ( );
	void receiveCommonBottomBarShopBtn ( );
	void receiveCommonBottomBarClanHomeBtn ( );
	void receiveCommonBottomBarClanListBtn ( );
	void OpenClauseURL ( );
	void OpenCashChargeURL ( );
	void receiveCommonTopBarEventBtn ( );
	void receiveCommonBottomBarMyInfoBtn ( );
	void receiveCommonBottomBarInvenBtn ( );
	void receiveCommonBottomBarNoticeBtn ( );
	void receiveCommonBottomBarBackBtn ( );
	void registerCommonBottomBar ( );
	void receiveCommonTopBarMsnBtn ( );
	void receiveCommonTopBarMailBtn ( );
	void registerCommonTopBar ( );
	void RegisterDashboard ( );
	void OnGearSetChange_Used ( );
	void OnGearSetChange_Failure ( );
	void OnGearSetChange_Success ( );
	void receiveTacticalGearListBtn ( );
	void receiveTacticalGearOpenBtn ( );
	void registerLobbyMatchRoomTacticalGear ( );
	void receiveMatchRoomPopupOptionChange ( );
	void receiveMatchRoomPopupCancelBtn ( );
	void receiveMatchRoomPopupOptionOkBtn ( );
	void receiveMatchRoomPopupRenameOkBtn ( );
	void registerMatchRoomPopup ( );
	void receiveLobbyMatchRoomInfoSideMenuChange ( );
	void receiveLobbyMatchRoomInfoClanMatchRecordBtn ( );
	void receiveLobbyMatchRoomInfoDetailBtn ( );
	void receiveLobbyMatchRoomInfoModeMapEditBtn ( );
	void receiveLobbyMatchRoomInfoTitleBtn ( );
	void registerLobbyMatchRoomInfo ( );
	void receiveLobbyMatchRoomInvitationBtn ( );
	void receiveLobbyMatchRoomReadyStartKey ( );
	void receiveLobbyMatchRoomUserListPopupMenuBtn ( );
	void receiveLobbyMatchRoomUserListBtn ( );
	void receiveLobbyMatchRoomUserListRightBtn ( );
	void receiveLobbyMatchRoomReadyStartBtn ( );
	void receiveLobbyMatchRoomTeamChangeBtn ( );
	void receiveLobbyMatchRoomCompulsoryLeaveBtn ( );
	void receiveLobbyMatchRoomTransitionBtn ( );
	void registerLobbyMatchRoomPartyList ( );
	void RegisterMatchroom ( );
	void OnTodayModeUpdateNotify ( );
	void OnDisplayDialogTierPointPenaltyNonPlay_OK ( );
	void DisplayDialogTierPointPenaltyNonPlay ( );
	void OnTierPointPenaltyNonPlay ( );
	void OnMatchroomUserPenaltyEnd ( );
	void OnCompMatchDialogCheck ( );
	void OnShowTierChangeChat ( );
	void OnMatchHasFinished ( );
	void OnNotifyChangeMatchroomGameOption ( );
	void OnNotifyChangeHost ( );
	void DisplayTeamUpdateType ( );
	void UpdateMatchroom_TeamList ( );
	void UpdateMatchroom_Password ( );
	void UpdateMatchroom_Option ( );
	void UpdateMatchroom_ModeMap ( );
	void UpdateMatchroom_RoomName ( );
	void OnMatcroomUpdateOption_Failure ( );
	void OnIntrude_Failure ( );
	void OnIntrude_Success ( );
	void OnIntrude_Try ( );
	void OnChangeTeam_Success ( );
	void OnChangeTeam_Failure ( );
	void OnPlayerJoinMatchroom ( );
	void OnReady_Failure ( );
	void OnMatchBeginningAborted ( );
	void OnStartMatchBeginCountdown ( );
	void InformMatchRoomCountdownOngoing ( );
	void OnStartMatch_Failure_Notify ( );
	void OnStartMatch_Failure ( );
	void OnLeaveMatchRoom_Failure ( );
	void OnUpdateMatchroom_TeamList ( );
	void OnStartEnteringMatch ( );
	void OnMatchroomReadyButtonUpdate ( );
	void OnNotifyLazyHostWarning ( );
	void OnUpdateMatchroomTeamSwap ( );
	void OnUpdateMatchroom ( );
	void CheckMatchRoomName ( );
	void OnEnterMatchroomByCreation_Failure ( );
	void OnMatchRoomLookIn ( );
	void OnEnterMatchRoom ( );
	void OnUpdateMatchRoomList ( );
	void receiveRoomMemberHide ( );
	void registerLobbyMatchMember ( );
	void receiveLobbyRoomListItemRightBtn ( );
	void receiveLobbyRoomListItemBtn ( );
	void receiveRankViewBtn ( );
	void receiveCompetitiveMajorityCueBtn ( );
	void receiveCompetitiveMinorityCueBtn ( );
	void receiveLobbyRoomListPracticeBtn ( );
	void receiveLobbyRoomListEnrollmentBtn ( );
	void receiveLobbyRoomListQuickSetBtn ( );
	void receiveLobbyRoomListQuickStartBtn ( );
	void receiveLobbyRoomListJoinBtn ( );
	void receiveLobbyRoomListMakeBtn ( );
	void registerLobbyRoomList ( );
	void OnEnterMatchChannel ( );
	void OnDisplayDialogTutorialStartOK ( );
	void DisplayDialogTutorialStart ( );
	void OnUpdateMatchChannelState ( );
	void OnLeaveMatchChannel ( );
	void OnUpdateMatchServerList ( );
	void receiveLobbyChannelListBtn ( );
	void receiveLobbyChannelTutorialBtn ( );
	void receiveLobbyChannelAwesomiumBannerBtn ( );
	void receiveLobbyChannelServerListBtn ( );
	void receiveLobbyChannelEnterBtn ( );
	void receiveLobbyChannelRefreshBtn ( );
	void registerLobbyChannelList ( );
	void OnUpdateCreateNickName ( );
	void CheckNickname ( );
	void receiveLobbyCreateNicknameExitBtn ( );
	void receiveLobbyCreateNicknameOkBtn ( );
	void registerLobbyCreateNickname ( );
	void OnEnterMatchServer_Failure ( );
	void OnLoginFailureDialogOK ( );
	void OnDisconnectDialog_OK ( );
	void DisplayDialogLimitedLoginCount ( );
	void OnConnectAgentServer_Failure ( );
	void OnUserCertification_Failure ( );
	void OnModuleCertification_Failure ( );
	void DisplayDialog_LoginError_WebServer ( );
	void DisplayDialog_LoginError_Init ( );
	void DisplayDialog_LoginError_Wait ( );
	void IsMaxFailedLoginCount ( );
	void UpdateCertifyWaitUserCount ( );
	void UpdateLoginProgressUI ( );
	void receiveLoginBackBtn ( );
	void receiveLoginOptionBtn ( );
	void receiveLoginAccountBtn ( );
	void receiveLoginExitBtn ( );
	void receiveCheckCancelBtn ( );
	void receiveLoginOkBtn ( );
	void OnLoginUIUnLock ( );
	void OnLoginUILock ( );
	void registerLobbyLogin ( );
	void registerLobbyGameTitle ( );
	void OnPlayerInfoTimeOut ( );
	void receiveShopSortBtn ( );
	void receiveInventorySortBtn ( );
	void UpdateListSortBtn ( );
	void HideSortUI ( );
	void SetSortDataBySceneType ( );
	void receiveCommonSortDownClick ( );
	void receiveCommonSortUpClick ( );
	void receiveCommonSortFilterClick ( );
	void receiveCommonSortFilterAllViewClick ( );
	void registerSort ( );
	void registerCommonSystemCounter ( );
	void HideCommand ( );
	void ShowCommand ( );
	void OnUIBlock ( );
	void IsShowWall ( );
	void HideLoadingWall ( );
	void ShowLoadingWall ( );
	void HideTransparentWall ( );
	void ShowTransparentWall ( );
	void ShowScene ( );
	void UseSceneTransition ( );
	void receiveDialogInputTxtGetFocus ( );
	void receiveFrontEndTestAwesomium ( );
	void receiveFrontEndCommonEscKey ( );
	void IsAllFlashLoaded ( );
	void VivoxTeamChannelLeave ( );
	void AllFlashLoaded ( );
	void registerMainFrontEnd ( );
	void OnDisconnectMatchServerByAFKDialogOK ( );
	void DisplayDialog_DisconnectMatchServerByAFK ( );
	void OnDisconnectMatchServerByAFK ( );
	void OnNotifyKeyInputSignal ( );
	void PushDialog_InputExpireTime ( );
	void OnInputExpireTime ( );
	void UpdatePendingDialog ( );
	void HideDialog ( );
	void OnShowPlayerInfo_Failure ( );
	void ShowCallingCardPage ( );
	void ShowPlayerInfoPage ( );
	void CheckMiniMapSizeOption ( );
	void ChangeScene ( );
	void MessengerHidePopUp ( );
	void GetExchangePopupClass ( );
	void GetUIDataStore_ETC ( );
	void GetUIDataStore_QuickstartSetting ( );
	void GetUIDataStore_Mission ( );
	void GetSoundGroup ( );
	void GetGameInfo ( );
	void eventOnCleanup ( );
	void AwesomiumClick ( );
};

UClass* UCombatFrontEndMoviePlayer::pClassPointer = NULL;

// Class CombatGame.CombatTeamGameMovie
// 0x0784 (0x0A74 - 0x02F0)
class UCombatTeamGameMovie : public UCombatGFxMoviePlayer
{
public:
	class ACombatPC*                                   myPC;                                             		// 0x02F0 (0x0008) [0x0000000000000000]              
	class ACombatPlayerReplicationInfo*                myPRI;                                            		// 0x02F8 (0x0008) [0x0000000000000000]              
	class ACBGameReplicationInfo*                      currentGRI;                                       		// 0x0300 (0x0008) [0x0000000000000000]              
	class UCombatHUD_CharacterInfo*                    CharacterInfoMC;                                  		// 0x0308 (0x0008) [0x0000000000000000]              
	int                                                LastCredit;                                       		// 0x0310 (0x0004) [0x0000000000000000]              
	class UCombatHUD_WeaponInfo*                       WeaponInfoMC;                                     		// 0x0314 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Aim*                              AimClass;                                         		// 0x031C (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsReloading : 1;                                 		// 0x0324 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsChangingWeapon : 1;                            		// 0x0324 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedTimeLimitUI : 1;                             		// 0x0324 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsDisplayedTimeLimit : 1;                        		// 0x0324 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNeedClearRoundStatus : 1;                        		// 0x0324 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowRoundWinCount : 1;                           		// 0x0324 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowRoundPoint : 1;                              		// 0x0324 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bSupportRespawn : 1;                              		// 0x0324 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsDead : 1;                                      		// 0x0324 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bIsMatchHasFinished : 1;                          		// 0x0324 (0x0004) [0x0000000000000000] [0x00000200] 
	class UCombatHUD_HitIndicator*                     HitIndicatorMC;                                   		// 0x0328 (0x0008) [0x0000000000000000]              
	struct FDirHit                                     DirHits[ 0x7 ];                                   		// 0x0330 (0x00A8) [0x0000000000000000]              
	float                                              MaxDrawDirHitTime;                                		// 0x03D8 (0x0004) [0x0000000000000000]              
	float                                              UpdateDirHitTime;                                 		// 0x03DC (0x0004) [0x0000000000000000]              
	class UCombatHUD_RoundStatusBar*                   RoundStatusMC;                                    		// 0x03E0 (0x0008) [0x0000000000000000]              
	int                                                LastTeamPoint[ 0x2 ];                             		// 0x03E8 (0x0008) [0x0000000000000000]              
	int                                                LastTeamMemeber[ 0x2 ];                           		// 0x03F0 (0x0008) [0x0000000000000000]              
	int                                                LastWinRounds[ 0x2 ];                             		// 0x03F8 (0x0008) [0x0000000000000000]              
	int                                                LastRemainTime_Min;                               		// 0x0400 (0x0004) [0x0000000000000000]              
	int                                                LastRemainTime_Sec;                               		// 0x0404 (0x0004) [0x0000000000000000]              
	class UCombatHUD_RespawnProgressBar*               RespawnProgressBarMC;                             		// 0x0408 (0x0008) [0x0000000000000000]              
	class UCombatHUD_GlobalMessage*                    GlobalMessageMC;                                  		// 0x0410 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Message_Personal*                 Message_PersonalMC;                               		// 0x0418 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Message_Personal_Auto*            Message_Personal_AutoMC;                          		// 0x0420 (0x0008) [0x0000000000000000]              
	class UCombatHUD_IFFContainer*                     IFFContainerClass;                                		// 0x0428 (0x0008) [0x0000000000000000]              
	class UCombatHUD_KillDeathList*                    KillDeathListMC;                                  		// 0x0430 (0x0008) [0x0000000000000000]              
	class UCombatInGameOptionMenu*                     OptionMenuClass;                                  		// 0x0438 (0x0008) [0x0000000000000000]              
	class UCombatHUD_BlockAndReport*                   BlockAndReportClass;                              		// 0x0440 (0x0008) [0x0000000000000000]              
	class UCombatHUD_GameModeHelp*                     GameModeHelpClass;                                		// 0x0448 (0x0008) [0x0000000000000000]              
	TArray< struct FWeaponSimpleInfo >                 CachedWeaponSimpleInfos;                          		// 0x0450 (0x0010) [0x0000000000000000]              
	class UCombatHUD_ScoringList*                      ScoringListMC;                                    		// 0x0460 (0x0008) [0x0000000000000000]              
	class UCombatHUD_ScoringRight*                     ScoringRightMC;                                   		// 0x0468 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  HelpImageMC;                                      		// 0x0470 (0x0008) [0x0000000000000000]              
	class UCombatHUD_KillMark*                         KillMarkMC;                                       		// 0x0478 (0x0008) [0x0000000000000000]              
	class UCombatHUD_HitDamageBoard*                   DamageBoardContainer;                             		// 0x0480 (0x0008) [0x0000000000000000]              
	struct FHitDamageInfo                              HitDamageInfos[ 0x14 ];                           		// 0x0488 (0x0230) [0x0000000000000000]              
	class UCombatHUD_BombsitesContainer*               BombsiteContainer;                                		// 0x06B8 (0x0008) [0x0000000000000000]              
	class UCombatHUD_DeviceCoolTimer*                  DeviceCoolTimerMC;                                		// 0x06C0 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Bomb_TimeBar*                     BombProgressBar;                                  		// 0x06C8 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Preset*                           PresetWindowMC;                                   		// 0x06D0 (0x0008) [0x0000000000000000]              
	class UCombatHUD_PresetHelp*                       PresetHelpMC;                                     		// 0x06D8 (0x0008) [0x0000000000000000]              
	class UCombatHUD_PresetTimer*                      PresetTimerMC;                                    		// 0x06E0 (0x0008) [0x0000000000000000]              
	class UCombatHUD_PresetSelectWaiting*              PresetSelectWaitingMC;                            		// 0x06E8 (0x0008) [0x0000000000000000]              
	int                                                ShowRervPresetTime;                               		// 0x06F0 (0x0004) [0x0000000000000000]              
	class UCombatHUD_SpawnPointSelection*              SpawnPointMC;                                     		// 0x06F4 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Chat*                             ChattingMC;                                       		// 0x06FC (0x0008) [0x0000000000000000]              
	unsigned char                                      LastChatType;                                     		// 0x0704 (0x0001) [0x0000000000000000]              
	unsigned char                                      HUD_TickGroup;                                    		// 0x0705 (0x0001) [0x0000000000000000]              
	unsigned char                                      RoundCountType;                                   		// 0x0706 (0x0001) [0x0000000000000000]              
	class UCombatHUD_Message_RoundStart*               RoundStartMC;                                     		// 0x0708 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Message_CountDown*                CountDownMC;                                      		// 0x0710 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Message_RoundOver*                RoundOverMC;                                      		// 0x0718 (0x0008) [0x0000000000000000]              
	class UCombatHUD_RadioMessage*                     RadioMessageMC;                                   		// 0x0720 (0x0008) [0x0000000000000000]              
	class UCombatHUD_WarmUp*                           WarmUpMC;                                         		// 0x0728 (0x0008) [0x0000000000000000]              
	class UCombatHUD_CompetitionWarmUp*                CompetitionWarmUpMC;                              		// 0x0730 (0x0008) [0x0000000000000000]              
	class UCombatHUD_GrenadeIndicator*                 GrenadeIndicatorMC;                               		// 0x0738 (0x0008) [0x0000000000000000]              
	int                                                GI_DISPLAY_DISTANCE_MAX;                          		// 0x0740 (0x0004) [0x0000000000000000]              
	float                                              GrenadeIndicator_Display_Update_Cycle;            		// 0x0744 (0x0004) [0x0000000000000000]              
	float                                              GrenadeIndicator_Display_AccumulationTime;        		// 0x0748 (0x0004) [0x0000000000000000]              
	class UCombatHUD_ObserverInfo*                     ObserverInfoMC;                                   		// 0x074C (0x0008) [0x0000000000000000]              
	class UCombatHUD_ObserverHelp*                     ObserverHelpMC;                                   		// 0x0754 (0x0008) [0x0000000000000000]              
	class UCombatHUD_ObserverRevivalWeapon*            ObserverRevivalWeaponMC;                          		// 0x075C (0x0008) [0x0000000000000000]              
	class UCombatHUD_DeathCamRecord*                   DeathCamRecordMC;                                 		// 0x0764 (0x0008) [0x0000000000000000]              
	class UCombatHUD_DeathCamInfo*                     DeathCamInfoMC;                                   		// 0x076C (0x0008) [0x0000000000000000]              
	class UCombatHUD_ChampionshipPlayerInfoListContainer* ChampionshipPlayerInfoListContainerMC;            		// 0x0774 (0x0008) [0x0000000000000000]              
	class UCombatHUD_ChampionshipSpectatedPlayerInfo*  ChampionshipSpectatedPlayerInfoMC;                		// 0x077C (0x0008) [0x0000000000000000]              
	class UCombatHUD_BattleLog*                        BattleLogMC;                                      		// 0x0784 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Surrender*                        SurrenderMC;                                      		// 0x078C (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  TestTF_Right;                                     		// 0x0794 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Message_RankUp*                   RankUpMessageMC;                                  		// 0x079C (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  TestMessageBoxMC;                                 		// 0x07A4 (0x0008) [0x0000000000000000]              
	class UCombatHUD_NoticeHotKey*                     NoticeHotKeyMC;                                   		// 0x07AC (0x0008) [0x0000000000000000]              
	class UCombatHUD_MagazineState*                    MagazineStateMC;                                  		// 0x07B4 (0x0008) [0x0000000000000000]              
	class UCombatHUD_SelectPosition*                   SelectPositionMC;                                 		// 0x07BC (0x0008) [0x0000000000000000]              
	class UCombatHUD_SelectSkillList*                  SelectSkillListMC;                                		// 0x07C4 (0x0008) [0x0000000000000000]              
	class UCombatHUD_OccupationMessage*                OccupationMsgMC;                                  		// 0x07CC (0x0008) [0x0000000000000000]              
	class UCombatHUD_NoticePosition*                   NoticePositionMC;                                 		// 0x07D4 (0x0008) [0x0000000000000000]              
	class UCombatHUD_ChangeTeam*                       ChangeTeamMC;                                     		// 0x07DC (0x0008) [0x0000000000000000]              
	class UCombatHUD_VoiceChatTalking*                 VoiceChatPlayerMC;                                		// 0x07E4 (0x0008) [0x0000000000000000]              
	int                                                MAXPLAYERNUM;                                     		// 0x07EC (0x0004) [0x0000000000000000]              
	int                                                MaxPlayerOfTeam;                                  		// 0x07F0 (0x0004) [0x0000000000000000]              
	float                                              DamageBoardOffsetX;                               		// 0x07F4 (0x0004) [0x0000000000000000]              
	float                                              DamageBoardOffsetY;                               		// 0x07F8 (0x0004) [0x0000000000000000]              
	TArray< class UCombatHUDEntity_Base* >             ControlUIObjects;                                 		// 0x07FC (0x0010) [0x0000000000000000]              
	struct FPlayerStateEffectType                      PlayerStateEffects[ 0x6 ];                        		// 0x080C (0x0138) [0x0000000000000000]              
	struct FString                                     InputExpireMsg;                                   		// 0x0944 (0x0010) [0x0000000000000000]              
	TArray< struct FMapSymbolDescriptionInfo >         GlogbalMapSymbolDescriptionInfos;                 		// 0x0954 (0x0010) [0x0000000000000000]              
	TArray< struct FMapSymbolDescriptionInfo >         ForModeMapSymbolDescriptionInfos;                 		// 0x0964 (0x0010) [0x0000000000000000]              
	struct FClassIconStruct                            ClassIconList[ 0x4 ];                             		// 0x0974 (0x00A0) [0x0000000000000000]              
	int                                                FriendlyIFFMaxDistance;                           		// 0x0A14 (0x0004) [0x0000000000000000]              
	class UCombatHUD_BigSizeStringTextBox*             TestBigTextField;                                 		// 0x0A18 (0x0008) [0x0000000000000000]              
	int                                                CrosshairLegthMaxPercent;                         		// 0x0A20 (0x0004) [0x0000000000000000]              
	TArray< struct FRoundConditionAudioComponentInfo > RoundConditionAudioComponents;                    		// 0x0A24 (0x0010) [0x0000000000000000]              
	class UCombatHUD_ChampionshipObserverDebugMessage* ChampionshipObserverDebugField;                   		// 0x0A34 (0x0008) [0x0000000000000000]              
	class UCombatHUD_TutorialDialog*                   TutorialDialog;                                   		// 0x0A3C (0x0008) [0x0000000000000000]              
	class UCombatHUD_TutorialHelp*                     TutorialHelp;                                     		// 0x0A44 (0x0008) [0x0000000000000000]              
	class UCombatHUD_TutorialQuest*                    TutorialQuest;                                    		// 0x0A4C (0x0008) [0x0000000000000000]              
	class UCombatHUD_TutorialMessage*                  TutorialMessage;                                  		// 0x0A54 (0x0008) [0x0000000000000000]              
	class UCombatHUD_StatusEffect*                     StatusEffectMC;                                   		// 0x0A5C (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __StateEffectVoid__Delegate;                      		// 0x0A64 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0A68 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1759 ];

		return pClassPointer;
	};

	void GetTeamInfo ( );
	void SetSpectatorFlashEffectGauge ( );
	void ShowSpectatorFlashEffect ( );
	void registerObserverState ( );
	void RecvDestroyedItem ( );
	void OnMatchroomSlotUpdateDel ( );
	void OnLeaveMatchChannel ( );
	void DisconnetClientResult ( );
	void OnChangedCommonOptionControl ( );
	void CallSetMessage_Tutorial ( );
	void CallHideMessage_Tutorial ( );
	void registerTutorialMessage ( );
	void CallResetQuest_Tutorial ( );
	void CallCompleteQuest_Tutorial ( );
	void CallAddQuest_Tutorial ( );
	void registerTutorialQuest ( );
	void CallSetHelpText_Tutorial ( );
	void CallHideHelpText_Tutorial ( );
	void registerTutorialHelp ( );
	void CallAddDialog_Tutorial ( );
	void registerTutorialDialog ( );
	void CallLoadSwf ( );
	void CanDisplayPreMTSResetMessage ( );
	void DisplayAddBlackList_Failure ( );
	void OnAddBlackList_Success ( );
	void TryAddBlackList ( );
	void SetRoundStatusDurationTime ( );
	void CallSetBroadCastObserverMode ( );
	void CallHideBroadCastViewText ( );
	void CallShowBroadCastViewText ( );
	void UpdateObserverCameraInfo ( );
	void ToggleChampionshipObserverDebugField ( );
	void AddChampionshipObserverDebugMessage ( );
	void AmIChampionshipPlayer ( );
	void AmIChampionshipObserver ( );
	void UpdateObserverCameraStyle ( );
	void ToggleObserverAllUI ( );
	void ToggleObserverInformation ( );
	void ToggleObserverRoundDisplay ( );
	void ToggleObserverIFF ( );
	void ToggleObserverSummary ( );
	void ToggleObserverChat ( );
	void IsDisplayedAnyESCMenu ( );
	void ToggleMouse ( );
	void SetModeGuideData ( );
	void ShowModeGuide ( );
	void registerModeGuide ( );
	void HideChangeTeamScene ( );
	void ShowChangeTeamScene ( );
	void HidePresetWaitingScene ( );
	void HideSpawnPointSelection ( );
	void HidePresetLockScene ( );
	void ShowPresetWaitingScene ( );
	void ShowPresetLockScene ( );
	void eventDisplayModeScore ( );
	void ShowReturnToMatchroomDialog ( );
	void receiveCommonOptionCancelBtnClick ( );
	void receiveCommonOptionSaveBtnClick ( );
	void IsShowCommonOption ( );
	void ToggleOption ( );
	void registerCommonOption ( );
	void CancelOption ( );
	void HideOption ( );
	void ShowOption ( );
	void GetImageReportURL ( );
	void OnComplaintReceiptFailureOK ( );
	void OnComplaintReceiptFailure ( );
	void OnComplaintReceiptSuccessOK ( );
	void OnComplaintReceiptSuccess ( );
	void receiveBlackListDeclarationCancelButton ( );
	void receiveBlackListDeclarationOkButton ( );
	void receiveBlackListPlayerListCancelButton ( );
	void receiveBlackListPlayerListOkButton ( );
	void HideBlockAndReport ( );
	void ShowBlockAndReport ( );
	void registerBlackList ( );
	void receiveOptionMenuButton ( );
	void HideMenu ( );
	void ShowMenu ( );
	void registerOptionMenu ( );
	void UpdateMissionObjectIconList ( );
	void InitMissionActor ( );
	void SetMissionActorState ( );
	void UpdateReservedWeapon ( );
	void UpdateObserverWeaponInfo ( );
	void UpdateHP ( );
	void SetPortraitIcon ( );
	void SetChaFootItemFXIcon ( );
	void SetChaUpperItemFXIcon ( );
	void ClearViewTargetInfo ( );
	void UpdateViewTargetInfo ( );
	void eventFilterButtonInput ( );
	void SetDisplaySelectingWeapon ( );
	void GetClassSmallImageID ( );
	void GetClassBigImageID ( );
	void GetClassSmallImageName ( );
	void GetClassBigImageName ( );
	void UpdatePlayerVoice ( );
	void HideHotKey ( );
	void IsShowHotKey ( );
	void DisplayHotKey ( );
	void HideAnimationMilitaryPosition ( );
	void InitSkillList ( );
	void HideSelectSkillList ( );
	void ShowSelectSkillList ( );
	void SetGlobalCoolTimeText ( );
	void SetCoolTimeText ( );
	void MilitaryPositionHide ( );
	void ShowMilitaryPosition ( );
	void SetSelectPosition ( );
	void SetShowBlinkMessageFadeInOutAnimation ( );
	void SetShowMessageFadeInOutAnimation ( );
	void SetNoticePositionMessage ( );
	void SetShowMessageFadeInOutCombinationText ( );
	void SetNoticepositionCombinationText ( );
	void HideAnimationNoticePositionMessage ( );
	void HideNoticePositionMessage ( );
	void ShowNoticePositionMessage ( );
	void ClearTestMessageBox ( );
	void UpdateTestMessageBox ( );
	void HideTestMessageBox ( );
	void ShowTestMessageBox ( );
	void eventOnClose ( );
	void ShowTacticalGearSetIcon ( );
	void NotifyChangedSkillOption ( );
	void NotifyChangeSkillGroupNum ( );
	void hidePassiveSkill ( );
	void ShowUpdatePassiveSkillByID ( );
	void ShowUpdatePassiveSkill ( );
	void NotifyChangedCR ( );
	void IsInitSelectposition ( );
	void IsInitSkillList ( );
	void UpdateSkillList ( );
	void SelectSkillList ( );
	void NotifyFailedBuySkill ( );
	void NotifyFailedNoLicenseSkill ( );
	void NotifyBuySkill ( );
	void NotifyUnlockSkill ( );
	void IsClassSystemDisplayLog ( );
	void UpdateRankUI ( );
	void NotifyRankUp ( );
	void OnNotifyKeyInputSignal ( );
	void PushDialog_InputExpireTime ( );
	void OnInputExpireTime ( );
	void DrawTestText ( );
	void ResetPlayerUI ( );
	void ResetGameUI ( );
	void Reset ( );
	void CheckObject ( );
	void UpdateGrenadeIndicator ( );
	void DisplayPlayerInOutMessage ( );
	void IgnoreTheDeadChat ( );
	void IgnoreTeamChat ( );
	void GetProfileSettings_IgnoreTeamChat ( );
	void IgnoreAllChat ( );
	void IgnoreAllChatByHost ( );
	void GetProfileSettings_IgnoreAllChat ( );
	void IgnoreWhisperChat ( );
	void IgnoreClanChat ( );
	void UpdateChampionshipObserverChatting ( );
	void UpdateTeamChatting ( );
	void UpdateWhisperChatting ( );
	void UpdateTsMessage ( );
	void UpdateClanLevelUp ( );
	void UpdateClanChatting ( );
	void UpdateWholeChatting ( );
	void UpdateRadioMessage ( );
	void CanFocusChatUI ( );
	void IsChatUIFocused ( );
	void IsChatUIDisplayed ( );
	void ChatPageDown ( );
	void ChatPageUp ( );
	void ShowChat ( );
	void FocusChat ( );
	void receiveHideComplete ( );
	void receiveCloseChatInput ( );
	void receiveChattingFocus ( );
	void AnalyzeChatMessage ( );
	void receiveMessage ( );
	void ToggleChatUI ( );
	void CallKillFocus ( );
	void CheckUserCommand ( );
	void DisplaySpectTargetUI ( );
	void CheckGarbageResource ( );
	void StopOperatingEffect ( );
	void UpdateOperatingEffect ( );
	void PlayOperatingEffect ( );
	void UpdateSpectateEffect ( );
	void StopSpectateEffect ( );
	void PlaySpectateEffect ( );
	void UpdateDeathEffect ( );
	void StopDeathEffect ( );
	void PlayDeathEffect ( );
	void ForceUpdatePlayerState ( );
	void UpdateActivateHUD ( );
	void HidePresetSelectFinishButton ( );
	void ShowPresetSelectFinishButton ( );
	void HidePresetTimer ( );
	void UpdatePresetTimer ( );
	void SetPresetTimer ( );
	void ShowPresetHelp ( );
	void HidePresetHelp ( );
	void HidePlayerClass ( );
	void DisplaySpawnPointSelection ( );
	void DisplayPreset ( );
	void OnPlayKillMarkSound ( );
	void DisplayKillMark ( );
	void receiveKillMessageQueing ( );
	void DisplayStackedScoringText ( );
	void DisplayScoringText ( );
	void DisplayImmediateScoringText ( );
	void registerScoringRight ( );
	void keyEsc ( );
	void HideVoiceChatOption ( );
	void ShowVoiceChatOption ( );
	void OnGameSurrendRequestFailed ( );
	void GameSurrenderRequest ( );
	void IsCanSurrend ( );
	void ReturnToMatchroom ( );
	void OnCloseGameDialogButton_Cancel ( );
	void OnCloseGameDialogButton_OK ( );
	void ChangeColor ( );
	void ShowHelpImage ( );
	void RecvFailReturnToMatchRoom ( );
	void RequestReturnToMatchRoom ( );
	void AddWeaponSimpleInfo ( );
	void GetWeaponImagePath ( );
	void UpdateKillMarkToVictimName ( );
	void UpdateKillDeathList ( );
	void UpdateKillDeathListToSuicide ( );
	void DisplayRespawn ( );
	void DrawLOPersonalMessage ( );
	void BroadcastLOStateMessage ( );
	void ClearDeviceCoolTimer ( );
	void SetDeviceCoolTimer ( );
	void IsVisibleBombProgressBar ( );
	void HideBombProgressBar ( );
	void EndBombProgressBar_Defuse ( );
	void StartBombProgressBar_Defuse ( );
	void SetBombBombProgressBar_Plant ( );
	void CallLoadHostageBar ( );
	void CallLoadFlag ( );
	void CallLoadLevelObject ( );
	void GetIFF ( );
	void ClearIFF ( );
	void IsDisplayedKillerInfo ( );
	void SetKillCamMessage ( );
	void HideChampionshipSpectatedPlayerInfo ( );
	void HideObserverInfo ( );
	void HideBattleLog ( );
	void HideDeathCamInfo ( );
	void HideDeathCamRecord ( );
	void DisplayKillCamMessage ( );
	void DisplayLocalMessage_Auto ( );
	void DisplayGlobalMessage ( );
	void GetRounOverPoint ( );
	void DisplayRoundOver ( );
	void SetRoundReasonLabels ( );
	void SaveRoundCountType ( );
	void GetMissionType ( );
	void DisplayMission ( );
	void DisplayCountDown ( );
	void FadeInEnd ( );
	void GetSpaceOfDirHits ( );
	void UpdateHit ( );
	void GetLastCrosshairType ( );
	void GetCrosshairMaxLengthPercent ( );
	void GetMyTeamNum ( );
	void NotifyWeaponEquipped ( );
	void NotifyWeaponReloaded ( );
	void UpdateCrosshair ( );
	void ShowHitMark ( );
	void ReloadCrosshair ( );
	void SetOption_TeamIFFViewValue ( );
	void UpdateHoldmode ( );
	void UpdateTeamIFFView ( );
	void UpdateFlipMesh ( );
	void UpdateGrenadeCount ( );
	void UpdateAmmo ( );
	void UpdateWeaponKillCount ( );
	void UpdateWeaponInfo ( );
	void HideSkillActorIndicator ( );
	void ShowSkillActorIndicator ( );
	void CallDamageBlood ( );
	void ConvertDegreeToQuarter ( );
	void InitHitIndicator ( );
	void UpdateHitIndicator ( );
	void damageAniComplete ( );
	void CallDamageAni ( );
	void UpdateDamageBoard ( );
	void GetUnusedDamageboard ( );
	void SetDamageBoard ( );
	void PlayRoundSound ( );
	void GetRoundConditionSound ( );
	void UpdateRemainTime ( );
	void UpdateCredit ( );
	void GetRoundPoint ( );
	void UpdateRoundPoint ( );
	void UpdateRoundWinCount ( );
	void UpdateAlivePlayers ( );
	void ClearRoundStatusBoard ( );
	void UpdateRoundStatusBoard ( );
	void ChangeRoundStausMode ( );
	void Tick ( );
	void IsCanTick ( );
	void PreTick ( );
	void StateEffectVoid ( );
	void ForceTeamChanged ( );
	void SetMainHud ( );
	void SetModeMapRefID ( );
	void InitUI ( );
	void Init ( );
	void registerSurrender ( );
	void registerCombatHistory ( );
	void registerBroadCastObserverDebug ( );
	void ResetVoiceChatUI ( );
	void UpdateTalkingUser ( );
	void registerVoiceChatPlayer ( );
	void registerChangeTeam ( );
	void registerBroadCastObserverBlueTeam ( );
	void registerBroadCastObserverRedTeam ( );
	void registerBroadCastObserverBottomBar ( );
	void registerObserverRevivalWeapon ( );
	void registerObserverHelp ( );
	void registerObserverInfo ( );
	void registerDeathCamInfo ( );
	void registerDeathCamRecord ( );
	void registerOccupationMessage ( );
	void registerTestBigTextField ( );
	void registerSelectSkill ( );
	void startAnimationComplete ( );
	void receivePositionSelectFadeOutAnimationComplete ( );
	void registerSelectPostionInfo ( );
	void registerPositionSelect ( );
	void registerSkillNoticeMessage ( );
	void registerMagazineState ( );
	void registerNoticeHotKey ( );
	void registerTestMessage ( );
	void registerRankUpMessage ( );
	void registerIngameHelp ( );
	void registerRadioMessage ( );
	void registerCompettionWarmUp ( );
	void receiveWarmUpHideAnimationComplete ( );
	void SetModeGuideString ( );
	void registerWarmUp ( );
	void registerCountDown ( );
	void registerRoundEnd ( );
	void registerRoundStart ( );
	void registerChatting ( );
	void registerScoring2 ( );
	void registerGlobalMessage ( );
	void UpdateLocalPreset ( );
	void receivePresetHide ( );
	void registerPresetAfterWait ( );
	void registerSelectRespawn ( );
	void registerPresetTimeBar ( );
	void registerPresetHelp ( );
	void registerPreset ( );
	void registerIFFHUD ( );
	void registerComMs2 ( );
	void registerCrossHair ( );
	void registerKillMessage ( );
	void registerKillInfo ( );
	void registerTacticalMapAndScoreBoard ( );
	void registerRoundStatus ( );
	void registerTimeBar ( );
	void registerHd_cooltime ( );
	void registerTimeBarBomb ( );
	void registerAmmoBar ( );
	void registerCharacterInfoBar ( );
	void CanUseClassSystem ( );
	void ShowMiniHUD ( );
	void GetViewTargetPawn ( );
	void GetViewTargetPRI ( );
	void GetMyPc ( );
	void GetMyPawn ( );
	void GetMyPRI ( );
	void GetSoundGroup ( );
	void AllFlashLoaded ( );
	void RegisterGOContainer ( );
	void RegisterGrenadeIndicator ( );
	void RegisterDamageBoard ( );
	void RegisterHitIndicator ( );
	void RegisterMessagePersonal ( );
	void loadedHUD ( );
	void registerCommonSystemCounter ( );
	void HideCommand ( );
	void ShowCommand ( );
	void registerHUD ( );
};

UClass* UCombatTeamGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatAIGameMovie
// 0x0048 (0x0ABC - 0x0A74)
class UCombatAIGameMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_WaveModePlayerList*               WaveModePlayerList;                               		// 0x0A74 (0x0008) [0x0000000000000000]              
	class UCombatHUD_WaveModePlayTime*                 WaveModePlayTime;                                 		// 0x0A7C (0x0008) [0x0000000000000000]              
	class UCombatHUD_Message_Warning*                  Message_WarningMC;                                		// 0x0A84 (0x0008) [0x0000000000000000]              
	int                                                LastPlayTime;                                     		// 0x0A8C (0x0004) [0x0000000000000000]              
	unsigned long                                      bCanUpdateOrder : 1;                              		// 0x0A90 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedUpdateOrder : 1;                             		// 0x0A90 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FPlayerListInfo >                   PlayerListData;                                   		// 0x0A94 (0x0010) [0x0000000000000000]              
	class UCombatHUDOption_AIWaveRoundStatus*          RoundStatusOption;                                		// 0x0AA4 (0x0008) [0x0000000000000000]              
	class UCombatHUD_AIMissionActorContainer*          LevelObjectContainer;                             		// 0x0AAC (0x0008) [0x0000000000000000]              
	class UCombatHUD_AIDefenseKillCombo*               AIDefenseKillComboMC;                             		// 0x0AB4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1760 ];

		return pClassPointer;
	};

	void DisplayComboText ( );
	void InitKillComboUI ( );
	void UpdateKillDeathList ( );
	void UpdateKillComboUI ( );
	void SetValidComboTime ( );
	void SetComboImageUrl ( );
	void PauseComboUI ( );
	void HideComboUI ( );
	void registerAiCombo ( );
	void SetUpdateOrder ( );
	void NotifyWaveModeToFlash ( );
	void UpdateLevelObjectIcon ( );
	void registerLevelObject ( );
	void InitMissionActor ( );
	void RegisterGOContainer ( );
	void UpdatePlayTime ( );
	void GetTwoDigits ( );
	void MakePlayTimeString ( );
	void StartWarning ( );
	void registerWarning ( );
	void CallPlayTime ( );
	void registerAiPlayTime ( );
	void UpdatePlayerInfo ( );
	void registerAiPlayerList ( );
	void Tick ( );
	void UpdateRoundStatusBoard ( );
	void ChangeRoundStausMode ( );
	void GetRounOverPoint ( );
	void GetPlayTimeForMatchEndUI ( );
	void DisplayRoundOver ( );
	void registerHUD ( );
};

UClass* UCombatAIGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatPracticeGameMovie
// 0x0018 (0x0A8C - 0x0A74)
class UCombatPracticeGameMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_PracticeGameHelp*                 PracticeGameHelpMC;                               		// 0x0A74 (0x0008) [0x0000000000000000]              
	class UCombatHUD_PracticeGameRoundStatus*          PracticeGameRoundStatusMC;                        		// 0x0A7C (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  PracticeGameMessage;                              		// 0x0A84 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1761 ];

		return pClassPointer;
	};

	void OnChangedCommonOptionControl ( );
	void ResetPracticeGameTimer ( );
	void PausePracticeGameTimer ( );
	void ResumePracticeGameTimer ( );
	void SetPracticeGameMessage ( );
	void SetPeopleCount ( );
	void registerPracticeRoundStatus ( );
	void registerPracticeHelp ( );
	void ShowReturnToMatchroomDialog ( );
	void registerOptionMenu ( );
	void ReturnToMatchroom ( );
	void AnalyzeChatMessage ( );
	void registerSelectSkill ( );
	void registerRankUpMessage ( );
	void registerSelectPostionInfo ( );
	void registerPositionSelect ( );
	void registerScoringRight ( );
	void registerScoring2 ( );
	void registerKillInfo ( );
	void registerKillMessage ( );
	void UpdatePlayerVoice ( );
	void registerRadioMessage ( );
	void SetModeGuideData ( );
	void ShowModeGuide ( );
	void SetModeGuideString ( );
	void registerModeGuide ( );
	void SetRoundStatusDurationTime ( );
	void ToggleObserverRoundDisplay ( );
	void eventDisplayModeScore ( );
	void UpdateAlivePlayers ( );
	void UpdateRoundPoint ( );
	void UpdateRoundWinCount ( );
	void ChangeRoundStausMode ( );
	void UpdateRoundStatusBoard ( );
	void UpdateRemainTime ( );
	void registerRoundStatus ( );
	void SendLeavePracticeGameReq ( );
};

UClass* UCombatPracticeGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatSEIMovie
// 0x000C (0x0A80 - 0x0A74)
class UCombatSEIMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_OccupiedAreaContainer*            OccupiedAreaContainer;                            		// 0x0A74 (0x0008) [0x0000000000000000]              
	int                                                OccupiedAreaCount;                                		// 0x0A7C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1762 ];

		return pClassPointer;
	};

	void GetRounOverPoint ( );
	void GetRoundPoint ( );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( );
	void Tick ( );
	void RegisterGOContainer ( );
	void UpdateOccupiedArea ( );
	void registerLevelObject ( );
};

UClass* UCombatSEIMovie::pClassPointer = NULL;

// Class CombatGame.CombatTutorialGameMovie
// 0x0024 (0x0A98 - 0x0A74)
class UCombatTutorialGameMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_BombsContainer*                   BombContainer;                                    		// 0x0A74 (0x0008) [0x0000000000000000]              
	class UCombatHUD_TutorialLOContainer*              TutorialLOContainer;                              		// 0x0A7C (0x0008) [0x0000000000000000]              
	int                                                BombsiteCount;                                    		// 0x0A84 (0x0004) [0x0000000000000000]              
	int                                                BombCount;                                        		// 0x0A88 (0x0004) [0x0000000000000000]              
	int                                                LOCount;                                          		// 0x0A8C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpdateEquippedBomb : 1;                          		// 0x0A90 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateEquippedBombSite : 1;                      		// 0x0A90 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsDisplayedBombLimitTime : 1;                    		// 0x0A90 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStartSpectDefuseUI : 1;                          		// 0x0A90 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                LastBombDefuseTimeCount;                          		// 0x0A94 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1763 ];

		return pClassPointer;
	};

	void ShowReturnToMatchroomDialog ( );
	void ReturnToMatchroom ( );
	void registerOptionMenu ( );
	void GetRounOverPoint ( );
	void NotifyDemolitionSystemMessage ( );
	void DisplaySpectTargetUI ( );
	void GetRoundPoint ( );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( );
	void GetMissionType ( );
	void UpdateBombEquippedHUD ( );
	void CheckNearByBombSite ( );
	void UpdateBombs ( );
	void UpdateBombsites ( );
	void UpdateRemainTime ( );
	void UpdateLOHUDIcon ( );
	void CallLoadTutorialLevelObject ( );
	void Tick ( );
	void InitUI ( );
	void registerFlag ( );
	void registerTutorialLevelObject ( );
	void registerKillInfo ( );
	void registerLevelObject ( );
	void HideBombsiteIcons ( );
	void HideBombIcons ( );
	void UpdateActivateHUD ( );
	void RegisterGOContainer ( );
};

UClass* UCombatTutorialGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatHandActor
// 0x0020 (0x0264 - 0x0244)
class ACombatHandActor : public AActor
{
public:
	class ACombatGuy_Player*                           OwnerPlayer;                                      		// 0x0244 (0x0008) [0x0000000000000000]              
	class ACombatWeapon*                               CurrentWeapon;                                    		// 0x024C (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x0254 (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x025C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1764 ];

		return pClassPointer;
	};

	void ChangeVisibility ( );
	void EffectIsRelevant ( );
	void SetParentMeshComponent ( );
	void DetachWeapon ( );
	void AttachWeapon ( );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* ACombatHandActor::pClassPointer = NULL;

// Class CombatGame.CombatHostageActor
// 0x01A4 (0x03E8 - 0x0244)
class ACombatHostageActor : public AActor
{
public:
	int                                                MoveHealthMax;                                    		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                TransformObjectHealthMax;                         		// 0x0248 (0x0004) [0x0000000000000000]              
	float                                              CanTalkDistance;                                  		// 0x024C (0x0004) [0x0000000000000000]              
	float                                              SqrtCanTalkDistance;                              		// 0x0250 (0x0004) [0x0000000000000000]              
	class ACombatRepairingArea*                        RepairingArea;                                    		// 0x0254 (0x0008) [0x0000000000000000]              
	unsigned long                                      bGodMode : 1;                                     		// 0x025C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTestMode : 1;                                    		// 0x025C (0x0004) [0x0000000000150025] [0x00000002] ( CPF_Edit | CPF_Input | CPF_Net | CPF_Travel | CPF_GlobalConfig )
	unsigned long                                      bIsTransformation : 1;                            		// 0x025C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsRepair : 1;                                    		// 0x025C (0x0004) [0x000000000016001B] [0x00000008] ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_OptionalParm | CPF_EditConst | CPF_GlobalConfig )
	int                                                Health;                                           		// 0x0260 (0x0004) [0x0000000000170000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	struct FString                                     HostageName;                                      		// 0x0264 (0x0010) [0x0000000000000000]              
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x0274 (0x0008) [0x0000000000000000]              
	struct FReplicatedMeshInfo                         ReplicatedMesh;                                   		// 0x027C (0x0020) [0x000000000018001B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_OptionalParm | CPF_Component )
	struct FName                                       AnimNodeSlot;                                     		// 0x029C (0x0008) [0x0000000000000000]              
	float                                              AnimTime_UnlockHandcuffs;                         		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FName                                       UnlockHandcuffsAnim;                              		// 0x02A8 (0x0008) [0x0000000000000000]              
	float                                              AnimTime_GroggyStart;                             		// 0x02B0 (0x0004) [0x0000000000000000]              
	struct FName                                       GroggyStartAnim;                                  		// 0x02B4 (0x0008) [0x0000000000000000]              
	float                                              AnimTime_GroggyEnd;                               		// 0x02BC (0x0004) [0x0000000000000000]              
	struct FName                                       GroggyEndAnim;                                    		// 0x02C0 (0x0008) [0x0000000000000000]              
	float                                              AnimTime_CoverStart;                              		// 0x02C8 (0x0004) [0x0000000000000000]              
	struct FName                                       CoverStartAnim;                                   		// 0x02CC (0x0008) [0x0000000000000000]              
	float                                              AnimTime_Death;                                   		// 0x02D4 (0x0004) [0x0000000000000000]              
	struct FName                                       DeathAnim;                                        		// 0x02D8 (0x0008) [0x0000000000000000]              
	struct FName                                       HitAnim;                                          		// 0x02E0 (0x0008) [0x0000000000000000]              
	struct FName                                       CoverHitAnim;                                     		// 0x02E8 (0x0008) [0x0000000000000000]              
	class UAnimNodeSlot*                               FullBodyAnimSlot;                                 		// 0x02F0 (0x0008) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x02F8 (0x0008) [0x0000000000000000]              
	unsigned char                                      AnimState;                                        		// 0x0300 (0x0001) [0x0000000000000000]              
	unsigned char                                      currentVoiceState;                                		// 0x0301 (0x0001) [0x0000000000000000]              
	struct FName                                       StateName;                                        		// 0x0304 (0x0008) [0x000000000019001B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_Component )
	struct FString                                     currentStateUIName;                               		// 0x030C (0x0010) [0x0000000000000000]              
	struct FString                                     IconName;                                         		// 0x031C (0x0010) [0x0000000000000000]              
	class USeqAct_Interp*                              SequnceObject;                                    		// 0x032C (0x0008) [0x0000000000000000]              
	float                                              MoveTrackEndTime;                                 		// 0x0334 (0x0004) [0x0000000000000000]              
	float                                              AnimPosition;                                     		// 0x0338 (0x0004) [0x0000000000000000]              
	float                                              MovingRate;                                       		// 0x033C (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             HitParticleTemplate;                              		// 0x0340 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   HitSound;                                         		// 0x0348 (0x0008) [0x0000000000000000]              
	struct FHostageTakeHitInfo                         LastTakeHitInfo;                                  		// 0x0350 (0x0018) [0x00000000001A001B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_OptionalParm | CPF_EditConst | CPF_Component )
	class USoundCue*                                   Test_TalkSound;                                   		// 0x0368 (0x0008) [0x0000000000000000]              
	TArray< struct FPassiveWheel >                     Wheels;                                           		// 0x0370 (0x0010) [0x0000000000000000]              
	int                                                RepairingPlayerCount;                             		// 0x0380 (0x0004) [0x00000000001B001B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_EditConst | CPF_Component )
	int                                                LastRepairingPlayerCount;                         		// 0x0384 (0x0004) [0x0000000000000000]              
	int                                                MaxRepairingPlayerCount;                          		// 0x0388 (0x0004) [0x0000000000000000]              
	TArray< class ACombatRescuePC* >                   RepairingPlayers;                                 		// 0x038C (0x0010) [0x0000000000000000]              
	TArray< float >                                    RepairTime;                                       		// 0x039C (0x0010) [0x0000000000000000]              
	float                                              RepairingTime;                                    		// 0x03AC (0x0004) [0x0000000000000000]              
	float                                              TimeForUnit;                                      		// 0x03B0 (0x0004) [0x0000000000000000]              
	int                                                HealthHealStep;                                   		// 0x03B4 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             HostageVocieSounds[ 0x6 ];                        		// 0x03B8 (0x0030) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1765 ];

		return pClassPointer;
	};

	void GetHealth ( );
	void OnCombatMeshTransform ( );
	void eventSetTransform ( );
	void ChangeState ( );
	void PlayVoice ( );
	void GetCollisionHeight ( );
	void NotifyEscapeHostage ( );
	void GetHealthMax ( );
	void eventReplicatedEvent ( );
	void PlayHit ( );
	void eventInterpolationFinished ( );
	void StopHostage ( );
	void InitSequence ( );
	void UpdateRepairState ( );
	void NotifyChangeRepairCount ( );
	void UpdateTimeForUnit ( );
	void RemoveAllRepairer ( );
	void RemoveRepairer ( );
	void UpdateRepairingPlayerCount ( );
	void AddRepairer ( );
	void UpdateHostageStateUI ( );
	void GetNextAnimState ( );
	void GetIconName ( );
	void GetStateUIName ( );
	void OnActivate ( );
	void CanRange ( );
	void CanTalk ( );
	void CanRepair ( );
	void eventTakeDamage ( );
	void eventTick ( );
	void CheckValidRepair ( );
	void PreRepair ( );
	void ResetRepairTempData ( );
	void eventReset ( );
	void Init ( );
	void eventScriptGetTeamNum ( );
	void eventPostInitAnimTree ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatHostageActor::pClassPointer = NULL;

// Class CombatGame.CombatHUD
// 0x0050 (0x05B4 - 0x0564)
class ACombatHUD : public AHUD
{
public:
	class UClass*                                      MovieClass;                                       		// 0x0564 (0x0008) [0x0000000000000000]              
	class UCombatGFxMoviePlayer*                       Movie;                                            		// 0x056C (0x0008) [0x0000000000000000]              
	class UClass*                                      HUDSoundGroupClass;                               		// 0x0574 (0x0008) [0x0000000000000000]              
	class UCombatHUDSoundGroup*                        HUDSoundGroup;                                    		// 0x057C (0x0008) [0x0000000000000000]              
	unsigned long                                      bDrawPauser : 1;                                  		// 0x0584 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTick : 1;                                        		// 0x0584 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebugAI : 1;                                     		// 0x0584 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowServerTime : 1;                              		// 0x0584 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FString                                     ChangeListVersion;                                		// 0x0588 (0x0010) [0x0000000000000000]              
	class UCombatAudioChannelSystem*                   AudioChannelSystem;                               		// 0x0598 (0x0008) [0x0000000000000000]              
	TArray< struct FServerTimePositionInfoStruct >     ServerTimePositionInfo;                           		// 0x05A0 (0x0010) [0x0000000000000000]              
	int                                                ServerTimePosition;                               		// 0x05B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1766 ];

		return pClassPointer;
	};

	void IsCanDisplayWeaponKill ( );
	void OnDisconnectMatchServerByAFK ( );
	void OnNotifyKeyInputSignal ( );
	void OnInputExpireTime ( );
	void GMCMD ( );
	void RecvFailBlockPlayGame_WrongActivatedType ( );
	void RecvSuccessBlockPlayGame ( );
	void GetCurrentFrontEndScene ( );
	void NotifySpectatorMode ( );
	void Reset ( );
	void OnChampionShipUserBlockChatting_Failure ( );
	void OnChampionShipUserBlockChatting_Success ( );
	void OnChampionShipChannelNoticeChatting_Failure ( );
	void Dev_UpdateDevelopeMessage ( );
	void AddGMChatMessage ( );
	void AddChatMessage ( );
	void NotifyLocalPlayerTeamReceived ( );
	void ForceTeamChanged ( );
	void eventDrawHUD ( );
	void eventPostRender ( );
	void ShowDebug ( );
	void CheckStartMovie ( );
	void CreateHUDMovie ( );
	void GetHUDSoundGroup ( );
	void InitAudioChannel ( );
	void PostBeginPlay ( );
	void RemoveMovies ( );
	void FinalProcess ( );
	void eventDestroyed ( );
	void ShowHUD ( );
	void ToggleHUD ( );
	void RequestServerTime ( );
	void CheckNProtect ( );
	void DrawGripHUD ( );
	void InitChangeList ( );
};

UClass* ACombatHUD::pClassPointer = NULL;

// Class CombatGame.CombatTeamGameHUD
// 0x0070 (0x0624 - 0x05B4)
class ACombatTeamGameHUD : public ACombatHUD
{
public:
	unsigned char                                      UIState;                                          		// 0x05B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      PrevUIPlayerState;                                		// 0x05B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentUIPlayerState;                             		// 0x05B6 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentUIGameStatus;                              		// 0x05B7 (0x0001) [0x0000000000000000]              
	float                                              RoundOverDisplayTime;                             		// 0x05B8 (0x0004) [0x0000000000000000]              
	class UClass*                                      NavigationClass;                                  		// 0x05BC (0x0008) [0x0000000000000000]              
	class ACombatRadarCore*                            NavigationActor;                                  		// 0x05C4 (0x0008) [0x0000000000000000]              
	class UCombatRadioSystem*                          RadioSystem;                                      		// 0x05CC (0x0008) [0x0000000000000000]              
	float                                              HitAmount;                                        		// 0x05D4 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             WeaponAmmoRedEffect;                              		// 0x05D8 (0x0010) [0x0000000000000000]              
	float                                              LocationLabelUpdateTime;                          		// 0x05E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsDisplaySelectingWeapon : 1;                     		// 0x05EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPrintScoreboardDebugMsg : 1;                     		// 0x05EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsTeamChange : 1;                                 		// 0x05EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDisplayViewTargetKillMark : 1;                   		// 0x05EC (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              TimerDuration_UpdatePlayerScore;                  		// 0x05F0 (0x0004) [0x0000000000000000]              
	float                                              TimerDuration_ChampionshipPlayerInfoUI;           		// 0x05F4 (0x0004) [0x0000000000000000]              
	int                                                TacticalMapRankLabelID;                           		// 0x05F8 (0x0004) [0x0000000000000000]              
	TArray< struct FModeNameStruct >                   ModeNameList;                                     		// 0x05FC (0x0010) [0x0000000000000000]              
	struct FString                                     LastVictimName;                                   		// 0x060C (0x0010) [0x0000000000000000]              
	class UCBUIDataStore_HUD*                          UIDataStore_HUD;                                  		// 0x061C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1767 ];

		return pClassPointer;
	};

	void UpdateSurrendTeamIndex ( );
	void UpdateSurrendUI ( );
	void HideSurrenderUI ( );
	void ShowSurrenderUI ( );
	void SetSpectatorFlashEffectGauge ( );
	void ShowSpectatorFlashEffect ( );
	void CallHideMessage_Tutorial ( );
	void CallSetMessage_Tutorial ( );
	void CallResetQuest_Tutorial ( );
	void CallCompleteQuest_Tutorial ( );
	void CallAddQuest_Tutorial ( );
	void CallHideHelpText_Tutorial ( );
	void CallSetHelpText_Tutorial ( );
	void CallAddDialog_Tutorial ( );
	void ClearAllIconsInTacticalMap ( );
	void SetUIDataStore_HUD ( );
	void UpdateObserverCameraInfo ( );
	void ToggleChampionshipObserverDebugField ( );
	void AddDebugMessage ( );
	void UpdateObserverCameraStyle ( );
	void PlayerView_AllUI ( );
	void PlayerView_Information ( );
	void PlayerView_RoundDisplay ( );
	void PlayerView_IFF ( );
	void PlayerView_Summary ( );
	void PlayerView_Chat ( );
	void ShowModeGuide ( );
	void HideTeamChangeScene ( );
	void ShowTeamChangeScene ( );
	void UpdateAchievementMsg ( );
	void eventDisplayModeScore ( );
	void RemoveMissionActorIcon ( );
	void UpdateMissionObjectIconList ( );
	void InitMissionActor ( );
	void SetMissionActorState ( );
	void SetPortraitIcon ( );
	void SetChaFootItemFXIcon ( );
	void SetChaUpperItemFXIcon ( );
	void UpdateReservedWeapon ( );
	void UpdateObserverWeaponInfo ( );
	void UpdateHP ( );
	void ClearViewTargetInfo ( );
	void UpdateViewTargetInfo ( );
	void SetKillCamMessage ( );
	void IsDisplayedKillerInfo ( );
	void GetCrosshairMaxLengthPercent ( );
	void FinalProcess ( );
	void UpdateMyInfo_WholeMap ( );
	void UpdateScoreboard_FPS ( );
	void SetUIData_Scoreboard ( );
	void UpdateRankMatchName ( );
	void UpdateClanMatchName ( );
	void UpdateTeamName ( );
	void UpdateScoreBoard_PlayerList ( );
	void SetPlayerInfoForScoreboard ( );
	void CheckPlayerInfoForScoreboard ( );
	void UpdatedCachedPlayerScoreList ( );
	void ChampionshipPlayerInfoUI ( );
	void ClearChampionshipPlayerInfoUI ( );
	void ClearScoreboardInfo ( );
	void UpdateScoreboard ( );
	void GetGoalStringIDForScoreboard ( );
	void GetSpecialScoreStringID ( );
	void ToggleDisplaySelectingWeapon ( );
	void HideRadioMessage ( );
	void SelectRadioVoice ( );
	void ToggleRadioChat ( );
	void NotifyCreateSpawnPointUI ( );
	void NotifyCreatePresetUI ( );
	void NotifyCreateRadioUI ( );
	void IsVisibleBombProgressBar ( );
	void HideBombProgressBar ( );
	void ClearIFF ( );
	void GetIFF ( );
	void GetModeNameInTacticalMap ( );
	void ForceTeamChanged ( );
	void UpdateLocalPreset ( );
	void NotifyRespawnSuccess ( );
	void NotifySleepChampionshipPlayerInfoListContainer ( );
	void NotifyAwakeChampionshipPlayerInfoListContainer ( );
	void NotifyRespawnStart ( );
	void HideBombHUDIcons ( );
	void ForceUpdatePostProcess ( );
	void NotifySelectPreset ( );
	void NotifySpawnPointSelection ( );
	void ToggleMiniMapSize ( );
	void ToggleChatUI ( );
	void ShowMiniHUD ( );
	void NotifyWeaponEquipped ( );
	void IsShowHotKey ( );
	void HideHotKey ( );
	void DisplayHotKey ( );
	void eventUpdateWeaponKillCount ( );
	void UpdateGrenadeCount ( );
	void HideSkillActorIndicator ( );
	void ShowSkillActorIndicator ( );
	void UpdateAmmo ( );
	void UpdateWeaponInfo ( );
	void GetLastCrosshairType ( );
	void UpdateCrosshair ( );
	void GetUIState ( );
	void ShowTacticalGearSetIcon ( );
	void NotifyChangedSkillOption ( );
	void NotifyChangeSkillGroupNum ( );
	void hidePassiveSkill ( );
	void ShowUpdatePassiveSkillByID ( );
	void ShowUpdatePassiveSkill ( );
	void NotifyChangedCR ( );
	void IsInitSelectposition ( );
	void IsInitSkillList ( );
	void UpdateSkillList ( );
	void SelectSkillList ( );
	void InitSkillList ( );
	void HideSelectSkillList ( );
	void ToggleSkillStore ( );
	void CreateRadar ( );
	void TestGlobalMessage ( );
	void NotifySkillUseToTeam ( );
	void NotifyFailedNoLicenseSkill ( );
	void NotifyFailedBuySkill ( );
	void NotifyBuySkill ( );
	void NotifyUnlockSkill ( );
	void NotifyRankUp ( );
	void NotifyLastUser ( );
	void ResetPlayerUI ( );
	void UpdateRadioMessage ( );
	void SetDamageBoard ( );
	void ShowBroadcastingMap ( );
	void ShowWholeMap ( );
	void ChangeState ( );
	void HidePlayerClass ( );
	void FocusChat ( );
	void eventDisplayKillMark ( );
	void NotifyWeaponReloaded ( );
	void eventDisplayScoringText ( );
	void IsDisplayedAnyESCMenu ( );
	void ShowMenu ( );
	void BroadcastLOStateMessage ( );
	void DrawLOPersonalMessage ( );
	void ShowSuddenDeathMsg ( );
	void GetRoundWinType ( );
	void SetRoundWinType ( );
	void DisplayMatchEnd ( );
	void SetGameResult ( );
	void RoundResultDelayMessage ( );
	void DisplayRoundResult ( );
	void GetRoundResultString ( );
	void PlayRoundResultSound ( );
	void DisplayLocalMessage_Auto ( );
	void GetRoundGoalInfo ( );
	void DisplayMission ( );
	void DrawTestText ( );
	void HideAndClearTestMessageBox ( );
	void ClearTestMessageBox ( );
	void HideTestMessageBox ( );
	void eventUpdateTestMessageBox ( );
	void ShowHitMark ( );
	void ShowMilitaryPosition ( );
	void ShowSelectSkillList ( );
	void SetGlobalCoolTimeText ( );
	void SetCoolTimeText ( );
	void HideAnimationMilitaryPosition ( );
	void SetSelectedIndex ( );
	void SetShowMessageFadeInOutCombinationText ( );
	void SetNoticepositionCombinationText ( );
	void SetShowBlinkMessageFadeInOutAnimation ( );
	void SetShowMessageFadeInOutAnimation ( );
	void SetNoticePositionMessage ( );
	void HideAnimationNoticePositionMessage ( );
	void HideNoticePositionMessage ( );
	void ShowNoticePositionMessage ( );
	void UpdateKillMarkToVictimName ( );
	void UpdateKillDeathListToSuicide ( );
	void UpdateKillDeathList ( );
	void DisplayRespawn ( );
	void PostBeginPlay ( );
	void UpdateHit ( );
	void ShowHelpImage ( );
	void ShowScoreBoard ( );
	void PlayGameStartBGM ( );
	void DisplayCountDown ( );
	void OnChangedCountDown ( );
	void TeamGameMovie ( );
	void DrawTacticalMap ( );
	void eventPostRender ( );
	void eventDrawHUD ( );
	void RemoveMovies ( );
	void UpdateCurrentLocationLabel ( );
	void CheckStartMovie ( );
	void CreateHUDMovie ( );
	void GetPlayerState ( );
	void SetPlayerIsDead ( );
	void UpdatePlayerVoice ( );
	void UpdateGameState ( );
	void UpdatePlayerState ( );
	void GetWeaponKillCount ( );
};

UClass* ACombatTeamGameHUD::pClassPointer = NULL;

// Class CombatGame.CombatSEIHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatSEIHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1768 ];

		return pClassPointer;
	};

	void eventDisplayModeScore ( );
	void GetTimeStampForMSec ( );
	void SetUIData_Scoreboard ( );
	void SetPlayerInfoForScoreboard ( );
	void CheckPlayerInfoForScoreboard ( );
	void GetGoalStringIDForScoreboard ( );
	void GetSpecialScoreStringID ( );
	void GetRoundGoalInfo ( );
};

UClass* ACombatSEIHUD::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Base
// 0x001C (0x00BC - 0x00A0)
class UCombatHUD_Base : public UGFxObject
{
public:
	class UCombatTeamGameMovie*                        Owner;                                            		// 0x00A0 (0x0008) [0x0000000000000000]              
	struct FString                                     FontHTMLString;                                   		// 0x00A8 (0x0010) [0x0000000000000000]              
	unsigned long                                      bIsDisplayed : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOn : 1;                                          		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMiniHUDMode : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1769 ];

		return pClassPointer;
	};

	void GetFontHTMLString ( );
	void AmIChampionshipPlayer ( );
	void AmIChampionshipObserver ( );
	void Reset ( );
	void Tick ( );
	void GetLobbyTran ( );
	void GetPlayerInfoData ( );
	void GetCommunityTran ( );
	void GetStatisticsTran ( );
	void GetItemTran ( );
	void GetCharacterTran ( );
	void GetLobbyChatTran ( );
	void GetOnlineSubsystem ( );
	void IsMiniHUDMode ( );
	void SetMiniHUDMode ( );
	void GetCombatPC ( );
	void ConvertTo2DVec ( );
	void CallHide ( );
	void CallShow ( );
	void CallHideAnimation ( );
	void HideAnimation ( );
	void Hide ( );
	void Show ( );
	void Init ( );
	void GetScreenCoordsOfSubject ( );
};

UClass* UCombatHUD_Base::pClassPointer = NULL;

// Class CombatGame.CombatHUDComponent_Base
// 0x0000 (0x00BC - 0x00BC)
class UCombatHUDComponent_Base : public UCombatHUD_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1770 ];

		return pClassPointer;
	};

	void GetTeamNum ( );
};

UClass* UCombatHUDComponent_Base::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GameObject
// 0x00F4 (0x01B0 - 0x00BC)
class UCombatHUD_GameObject : public UCombatHUDComponent_Base
{
public:
	float                                              UI_GO_LOCATOR_LOCATION_Z;                         		// 0x00BC (0x0004) [0x0000000000000000]              
	class ACombatPC*                                   PC;                                               		// 0x00C0 (0x0008) [0x0000000000000000]              
	class ACBGameReplicationInfo*                      GRI;                                              		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct FString                                     LastGameObjectIconLabel;                          		// 0x00D0 (0x0010) [0x0000000000000000]              
	struct FString                                     LastGameObjectName;                               		// 0x00E0 (0x0010) [0x0000000000000000]              
	struct FVector                                     LastLocatorUILocation;                            		// 0x00F0 (0x000C) [0x0000000000000000]              
	int                                                LastGameObjectDistance;                           		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                LastLevelObjectTeam;                              		// 0x0100 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ScreenColBox;                                     		// 0x0104 (0x0008) [0x0000000000000000]              
	float                                              RootMCWidth;                                      		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              RootMCHeight;                                     		// 0x0110 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RootMC;                                           		// 0x0114 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  DistanceTF;                                       		// 0x011C (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  NameTF;                                           		// 0x0124 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  DirectionMC;                                      		// 0x012C (0x0008) [0x0000000000000000]              
	int                                                LastDirection;                                    		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsInFront : 1;                                   		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bClampedLocation : 1;                             		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDirectionArrowDisplayed : 1;                     		// 0x0138 (0x0004) [0x0000000000000000] [0x00000004] 
	class UGFxObject*                                  AttackMC;                                         		// 0x013C (0x0008) [0x0000000000000000]              
	struct FVector                                     LocatorCoord;                                     		// 0x0144 (0x000C) [0x0000000000000000]              
	int                                                LocatorScale;                                     		// 0x0150 (0x0004) [0x0000000000000000]              
	int                                                LastLocatorScale;                                 		// 0x0154 (0x0004) [0x0000000000000000]              
	struct FVector                                     SubjectWorldDrawLocation;                         		// 0x0158 (0x000C) [0x0000000000000000]              
	float                                              MinLocatorScale;                                  		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              MaxLocatorScale;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              DistanceForMinScale;                              		// 0x016C (0x0004) [0x0000000000000000]              
	struct FVector                                     LocatorAreaRatio;                                 		// 0x0170 (0x000C) [0x0000000000000000]              
	int                                                LastLocatorAlpha;                                 		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              AlphaValue_CrosshairNearArea;                     		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              AlphaValue_CrosshairFarArea;                      		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              RadiusRatio_CrosshairNearArea;                    		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              RadiusRatio_CrosshairFarArea;                     		// 0x018C (0x0004) [0x0000000000000000]              
	struct FString                                     RootMCInstanceName;                               		// 0x0190 (0x0010) [0x0000000000000000]              
	struct FString                                     SizeMCInstanceName;                               		// 0x01A0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1771 ];

		return pClassPointer;
	};

	void CheckNearbyGO ( );
	void CheckHotKeyMessage ( );
	void CheckAvailableGO ( );
	void UpdateVisible ( );
	void UpdateDistance ( );
	void eventGetCurrentLocatorScale ( );
	void IsBehindLocalPlayer ( );
	void GetAlphaValue ( );
	void UpdateLocatorAlpha ( );
	void UpdateLocator ( );
	void GetIconFrameLabel ( );
	void UpdateIcon ( );
	void GetGameObjectName ( );
	void UpdateName ( );
	void UpdateRotation ( );
	void Update ( );
	void SetUIVisible ( );
	void Clear ( );
	void Reset ( );
	void GetLevelObjectMovieClips ( );
	void Init ( );
	void CalculateLocatorScreenCoordinatesAndScale ( );
};

UClass* UCombatHUD_GameObject::pClassPointer = NULL;

// Class CombatGame.CombatHUDEntity_Base
// 0x0001 (0x00BD - 0x00BC)
class UCombatHUDEntity_Base : public UCombatHUD_Base
{
public:
	unsigned char                                      LastActivateType;                                 		// 0x00BC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1772 ];

		return pClassPointer;
	};

	void IsPlayingGameState ( );
	void ActivateHUD ( );
	void Custom ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUDEntity_Base::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Aim
// 0x007B (0x0138 - 0x00BD)
class UCombatHUD_Aim : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  HitMarkMC;                                        		// 0x00C0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_TopMC;                             		// 0x00C8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_LeftMC;                            		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_BottomMC;                          		// 0x00D8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_RightMC;                           		// 0x00E0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_Dot;                               		// 0x00E8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_Circle;                            		// 0x00F0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  GLCrosshairMC;                                    		// 0x00F8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  RLCrosshairMC;                                    		// 0x0100 (0x0008) [0x0000000000000000]              
	int                                                LastCrosshairType;                                		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                LastCrosshairRadius;                              		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                LastCrosshairLengthRate;                          		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsDisplayed_Basic : 1;                           		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsDisplayed_Dot : 1;                             		// 0x0114 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsDisplayed_Circle : 1;                          		// 0x0114 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsDisplayed_GL : 1;                              		// 0x0114 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsDisplayed_RL : 1;                              		// 0x0114 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsReloadingDisplayed : 1;                        		// 0x0114 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsLaserSightDisplayed : 1;                       		// 0x0114 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      JustInitiated : 1;                                		// 0x0114 (0x0004) [0x0000000000000000] [0x00000080] 
	struct FBasicCrosshairSetting                      BasicCHSetting;                                   		// 0x0118 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1773 ];

		return pClassPointer;
	};

	void Reset ( );
	void SetCrossHairThickness ( );
	void SetCrossHairShadow ( );
	void SetCrossHairAlpha ( );
	void SetCrossHairColor ( );
	void CallHideLaserSight ( );
	void CallShowLaserSight ( );
	void ShowHitMark ( );
	void ShowLaserSight ( );
	void SetVisible_Dot ( );
	void SetVisible_RLCrosshair ( );
	void SetVisible_GLCrosshair ( );
	void SetVisible_BasicCrosshair ( );
	void IsBasicCrossHairReady ( );
	void eventControlCrosshairVisible ( );
	void UpdateCrosshair ( );
	void Init ( );
	void ClearCH ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_Aim::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChampionshipPlayerInfoListContainer
// 0x0017 (0x00D4 - 0x00BD)
class UCombatHUD_ChampionshipPlayerInfoListContainer : public UCombatHUDEntity_Base
{
public:
	class UCombatHUD_ChampionshipPlayerInfoList*       DefenseTeamListMC;                                		// 0x00C0 (0x0008) [0x0000000000000000]              
	class UCombatHUD_ChampionshipPlayerInfoList*       AttackTeamListMC;                                 		// 0x00C8 (0x0008) [0x0000000000000000]              
	unsigned long                                      bStopTimer : 1;                                   		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1774 ];

		return pClassPointer;
	};

	void eventCallSetPlayerHp ( );
	void eventCallSetPlayerStatus ( );
	void eventCallSetPlayerKillNum ( );
	void eventCallSetPlayerWeaponName ( );
	void eventCallSetPlayerName ( );
	void InitializeList ( );
	void SetRegisterBroadCastObserverRedTeam ( );
	void SetRegisterBroadCastObserverBlueTeam ( );
	void SetObserverInformation ( );
	void Hide ( );
	void Show ( );
};

UClass* UCombatHUD_ChampionshipPlayerInfoListContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GameModeHelp
// 0x0007 (0x00C4 - 0x00BD)
class UCombatHUD_GameModeHelp : public UCombatHUDEntity_Base
{
public:
	unsigned long                                      bShow : 1;                                        		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1775 ];

		return pClassPointer;
	};

	void GetModeTip ( );
	void SetModeHelpData ( );
	void CallsetData ( );
	void CallSetTip ( );
	void PrintTip ( );
	void SetGameModeHelp ( );
	void ToggleGameModeHelp ( );
	void GetActivateHUDByGameState ( );
	void Init ( );
};

UClass* UCombatHUD_GameModeHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TacticalMapAndScoreboard
// 0x020B (0x02C8 - 0x00BD)
class UCombatHUD_TacticalMapAndScoreboard : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  Radar_LPIconMC;                                   		// 0x00C0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  CompassMC;                                        		// 0x00C8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  TopDepthIconContainerMC;                          		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  FriendlyIconContainerMC;                          		// 0x00D8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  EnemyIconContainerMC;                             		// 0x00E0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  ObjectIconContainerMC;                            		// 0x00E8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  NameplateContainerMC;                             		// 0x00F0 (0x0008) [0x0000000000000000]              
	int                                                NameplateLocDelta_X;                              		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                NameplateLocDelta_Y;                              		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                ChampionshipObserverNameplateLocDelta_X;          		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                ChampionshipObserverNameplateLocDelta_Y;          		// 0x0104 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MapMC;                                            		// 0x0108 (0x0008) [0x0000000000000000]              
	struct FMatrix                                     IconMatrix;                                       		// 0x0110 (0x0040) [0x0000000000000000]              
	struct FIconData                                   IconDatas[ 0x6 ];                                 		// 0x0150 (0x0120) [0x0000000000000000]              
	struct FNameplateData                              NameplateIconDatas;                               		// 0x0270 (0x0030) [0x0000000000000000]              
	unsigned long                                      bIgnoreMinimap : 1;                               		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreWholeMap : 1;                              		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIgnoreScoreboard : 1;                            		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      scoreboardType;                                   		// 0x02A4 (0x0001) [0x0000000000000000]              
	struct FString                                     LastModeName;                                     		// 0x02A8 (0x0010) [0x0000000000000000]              
	struct FScriptDelegate                             __OnUpdateTacticalMap__Delegate;                  		// 0x02B8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1776 ];

		return pClassPointer;
	};

	void CallSetTeamName ( );
	void CallSetAIPlayTime ( );
	void CallSetAiBg ( );
	void CallSetVcClanInfo ( );
	void CallSetPmClanInfo ( );
	void CallSetViperCircleTeam ( );
	void CallSetPeaceMakerTeam ( );
	void CallSetFramePerSecond ( );
	void CallSetLegend ( );
	void CallSetPlayerInfo ( );
	void CallSetMiniMapMissionVolume ( );
	void CallSetMiniMapVolume ( );
	void CallSetMapImage ( );
	void CallSetViperCircleList ( );
	void CallSetPeaceMakerList ( );
	void CallSetLabel ( );
	void CallChangeBroadCastObserverMode ( );
	void CallChangeDefaultMode ( );
	void CallChangeScoreBoardMode ( );
	void CallChangeHybridMapMode ( );
	void CallChangeWholeMapMode ( );
	void CallChangeMiniMapMode ( );
	void ChangeMiniMapMode ( );
	void SetModeName ( );
	void ClearAllIcons ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
	void Custom ( );
	void SetAIBackGroundImage ( );
	void eventGetMapSymbolIconLinkageNameBy ( );
	void SetMapUpperMapSymbolList ( );
	void SetMapSymbolList ( );
	void ClearLocationLabel ( );
	void UpdateLocationLabel ( );
	void InitMinimapTexture ( );
	void SetGoalAndSpecialPointLabel ( );
	void IsDisplayMissionAndRoom ( );
	void SetLabels ( );
	void SetScoreboardType ( );
	void Init ( );
	void OnUpdateTacticalMap ( );
};

UClass* UCombatHUD_TacticalMapAndScoreboard::pClassPointer = NULL;

// Class CombatGame.CombatHUD_WaveModePlayerList
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_WaveModePlayerList : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1777 ];

		return pClassPointer;
	};

	void eventCallSetRank ( );
	void eventCallSetCR ( );
	void eventCallSetScore ( );
	void eventCallSetMilitaryClass ( );
	void eventCallinitialize ( );
	void eventCallSetPlayerHp ( );
	void eventCallSetPlayerStatus ( );
	void eventCallSetPlayerLifeNum ( );
	void eventCallSetPlayerName ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_WaveModePlayerList::pClassPointer = NULL;

// Class CombatGame.CombatHUDSoundGroup
// 0x0010 (0x0070 - 0x0060)
class UCombatHUDSoundGroup : public UObject
{
public:
	class USoundCue*                                   GameOverQuestion;                                 		// 0x0060 (0x0008) [0x0000000000000000]              
	class ACombatPlayerControllerBase*                 Target;                                           		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1778 ];

		return pClassPointer;
	};

	void AnnouncerPlay ( );
	void Init ( );
};

UClass* UCombatHUDSoundGroup::pClassPointer = NULL;

// Class CombatGame.CombatImpactLight
// 0x001C (0x025C - 0x0240)
class UCombatImpactLight : public UPointLightComponent
{
public:
	float                                              StartBrightness;                                  		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              Lifetime;                                         		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              PassedTime;                                       		// 0x0248 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnLightFinished__Delegate;                      		// 0x024C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0250 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1779 ];

		return pClassPointer;
	};

	void OnLightFinished ( );
	void ResetLight ( );
};

UClass* UCombatImpactLight::pClassPointer = NULL;

// Class CombatGame.CombatInGameResourcePool
// 0x01D4 (0x0234 - 0x0060)
class UCombatInGameResourcePool : public UObject
{
public:
	int                                                MaxWeaponMaterialSet;                             		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              MinImpactDecalDistance;                           		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              ImpactDecalDepthBias;                             		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              ImpactDecalDepthBiasStep;                         		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              ImpactDecalSlopeScaleDepthBias;                   		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIgnoreNearImpactDecal : 1;                       		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     DefaultPhysMaterialName;                          		// 0x0078 (0x0010) [0x0000000000000000]              
	struct FString                                     DefaultAirPhysMaterialName;                       		// 0x0088 (0x0010) [0x0000000000000000]              
	struct FInGameResource                             Resource[ 0x5 ];                                  		// 0x0098 (0x00A0) [0x0000000000000000]              
	class AActor*                                      OuterActor;                                       		// 0x0138 (0x0008) [0x0000000000000000]              
	float                                              MinImpactDecalDistanceSq;                         		// 0x0140 (0x0004) [0x0000000000000000]              
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x0144 (0x0008) [0x0000000000000000]              
	class UPhysicalMaterial*                           DefaultAirPhysMaterial;                           		// 0x014C (0x0008) [0x0000000000000000]              
	TArray< class UObject* >                           CachedSkillData;                                  		// 0x0154 (0x0010) [0x0000000000000000]              
	struct FInGameSingleResourceList                   WeaponMasterAnimSet[ 0x2 ];                       		// 0x0164 (0x0020) [0x0000000000000000]              
	struct FInGameSingleResourceList                   WeaponSubAnimSet[ 0x2 ];                          		// 0x0184 (0x0020) [0x0000000000000000]              
	struct FInGameSingleResourceList                   AttachmentAnimSet[ 0x2 ];                         		// 0x01A4 (0x0020) [0x0000000000000000]              
	struct FIndirectArray_Mirror                       WeaponMasterAnimSetCallbackList;                  		// 0x01C4 (0x0010) [0x0000000000000000]              
	struct FIndirectArray_Mirror                       WeaponSubAnimSetCallbackList;                     		// 0x01D4 (0x0010) [0x0000000000000000]              
	struct FIndirectArray_Mirror                       AttachmentAnimSetCallbackList;                    		// 0x01E4 (0x0010) [0x0000000000000000]              
	TArray< class USkeletalMesh* >                     LocalMeshesForPreloadTexture;                     		// 0x01F4 (0x0010) [0x0000000000000000]              
	TArray< class UMaterialInterface* >                PreloadMaterialList;                              		// 0x0204 (0x0010) [0x0000000000000000]              
	TArray< struct FLandingZone >                      ParachuteLandingZone;                             		// 0x0214 (0x0010) [0x0000000000000000]              
	struct FScriptDelegate                             __OnLoadAsyncAnimSetFinished__Delegate;           		// 0x0224 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0228 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1780 ];

		return pClassPointer;
	};

	void SetParachuteLandingZone ( );
	void RadialBlurFinished ( );
	void GetDefaultAirPhysMaterial ( );
	void GetDefaultPhysMaterial ( );
	void SetTraceEmitter ( );
	void SetImpactEmitter ( );
	void PSCFinished ( );
	void SetImpactLight ( );
	void ImpactLightFinished ( );
	void ReleaseSkillResources ( );
	void eventRelease ( );
	void InitPreloadMaterialList ( );
	void InitSkillResources ( );
	void eventInit ( );
	void RemoveSkeletalMeshForPreloadTextures ( );
	void AddSkeletalMeshForPreloadTextures ( );
	void LoadAsyncAttachmentAnimSet ( );
	void GetAttachmentAnimSet ( );
	void LoadAsyncWeaponSubAnimSet ( );
	void GetWeaponSubAnimSet ( );
	void LoadAsyncWeaponMasterAnimSet ( );
	void GetWeaponMasterAnimSet ( );
	void OnLoadAsyncAnimSetFinished ( );
	void SetRadialBlur ( );
	void GetRadialBlurComponent ( );
	void SetImpactDecal ( );
	void GetImpactDecalDepthBias ( );
	void MovePrimitiveComponent ( );
	void GetResourceLength ( );
	void GetResource ( );
	void NativeRelease ( );
};

UClass* UCombatInGameResourcePool::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItem
// 0x0068 (0x00C8 - 0x0060)
class UCombatInstanceItem : public UObject
{
public:
	int                                                AmmorGrade;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                AP[ 0xA ];                                        		// 0x0064 (0x0028) [0x0000000000000000]              
	int                                                APForExplosion;                                   		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              ShortenRespawnDelay;                              		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              DamagedAccelerationRatio;                         		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              RankExpUpRatio;                                   		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FString                                     HudIconName;                                      		// 0x009C (0x0010) [0x0000000000000000]              
	unsigned long                                      PowerBullet : 1;                                  		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              GroundCrouchSpeedRate_Buff;                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              GroundWalkingSpeedRate_Buff;                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              GroundRunSpeedRate_Buff;                          		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              GroundAccelationRate_Buff;                        		// 0x00BC (0x0004) [0x0000000000000000]              
	class UClass*                                      ItemFXClass;                                      		// 0x00C0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1781 ];

		return pClassPointer;
	};

	void GetGroundAccelationRate_Buff ( );
	void GetGroundRunSpeedRate_Buff ( );
	void GetGroundWalkingSpeedRate_Buff ( );
	void GetGroundCrouchSpeedRate_Buff ( );
	void GetPowerBullet ( );
	void GetHUDIcon ( );
	void GetRankExpUpRatio ( );
	void GetDamagedAccelerationRatio ( );
	void GetShortenRespawnDelay ( );
	void GetAPForExplosion ( );
	void GetAP ( );
	void GetAmmorItemGrade ( );
	void GetItemFXClass ( );
};

UClass* UCombatInstanceItem::pClassPointer = NULL;

// Class CombatGame.CombatItemTransaction
// 0x01F0 (0x0250 - 0x0060)
class UCombatItemTransaction : public UObject
{
public:
	TArray< struct FInventoryItemInfo >                InventoryItemInfos;                               		// 0x0060 (0x0010) [0x0000000000000000]              
	TArray< struct FEquipItemInfo >                    EquipItemInfos;                                   		// 0x0070 (0x0010) [0x0000000000000000]              
	TArray< struct FEquipItemInfo >                    SimulatedEquipItemInfos;                          		// 0x0080 (0x0010) [0x0000000000000000]              
	TArray< struct FEquipItemInfo >                    SendEuipItemInfos;                                		// 0x0090 (0x0010) [0x0000000000000000]              
	TArray< struct FEquipItemInfo >                    UnchangedEquipItemInfos;                          		// 0x00A0 (0x0010) [0x0000000000000000]              
	TArray< struct FShopItemInfo >                     OriShopItemInfos;                                 		// 0x00B0 (0x0010) [0x0000000000000000]              
	TArray< struct FShopItemInfo >                     ShopItemInfos;                                    		// 0x00C0 (0x0010) [0x0000000000000000]              
	TArray< int >                                      ServiceOffShopItemList;                           		// 0x00D0 (0x0010) [0x0000000000000000]              
	TArray< struct FExpiredItem >                      ExpiredItems;                                     		// 0x00E0 (0x0010) [0x0000000000000000]              
	TArray< struct FRepurchaseItem >                   SelectedRepurchaseItems;                          		// 0x00F0 (0x0010) [0x0000000000000000]              
	unsigned long                                      bShopItemsSorting : 1;                            		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bExpiredEquipItem : 1;                            		// 0x0100 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FS_BaseItemInfo >                   BaseItemList;                                     		// 0x0104 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           DefaultPresetName;                                		// 0x0114 (0x0010) [0x0000000000000000]              
	int                                                SendActiveItemInventorySlotIndex;                 		// 0x0124 (0x0004) [0x0000000000000000]              
	TArray< struct FFilterInfo >                       FilterList;                                       		// 0x0128 (0x0010) [0x0000000000000000]              
	TArray< struct FBoosterItem >                      BoosterItemList;                                  		// 0x0138 (0x0010) [0x0000000000000000]              
	unsigned char                                      SelectedGearSetIndex;                             		// 0x0148 (0x0001) [0x0000000000000000]              
	TArray< class UCombatFrontEnd_BuyAfter_Base* >     ItemBuyAfterList;                                 		// 0x014C (0x0010) [0x0000000000000000]              
	TArray< struct FCallingCardInfo >                  CallingCardInfoList;                              		// 0x015C (0x0010) [0x0000000000000000]              
	struct FRandomBoxGainResultInfo                    RandomBoxGainResult;                              		// 0x016C (0x0014) [0x0000000000000000]              
	struct FRandomBoxShopItemInfo                      ReservedOpenRandomBoxShopItem;                    		// 0x0180 (0x0008) [0x0000000000000000]              
	struct FUseLockedItemInfo                          UseLockedItem;                                    		// 0x0188 (0x0030) [0x0000000000000000]              
	struct FSendConsumeItemInfo                        CurSendConsumeItemInfo;                           		// 0x01B8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x01C0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatItemTransaction.BuyLimitSaleItems
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0208 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatItemTransaction.BulletSaleTimeDate

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1782 ];

		return pClassPointer;
	};

	void GetActiveSprayItemIndex ( );
	void GetUseLockedItemCount ( );
	void IsContinueUseLockedItem ( );
	void RemoveUseLockedItemSlot ( );
	void SetUseLockedItemInfo ( );
	void CheckRandomBoxInInven ( );
	void eventSetCurSendConsumeItemInfo ( );
	void InitCurSendConsumeItemInfo ( );
	void FindBuyAfterObject ( );
	void GetBuyAfterObject ( );
	void GetBuyAfterClassNameByItemIndex ( );
	void GetRefItemDataByCodename ( );
	void GetAddReplaceItemCodename ( );
	void GetRefShopSellItemTable ( );
	void GetRefShopItemEntryDataByCodeName ( );
	void GetRefItemTable ( );
	void IsNoManner ( );
	void eventIsCallingCardPermanentItemCheck ( );
	void eventCallingCardItemCheckByRefIndex ( );
	void GetCallingCardInfoList ( );
	void RemoveCallingCardItem ( );
	void AddCallingCardItem ( );
	void eventIsNewItemFromStorage ( );
	void GetSelectedGearSetIndex ( );
	void FindFilterbyID ( );
	void RemoveFilterList ( );
	void ResetFilterList ( );
	void AddFilterList ( );
	void GetFilterListLength ( );
	void GetShopItemInfo_InventoryItemName ( );
	void eventGetShopItemInfo ( );
	void eventGetShopItemLength ( );
	void ResetShopItemList ( );
	void IsbShopItemsSorting ( );
	void InitShopItemList ( );
	void UpdateExchangedMoneyItem ( );
	void IsOpeningRandomBoxShopItem ( );
	void InitReservedOpenRandomBoxShopItem ( );
	void IsRandomBoxShopItem ( );
	void IsMoneyTypeItem ( );
	void IsConsumeItem ( );
	void eventIsAlwaysActiveItem ( );
	void eventIsNewBuyItem ( );
	void GetBaseItem ( );
	void GetBaseItemListIndexBy ( );
	void GetBaseItemListBy ( );
	void InitBaseItemList ( );
	void InitSimulatedEquipItemInfos ( );
	void ClearSendEuipItemLists ( );
	void OverwriteNewEquipList ( );
	void GetSendEuipItemInfosLength ( );
	void GetSendEuipItemInfo ( );
	void SortByPreset ( );
	void AddSendEuipItemInfo ( );
	void HasChangedEquippedItems ( );
	void eventGetCurrentRentalTime ( );
	void IsAvailableRentalTimeItem ( );
	void IsPresetinvenItem ( );
	void IsItemInPreset ( );
	void GetEquippedItemList ( );
	void GetEquippedFirstItem ( );
	void FindEquipItemListIndex_Ex ( );
	void IsEquippedItem ( );
	void eventGetEquippedItemPresetIndex ( );
	void GetEquippedItemData ( );
	void GetEquippedInventorySlotIndexByPresetIndex ( );
	void DisrobeItem ( );
	void EquipItem ( );
	void eventForceEquipItem ( );
	void EquippedItemCount ( );
	void AddEquipItemInfo ( );
	void UpdateDecorationData ( );
	void IsInInventory ( );
	void eventIsInventoryPermanentItemCheck ( );
	void eventSetInventoryItemPresetCheck ( );
	void GetRefItemIndexListInInventory ( );
	void eventGetInventoryItemLength ( );
	void GetInventoryItemInfoReferenceIndex_ItemData ( );
	void GetInventoryItemInfoByInventorySlotIndex ( );
	void GetInventoryItemInfo_Ex ( );
	void eventGetInventoryItemInfo ( );
	void eventGetActiveEffectFootRefItemIndex ( );
	void eventGetActiveEffectUpperRefItemIndex ( );
	void GetActiveAvatarRefItemIndex ( );
	void SetActiveInventoryItem ( );
	void GetConsumeInventoryItemName ( );
	void SetConsumeInventoryItem ( );
	void IsConsumeInventoryItem ( );
	void IsClothInventoryItem ( );
	void IsExistTicketItem ( );
	void FindActiveInventoryItem ( );
	void SetActiveInventoryItems ( );
	void SetItemNameInventoryItem ( );
	void AllResetIsNewInventoryItem ( );
	void ResetIsNewInventoryItem ( );
	void eventRemoveInventoryItem ( );
	void EquipSort ( );
	void eventAddInventoryItem ( );
	void SetExistExpiredEquipItem ( );
	void IsExpiredEquipItem ( );
	void ClearExpiredItems ( );
	void IsShowExpiredItem ( );
	void eventGetExpiredItemBySlotIndex ( );
	void IsExpiredItem ( );
	void eventGetExpiredItem ( );
	void eventDelExpiredItem ( );
	void eventAddExpiredItem ( );
	void eventDestroyedItem ( );
	void eventGetRemoveExpiredItemIndexList ( );
	void eventGetExpiredItems ( );
	void GetExpiredItemCount ( );
	void ClearSelectedRepurchaseItems ( );
	void GetRepurchaseItems ( );
	void GetSelectedRepurchaseItemPrice ( );
	void eventIsSelectedRepurchaseItems ( );
	void DeSelectedRepurchaseItems ( );
	void SetRepurchaseItems ( );
	void GetSelectedRepurchaseItem ( );
	void GetSelectedRepurchaseItemsCount ( );
	void IsNeedNotifyExpiredItem ( );
	void GetChannelBoosterItem ( );
	void eventRemoveBoosterItem ( );
	void eventClearBoosterItem ( );
	void InitRandomBoxGainResult ( );
	void ClearEquipMarkerInventoryItem ( );
	void AddEquipMarkerInventoryItem ( );
	void ShopListDescendingItemGradeSort ( );
	void ShopListAscendingItemGradeSort ( );
	void ShopListRepurchaseItemSort ( );
	void ShopListDescendingPriceSort ( );
	void ShopListAscendingPriceSort ( );
	void ShopListDescendingNameSort ( );
	void ShopListAscendingNameSort ( );
	void GetInventoryItem ( );
	void IsOffShopItem ( );
	void IsPassFilterList ( );
	void GetMergedBoosterItemList ( );
	void BulletSaleTimeDateUpdate ( );
	void AddBulletSaleTimeDate ( );
	void GetBulletSaleTimeDate ( );
	void AddBuyLimitSaleItemCount ( );
	void GetBuyLimitSaleItemCount ( );
};

UClass* UCombatItemTransaction::pClassPointer = NULL;

// Class CombatGame.CombatKActorNoSyncSpawnable
// 0x0000 (0x037C - 0x037C)
class ACombatKActorNoSyncSpawnable : public AKActorSpawnable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1783 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void ClientReset ( );
	void Reset ( );
};

UClass* ACombatKActorNoSyncSpawnable::pClassPointer = NULL;

// Class CombatGame.CombatLabelVolume
// 0x0010 (0x0290 - 0x0280)
class ACombatLabelVolume : public AVolume
{
public:
	int                                                LocationLabelID;                                  		// 0x0280 (0x0004) [0x0000000000000000]              
	class ACombatLabelVolume*                          NextLowerPriorityVolume;                          		// 0x0284 (0x0008) [0x0000000000000000]              
	float                                              Priority;                                         		// 0x028C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1784 ];

		return pClassPointer;
	};

	void GetLocationLabelID ( );
};

UClass* ACombatLabelVolume::pClassPointer = NULL;

// Class CombatGame.CombatLCTFFlagActor
// 0x0054 (0x0298 - 0x0244)
class ACombatLCTFFlagActor : public AActor
{
public:
	unsigned long                                      bIsActive : 1;                                    		// 0x0244 (0x0004) [0x0000000000150000] [0x00000001] ( CPF_Travel | CPF_GlobalConfig )
	unsigned long                                      bTouchFlag : 1;                                   		// 0x0244 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAddScore : 1;                                    		// 0x0244 (0x0004) [0x0000000000160000] [0x00000004] ( CPF_EditConst | CPF_GlobalConfig )
	int                                                LCTFActorIndex;                                   		// 0x0248 (0x0004) [0x0000000000000000]              
	unsigned char                                      OwnerTeam;                                        		// 0x024C (0x0001) [0x0000000000000000]              
	unsigned char                                      SpawnID;                                          		// 0x024D (0x0001) [0x0000000000000000]              
	struct FSkeletalMeshMaterial                       FlagMaterialList_OurTeam;                         		// 0x0250 (0x000C) [0x0000000000000000]              
	struct FSkeletalMeshMaterial                       FlagMaterialList_Enemy;                           		// 0x025C (0x000C) [0x0000000000000000]              
	struct FName                                       AttachmentSocket;                                 		// 0x0268 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      SkelMesh;                                         		// 0x0270 (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0278 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    PSC;                                              		// 0x0280 (0x0008) [0x0000000000000000]              
	class ACombatLCTFFlagPoint*                        HomeBase;                                         		// 0x0288 (0x0008) [0x0000000000000000]              
	struct FName                                       StateName;                                        		// 0x0290 (0x0008) [0x0000000000170000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1785 ];

		return pClassPointer;
	};

	void ScriptGetTeamNum ( );
	void IsEnableTouchFlag ( );
	void EnableTouchFlag ( );
	void DisableTouchFlag ( );
	void ReturnToHomeBase ( );
	void TryDisplayScore ( );
	void TryAttachToHelder ( );
	void DropVelocity ( );
	void DropCTFFlag ( );
	void eventReplicatedEvent ( );
	void NotifyLocalPlayerTeamReceived ( );
	void InitHomeBase ( );
	void GetMissionActorSortPriority ( );
	void InitMissionActor ( );
	void PostBeginPlay ( );
};

UClass* ACombatLCTFFlagActor::pClassPointer = NULL;

// Class CombatGame.CombatLCTFFlagPoint
// 0x0028 (0x0364 - 0x033C)
class ACombatLCTFFlagPoint : public ANavigationPoint
{
public:
	unsigned char                                      OwnerTeam;                                        		// 0x033C (0x0001) [0x0000000000000000]              
	unsigned char                                      PointType;                                        		// 0x033D (0x0001) [0x0000000000000000]              
	unsigned char                                      SpawnID;                                          		// 0x033E (0x0001) [0x0000000000000000]              
	class UPrimitiveComponent*                         Mesh;                                             		// 0x0340 (0x0008) [0x0000000000000000]              
	class UStaticMeshComponent*                        StaticMeshComp;                                   		// 0x0348 (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 FlagPointStaticMesh;                              		// 0x0350 (0x0008) [0x0000000000000000]              
	int                                                AreaNameID;                                       		// 0x0358 (0x0004) [0x0000000000000000]              
	int                                                MissionGoalArrayIndex;                            		// 0x035C (0x0004) [0x0000000000000000]              
	unsigned long                                      IsStayFlag : 1;                                   		// 0x0360 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1786 ];

		return pClassPointer;
	};

	void eventTouch ( );
	void InitMesh ( );
	void ScriptGetTeamNum ( );
	void GetMissionActorSortPriority ( );
	void InitMissionActor ( );
	void SetHomeFlag ( );
	void PostBeginPlay ( );
};

UClass* ACombatLCTFFlagPoint::pClassPointer = NULL;

// Class CombatGame.CombatLobbyChatTransaction
// 0x0000 (0x0060 - 0x0060)
class UCombatLobbyChatTransaction : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1787 ];

		return pClassPointer;
	};

};

UClass* UCombatLobbyChatTransaction::pClassPointer = NULL;

// Class CombatGame.CombatLobbyTransaction
// 0x0090 (0x00F0 - 0x0060)
class UCombatLobbyTransaction : public UObject
{
public:
	int                                                ChannelIndex;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                ChannelPropertyNumber;                            		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0068 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatLobbyTransaction.MatchRoomInfoMap
	struct FUpdateMatchRoomInfo                        UpdateMatchRoom;                                  		// 0x00B0 (0x0030) [0x0000000000000000]              
	TArray< struct FLookInMatchRoomUserInfo >          LookInMatchRoomUserList;                          		// 0x00E0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1788 ];

		return pClassPointer;
	};

	void GetLookInMatchRoomUserList ( );
	void GetUpdateMatchRoom ( );
	void GetMatchRoomList ( );
	void GetMatchRoomInfo ( );
	void IsChampionShip ( );
	void IsInChannel ( );
	void GetChannelType ( );
	void GetChannelPropertyNumber ( );
	void SetChannelPropertyNumber ( );
	void GetChannelIndex ( );
	void SetChannelIndex ( );
};

UClass* UCombatLobbyTransaction::pClassPointer = NULL;

// Class CombatGame.CombatLocalPlayer
// 0x0D08 (0x113C - 0x0434)
class UCombatLocalPlayer : public ULocalPlayer
{
public:
	unsigned char                                      CurrentCombatPostProcess;                         		// 0x0434 (0x0001) [0x0000000000000000]              
	struct FPostProcessSettings                        MotionBlurPPSettings;                             		// 0x0438 (0x0164) [0x0000000000000000]              
	struct FPostProcessSettings                        ExposedPPSettings;                                		// 0x059C (0x0164) [0x0000000000000000]              
	struct FPostProcessSettings                        FlashbangPPSettings;                              		// 0x0700 (0x0164) [0x0000000000000000]              
	struct FPostProcessSettings                        WarmupPPSettings;                                 		// 0x0864 (0x0164) [0x0000000000000000]              
	struct FPostProcessSettings                        CountdownPPSettings;                              		// 0x09C8 (0x0164) [0x0000000000000000]              
	struct FPostProcessSettings                        RoundPPSettings;                                  		// 0x0B2C (0x0164) [0x0000000000000000]              
	struct FPostProcessSettings                        RoundOverPPSettings;                              		// 0x0C90 (0x0164) [0x0000000000000000]              
	struct FPostProcessSettings                        MatchOverPPSettings;                              		// 0x0DF4 (0x0164) [0x0000000000000000]              
	unsigned long                                      bEnableMotionBlur : 1;                            		// 0x0F58 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      FullMotionBlur : 1;                               		// 0x0F58 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      MatrialOverlap : 1;                               		// 0x0F58 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              RunMaxVelocity;                                   		// 0x0F5C (0x0004) [0x0000000000000000]              
	float                                              RunMotionBlurAmount;                              		// 0x0F60 (0x0004) [0x0000000000000000]              
	float                                              RunMotionBlurSoftEdge;                            		// 0x0F64 (0x0004) [0x0000000000000000]              
	float                                              RunCamRotationThreshold;                          		// 0x0F68 (0x0004) [0x0000000000000000]              
	float                                              RunCamTranslationThreshold;                       		// 0x0F6C (0x0004) [0x0000000000000000]              
	float                                              RunInterpolationDuration;                         		// 0x0F70 (0x0004) [0x0000000000000000]              
	float                                              ExposedBlendInTime;                               		// 0x0F74 (0x0004) [0x0000000000000000]              
	float                                              ExposedDuration;                                  		// 0x0F78 (0x0004) [0x0000000000000000]              
	float                                              ExposedBlendOutTime;                              		// 0x0F7C (0x0004) [0x0000000000000000]              
	float                                              ExposedInterpolationDuration;                     		// 0x0F80 (0x0004) [0x0000000000000000]              
	float                                              ExposedDesaturation;                              		// 0x0F84 (0x0004) [0x0000000000000000]              
	struct FVector                                     ExposedHighLights;                                		// 0x0F88 (0x000C) [0x0000000000000000]              
	struct FVector                                     ExposedMidTones;                                  		// 0x0F94 (0x000C) [0x0000000000000000]              
	struct FVector                                     ExposedShadows;                                   		// 0x0FA0 (0x000C) [0x0000000000000000]              
	float                                              FlashbangBlendInTime;                             		// 0x0FAC (0x0004) [0x0000000000000000]              
	float                                              FlashbangDuration;                                		// 0x0FB0 (0x0004) [0x0000000000000000]              
	float                                              FlashbangBlendOutTime;                            		// 0x0FB4 (0x0004) [0x0000000000000000]              
	float                                              FlashbangInterpolationDuration;                   		// 0x0FB8 (0x0004) [0x0000000000000000]              
	float                                              FlashbangDesaturation;                            		// 0x0FBC (0x0004) [0x0000000000000000]              
	struct FVector                                     FlashbangHighLights;                              		// 0x0FC0 (0x000C) [0x0000000000000000]              
	struct FVector                                     FlashbangMidTones;                                		// 0x0FCC (0x000C) [0x0000000000000000]              
	struct FVector                                     FlashbangShadows;                                 		// 0x0FD8 (0x000C) [0x0000000000000000]              
	float                                              BlendTotalTime;                                   		// 0x0FE4 (0x0004) [0x0000000000000000]              
	float                                              CurrentBlendTime;                                 		// 0x0FE8 (0x0004) [0x0000000000000000]              
	class UMaterialInstance*                           MatFlashbang;                                     		// 0x0FEC (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  texCaptureFlashbang;                              		// 0x0FF4 (0x0008) [0x0000000000000000]              
	float                                              WarmupBlendInTime;                                		// 0x0FFC (0x0004) [0x0000000000000000]              
	float                                              WarmupDuration;                                   		// 0x1000 (0x0004) [0x0000000000000000]              
	float                                              WarmupBlendOutTime;                               		// 0x1004 (0x0004) [0x0000000000000000]              
	float                                              WarmupInterpolationDuration;                      		// 0x1008 (0x0004) [0x0000000000000000]              
	float                                              WarmupDesaturation;                               		// 0x100C (0x0004) [0x0000000000000000]              
	struct FVector                                     WarmupHighLights;                                 		// 0x1010 (0x000C) [0x0000000000000000]              
	struct FVector                                     WarmupMidTones;                                   		// 0x101C (0x000C) [0x0000000000000000]              
	struct FVector                                     WarmupShadows;                                    		// 0x1028 (0x000C) [0x0000000000000000]              
	float                                              CountdownBlendInTime;                             		// 0x1034 (0x0004) [0x0000000000000000]              
	float                                              CountdownDuration;                                		// 0x1038 (0x0004) [0x0000000000000000]              
	float                                              CountdownBlendOutTime;                            		// 0x103C (0x0004) [0x0000000000000000]              
	float                                              CountdownInterpolationDuration;                   		// 0x1040 (0x0004) [0x0000000000000000]              
	float                                              CountdownDesaturation;                            		// 0x1044 (0x0004) [0x0000000000000000]              
	struct FVector                                     CountdownHighLights;                              		// 0x1048 (0x000C) [0x0000000000000000]              
	struct FVector                                     CountdownMidTones;                                		// 0x1054 (0x000C) [0x0000000000000000]              
	struct FVector                                     CountdownShadows;                                 		// 0x1060 (0x000C) [0x0000000000000000]              
	float                                              RoundBlendInTime;                                 		// 0x106C (0x0004) [0x0000000000000000]              
	float                                              RoundDuration;                                    		// 0x1070 (0x0004) [0x0000000000000000]              
	float                                              RoundBlendOutTime;                                		// 0x1074 (0x0004) [0x0000000000000000]              
	float                                              RoundInterpolationDuration;                       		// 0x1078 (0x0004) [0x0000000000000000]              
	float                                              RoundDesaturation;                                		// 0x107C (0x0004) [0x0000000000000000]              
	struct FVector                                     RoundHighLights;                                  		// 0x1080 (0x000C) [0x0000000000000000]              
	struct FVector                                     RoundMidTones;                                    		// 0x108C (0x000C) [0x0000000000000000]              
	struct FVector                                     RoundShadows;                                     		// 0x1098 (0x000C) [0x0000000000000000]              
	float                                              RoundOverBlendInTime;                             		// 0x10A4 (0x0004) [0x0000000000000000]              
	float                                              RoundOverDuration;                                		// 0x10A8 (0x0004) [0x0000000000000000]              
	float                                              RoundOverBlendOutTime;                            		// 0x10AC (0x0004) [0x0000000000000000]              
	float                                              RoundOverInterpolationDuration;                   		// 0x10B0 (0x0004) [0x0000000000000000]              
	float                                              RoundOverDesaturation;                            		// 0x10B4 (0x0004) [0x0000000000000000]              
	struct FVector                                     RoundOverHighLights;                              		// 0x10B8 (0x000C) [0x0000000000000000]              
	struct FVector                                     RoundOverMidTones;                                		// 0x10C4 (0x000C) [0x0000000000000000]              
	struct FVector                                     RoundOverShadows;                                 		// 0x10D0 (0x000C) [0x0000000000000000]              
	float                                              MatchOverBlendInTime;                             		// 0x10DC (0x0004) [0x0000000000000000]              
	float                                              MatchOverDuration;                                		// 0x10E0 (0x0004) [0x0000000000000000]              
	float                                              MatchOverBlendOutTime;                            		// 0x10E4 (0x0004) [0x0000000000000000]              
	float                                              MatchOverInterpolationDuration;                   		// 0x10E8 (0x0004) [0x0000000000000000]              
	float                                              MatchOverDesaturation;                            		// 0x10EC (0x0004) [0x0000000000000000]              
	struct FVector                                     MatchOverHighLights;                              		// 0x10F0 (0x000C) [0x0000000000000000]              
	struct FVector                                     MatchOverMidTones;                                		// 0x10FC (0x000C) [0x0000000000000000]              
	struct FVector                                     MatchOverShadows;                                 		// 0x1108 (0x000C) [0x0000000000000000]              
	float                                              FPMaxVelocity;                                    		// 0x1114 (0x0004) [0x0000000000000000]              
	float                                              FPMotionBlurAmount;                               		// 0x1118 (0x0004) [0x0000000000000000]              
	float                                              FPMotionBlurSoftEdge;                             		// 0x111C (0x0004) [0x0000000000000000]              
	float                                              FPCamRotationThreshold;                           		// 0x1120 (0x0004) [0x0000000000000000]              
	float                                              FPCamTranslationThreshold;                        		// 0x1124 (0x0004) [0x0000000000000000]              
	float                                              FPInterpolationDuration;                          		// 0x1128 (0x0004) [0x0000000000000000]              
	TArray< struct FAdvancedColorSenseStruct >         AdvancedColorSense;                               		// 0x112C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1789 ];

		return pClassPointer;
	};

	void eventFinishedPostProcessBlendingOut ( );
	void eventFinishedPostProcessBlendingDuration ( );
	void eventFinishedPostProcessBlendingIn ( );
	void eventUpdateMaterialParm ( );
	void SetFlashbangMaterial ( );
	void AllClearCombatPostProcess ( );
	void ClearCombatPostProcess ( );
	void InstantPostProcess ( );
	void CanPostProcessing ( );
	void SetMatchOverPostProcessColorizationSettings ( );
	void SetRoundOverPostProcessColorizationSettings ( );
	void SetRoundPostProcessColorizationSettings ( );
	void SetCountdownPostProcessColorizationSettings ( );
	void SetWarmupPostProcessColorizationSettings ( );
	void SetFlashbangPostProcessColorizationSettings ( );
	void SetExposedPostProcessColorizationSettings ( );
	void InitPostProcessSettings ( );
	void eventPostBeginPlay ( );
	void AllClearPostProcessSettingsOverride ( );
	void OverrideCombatPostProcessSettings ( );
};

UClass* UCombatLocalPlayer::pClassPointer = NULL;

// Class CombatGame.CombatPlayerControllerBase
// 0x01B6 (0x0902 - 0x074C)
class ACombatPlayerControllerBase : public AGamePlayerController
{
public:
	float                                              AirSpeed;                                         		// 0x074C (0x0004) [0x0000000000000000]              
	class ACombatHUD*                                  CBHUD;                                            		// 0x0750 (0x0008) [0x0000000000000000]              
	class UCBUIDataStore_PendingDialogMessage*         UIDataStore_PendingDialogMessage;                 		// 0x0758 (0x0008) [0x0000000000000000]              
	class UCBUIDataStore_ETC*                          UIDataStore_ETC;                                  		// 0x0760 (0x0008) [0x0000000000000000]              
	class ACombatPlayerReplicationInfo*                CombatPRI;                                        		// 0x0768 (0x0008) [0x0000000000000000]              
	unsigned long                                      bAimAssistEnabled : 1;                            		// 0x0770 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMeleeAssistEnabled : 1;                          		// 0x0770 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsLocalPC : 1;                                   		// 0x0770 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIgnoreWeaponInput : 1;                           		// 0x0770 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIgnoreInput : 1;                                 		// 0x0770 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bScreenShotRequest : 1;                           		// 0x0770 (0x0004) [0x0000000000000000] [0x00000020] 
	class UCameraAnimInst*                             CameraAnimPlayer;                                 		// 0x0774 (0x0008) [0x0000000000000000]              
	class UCameraAnimInst*                             CurrentCameraAnimInstant;                         		// 0x077C (0x0008) [0x0000000000000000]              
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x0784 (0x0164) [0x0000000000000000]              
	float                                              ZoomFOVRatio;                                     		// 0x08E8 (0x0004) [0x0000000000000000]              
	class ACBCheatManager*                             CombatCheatManager;                               		// 0x08EC (0x0008) [0x0000000000000000]              
	float                                              CurrentInputExpireTime;                           		// 0x08F4 (0x0004) [0x0000000000000000]              
	int                                                MaxWallHackCaptureCounter;                        		// 0x08F8 (0x0004) [0x0000000000000000]              
	int                                                CurrentWallHackCaptureCounter;                    		// 0x08FC (0x0004) [0x0000000000000000]              
	unsigned char                                      LastHackType;                                     		// 0x0900 (0x0001) [0x0000000000000000]              
	unsigned char                                      GRADE;                                            		// 0x0901 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1790 ];

		return pClassPointer;
	};

	void CrashClient ( );
	void CrashTest ( );
	void OnMissionEvent ( );
	void eventServerSendPingHigh ( );
	void eventSendPingHigh ( );
	void ClearLastHackType ( );
	void eventServerSendHackReport ( );
	void eventSendHackReport ( );
	void CanPickupSupplies ( );
	void CanPickupWeapon ( );
	void ServerPickupWeapon ( );
	void PickupWeapon ( );
	void GetTargetedPickupWeapon ( );
	void HidePickupWeaponUI ( );
	void ShowPickupWeaponUI ( );
	void eventShowHitMark ( );
	void eventIgnoreSpawnProtection ( );
	void ServerSetDroppedWeaponLocation ( );
	void SetGameModeGuide ( );
	void NotifyChangedBoosterItem ( );
	void SetGrade ( );
	void CanUseConsoleCommand ( );
	void ToggleObserverTeamColor ( );
	void SendToConsole ( );
	void ConsoleKey ( );
	void ServerPause ( );
	void Pause ( );
	void ClearCameraEffect ( );
	void eventRemoveCameraEffect ( );
	void eventSpawnCameraEffect ( );
	void ClientSpawnCameraLensEffect ( );
	void PlayExplotionBeepSound ( );
	void SetBeDamaged ( );
	void GetCombatTeamGameHUD ( );
	void UpdateMissionObjectIconList ( );
	void InitMissionActor ( );
	void SetMissionActorState ( );
	void UpdateObserverWeaponInfo ( );
	void eventUpdateHP ( );
	void StopCameraAnim ( );
	void PlayCameraAnim ( );
	void eventClientPlayCameraAnim ( );
	void FindBestSoundMode ( );
	void eventPlayerTick ( );
	void SendDedicatedServerCheat ( );
	void Dev_UpdateDevelopeMessage ( );
	void ClientDevelopeMessage ( );
	void PlayDyingViewTarget ( );
	void ToggleSpectatingCameraMode ( );
	void ViewAPlayer ( );
	void ShowProtocolChat ( );
	void CreateMatchBlock ( );
	void RestoreMouse ( );
	void BackUpMouse ( );
	void eventNotifyCaptureMessage ( );
	void CaptureScreen ( );
	void ServerSetOnlyAimAssist ( );
	void SetOnlyAimAssist ( );
	void ShowDialog ( );
	void UpdateDisconnectMatchServerTime ( );
	void GetDisconnectMatchServerTime ( );
	void AddCheats ( );
	void eventNotifyKeyInputSignal ( );
	void UpdateInputExpireTime ( );
	void NeedCheckingInputExpireTime ( );
	void GetInputExpireTime ( );
	void GetPlayerReplicationInfo ( );
	void ClientSetHUD ( );
	void SpawnDefaultHUD ( );
	void PopDialogMessage ( );
	void PushDialogMessage ( );
	void GetInputExpireGoalScene ( );
	void SetInputExpireGoalScene ( );
	void ReceivedPlayer ( );
	void CheckInputExpireTimer ( );
	void ForceGarbageCollection ( );
	void RCFForceGarbageCollection ( );
	void eventInitInputSystem ( );
	void ResetFromWarmup ( );
	void ResetUI ( );
	void GetOSC ( );
	void eventIsWeaponInputIgnored ( );
	void ClientIgnoreWeaponInput ( );
	void IgnoreWeaponInput ( );
	void IsLocalPC ( );
	void eventIsIgnoreInput ( );
	void SetIgnoreInput ( );
	void ResetPlayerMovementInput ( );
	void UTrace ( );
	void TeamSay ( );
	void Say ( );
	void ReceivedPlayerReplicationInfo ( );
	void InitPlayerReplicationInfo ( );
	void VolumeBasedDestroy ( );
	void eventOutsideWorldBounds ( );
	void PreBeginPlay ( );
	void SetDefaultWorldFOV ( );
	void GetDefaultWorldFOV ( );
	void ClearDebugRegisters ( );
	void CheckDebugRegisters ( );
	void InitPostProcessMITV ( );
	void SetOverridePostProcessChain ( );
	void GetOverridePostProcessChainIndex ( );
	void SetPostProcessChain ( );
	void GetPostProcessChainIndex ( );
	void SetGamma ( );
	void SendDedicatedServerCheatNative ( );
	void GetZoomState ( );
};

UClass* ACombatPlayerControllerBase::pClassPointer = NULL;

// Class CombatGame.CombatPC
// 0x028E (0x0B90 - 0x0902)
class ACombatPC : public ACombatPlayerControllerBase
{
public:
	struct FName                                       CameraActorTag;                                   		// 0x0904 (0x0008) [0x0000000000000000]              
	struct FName                                       CameraStyle;                                      		// 0x090C (0x0008) [0x0000000000000000]              
	float                                              SprayUseDelay;                                    		// 0x0914 (0x0004) [0x0000000000000000]              
	float                                              SprayDistance;                                    		// 0x0918 (0x0004) [0x0000000000000000]              
	int                                                SprayCount;                                       		// 0x091C (0x0004) [0x0000000000000000]              
	float                                              SprayLifeSpan;                                    		// 0x0920 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SpraySound_Fail;                                  		// 0x0924 (0x0008) [0x0000000000000000]              
	TArray< class ACombatSprayDecalActor* >            SprayDecalActors;                                 		// 0x092C (0x0010) [0x0000000000000000]              
	int                                                SprayLastUseIndex;                                		// 0x093C (0x0004) [0x0000000000000000]              
	float                                              SprayLastUseTime;                                 		// 0x0940 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSprayPreview : 1;                                		// 0x0944 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNoCrosshair : 1;                                 		// 0x0944 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInitializedPresetList : 1;                       		// 0x0944 (0x0004) [0x0000000000170000] [0x00000004] ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	unsigned long                                      bKeepSpectatingCamMode : 1;                       		// 0x0944 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bReadyForFlashbang : 1;                           		// 0x0944 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCaptureFlashbang : 1;                            		// 0x0944 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bLastSendCrouched : 1;                            		// 0x0944 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bLastSendMoving : 1;                              		// 0x0944 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCanDisplayHitInfomation : 1;                     		// 0x0944 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanDisplayGainAward : 1;                         		// 0x0944 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanDisplayScoring : 1;                           		// 0x0944 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCanDisplayPreset : 1;                            		// 0x0944 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bQuickPresetChange : 1;                           		// 0x0944 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      BeDamaged : 1;                                    		// 0x0944 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      UISoundPlaying : 1;                               		// 0x0944 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bForceRestart : 1;                                		// 0x0944 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHideTeamIFF : 1;                                 		// 0x0944 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bVivoxSet : 1;                                    		// 0x0944 (0x0004) [0x0000000000000000] [0x00020000] 
	class ACombatSprayDecalActor*                      SprayPreviewDecalActor;                           		// 0x0948 (0x0008) [0x0000000000000000]              
	float                                              SprayPreviewDelay;                                		// 0x0950 (0x0004) [0x0000000000000000]              
	float                                              SprayLastPreviewTime;                             		// 0x0954 (0x0004) [0x0000000000000000]              
	int                                                CachedSprayID;                                    		// 0x0958 (0x0004) [0x0000000000000000]              
	int                                                LocalPresetList_First[ 0x9 ];                     		// 0x095C (0x0024) [0x0000000000180000]              ( CPF_Component )
	int                                                LocalPresetList_Sec[ 0x9 ];                       		// 0x0980 (0x0024) [0x0000000000210000]              ( CPF_Travel )
	int                                                LocalPresetList_Third[ 0x9 ];                     		// 0x09A4 (0x0024) [0x00000000002A0000]              ( CPF_EditConst | CPF_Component )
	unsigned char                                      CurrentPreset;                                    		// 0x09C8 (0x0001) [0x0000000000330000]              ( CPF_Travel | CPF_EditConst )
	unsigned char                                      ReservedPreset;                                   		// 0x09C9 (0x0001) [0x0000000000340000]              ( CPF_GlobalConfig )
	unsigned char                                      LastSendPhysics;                                  		// 0x09CA (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentMouseSensMode;                             		// 0x09CB (0x0001) [0x0000000000000000]              
	unsigned char                                      LockedPresetSceneCount;                           		// 0x09CC (0x0001) [0x0000000000350000]              ( CPF_Travel | CPF_GlobalConfig )
	unsigned char                                      LockedPresetSceneCountMax;                        		// 0x09CD (0x0001) [0x0000000000360000]              ( CPF_EditConst | CPF_GlobalConfig )
	unsigned char                                      PlayerStartType;                                  		// 0x09CE (0x0001) [0x0000000000370000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	unsigned char                                      LogoutReason;                                     		// 0x09CF (0x0001) [0x0000000000000000]              
	float                                              LastPresetPressTime;                              		// 0x09D0 (0x0004) [0x0000000000000000]              
	float                                              PresetInputDelay;                                 		// 0x09D4 (0x0004) [0x0000000000000000]              
	class UPostProcessChain*                           EntryPostProcessChain;                            		// 0x09D8 (0x0008) [0x0000000000000000]              
	TArray< class UPostProcessChain* >                 OldPostProcessChain;                              		// 0x09E0 (0x0010) [0x0000000000000000]              
	class UCombatLocalPlayer*                          CBLocalPlayer;                                    		// 0x09F0 (0x0008) [0x0000000000000000]              
	float                                              CheckSpectatorDelay;                              		// 0x09F8 (0x0004) [0x0000000000000000]              
	struct FName                                       DefaultSpectatingCamMode;                         		// 0x09FC (0x0008) [0x0000000000000000]              
	struct FName                                       SavedSpectatingCamMode;                           		// 0x0A04 (0x0008) [0x0000000000000000]              
	class UCombatStatStorageBase*                      StatStorage;                                      		// 0x0A0C (0x0008) [0x0000000000000000]              
	class UCombatLogData*                              CombatLogData;                                    		// 0x0A14 (0x0008) [0x0000000000000000]              
	float                                              NetMoveDeltaWhenNotMoved;                         		// 0x0A1C (0x0004) [0x0000000000000000]              
	struct FRotator                                    LastSentRotation;                                 		// 0x0A20 (0x000C) [0x0000000000000000]              
	float                                              InputExpireTime;                                  		// 0x0A2C (0x0004) [0x0000000000000000]              
	class ACombatPawn*                                 CombatPawn;                                       		// 0x0A30 (0x0008) [0x0000000000000000]              
	int                                                DropClaymoreCount;                                		// 0x0A38 (0x0004) [0x0000000000000000]              
	class ACombatDroppedWeapon*                        DroppedWeapon;                                    		// 0x0A3C (0x0008) [0x0000000000000000]              
	class ACombatDroppedSupplies*                      DroppedSupplies[ 0x2 ];                           		// 0x0A44 (0x0010) [0x0000000000000000]              
	TArray< class ACombatProjectile* >                 DropClaymoreList;                                 		// 0x0A54 (0x0010) [0x0000000000000000]              
	class UPresetManager*                              PresetManager;                                    		// 0x0A64 (0x0008) [0x0000000000000000]              
	class UCombatHUD_Preset*                           presetUI;                                         		// 0x0A6C (0x0008) [0x0000000000000000]              
	class ACombatTeamGameHUD*                          myCombatTeamGameHUD;                              		// 0x0A74 (0x0008) [0x0000000000000000]              
	class UCombatHUD_IFFObject*                        KillerIFFObject;                                  		// 0x0A7C (0x0008) [0x0000000000000000]              
	int                                                AdjustPositionCounter;                            		// 0x0A84 (0x0004) [0x0000000000000000]              
	int                                                AdjustPositionUpdateCounter;                      		// 0x0A88 (0x0004) [0x0000000000000000]              
	float                                              SpectatingMouseSens;                              		// 0x0A8C (0x0004) [0x0000000000000000]              
	class ACombatMinimapActor*                         CurrentMinimapActor;                              		// 0x0A90 (0x0008) [0x0000000000000000]              
	TArray< struct FDisplayOnlyPawnLocationInfo >      AlivePlayerPawnLocationList;                      		// 0x0A98 (0x0010) [0x0000000000000000]              
	TArray< struct FDisplayOnlyPawnLocationInfo >      DeadPlayerPawnLocationList;                       		// 0x0AA8 (0x0010) [0x0000000000000000]              
	int                                                CriticalDamageamount;                             		// 0x0AB8 (0x0004) [0x0000000000000000]              
	TArray< class ACombatSkillActor_UAV* >             UAVActorList;                                     		// 0x0ABC (0x0010) [0x0000000000000000]              
	TArray< class ACombatGuy_NPC* >                    SentrygunList;                                    		// 0x0ACC (0x0010) [0x0000000000000000]              
	TArray< class ACombatGuy_NPC* >                    TrophyturretList;                                 		// 0x0ADC (0x0010) [0x0000000000000000]              
	TArray< struct FGlobalOutlineEvent >               GlobalOutlineEventList;                           		// 0x0AEC (0x0010) [0x0000000000000000]              
	float                                              CheckViewTargetLookAtDuration;                    		// 0x0AFC (0x0004) [0x0000000000000000]              
	class UCombatLockedPresetScene*                    LockedPresetScene;                                		// 0x0B00 (0x0008) [0x0000000000000000]              
	struct FName                                       LockedPresetSceneState;                           		// 0x0B08 (0x0008) [0x0000000000380000]              ( CPF_Component )
	class ACombatPawn_AttackSkillActor*                DeployedSkillActors[ 0x2 ];                       		// 0x0B10 (0x0010) [0x0000000000000000]              
	TArray< unsigned long >                            Redeploying;                                      		// 0x0B20 (0x0010) [0x0000000000000000]              
	class UCombatHUD_SpawnPointSelection*              spawnPointUI;                                     		// 0x0B30 (0x0008) [0x0000000000000000]              
	class UCombatInGameBattleLog*                      InGameBattleLog;                                  		// 0x0B38 (0x0008) [0x0000000000000000]              
	int                                                AdvancedColorIndex;                               		// 0x0B40 (0x0004) [0x0000000000000000]              
	float                                              CheckMouseSensStartTime;                          		// 0x0B44 (0x0004) [0x0000000000000000]              
	float                                              CheckMouseSensLoopDelay;                          		// 0x0B48 (0x0004) [0x0000000000000000]              
	float                                              CheckMouseSensEndTime;                            		// 0x0B4C (0x0004) [0x0000000000000000]              
	struct FString                                     LoginTokenPartA;                                  		// 0x0B50 (0x0010) [0x0000000000000000]              
	struct FString                                     LoginTokenPartB;                                  		// 0x0B60 (0x0010) [0x0000000000000000]              
	struct FString                                     JoinTokenPartA;                                   		// 0x0B70 (0x0010) [0x0000000000000000]              
	struct FString                                     JoinTokenPartB;                                   		// 0x0B80 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1791 ];

		return pClassPointer;
	};

	void Speech ( );
	void UpdateTeamOutline ( );
	void SetTeamOutline ( );
	void ServerSetMaxTickRate ( );
	void eventSetMaxTickRate ( );
	void GameSurrenderReply ( );
	void OnExitGame ( );
	void ShowStatusEffectUI ( );
	void UpdateStatusEffectUI ( );
	void ShowAfterImageEffect ( );
	void PlayPostProcess ( );
	void ShowFlashbangEffect ( );
	void SetDisplayTables ( );
	void SetDelayedDisplayTables ( );
	void GatheringLastTakeHitInfo ( );
	void eventPlayerTick ( );
	void OnSprayDestroyed ( );
	void ResetSpray ( );
	void GetSprayDrawData ( );
	void DrawSprayDecal ( );
	void GetActivatedSprayID ( );
	void ServerUseSpray ( );
	void GetUsableCombatSprayDecalActor ( );
	void CanUseSpray ( );
	void OnSprayDrawn ( );
	void UseSpray ( );
	void ServerChangeName ( );
	void SetName ( );
	void ToggleTeamChat ( );
	void ToggleAllChat ( );
	void ShowBroadcastingMap ( );
	void IsBorderless ( );
	void RemoveMissionActorIcon ( );
	void UpdateMissionObjectIconList ( );
	void InitMissionActor ( );
	void SetMissionActorState ( );
	void UpdateHP ( );
	void ClearViewTargetInfo ( );
	void UpdateViewTargetInfo ( );
	void eventReceiveSuicideMessage ( );
	void eventReceiveKillDeathMessage ( );
	void eventReceiveActorKillMessage ( );
	void NotifyChangeTest ( );
	void eventDisplayKillerIFF ( );
	void KeyBindingSettingFromProfile ( );
	void FindBestSoundMode ( );
	void StopExplotionBeepSound ( );
	void PlayExplotionBeepSound ( );
	void TryJump ( );
	void ClearCheckJump ( );
	void CheckJump ( );
	void UpdatePlayerVoice ( );
	void eventUpdateDeadPlayerPawnLocationList ( );
	void RegisterDeadPlayerPawnLocationList ( );
	void CheckUAV ( );
	void eventUpdateAlivePlayerPawnLocationList ( );
	void RemoveAlivePlayerPawnLocationList ( );
	void UpdateLookAtAllAlivePawns ( );
	void DecompressPawnLocationXY ( );
	void CompressPawnLocationXY ( );
	void ClientDisplayTestMsg ( );
	void NotifyWeaponEquipped ( );
	void NotifyWeaponReloadedUI ( );
	void ServerSetQuickPresetChange ( );
	void StartSecZoom ( );
	void StartAltFire ( );
	void ThrowWeapon ( );
	void StartFire ( );
	void eventSetAdvancedColor ( );
	void SetDOFValue ( );
	void IgnoreLookInput ( );
	void IgnoreMoveInput ( );
	void InitPawnVelocity ( );
	void CleanOutSavedMoves ( );
	void ServerInitPawnVelocity ( );
	void PauseRumbleForAllPlayers ( );
	void GetSpawnAreaIndex ( );
	void SettoDefaultAll ( );
	void WriteProfileSettings ( );
	void ServerSuicide ( );
	void SetProfileRangeData ( );
	void ViewProfileRangeData ( );
	void GetProfileDefaultAutoScaleByName ( );
	void GetProfileAutoScaleByName ( );
	void GetRangedProfileDefaultMouseSensByName ( );
	void GetRangedProfileMouseSensByName ( );
	void GameOptionSettingFromProfile ( );
	void SetCurrentMouseSensMode ( );
	void SettingsFromProfile ( );
	void RegisterCustomPlayerDataStores ( );
	void NotifyChangedSkillOption ( );
	void NotifyChangedCR ( );
	void ShowWholeMap ( );
	void ToggleHideTeamIFF ( );
	void UpdateHoldmode ( );
	void UpdateTeamIFFView ( );
	void UpdateFlipMesh ( );
	void GetMyCombatWeaponSkillGroupID ( );
	void StartUseSkill ( );
	void NotifyPresetInitialized ( );
	void GetCurrentPreset ( );
	void GetPresetManager ( );
	void IsPlayerOperating ( );
	void GetTargetedPickupWeapon ( );
	void UpdatePickupWeaponLocatorIcon ( );
	void ShowPickupWeaponUI ( );
	void HidePickupWeaponUI ( );
	void TossWeapon ( );
	void GetGrenadeUIType ( );
	void GetWeaponUIType ( );
	void UpdateCachedNotifyWeaponAmmoChanged ( );
	void NotifyWeaponAmmoChanged ( );
	void GetInputExpireTime ( );
	void ClientSwitchToBestWeapon ( );
	void TryToSwitchToBestWeapon ( );
	void TryToForceSwitchToBestWeapon ( );
	void LightmassSettings ( );
	void ScreenshotMode ( );
	void SetCameraRollKeyBind ( );
	void SwitchToPreviousWeapon ( );
	void FixFOV ( );
	void ShowDynamicLight ( );
	void StaticMeshDynamicLight ( );
	void ClearDeadPawns ( );
	void ResetDecalManager ( );
	void ForceUpdatePostProcess ( );
	void ClientGRIGotoState ( );
	void eventProcessPlayerStatData ( );
	void ProgressionBombDefuseCountdown ( );
	void HideBombHUDIcons ( );
	void FocusChat ( );
	void eventTriggerDummyClientInput ( );
	void PlayerStartErrorMessage ( );
	void PrintHUDLogInClient ( );
	void ExecPrintHUDLog ( );
	void WriteClassListLog ( );
	void DediSvrCmd ( );
	void ExecDedicatedServerConsoleCmd ( );
	void ToggleAutoAssist ( );
	void SetAutoAssist ( );
	void DrawHUD ( );
	void ServerMove ( );
	void ReplicateMove ( );
	void GetNetMoveDeltaWhenNotMoved ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	void AllClearPostProcess ( );
	void ClearPostProcess ( );
	void RealMatchEnd ( );
	void StartMatchOverLosePostProcess ( );
	void StartMatchOverWinPostProcess ( );
	void StartRoundOverPostProcess ( );
	void StartRoundLosePostProcess ( );
	void StartRoundWinPostProcess ( );
	void StartCountdownPostProcess ( );
	void StartWarmupPostProcess ( );
	void DisableMaterialPostprocess ( );
	void CheckFlashBangSoundMode ( );
	void CheckFlashBangPP ( );
	void DisableSceneCapture ( );
	void eventSetFlashbangTexture ( );
	void eventFlashbangPostProcess ( );
	void IsCombatChampionshipObserverPC ( );
	void IsFlashbangPostProcess ( );
	void StartFlashbangPostProcess ( );
	void ToggleHideHUD ( );
	void StartExposedPostProcess ( );
	void ShowMenu ( );
	void eventReceiveLocalizedMessageEx ( );
	void eventServerNotifyWeaponKillCount ( );
	void ServerNotifyClientReady ( );
	void eventOnNotifyDedicatedServerLog ( );
	void SetClientReady ( );
	void PlaySeeDeathVoice ( );
	void SetKillCamMessage ( );
	void SetKillCamMessageBySuicide ( );
	void ClientNotifyKilled ( );
	void eventReplicatedEvent ( );
	void UpdateLocalPreset ( );
	void HandleWalking ( );
	void SetWalk ( );
	void ToggleWalk ( );
	void GetPlayerName ( );
	void GetAdjustedAimForFPS ( );
	void ServerReleaseUse ( );
	void ReleaseUse ( );
	void TriggerUnused ( );
	void Use ( );
	void ServerLookBack ( );
	void LookBack ( );
	void CanPickupSupplies ( );
	void CanPickupWeapon ( );
	void SendDisplayLocalMessage_AutoToClient ( );
	void ResetFromWarmup ( );
	void ClientReset ( );
	void ResetCameraMode ( );
	void ClientResetLocationToPlayerStart ( );
	void ResetLocationToPlayerStart ( );
	void NotifyClientReset ( );
	void eventServerSetSteamID ( );
	void SetSteamId ( );
	void ToggleVivoxInput ( );
	void VivoxReset ( );
	void VivoxJoin ( );
	void ClientVivoxChannelLeave ( );
	void ClientVivoxSetJoinToken_BPart ( );
	void ClientVivoxSetJoinToken_APart ( );
	void VivoxLogin ( );
	void VivoxGenerateJoinToken ( );
	void VivoxGenerateLoginToken ( );
	void ServerVivoxRequestJoinToken ( );
	void ClientSetVivoxTeamChannelUri ( );
	void ServerVivoxSetTeamChannelInfo ( );
	void VivoxRequestJoinToken ( );
	void ClientVivoxSetLoginToken_BPart ( );
	void ClientVivoxSetLoginToken_APart ( );
	void ServerVivoxRequestLoginToken ( );
	void VivoxRequestLoginToken ( );
	void eventReceivedPlayer ( );
	void ShowHelpImage ( );
	void ShowScoreBoard ( );
	void ChangeCR ( );
	void GetCR ( );
	void ClearViewTargetKillerOutline ( );
	void IsRoundEnding ( );
	void SetRoundEndState ( );
	void RoundHasEnded ( );
	void RemoveAllDeadPlayerPawnLocationList ( );
	void ClientRoundEnding ( );
	void ReadyToRoundEnd ( );
	void ClientArbitratedMatchEnded ( );
	void NotifyGameEnded ( );
	void GameHasEnded ( );
	void ToggleGrenadeLauncher ( );
	void ToggleLaserSite ( );
	void ToggleSilencer ( );
	void SetPortraitIcon ( );
	void UpdateChaItemFX ( );
	void DoStare ( );
	void DoReload ( );
	void LandingShake ( );
	void eventSetPostProcessAA_FXAA ( );
	void ExecPostProcessAA_FXAA ( );
	void eventMotionBlurSoftEdgeKernelSize ( );
	void TogglePP ( );
	void eventSetPostProcessShowInGame ( );
	void GetMaterialInterfaceInPPE ( );
	void eventGetPostProcessEffect ( );
	void GetPostProcessChain ( );
	void RemoveAllPostProcessingChains ( );
	void RemovePostProcessingChain ( );
	void GetPlayerPostProcessChainsSize ( );
	void InsertPostProcessingChain ( );
	void eventInitInputSystem ( );
	void eventReceivedReservedPreset ( );
	void IsChangeSpectatingCameraMode ( );
	void SearchForViewTarget ( );
	void ServerSetSpectatorLocAndRotation ( );
	void SetSpectatorLocAndRotation ( );
	void PlayDyingViewTarget ( );
	void PawnDied ( );
	void CheckSpectator ( );
	void ClientSetCameraMode ( );
	void ServerSetCameraMode ( );
	void ServerCamera ( );
	void BecomeViewTarget ( );
	void SetCameraMode ( );
	void ServerPresetWeapon ( );
	void RequestSetPreset ( );
	void ToggleDisplaySelectingWeapon ( );
	void ServerSetPlayerStartType ( );
	void SetPlayerStartType ( );
	void SetSpawnPoint ( );
	void PresetWeapon ( );
	void CanUseLockedPresetScene ( );
	void ServerDecisionAtLockPresetScene ( );
	void DecisionAtLockPresetScene ( );
	void SwitchWeapon ( );
	void HideSkillActorIndicator ( );
	void ShowSkillActorIndicator ( );
	void GetAdjustedAimFor ( );
	void SetTimerRestoreGameKillCount ( );
	void timerRestoreGameKillCount ( );
	void RestoreGameKillCount ( );
	void DisplayDebug ( );
	void RemoveUISoundPlayingFunc ( );
	void NotifyKillMarkSoundPlaying ( );
	void NotifyUISoundPlaying ( );
	void RemoveDamageFunc ( );
	void SetBeDamaged ( );
	void IsDamageCameraShake ( );
	void NotifyClientTakeHit ( );
	void ShowHitMark ( );
	void CanSwitchWeapon ( );
	void CheckJumpOrDuck ( );
	void DisableDebugCamera ( );
	void AimHelpModifier ( );
	void ProcessViewRotation ( );
	void eventGetForegroundFOVAngle ( );
	void AdjustFOV ( );
	void CheckBulletWhip ( );
	void UnPossess ( );
	void ApplyArmorDataIcon ( );
	void ApplyInstanceItem ( );
	void ApplyReservedPreset ( );
	void ApplyPresetMouseSensitive ( );
	void GivePawn ( );
	void VivoxInitInputDevice ( );
	void ReceivedPlayerReplicationInfo ( );
	void SetLocalPawn ( );
	void eventPossess ( );
	void SetUseTiltForwardAndBack ( );
	void SetOnlyUseControllerTiltInput ( );
	void SetControllerTiltActive ( );
	void IsControllerTiltActive ( );
	void GetTargetAdhesionFrictionTarget ( );
	void GetNextViewablePlayer ( );
	void ClientRestart ( );
	void ResetUI ( );
	void SetSkyLight ( );
	void RestSkill ( );
	void SetSpectatingCamMode ( );
	void UpdateSpectatingCameraMode ( );
	void DelayedServerVerifyViewTarget ( );
	void ClientSetViewTarget ( );
	void SetViewTarget ( );
	void eventGetPlayerViewPoint ( );
	void eventSpawnPlayerCamera ( );
	void Reset ( );
	void GetCombatTeamGameHUD ( );
	void ClientSetHUD ( );
	void SpawnDefaultHUD ( );
	void eventClientWasKicked ( );
	void InitPlayerReplicationInfo ( );
	void eventDestroyed ( );
	void CheckDXTable ( );
	void eventPostBeginPlay ( );
	void ResetLocationToWorldCamera ( );
	void InitStatStorage ( );
	void eventPreBeginPlay ( );
	void CheckViewTargetLookAt ( );
	void SetLocalPresetItemID ( );
	void GetLocalPresetItemID ( );
	void IsMouseAvailable ( );
	void IsKeyboardAvailable ( );
	void SetHardwarePhysicsEnabled ( );
};

UClass* ACombatPC::pClassPointer = NULL;

// Class CombatGame.CombatLockedPresetScene
// 0x001C (0x00CC - 0x00B0)
class UCombatLockedPresetScene : public UInteraction
{
public:
	unsigned long                                      bDisplayLockPreset : 1;                           		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayPresetSelectWaitingScene : 1;             		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelected : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bForceShowing : 1;                                		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FKeyBindingInfo                             LockPresetSceneKeyBindings;                       		// 0x00B4 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1792 ];

		return pClassPointer;
	};

	void UpdateProgressBarUI ( );
	void UpdateLockedPresetSceneCount ( );
	void OnForceViewMarking ( );
	void OnSelect ( );
	void UpdateState ( );
	void OnEndScene ( );
	void OnStartScene ( );
	void Initialize ( );
};

UClass* UCombatLockedPresetScene::pClassPointer = NULL;

// Class CombatGame.CombatLog
// 0x0000 (0x0060 - 0x0060)
class UCombatLog : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1793 ];

		return pClassPointer;
	};

	void TestPrint_NotifyHit ( );
	void TestPrint_NotifyFire ( );
	void AllocateFireData ( );
	void TestPrint_NotifyMatchOver ( );
	void TestPrint_NotifyRoundOver ( );
	void UpdateUserData ( );
	void InitUserData ( );
	void NotifyMatchOver ( );
	void NotifyMatchStart ( );
	void NotifyMatchStart_Test ( );
	void NotifyDesertion ( );
	void NotifyIntrude ( );
	void NotifyRoundOver ( );
	void NotifyRoundStart ( );
	void OnMatchFinish ( );
	void GetHitPartName ( );
	void GetWeaponName ( );
	void GetUserName ( );
	void GetTeamName ( );
	void Init ( );
	void OnInit ( );
	void SaveWeaponName ( );
	void SaveUserName ( );
	void SetMode ( );
	void SetMapName ( );
};

UClass* UCombatLog::pClassPointer = NULL;

// Class CombatGame.CombatLogData
// 0x001C (0x007C - 0x0060)
class UCombatLogData : public UObject
{
public:
	TArray< struct FWeaponFireData >                   FireDataList;                                     		// 0x0060 (0x0010) [0x0000000000000000]              
	class ACombatPC*                                   DataOwner;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	int                                                TransientFireCount;                               		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1794 ];

		return pClassPointer;
	};

	void Init ( );
	void eventGetFireData ( );
};

UClass* UCombatLogData::pClassPointer = NULL;

// Class CombatGame.CombatLuaSystem
// 0x0000 (0x0060 - 0x0060)
class UCombatLuaSystem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1795 ];

		return pClassPointer;
	};

	void RequestMedalProgress ( );
	void EndString ( );
	void EndFloat ( );
	void EndInt ( );
	void EndBool ( );
	void EndVoid ( );
	void args ( );
	void ArgB ( );
	void ArgF ( );
	void ArgI ( );
	void BeginCall ( );
	void TriggerLuaCallback ( );
	void TriggerLuaCallbackByCodename ( );
	void PrintLog ( );
	void RunScript ( );
	void Reload ( );
};

UClass* UCombatLuaSystem::pClassPointer = NULL;

// Class CombatGame.CombatMailTransaction
// 0x005C (0x00BC - 0x0060)
class UCombatMailTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0060 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatMailTransaction.MailBoxListMap
	int                                                TotalPage;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                NewCount[ 0x3 ];                                  		// 0x00AC (0x000C) [0x0000000000000000]              
	int                                                ExpiresCount;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1796 ];

		return pClassPointer;
	};

	void GetExpiresCount ( );
	void GetNewCount ( );
	void GetTotalPage ( );
	void UpdateMailBoxState ( );
	void GetMailBoxList ( );
	void GetMailBoxInfo ( );
	void AddNewMailBox ( );
};

UClass* UCombatMailTransaction::pClassPointer = NULL;

// Class CombatGame.CombatMain_Base
// 0x000C (0x00AC - 0x00A0)
class UCombatMain_Base : public UGFxObject
{
public:
	class UCombatGFxMoviePlayer*                       Owner;                                            		// 0x00A0 (0x0008) [0x0000000000000000]              
	unsigned long                                      bShowMouse : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBackUpMouse : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1797 ];

		return pClassPointer;
	};

	void KeyEvent ( );
	void CallSetVoiceChatPlayerPosition ( );
	void CallSetSystemCounterPosition ( );
	void CallPlaySound ( );
	void CallSetDialogButtonsDisabled ( );
	void CallUnloadDialog ( );
	void CallLoadDialog ( );
	void CallHideMouse ( );
	void CallShowMouse ( );
	void CallHide ( );
	void CallShow ( );
	void RestoreMouse ( );
	void BackUpMouse ( );
	void ToggleMouse ( );
	void HideMouse ( );
	void ShowMouse ( );
	void IsShowMouse ( );
	void Init ( );
};

UClass* UCombatMain_Base::pClassPointer = NULL;

// Class CombatGame.CombatMain_FrontEnd
// 0x0004 (0x00B0 - 0x00AC)
class UCombatMain_FrontEnd : public UCombatMain_Base
{
public:
	unsigned long                                      bPwTextFocus : 1;                                 		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowWall : 1;                                    		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1798 ];

		return pClassPointer;
	};

	void receiveDialogInputTxtGetFocus ( );
	void receiveFrontEndTestAwesomium ( );
	void receiveFrontEndCommonEscKey ( );
	void CallHideImeLangBar ( );
	void CallShowImeLangBar ( );
	void CallHideLoadingWall ( );
	void CallShowLoadingWall ( );
	void CallHideTransparentWall ( );
	void CallShowTransparentWall ( );
	void CallClearFrontEndImage ( );
	void CallShowScene ( );
	void CallUseSceneTransition ( );
	void CallHideCenterUI ( );
	void HideLoadingWall ( );
	void ShowLoadingWall ( );
	void HideTransparentWall ( );
	void ShowTransparentWall ( );
	void ShowScene ( );
	void UseSceneTransition ( );
	void Init ( );
	void IsShowWall ( );
	void IsPwTextFocus ( );
};

UClass* UCombatMain_FrontEnd::pClassPointer = NULL;

// Class CombatGame.CombatMapInfo
// 0x0004 (0x0064 - 0x0060)
class UCombatMapInfo : public UMapInfo
{
public:
	float                                              VisibilityModifier;                               		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1799 ];

		return pClassPointer;
	};

};

UClass* UCombatMapInfo::pClassPointer = NULL;

// Class CombatGame.CombatMatchroomPlayerData
// 0x0000 (0x0060 - 0x0060)
class UCombatMatchroomPlayerData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1800 ];

		return pClassPointer;
	};

	void GetPeaceMakerClanExp_InGame ( );
	void GetViperCircleClanExp_InGame ( );
	void GetPeaceMakerClanEmblemID_InGame ( );
	void GetViperCircleClanEmblemID_InGame ( );
	void GetPeaceMakerClanName_InGame ( );
	void GetViperCircleClanName_InGame ( );
	void GetModeUIInfo ( );
	void GetRequiredClanMember ( );
	void HasRequiredClanMember ( );
	void isMatchroomUserHavePenalty ( );
	void isMatchroomUsersHavePenalty ( );
	void GetMatchroomPlayerTierData ( );
	void GetRightCompUserList ( );
	void GetLeftCompUserList ( );
	void GetRightTeamTierPoint ( );
	void GetLeftTeamTierPoint ( );
	void GetWinGoalText ( );
	void SetWinGoalText ( );
	void GetPeaceMakerRankPoint ( );
	void GetViperCircleRankPoint ( );
	void GetPeaceMakerClanExp ( );
	void GetViperCircleClanExp ( );
	void GetPeaceMakerClanEmblemID ( );
	void GetViperCircleClanEmblemID ( );
	void GetPeaceMakerClanName ( );
	void GetViperCircleClanName ( );
	void GetPeaceMakerClanID ( );
	void GetViperCircleClanID ( );
	void GetRoomPassword ( );
	void GetAllowedLevel ( );
	void GetGameOption ( );
	void GetTitleString ( );
	void GetTitleNumber ( );
	void GetTitleType ( );
	void GetOpenType ( );
	void ClearMatchFinishErrorCode ( );
	void ClearMatchFinishReason ( );
	void ClearReturnFromInGameErrorCode ( );
	void ClearReturnFromInGameReason ( );
	void GetMacthFinishErrorCode ( );
	void GetMatchFinishReason ( );
	void GetReturnFromInGameErrorCode ( );
	void GetReturnFromInGameReason ( );
	void GetUserName ( );
	void GetUserID ( );
	void GetCurrentModeGroupRefIndex ( );
	void GetCurrentRealMapRefIndex_forRandom ( );
	void GetCurrentMapRefIndex ( );
	void GetCurrentModeRefIndex ( );
	void GetCurrentMissionRefIndex ( );
	void GetCurrentMatchroomMaxPlayerCount ( );
	void GetCurrentMatchroomState ( );
	void GetCurrentMatchroomNumber ( );
	void GetAllMemberCount ( );
	void GetTeamMemberCountForUserState ( );
	void GetTeamMemberCount ( );
	void GetHostUserID ( );
	void GetUserState ( );
	void IsPlayer ( );
	void IsInMatchroom ( );
	void GetMyState ( );
	void IsHost ( );
	void AmIHost ( );
	void GetMyTeamIndex ( );
	void GetMyUserID ( );
	void GetMatchroomUserData_MyInfo ( );
	void GetAllObserverData ( );
	void GetObserverDataByUserID ( );
	void GetAllPlayerData_Sorted ( );
	void GetAllPlayerData ( );
	void GetPlayerDataByUserID ( );
	void GetMatchroomUserDataByUserID ( );
};

UClass* UCombatMatchroomPlayerData::pClassPointer = NULL;

// Class CombatGame.CombatMeshBuilder
// 0x0001 (0x0061 - 0x0060)
class UCombatMeshBuilder : public UObject
{
public:
	unsigned char                                      MeshCompositionType;                              		// 0x0060 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1801 ];

		return pClassPointer;
	};

	void SetMergedMaterial ( );
	void SetMergedMesh ( );
	void ComposeMeshByMerge ( );
	void DetachComponentsByPathNameFromSkeletalMeshComponent ( );
	void DetachComponentsByPathNameFromActor ( );
	void DetachAllComponentsFromSkeletalMeshComponent ( );
	void ComposeMeshByComponent ( );
	void eventComposeMesh ( );
	void GetMeshCompostionType ( );
	void SetMeshCompositionType ( );
	void eventPreExit ( );
	void eventInit ( );
};

UClass* UCombatMeshBuilder::pClassPointer = NULL;

// Class CombatGame.CombatMinimapActor
// 0x002C (0x0270 - 0x0244)
class ACombatMinimapActor : public AActor
{
public:
	class UTexture2D*                                  MiniMapTexture;                                   		// 0x0244 (0x0008) [0x0000000000000000]              
	float                                              OpacityRatio;                                     		// 0x024C (0x0004) [0x0000000000000000]              
	unsigned long                                      ShowEditorWidget : 1;                             		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      PrimaryMinimap : 1;                               		// 0x0250 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      UseMinimapActorRadarRange : 1;                    		// 0x0250 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              RadarRange;                                       		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              WholeMapScaleVaule;                               		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                WholeMapVCTeamRotationVaule;                      		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                WholeMapPMTeamRotationVaule;                      		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                WholeMapRotationVaule;                            		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                WorldSizeX;                                       		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                WorldSizeY;                                       		// 0x026C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1802 ];

		return pClassPointer;
	};

};

UClass* ACombatMinimapActor::pClassPointer = NULL;

// Class CombatGame.CombatNonNativeTypes
// 0x0000 (0x0060 - 0x0060)
class UCombatNonNativeTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1803 ];

		return pClassPointer;
	};

};

UClass* UCombatNonNativeTypes::pClassPointer = NULL;

// Class CombatGame.CombatObjectPool
// 0x0098 (0x00F8 - 0x0060)
class UCombatObjectPool : public UObject
{
public:
	int                                                PoolLimitSize;                                    		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                CurMemSize;                                       		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                ReferenceCounterMax;                              		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                ReferenceCounterIncrement;                        		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                ReferenceCounterDecrement;                        		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              ObjectCacheGarbageCollectionCycle;                		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              ObjectCacheLifeTime;                              		// 0x0078 (0x0004) [0x0000000000000000]              
	TArray< struct FObjectCacheDatum >                 ObjectCache;                                      		// 0x007C (0x0010) [0x0000000000000000]              
	int                                                MergedDataCacheMax;                               		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                MergedDataPutReferenceCounterValue;               		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                MergedDataReferenceCounterMax;                    		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                MergedDataReferenceCounterIncrement;              		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                MergedDataReferenceCounterDecrement;              		// 0x009C (0x0004) [0x0000000000000000]              
	struct FMergedMeshList                             MergedMeshCache[ 0x3 ];                           		// 0x00A0 (0x0030) [0x0000000000000000]              
	int                                                MSMaterialDataPutReferenceCounterValue;           		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                MSMaterialDataReferenceCounterMax;                		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                MSMaterialDataReferenceCounterIncrement;          		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                MSMaterialDataReferenceCounterDecrement;          		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              MSMaterialCacheLifeTime;                          		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              MSMaterialCacheGarbageCollectionCycle;            		// 0x00E4 (0x0004) [0x0000000000000000]              
	TArray< struct FMaterialSetListMaterialDatum >     MSMaterialList;                                   		// 0x00E8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1804 ];

		return pClassPointer;
	};

	void GetMaterialSetListMaterial ( );
	void PutMaterialSetListMaterial ( );
	void eventReleaseMaterialSetListMaterialData ( );
	void MaterialSetListMaterialCacheGarbageCollect ( );
	void CheckMaterialSetListMaterialCacheGarbageCollection ( );
	void MeshBuildingDataGarbageCollect ( );
	void ReleaseMeshBuildingData ( );
	void GetPoolObject ( );
	void eventCreateObject ( );
	void ObjectCacheGarbageCollect ( );
	void CheckObjectCacheGarbageCollection ( );
	void CheckGarbageCollection ( );
	void ForceGarbageCollection ( );
	void eventUpdatePerSecond ( );
	void GetResourceSize ( );
	void ReleaseLevelDependenceObject ( );
	void ReleaseObjects ( );
	void eventRelease ( );
};

UClass* UCombatObjectPool::pClassPointer = NULL;

// Class CombatGame.CombatPawn
// 0x063C (0x0B94 - 0x0558)
class ACombatPawn : public APawn
{
public:
	float                                              CustomGravityScaling;                             		// 0x0558 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseBotWeaponMovement : 1;                        		// 0x055C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAllowDiagonalLadderClimb : 1;                    		// 0x055C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInitSavedLocation : 1;                           		// 0x055C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRotationFollowsVelocity : 1;                     		// 0x055C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUpdateEyeheight : 1;                             		// 0x055C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bApplyInstanceItem : 1;                           		// 0x055C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      PowerBullet_Buff : 1;                             		// 0x055C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bIsBlockedByPawnCollision : 1;                    		// 0x055C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsInvulnerable : 1;                              		// 0x055C (0x0004) [0x0000000000310000] [0x00000100] ( CPF_Travel )
	unsigned long                                      bJustLanded : 1;                                  		// 0x055C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bLandRecovery : 1;                                		// 0x055C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCanDisplayIconInTacticalMap : 1;                 		// 0x055C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIgnorePitch : 1;                                 		// 0x055C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      DoDeathAnimPhysBlend : 1;                         		// 0x055C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bPlayDamageAnim : 1;                              		// 0x055C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      IsMoving : 1;                                     		// 0x055C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bIsLocalPawn : 1;                                 		// 0x055C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIsCheatPawn : 1;                                 		// 0x055C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bCheckPhysWalkingLedges : 1;                      		// 0x055C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bWeaponImpactAttenuate : 1;                       		// 0x055C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bSaveSkill : 1;                                   		// 0x055C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bLeftFootDown : 1;                                		// 0x055C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bRespawnAction : 1;                               		// 0x055C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      IgnoreKillZ : 1;                                  		// 0x055C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      DeathCertificate : 1;                             		// 0x055C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      WasCrouchedOnDeath : 1;                           		// 0x055C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bStuckHandsOnDeath : 1;                           		// 0x055C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bPotentialWallSmash : 1;                          		// 0x055C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bFinishedPrePlayDyingCheck : 1;                   		// 0x055C (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      IgnoreAimoffset : 1;                              		// 0x055C (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      UpdateHandGripPos : 1;                            		// 0x055C (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bDirtyWeaponAmmo : 1;                             		// 0x055C (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bGodMode : 1;                                     		// 0x0560 (0x0004) [0x0000000000320000] [0x00000001] ( CPF_EditConst )
	unsigned long                                      bProcessFellOutOfWorld : 1;                       		// 0x0560 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      OnParachute : 1;                                  		// 0x0560 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNeedToUpdateSkelpose : 1;                        		// 0x0560 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAIIgnoreAimDir : 1;                              		// 0x0560 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIgnoreDamagedDecelerationRatio : 1;              		// 0x0560 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bCanStaminaRecover : 1;                           		// 0x0560 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bBlockCrouch : 1;                                 		// 0x0560 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bSetForceSpamGrade : 1;                           		// 0x0560 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bOnFlashInability : 1;                            		// 0x0560 (0x0004) [0x0000000000000000] [0x00000200] 
	class ACombatPlayerReplicationInfoBase*            CachedPRI;                                        		// 0x0564 (0x0008) [0x0000000000000000]              
	struct FVector                                     DyingLocation;                                    		// 0x056C (0x000C) [0x0000000000000000]              
	float                                              FlyingAirSpeed;                                   		// 0x0578 (0x0004) [0x0000000000000000]              
	unsigned char                                      LadderClimbType;                                  		// 0x057C (0x0001) [0x0000000000000000]              
	unsigned char                                      PawnBuffState;                                    		// 0x057D (0x0001) [0x0000000000330000]              ( CPF_Travel | CPF_EditConst )
	unsigned char                                      IFFDisplayType;                                   		// 0x057E (0x0001) [0x0000000000000000]              
	unsigned char                                      RecoilCount;                                      		// 0x057F (0x0001) [0x0000000000340025]              ( CPF_Edit | CPF_Input | CPF_Net | CPF_GlobalConfig )
	unsigned char                                      VelocityState;                                    		// 0x0580 (0x0001) [0x00000000003500DF]              ( CPF_Edit | CPF_Const | CPF_Input | CPF_ExportObject | CPF_OptionalParm | CPF_EditConstArray | CPF_Parm | CPF_Travel | CPF_GlobalConfig )
	unsigned char                                      RotationYaw;                                      		// 0x0581 (0x0001) [0x0000000000360069]              ( CPF_Edit | CPF_ExportObject | CPF_Net | CPF_EditConstArray | CPF_EditConst | CPF_GlobalConfig )
	unsigned char                                      IKHand;                                           		// 0x0582 (0x0001) [0x0000000000000000]              
	unsigned char                                      CombatPawnTeamNum;                                		// 0x0583 (0x0001) [0x0000000000000000]              
	unsigned char                                      PenetrateBeforeHit;                               		// 0x0584 (0x0001) [0x0000000000000000]              
	unsigned char                                      CrouchSpamGrade;                                  		// 0x0585 (0x0001) [0x0000000000370000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	float                                              LadderStrafingSpeed;                              		// 0x0588 (0x0004) [0x0000000000000000]              
	float                                              StrafeAllowDegreeOnLadder;                        		// 0x058C (0x0004) [0x0000000000000000]              
	float                                              StrafeAllowValueOnLadder;                         		// 0x0590 (0x0004) [0x0000000000000000]              
	float                                              AttachingDegreeOnLadder;                          		// 0x0594 (0x0004) [0x0000000000000000]              
	float                                              AttachingValueOnLadder;                           		// 0x0598 (0x0004) [0x0000000000000000]              
	float                                              AllowedClimbUpDegreeOnLadder;                     		// 0x059C (0x0004) [0x0000000000000000]              
	float                                              AllowedClimbUpValueOnLadder;                      		// 0x05A0 (0x0004) [0x0000000000000000]              
	float                                              AllowedClimbDownDegreeOnLadder;                   		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              AllowedClimbDownValueOnLadder;                    		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              VelocityReduceRatioForLanding;                    		// 0x05AC (0x0004) [0x0000000000000000]              
	float                                              VelocityReduceRatioOnWalkingJump;                 		// 0x05B0 (0x0004) [0x0000000000000000]              
	class UCombatDialogCombiinationAudio*              DialogObj;                                        		// 0x05B4 (0x0008) [0x0000000000000000]              
	struct FCBTakeHitInfo                              LastTakeHitInfo;                                  		// 0x05BC (0x0048) [0x0000000000380053]              ( CPF_Edit | CPF_Const | CPF_OptionalParm | CPF_EditConstArray | CPF_Component )
	struct FCBTakeHitInfo                              LastTakeHitInfoByLocalPlayer;                     		// 0x0604 (0x0048) [0x0000000000000000]              
	struct FVector                                     MeshTranslationOffset;                            		// 0x064C (0x000C) [0x0000000000000000]              
	struct FVector2D                                   MeshTranslationIntegralOffset;                    		// 0x0658 (0x0008) [0x0000000000000000]              
	struct FVector                                     FixedMeshTranslationOffset;                       		// 0x0660 (0x000C) [0x0000000000000000]              
	float                                              CrouchTranslationOffset;                          		// 0x066C (0x0004) [0x0000000000000000]              
	float                                              CrouchStartTime;                                  		// 0x0670 (0x0004) [0x0000000000000000]              
	float                                              CrouchLength;                                     		// 0x0674 (0x0004) [0x0000000000000000]              
	float                                              MeshTranslationKpAmt;                             		// 0x0678 (0x0004) [0x0000000000000000]              
	float                                              MeshTranslationKiAmt;                             		// 0x067C (0x0004) [0x0000000000000000]              
	float                                              MeshTranslationFallingSpeed;                      		// 0x0680 (0x0004) [0x0000000000000000]              
	float                                              MeshTranslationZSpeed;                            		// 0x0684 (0x0004) [0x0000000000000000]              
	struct FVector                                     CombatSavedLocation;                              		// 0x0688 (0x000C) [0x0000000000000000]              
	float                                              OldZ;                                             		// 0x0694 (0x0004) [0x0000000000000000]              
	float                                              TossWeaponSpeed;                                  		// 0x0698 (0x0004) [0x0000000000000000]              
	float                                              TossSwappedWeaponSpeed;                           		// 0x069C (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      RootRotControl;                                   		// 0x06A0 (0x0008) [0x0000000000000000]              
	class UAnimNodeAimOffset*                          AimNode;                                          		// 0x06A8 (0x0008) [0x0000000000000000]              
	class UCombatAnimBlendByPosture*                   CrouchNode;                                       		// 0x06B0 (0x0008) [0x0000000000000000]              
	TArray< class UCombatSkelCtrl_Recoil* >            RecoilNodes;                                      		// 0x06B8 (0x0010) [0x0000000000000000]              
	class USkelControlLookAt*                          LookAtCtrl;                                       		// 0x06C8 (0x0008) [0x0000000000000000]              
	class ACombatWeapon*                               MyCombatWeapon;                                   		// 0x06D0 (0x0008) [0x0000000000000000]              
	TArray< class ACombatWeapon* >                     PassiveWeaponList;                                		// 0x06D8 (0x0010) [0x0000000000000000]              
	TArray< class ACombatWeapon* >                     MyGrenadeWeapon;                                  		// 0x06E8 (0x0010) [0x0000000000000000]              
	TArray< class ACombatWeapon* >                     MyPrimaryWeapon;                                  		// 0x06F8 (0x0010) [0x0000000000000000]              
	float                                              SlopeBoostFriction;                               		// 0x0708 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   CurrentSkelAim;                                   		// 0x070C (0x0008) [0x0000000000000000]              
	float                                              BackwardSpeedPct;                                 		// 0x0714 (0x0004) [0x0000000000000000]              
	float                                              StandardGroundSpeed;                              		// 0x0718 (0x0004) [0x0000000000000000]              
	float                                              AddMainAmmo_Buff;                                 		// 0x071C (0x0004) [0x0000000000000000]              
	float                                              AddSubAmmo_Buff;                                  		// 0x0720 (0x0004) [0x0000000000000000]              
	float                                              AddMainMagazineAmmo_Buff;                         		// 0x0724 (0x0004) [0x0000000000000000]              
	float                                              AddSubMagazineAmmo_Buff;                          		// 0x0728 (0x0004) [0x0000000000000000]              
	float                                              MaxMainMagazineAmmo_Buff;                         		// 0x072C (0x0004) [0x0000000000000000]              
	float                                              MaxSubMagazineAmmo_Buff;                          		// 0x0730 (0x0004) [0x0000000000000000]              
	float                                              ReloadingRate_Buff;                               		// 0x0734 (0x0004) [0x0000000000000000]              
	float                                              WeaponChangeRate_Buff;                            		// 0x0738 (0x0004) [0x0000000000000000]              
	float                                              MaxHealthRate_Buff;                               		// 0x073C (0x0004) [0x0000000000000000]              
	float                                              HealthCureRate_Buff;                              		// 0x0740 (0x0004) [0x0000000000000000]              
	float                                              MaxAutoCureHealthModifier_Buff;                   		// 0x0744 (0x0004) [0x0000000000000000]              
	float                                              GroundCrouchSpeedRate_Buff;                       		// 0x0748 (0x0004) [0x0000000000000000]              
	float                                              GroundAccelationRate_Buff;                        		// 0x074C (0x0004) [0x0000000000000000]              
	float                                              GroundRunSpeedRate_Buff;                          		// 0x0750 (0x0004) [0x0000000000000000]              
	float                                              GroundWalkingSpeedRate_Buff;                      		// 0x0754 (0x0004) [0x0000000000000000]              
	float                                              DetailedRadarDistance_Buff;                       		// 0x0758 (0x0004) [0x0000000000000000]              
	float                                              RadarRange_Buff;                                  		// 0x075C (0x0004) [0x0000000000000000]              
	float                                              GunAttackRate_Buff;                               		// 0x0760 (0x0004) [0x0000000000000000]              
	float                                              GunGuardRate_Buff;                                		// 0x0764 (0x0004) [0x0000000000000000]              
	float                                              MeleeAttackRate_Buff;                             		// 0x0768 (0x0004) [0x0000000000000000]              
	float                                              MeleeGuardRate_Buff;                              		// 0x076C (0x0004) [0x0000000000000000]              
	float                                              ExplosiveAttackRate_Buff;                         		// 0x0770 (0x0004) [0x0000000000000000]              
	float                                              ExplosiveGuardRate_Buff;                          		// 0x0774 (0x0004) [0x0000000000000000]              
	int                                                AddGrenade_Buff;                                  		// 0x0778 (0x0004) [0x0000000000000000]              
	float                                              InstanceItem_GroundCrouchSpeedRate_Buff;          		// 0x077C (0x0004) [0x0000000000000000]              
	float                                              InstanceItem_GroundAccelationRate_Buff;           		// 0x0780 (0x0004) [0x0000000000000000]              
	float                                              InstanceItem_GroundRunSpeedRate_Buff;             		// 0x0784 (0x0004) [0x0000000000000000]              
	float                                              InstanceItem_GroundWalkingSpeedRate_Buff;         		// 0x0788 (0x0004) [0x0000000000000000]              
	int                                                AP_Buff[ 0xA ];                                   		// 0x078C (0x0028) [0x0000000000000000]              
	int                                                APForExplosion_Buff;                              		// 0x07B4 (0x0004) [0x0000000000000000]              
	float                                              ShortenRespawnDelay_Buff;                         		// 0x07B8 (0x0004) [0x0000000000000000]              
	float                                              DamagedAccelerationRatio_Buff;                    		// 0x07BC (0x0004) [0x0000000000000000]              
	float                                              GunAttackRateForAI;                               		// 0x07C0 (0x0004) [0x0000000000000000]              
	float                                              MeleeAttackRateForAI;                             		// 0x07C4 (0x0004) [0x0000000000000000]              
	float                                              GrenadeAttackRateForAI;                           		// 0x07C8 (0x0004) [0x0000000000000000]              
	int                                                IgnoreCheckExpose;                                		// 0x07CC (0x0004) [0x0000000000000000]              
	float                                              RepFootStepSoundMultiplier;                       		// 0x07D0 (0x0004) [0x0000000000390149]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_OutParm | CPF_Travel | CPF_Component )
	class UClass*                                      SoundGroupClass;                                  		// 0x07D4 (0x0008) [0x0000000000000000]              
	class UClass*                                      CurrCharClassInfo;                                		// 0x07DC (0x0008) [0x00000000003A000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component )
	float                                              DefaultMeshScale;                                 		// 0x07E4 (0x0004) [0x0000000000000000]              
	struct FName                                       FamiliInfoType;                                   		// 0x07E8 (0x0008) [0x0000000000000000]              
	class UClass*                                      RadioVoiceClass;                                  		// 0x07F0 (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x07F8 (0x0008) [0x0000000000000000]              
	float                                              Bob;                                              		// 0x0800 (0x0004) [0x0000000000000000]              
	float                                              Bob_Y;                                            		// 0x0804 (0x0004) [0x0000000000000000]              
	float                                              Bob_Y_Freq;                                       		// 0x0808 (0x0004) [0x0000000000000000]              
	float                                              BobSeperationFactor;                              		// 0x080C (0x0004) [0x0000000000000000]              
	float                                              AppliedBob;                                       		// 0x0810 (0x0004) [0x0000000000000000]              
	float                                              bobtime;                                          		// 0x0814 (0x0004) [0x0000000000000000]              
	struct FVector                                     WalkBob;                                          		// 0x0818 (0x000C) [0x0000000000000000]              
	float                                              CameraScale;                                      		// 0x0824 (0x0004) [0x0000000000000000]              
	float                                              CurrentCameraScale;                               		// 0x0828 (0x0004) [0x0000000000000000]              
	float                                              CameraScaleMin;                                   		// 0x082C (0x0004) [0x0000000000000000]              
	float                                              CameraScaleMax;                                   		// 0x0830 (0x0004) [0x0000000000000000]              
	float                                              CameraZOffset;                                    		// 0x0834 (0x0004) [0x0000000000000000]              
	class UAnimNodeSlot*                               FullBodyAnimSlot;                                 		// 0x0838 (0x0008) [0x0000000000000000]              
	class UAnimNodeSlot*                               TopHalfAnimSlot;                                  		// 0x0840 (0x0008) [0x0000000000000000]              
	class UCombatAnimBlendBySlotActive*                TopHalfParentNode;                                		// 0x0848 (0x0008) [0x0000000000000000]              
	class UPhysicsAsset*                               PhysAssetForDeath;                                		// 0x0850 (0x0008) [0x0000000000000000]              
	struct FVector                                     CamOffset;                                        		// 0x0858 (0x000C) [0x0000000000000000]              
	float                                              HeroCameraScale;                                  		// 0x0864 (0x0004) [0x0000000000000000]              
	int                                                HeroCameraPitch;                                  		// 0x0868 (0x0004) [0x0000000000000000]              
	int                                                HealthGaugeStep;                                  		// 0x086C (0x0004) [0x0000000000000000]              
	TArray< struct FCameraShakeRotationFactor >        CameraShake_DecreaseByDepense;                    		// 0x0870 (0x0010) [0x0000000000000000]              
	TArray< int >                                      HitRangeForCameraShake;                           		// 0x0880 (0x0010) [0x0000000000000000]              
	struct FCameraShakeRotationFactor                  CameraShakeMinRange;                              		// 0x0890 (0x0008) [0x0000000000000000]              
	struct FCameraShakeRotationFactor                  CameraShakeMaxRange;                              		// 0x0898 (0x0008) [0x0000000000000000]              
	float                                              CameraShakeSpeed;                                 		// 0x08A0 (0x0004) [0x0000000000000000]              
	float                                              CameraShakeRecoverSpeed;                          		// 0x08A4 (0x0004) [0x0000000000000000]              
	float                                              CameraShakeRandom;                                		// 0x08A8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    CameraShakeOffset;                                		// 0x08AC (0x000C) [0x0000000000000000]              
	struct FRotator                                    AutoCorrectCameraShakeOffset;                     		// 0x08B8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DeltaCameraShake;                                 		// 0x08C4 (0x000C) [0x0000000000000000]              
	float                                              MaxFootstepDistSq;                                		// 0x08D0 (0x0004) [0x0000000000000000]              
	float                                              MaxJumpSoundDistSq;                               		// 0x08D4 (0x0004) [0x0000000000000000]              
	float                                              NoLandedSoundVelZSize;                            		// 0x08D8 (0x0004) [0x0000000000000000]              
	float                                              MaxDistForBloodSplatter;                          		// 0x08DC (0x0004) [0x0000000000000000]              
	float                                              CrounchEyeHeight;                                 		// 0x08E0 (0x0004) [0x0000000000000000]              
	float                                              DeathRagdollTime;                                 		// 0x08E4 (0x0004) [0x0000000000000000]              
	struct FVectorWithFlag                             CompressedLastImpactLocation;                     		// 0x08E8 (0x0010) [0x00000000003B000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_EditConst | CPF_Component )
	class UCombatAnim_TurnInPlace*                     TurnInPlaceNode;                                  		// 0x08F8 (0x0008) [0x0000000000000000]              
	float                                              ViewTargetRotationInterpolationSpeed;             		// 0x0900 (0x0004) [0x0000000000000000]              
	int                                                InterpolatedRemoteViewPitch;                      		// 0x0904 (0x0004) [0x0000000000000000]              
	float                                              YawInterpolationSpeed;                            		// 0x0908 (0x0004) [0x0000000000000000]              
	int                                                InterpolatedYaw;                                  		// 0x090C (0x0004) [0x0000000000000000]              
	float                                              EyeHeightInterpolationSpeed;                      		// 0x0910 (0x0004) [0x0000000000000000]              
	float                                              InterpolatedEyeHeight;                            		// 0x0914 (0x0004) [0x0000000000000000]              
	float                                              AimAssistDamageMultiplier;                        		// 0x0918 (0x0004) [0x0000000000000000]              
	float                                              MeleeAssistDamageMultiplier;                      		// 0x091C (0x0004) [0x0000000000000000]              
	float                                              LastAimRotationTime;                              		// 0x0920 (0x0004) [0x0000000000000000]              
	struct FRotator                                    LastAimRotation;                                  		// 0x0924 (0x000C) [0x0000000000000000]              
	struct FVectorWithFlag                             VelocityWithIsMoving;                             		// 0x0930 (0x0010) [0x00000000003C0086]              ( CPF_Const | CPF_Input | CPF_Parm | CPF_GlobalConfig | CPF_Component )
	float                                              VelocityMutiplyRatioToCollideOtherPawn;           		// 0x0940 (0x0004) [0x0000000000000000]              
	float                                              SlideFriction;                                    		// 0x0944 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             WeaponImpactUndampedSound;                        		// 0x0948 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             WeaponImpactUndampedVoice;                        		// 0x0950 (0x0008) [0x0000000000000000]              
	float                                              PhysicCorpses;                                    		// 0x0958 (0x0004) [0x0000000000000000]              
	TArray< struct FOutlineProperty >                  OutlinePropertyList;                              		// 0x095C (0x0010) [0x0000000000000000]              
	TArray< struct FOutlineProperty >                  ForegroundOutlinePropertyList;                    		// 0x096C (0x0010) [0x0000000000000000]              
	TArray< struct FOutlineMaterialVectorParam >       OutlineMaterialParamList;                         		// 0x097C (0x0010) [0x0000000000000000]              
	float                                              SpawnProtectionAmbientCycleTime;                  		// 0x098C (0x0004) [0x0000000000000000]              
	struct FLinearColor                                SpawnProtectionAmbientGlow;                       		// 0x0990 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             CurrentOutlineEventName;                          		// 0x09A0 (0x0010) [0x0000000000000000]              
	struct FGlobalOutlineEvent                         OverrideOutlineEventData;                         		// 0x09B0 (0x0010) [0x0000000000000000]              
	class UParticleSystemComponent*                    GetterPickupEffectComp;                           		// 0x09C0 (0x0008) [0x0000000000000000]              
	class UCylinderComponent*                          PawnCollision;                                    		// 0x09C8 (0x0008) [0x0000000000000000]              
	class UTimeDilationAnimInst*                       ActiveTimeDilationAnim;                           		// 0x09D0 (0x0008) [0x0000000000000000]              
	TArray< class ACombatExplosionActor* >             DyingExplosionActorsForTimeDilation;              		// 0x09D8 (0x0010) [0x0000000000000000]              
	int                                                ViewTargetRotation;                               		// 0x09E8 (0x0004) [0x00000000003D005D]              ( CPF_Edit | CPF_Input | CPF_ExportObject | CPF_OptionalParm | CPF_EditConstArray | CPF_Travel | CPF_GlobalConfig | CPF_Component )
	class ACBInventoryManager*                         CBInvManager;                                     		// 0x09EC (0x0008) [0x0000000000000000]              
	class UCombatDecal*                                ShadowDecal;                                      		// 0x09F4 (0x0008) [0x0000000000000000]              
	float                                              BelowFeetCheckDistance;                           		// 0x09FC (0x0004) [0x0000000000000000]              
	float                                              BelowFeetCheckDistanceSq;                         		// 0x0A00 (0x0004) [0x0000000000000000]              
	struct FPhysMaterialBelowFeet                      LastPhysMatBelowFeet;                             		// 0x0A04 (0x0014) [0x0000000000000000]              
	struct FName                                       FootDownBoneName[ 0x2 ];                          		// 0x0A18 (0x0010) [0x0000000000000000]              
	struct FVector                                     FootExtent;                                       		// 0x0A28 (0x000C) [0x0000000000000000]              
	float                                              CurrentTerminalVelocity;                          		// 0x0A34 (0x0004) [0x0000000000000000]              
	float                                              LeftDeathAnimTime;                                		// 0x0A38 (0x0004) [0x0000000000000000]              
	float                                              ReachedGoalSplineTime;                            		// 0x0A3C (0x0004) [0x0000000000000000]              
	class UCombatHUD_IFFObject*                        IFFObject;                                        		// 0x0A40 (0x0008) [0x0000000000000000]              
	int                                                LocalHitBodyIndex;                                		// 0x0A48 (0x0004) [0x0000000000000000]              
	struct FVector                                     LocalHitDir;                                      		// 0x0A4C (0x000C) [0x0000000000000000]              
	struct FName                                       LastHitBone;                                      		// 0x0A58 (0x0008) [0x0000000000000000]              
	float                                              WallSmashMod;                                     		// 0x0A60 (0x0004) [0x0000000000000000]              
	float                                              MomentumEff;                                      		// 0x0A64 (0x0004) [0x0000000000000000]              
	struct FVector                                     OnDeathVelocity;                                  		// 0x0A68 (0x000C) [0x0000000000000000]              
	float                                              RagdollPushEff;                                   		// 0x0A74 (0x0004) [0x0000000000000000]              
	struct FName                                       RagdollPushBone;                                  		// 0x0A78 (0x0008) [0x0000000000000000]              
	float                                              RagdollUpKick;                                    		// 0x0A80 (0x0004) [0x0000000000000000]              
	float                                              NoRagdollVelocity;                                		// 0x0A84 (0x0004) [0x0000000000000000]              
	float                                              WallSmashDist;                                    		// 0x0A88 (0x0004) [0x0000000000000000]              
	float                                              RagdollTraceStartOffset;                          		// 0x0A8C (0x0004) [0x0000000000000000]              
	class USkelControlLimb*                            HandGripIKNode[ 0x2 ];                            		// 0x0A90 (0x0010) [0x0000000000000000]              
	float                                              BanzaiImpulse;                                    		// 0x0AA0 (0x0004) [0x0000000000000000]              
	int                                                WallCheckSpreadYaw;                               		// 0x0AA4 (0x0004) [0x0000000000000000]              
	float                                              RollBob;                                          		// 0x0AA8 (0x0004) [0x0000000000000000]              
	int                                                AmmorPoint[ 0xA ];                                		// 0x0AAC (0x0028) [0x0000000000000000]              
	int                                                AmmorPointForExplosion;                           		// 0x0AD4 (0x0004) [0x0000000000000000]              
	int                                                AmmorItemGrade;                                   		// 0x0AD8 (0x0004) [0x0000000000000000]              
	TArray< struct FImpulseData >                      PhysBodyImpulseMap;                               		// 0x0ADC (0x0010) [0x0000000000000000]              
	struct FVector                                     StoredHandGrip;                                   		// 0x0AEC (0x000C) [0x0000000000000000]              
	float                                              fReplicatedCustomTimeD;                           		// 0x0AF8 (0x0004) [0x00000000003E0000]              ( CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	int                                                CriticalDamagePitch;                              		// 0x0AFC (0x0004) [0x0000000000000000]              
	float                                              LastApplyFamilyInfoTime;                          		// 0x0B00 (0x0004) [0x0000000000000000]              
	class UCombatItemFXBase*                           CharUpperItemFX;                                  		// 0x0B04 (0x0008) [0x0000000000000000]              
	class UCombatItemFXBase*                           CharFootItemFX;                                   		// 0x0B0C (0x0008) [0x0000000000000000]              
	class UCombatSkill_TrophyTurret*                   TrophySkillObject;                                		// 0x0B14 (0x0008) [0x0000000000000000]              
	class UCombatSkill_SentryGun*                      SentryGunSkillObject;                             		// 0x0B1C (0x0008) [0x0000000000000000]              
	float                                              AdditionalDamagedDecelerationRatio;               		// 0x0B24 (0x0004) [0x0000000000000000]              
	float                                              MaxDamagedDecelerationRatio;                      		// 0x0B28 (0x0004) [0x0000000000000000]              
	TArray< struct FCrouchSpamValue >                  CrouchValue;                                      		// 0x0B2C (0x0010) [0x0000000000000000]              
	float                                              CrouchStamina;                                    		// 0x0B3C (0x0004) [0x0000000000000000]              
	float                                              CrouchStaminaMax;                                 		// 0x0B40 (0x0004) [0x0000000000000000]              
	float                                              CrouchStaminaRecoverForSec;                       		// 0x0B44 (0x0004) [0x0000000000000000]              
	float                                              CrouchStaminaUseValue;                            		// 0x0B48 (0x0004) [0x0000000000000000]              
	float                                              CrouchStaminaHoldTime;                            		// 0x0B4C (0x0004) [0x0000000000000000]              
	float                                              CrouchSpamGradeZeroRange;                         		// 0x0B50 (0x0004) [0x0000000000000000]              
	float                                              CrouchSpamGradeOneRange;                          		// 0x0B54 (0x0004) [0x0000000000000000]              
	float                                              CrouchSpamGradeTwoRange;                          		// 0x0B58 (0x0004) [0x0000000000000000]              
	float                                              CrouchSpamGradeThreeRange;                        		// 0x0B5C (0x0004) [0x0000000000000000]              
	int                                                ForceSpamGradeLevel;                              		// 0x0B60 (0x0004) [0x0000000000000000]              
	struct FFlashEffectRepStruct                       FlashEffectInfo;                                  		// 0x0B64 (0x0008) [0x00000000003F0166]              ( CPF_Const | CPF_Input | CPF_Net | CPF_EditConstArray | CPF_OutParm | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	struct FFlashEffectRepStruct                       CurrentFlashEffectInfo;                           		// 0x0B6C (0x0008) [0x0000000000000000]              
	float                                              FlashEffectSyncDeltaTime;                         		// 0x0B74 (0x0004) [0x0000000000000000]              
	float                                              FlashEffectSyncDelay;                             		// 0x0B78 (0x0004) [0x0000000000000000]              
	float                                              FlashEffectMaxTime;                               		// 0x0B7C (0x0004) [0x0000000000000000]              
	float                                              FlashEffectStartTime;                             		// 0x0B80 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnDetachDroppedWeapon__Delegate;                		// 0x0B84 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0B88 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1805 ];

		return pClassPointer;
	};

	void SetFlashInability ( );
	void GetHeadLocation ( );
	void OnFlashEffectInfoChanged ( );
	void ShowFlashEffect ( );
	void SetFlashBangEffect ( );
	void UpdateFlashBangEffect ( );
	void IsUnderFlashEffect ( );
	void eventTick ( );
	void GatheringLastTakeHitInfo ( );
	void eventServerSetCrouchStamina ( );
	void eventServerSetBlockCrouch ( );
	void StopCrouchHoldTimer ( );
	void eventStartCrouchHoldTimer ( );
	void eventServerStartCrouchHoldTimer ( );
	void SetForceSpamGradeMode ( );
	void SetForceSpamGradeLevel ( );
	void eventUpdateCrouchStamina ( );
	void OnMissionEvent ( );
	void UpdateChaItemFX ( );
	void SupportTakeDamageDataSave ( );
	void GetSuit ( );
	void IsPlayerOperating ( );
	void GetGoreLevel ( );
	void GetTouchingActor ( );
	void InGodMode ( );
	void RecalculateGripOffset ( );
	void SetHandGripOffset ( );
	void SetIKPrePassBone ( );
	void SetGripIK ( );
	void GetDeathRagDollImpulseRate ( );
	void SuppressRagdollPopup ( );
	void PlayCombWordsByPawn ( );
	void ServerSetIgnoreKillZ ( );
	void BlendBetweenAnimsets ( );
	void eventIsForeheadShot ( );
	void eventIsHeadShot ( );
	void eventGetPureBodyIndex ( );
	void eventIsLastHit ( );
	void DeactivteSkill ( );
	void ActivteSkill ( );
	void eventCheckMeleeAttackCollision ( );
	void StartUseSkill ( );
	void RemoveActiveSkillByIndex ( );
	void RagdollWithImpact ( );
	void GravityBack ( );
	void eventImpactRagdoll ( );
	void LoosenRagdollJoints ( );
	void TightenRagdollJoints ( );
	void RegisterDeadPlayerPawnLocationList ( );
	void FastWallCheck ( );
	void GoRagdoll_MissionPawn ( );
	void PlayDying ( );
	void eventTornOff ( );
	void CheckWallSmash ( );
	void CheckHandsStuckOnDeath ( );
	void Died ( );
	void IsPlayerControllPawn ( );
	void eventGetFamilyInfoType ( );
	void NeedToRemoveDeadBody ( );
	void FaceRotation ( );
	void NotifyAllWeaponAmmoChanged ( );
	void RemoveFromInventory ( );
	void FindWeaponByGroup ( );
	void IsPossessWeaponByGroup ( );
	void FindPickupableWeaponByGroup ( );
	void CanPickupSupplies ( );
	void CanSelectSkillClass ( );
	void CanPickupWeapon ( );
	void EndViewTarget ( );
	void BecomeViewTarget ( );
	void InitCameraEyeHeight ( );
	void PlayDyingExplosionActorsForTimeDilation ( );
	void AddDyingExplosionActorsForTimeDilation ( );
	void SetGetterPickupParticles ( );
	void PlaySoloChat_KillVoice ( );
	void IsLocalPlayerController ( );
	void PlaySoloChat_Spawn_Ready ( );
	void PlaySoloChat_Spawn ( );
	void PlaySoloChat_AutoHeal ( );
	void PlaySoloChat_OutOfAmmo ( );
	void PlayDyingSound ( );
	void ShoutGrenadeThrow ( );
	void ShoutSeeEnemyTeamDeath ( );
	void ShoutSeeOurTeamDeath ( );
	void HasSeeEnemyDeathSound ( );
	void HasGrenadeWarningSound ( );
	void GetPlayerName ( );
	void Dev_UpdateDevelopeMessage ( );
	void IsAlone ( );
	void GetCorpses ( );
	void DoJump ( );
	void ClimbLadder ( );
	void VolumeBasedDestroy ( );
	void eventOutsideWorldBounds ( );
	void eventGetWeaponAttachment ( );
	void ForceKill ( );
	void ReleasePostProcess ( );
	void ApplyPostProcess ( );
	void eventApplyFamilyInfo ( );
	void ClearAutoHeal ( );
	void JumpOffPawn ( );
	void eventBaseChange ( );
	void CanBeBaseForPawn ( );
	void TakeFallingDamage ( );
	void eventHealDamage ( );
	void eventPostSetBuff ( );
	void eventPreSetBuff ( );
	void eventUpdateHealthMax ( );
	void GetOtherTeamNum ( );
	void IsSameTeamByController ( );
	void eventEncroachedBy ( );
	void GetBodyImpact ( );
	void GetBodyMaterialImpactEffect ( );
	void GetBodyPhysicalMaterialProperty ( );
	void CanMeleeAttack ( );
	void ApplyWeaponAnimset ( );
	void AddCameraShakeOffset ( );
	void IsValidFireSound ( );
	void SetSkillWeaponRemainAmmo ( );
	void SwitchToBestWeapon ( );
	void SetWeapAnimType ( );
	void GetAdjustedAimFor ( );
	void eventGetBaseAimRotation ( );
	void eventInFreeCam ( );
	void GetEffectedWeaponReloadTime ( );
	void GetAnimLength ( );
	void SetDyingPhysics ( );
	void StopAmbientSound ( );
	void PlayAmbientSound ( );
	void ThrowWeaponOnDeath ( );
	void MeleeAttackStarted ( );
	void AdjustDamageByAP ( );
	void IsHitByFell ( );
	void IsDirectAttack ( );
	void ApplyAmmorPoint ( );
	void SetMovementRateBuff ( );
	void InitCurrentPresetInstanceItem ( );
	void ClientInstanceItemBuff ( );
	void AddInstanceItems ( );
	void LoadChaFootItemFX ( );
	void LoadChaUpperItemFX ( );
	void ClearChaFX ( );
	void ClientSetFamilyInfo ( );
	void SetFamilyInfo ( );
	void IsFemale ( );
	void AddDefaultInventory ( );
	void AddPresetInventory ( );
	void ClientDiscardInventory ( );
	void GetCurrentPreset ( );
	void ApplyReservedPreset ( );
	void GetPresetManager ( );
	void PlayPawnAnimation ( );
	void PlayInvulnerablePawn ( );
	void UpdateInvulnerablePawn ( );
	void eventSetOutlineProperty ( );
	void ClearOutlineProperty ( );
	void SetAllPawnOutlineProperty ( );
	void UpdateOutlineProperty ( );
	void InvulnerableTime ( );
	void SetInvulnerablePawn ( );
	void GetBuffedDamageByWeaponType ( );
	void AdjustDamage ( );
	void SwapWeapon ( );
	void TossInventory ( );
	void GetTossVelocity ( );
	void GetPendingWeapon ( );
	void ReleaseUse ( );
	void Use ( );
	void SwitchWeapon ( );
	void GetPawnViewLocation ( );
	void CalcCamera ( );
	void ServerCrouchSpamGrade ( );
	void eventSetCrouchSpamGrade ( );
	void UpdateCrouchBlendTime ( );
	void eventUpdateEyeHeight ( );
	void ResetLandedFlags ( );
	void IgnoreWalkBob ( );
	void ActuallyPlayFootstepSound ( );
	void eventPlayFootStepSound ( );
	void eventLanded ( );
	void UpdateLandSound ( );
	void SimulatedLanded ( );
	void OwnerEvent ( );
	void eventNotifyLandedFromPhysics ( );
	void ShoutReloading ( );
	void PlayLandingSound ( );
	void eventPlayJumpingSound ( );
	void PlayFallingDamageLandSound ( );
	void NotifyHitEvent ( );
	void NotifyClientTakeHit ( );
	void eventTakeDamage ( );
	void ProcessSuicide ( );
	void SetKillInstigator ( );
	void ReduceVelocityByDamage ( );
	void GetDamagedDecelerationRatio ( );
	void Survived ( );
	void SpawnBSDecal ( );
	void LeaveABloodSplatterDecal ( );
	void eventDisplayHitInfomation_Test ( );
	void TranIndexToBodyname ( );
	void LocalPlayTakeHitEffects ( );
	void eventPlayTakeHitEffects ( );
	void eventGetHitBodyType ( );
	void HandleMomentum ( );
	void SetDamageAnimTime ( );
	void TakeRadiusDamageEx ( );
	void CameraShakeRotation ( );
	void ServerFellOutOfWorld ( );
	void eventFellOutOfWorld ( );
	void TraceUseCamWithPawnUseCam ( );
	void TurnOffPawn ( );
	void SetHealthMax ( );
	void SetHealth ( );
	void eventStartRagDoll ( );
	void ChangePhysicAsset ( );
	void GoRagDoll ( );
	void SetMovementPhysics ( );
	void GetVoiceClass ( );
	void eventPlayActionVoice ( );
	void ClientPlayActionVoice ( );
	void ClientSyncMovementProperties ( );
	void SyncMovementProperties ( );
	void eventServerSetMovementProperties ( );
	void SetPawnRBChannels ( );
	void SetWeaponImpactUndampedVoice ( );
	void SetWeaponImpactUndampedSound ( );
	void GetEyeHeight ( );
	void WeaponChanged ( );
	void eventGetViewRotation ( );
	void AdjustCameraScale ( );
	void IncrementFlashCount ( );
	void FlashLocationUpdated ( );
	void ClearFlashLocation ( );
	void SetFlashLocation ( );
	void GetWeaponStartTraceLocation ( );
	void SetHeroCam ( );
	void eventSetThirdPersonCamera ( );
	void ChangeVisibility ( );
	void UpdateSoundClass ( );
	void eventReplicatedEvent ( );
	void ApplyRecoilIndex ( );
	void IsValidCharMeshActor ( );
	void IsValidCharClassInfo ( );
	void GetFamilyInfo ( );
	void eventIsReloadingWeapon ( );
	void IsAIPawn ( );
	void SetLocalPawn ( );
	void IsLocalPawn ( );
	void UnPossessed ( );
	void NotifyLocalPlayerTeamReceived ( );
	void UpdateTeamOutline ( );
	void NotifyTeamChanged ( );
	void PossessedBy ( );
	void eventSetCharacterResourceFromFamilyInfo ( );
	void GetPortraitImgPath ( );
	void GetTeamNum ( );
	void UpdateHandActorMesh ( );
	void eventGetHandActor ( );
	void SetCharacterBuffFromInfo ( );
	void IsValidPawnBuff ( );
	void eventSetPawnBuffState ( );
	void eventResetCharacterPassiveSkillBuff ( );
	void CanClimbLadder ( );
	void InitLadderProperties ( );
	void SetLadderProperty ( );
	void eventSetDecalShadow ( );
	void InitCrouchTranslation ( );
	void GetCorpseTime ( );
	void eventSetInvManager ( );
	void PostBeginPlay ( );
	void ApplyLightEnvironmentOption ( );
	void eventRemoveWeaponList ( );
	void eventAddWeaponList ( );
	void RemovePassiveWeapon ( );
	void AddPassiveWeapon ( );
	void SetMyCombatWeapon ( );
	void eventDestroyed ( );
	void ClearPawnProperties ( );
	void ClearIFFHUD ( );
	void DisplayDebug ( );
	void eventIgnorePostRenderFor ( );
	void eventCanDisplayIconInTacticalMap ( );
	void eventCanDisplayIFF ( );
	void NativePostRenderFor ( );
	void eventEndCrouch ( );
	void eventStartCrouch ( );
	void eventSetPlayedDeath ( );
	void SetBaseEyeheight ( );
	void PlantTrophyTurret ( );
	void TryToPlantTrophyTurret ( );
	void PlantSentryGun ( );
	void TryToPlantSentryGun ( );
	void eventPostInitAnimTree ( );
	void eventGetCurrentSpeed ( );
	void eventGetActorName ( );
	void SetMovementProperties ( );
	void UpdateMovementProperties ( );
	void GetWalkingSpeed ( );
	void GetLocalVelocityPct ( );
	void ClearCompressedImpactLocation ( );
	void SetCompressedImpactLocation ( );
	void ForceUnCrouch ( );
	void StopPawnAnimation ( );
	void PlayPawnAnim ( );
	void GetMaterialBelowFeet ( );
	void UpdateViewTargetRotation ( );
	void IsFirstPerson ( );
	void ClearMeshTranslationOffset ( );
	void IsInvisible ( );
	void RestorePreRagdollCollisionComponent ( );
	void GetBoundingCylinder ( );
	void PlayTimeDilationAnim ( );
	void OnDetachDroppedWeapon ( );
};

UClass* ACombatPawn::pClassPointer = NULL;

// Class CombatGame.CombatGuyBase
// 0x000C (0x0BA0 - 0x0B94)
class ACombatGuyBase : public ACombatPawn
{
public:
	float                                              Client_DistanceOfCorsshairTargetForUI;            		// 0x0B94 (0x0004) [0x0000000000000000]              
	float                                              CheckTargetedForUI_DotMin;                        		// 0x0B98 (0x0004) [0x0000000000000000]              
	float                                              CheckTargetedForUI_DotMax;                        		// 0x0B9C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1806 ];

		return pClassPointer;
	};

	void ShoutReloading ( );
	void ShoutGrenadeThrow ( );
	void ShoutGrenadeWarning ( );
	void HasGrenadeWarningSound ( );
	void ShoutSeeEnemyTeamDeath ( );
	void HasSeeEnemyDeathSound ( );
	void ShoutSeeOurTeamDeath ( );
	void GetIFFFriendlyType ( );
	void GetIFFEnemyType ( );
	void CheckTargetedForUI ( );
	void eventPostRenderFor ( );
	void eventIgnorePostRenderFor ( );
	void GetHealthStat ( );
	void ShouldDisplayIFF ( );
	void RemovePostRenderedActorForUI ( );
	void AddPostRenderedActorForUI ( );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	void PlayHit ( );
};

UClass* ACombatGuyBase::pClassPointer = NULL;

// Class CombatGame.CombatGuy_NPC
// 0x00C8 (0x0C68 - 0x0BA0)
class ACombatGuy_NPC : public ACombatGuyBase
{
public:
	struct FPointer                                    VfTable_ICCSPawn;                                 		// 0x0BA0 (0x0008) [0x0000000000000000]              
	float                                              MaxAccelRate;                                     		// 0x0BA8 (0x0004) [0x0000000000000000]              
	float                                              MaxAirSpeed;                                      		// 0x0BAC (0x0004) [0x0000000000000000]              
	float                                              MaxGroundSpeed;                                   		// 0x0BB0 (0x0004) [0x0000000000000000]              
	float                                              MeshScale;                                        		// 0x0BB4 (0x0004) [0x0000000000000000]              
	struct FString                                     PrimaryWeapon;                                    		// 0x0BB8 (0x0010) [0x0000000000000000]              
	struct FString                                     SecondaryWeapon;                                  		// 0x0BC8 (0x0010) [0x0000000000000000]              
	struct FString                                     MeleeWeapon;                                      		// 0x0BD8 (0x0010) [0x0000000000000000]              
	unsigned char                                      MovementType;                                     		// 0x0BE8 (0x0001) [0x0000000000000000]              
	unsigned char                                      AlertnessState;                                   		// 0x0BE9 (0x0001) [0x0000000000000000]              
	unsigned char                                      WantedCoverPose;                                  		// 0x0BEA (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentCoverPose;                                 		// 0x0BEB (0x0001) [0x0000000000000000]              
	unsigned long                                      bShouldCover : 1;                                 		// 0x0BEC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInCover : 1;                                     		// 0x0BEC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ThrowRecheck : 1;                                 		// 0x0BEC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsReplicateCurTargetName : 1;                    		// 0x0BEC (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              CoverPct;                                         		// 0x0BF0 (0x0004) [0x0000000000000000]              
	float                                              CoverPoseBlendTimeOverride;                       		// 0x0BF4 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   AimPitchRange;                                    		// 0x0BF8 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   AimYawRange;                                      		// 0x0C00 (0x0008) [0x0000000000000000]              
	float                                              FollowAimingYawInterpSpeed;                       		// 0x0C08 (0x0004) [0x0000000000000000]              
	float                                              TurnToTargetYawInterpSpeed;                       		// 0x0C0C (0x0004) [0x0000000000000000]              
	float                                              DefaultRotationYawRate;                           		// 0x0C10 (0x0004) [0x0000000000000000]              
	class USkelControlLookAt*                          LookAtCtrl2;                                      		// 0x0C14 (0x0008) [0x0000000000000000]              
	class USkelControlLookAt*                          LookAtMount;                                      		// 0x0C1C (0x0008) [0x0000000000000000]              
	class USkelControlLookAt*                          LookAtMount2;                                     		// 0x0C24 (0x0008) [0x0000000000000000]              
	class AActor*                                      AITarget;                                         		// 0x0C2C (0x0008) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AINameStringIndex;                                		// 0x0C34 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x0C38 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x0C40 (0x0008) [0x0000000000000000]              
	struct FString                                     RepCurTargetName;                                 		// 0x0C48 (0x0010) [0x000000000041000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_NeedCtorLink )
	struct FString                                     OldCurTargetName;                                 		// 0x0C58 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1807 ];

		return pClassPointer;
	};

	void GetEmphasized ( );
	void StartFire ( );
	void PossessedBy ( );
	void AdjustDamage ( );
	void eventTakeDamage ( );
	void NeedToTurn ( );
	void SimpleThrowGrenade ( );
	void GrenadeTime ( );
	void SimpleArmGrenade ( );
	void AddDefaultInventory ( );
	void ShouldDisplayIFF ( );
	void SetAITarget ( );
	void UpdateAITarget ( );
	void PostInitAnimTree ( );
	void StopAmbientSound ( );
	void PlayAmbientSound ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( );
	void IsInCover ( );
	void MoveToInCover ( );
	void CoverPoseTransitionOver ( );
	void SetNoCoverPose ( );
	void SetCoverPose ( );
	void CanAim ( );
	void PostureTransitionOver ( );
	void SetPostureDefault ( );
	void SetCrouched ( );
	void IsCrouched ( );
	void SetMovementSpeedDefault ( );
	void SetSpeed ( );
	void GetSpeed ( );
	void SetAlertnessDefault ( );
	void SetAlertness ( );
	void GetAlertness ( );
	void SetMovementTypeDefault ( );
	void SetMovementType ( );
	void GetMovementType ( );
};

UClass* ACombatGuy_NPC::pClassPointer = NULL;

// Class CombatGame.CombatPawn_AttackSkillActor
// 0x0084 (0x0CEC - 0x0C68)
class ACombatPawn_AttackSkillActor : public ACombatGuy_NPC
{
public:
	unsigned char                                      ActorTypeIndex;                                   		// 0x0C68 (0x0001) [0x0000000000000000]              
	struct FString                                     HudIconPath;                                      		// 0x0C6C (0x0010) [0x0000000000000000]              
	float                                              Lifetime;                                         		// 0x0C7C (0x0004) [0x0000000000000000]              
	class ACombatPC*                                   Summoner;                                         		// 0x0C80 (0x0008) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      Deployed : 1;                                     		// 0x0C88 (0x0004) [0x0000000000430000] [0x00000001] ( CPF_Travel | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      SmokingHot : 1;                                   		// 0x0C88 (0x0004) [0x0000000000440019] [0x00000002] ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FName                                       DeployAnim;                                       		// 0x0C8C (0x0008) [0x0000000000000000]              
	float                                              DeployTime;                                       		// 0x0C94 (0x0004) [0x0000000000000000]              
	class ULensFlareComponent*                         IFF_Effect;                                       		// 0x0C98 (0x0008) [0x0000000000000000]              
	class ULensFlare*                                  IFF_FriendTemplate;                               		// 0x0CA0 (0x0008) [0x0000000000000000]              
	class ULensFlare*                                  IFF_FoeTemplate;                                  		// 0x0CA8 (0x0008) [0x0000000000000000]              
	class ULensFlare*                                  IFF_CoolingTemplate;                              		// 0x0CB0 (0x0008) [0x0000000000000000]              
	float                                              SmokePct;                                         		// 0x0CB8 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    DamageEffectPSC;                                  		// 0x0CBC (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             DamageEffectPSCTemplate;                          		// 0x0CC4 (0x0008) [0x0000000000000000]              
	struct FName                                       DamageEffectSocketName;                           		// 0x0CCC (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DamageSound;                                      		// 0x0CD4 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             ExploEmitter;                                     		// 0x0CDC (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DeathSound;                                       		// 0x0CE4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1808 ];

		return pClassPointer;
	};

	void GetRemovedFromPC ( );
	void GetRegisteredToPC ( );
	void PlayDying ( );
	void SetIFFBeacon ( );
	void StopDamageEffect ( );
	void PlayDamageEffect ( );
	void eventTakeDamage ( );
	void PlayExplosionffect ( );
	void GotoStateCompleteDeployed ( );
	void Timer_Died ( );
	void PostDeployedJobs ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatPawn_AttackSkillActor::pClassPointer = NULL;

// Class CombatGame.CombatPawn_TrophyTurret
// 0x00AC (0x0D98 - 0x0CEC)
class ACombatPawn_TrophyTurret : public ACombatPawn_AttackSkillActor
{
public:
	struct FSTargetExplodeLocationInfo                 TargetExplodeLocationInfo;                        		// 0x0CEC (0x0010) [0x0000000000450000]              ( CPF_Travel | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              IdleRotDegPerSecond;                              		// 0x0CFC (0x0004) [0x0000000000000000]              
	float                                              AimRotDegPerSecond;                               		// 0x0D00 (0x0004) [0x0000000000000000]              
	float                                              MaxAimTime;                                       		// 0x0D04 (0x0004) [0x0000000000000000]              
	float                                              FireHoldTime;                                     		// 0x0D08 (0x0004) [0x0000000000000000]              
	struct FName                                       FireAnim;                                         		// 0x0D0C (0x0008) [0x0000000000000000]              
	float                                              FireCoolTime;                                     		// 0x0D14 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             FireMuzzlePS;                                     		// 0x0D18 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   FireSound;                                        		// 0x0D20 (0x0008) [0x0000000000000000]              
	class UCombatGameTrophyTouchComponent*             TouchComponent;                                   		// 0x0D28 (0x0008) [0x0000000000000000]              
	TArray< class UClass* >                            EnableCheckActorClasses;                          		// 0x0D30 (0x0010) [0x0000000000000000]              
	TArray< class UClass* >                            ForbiddenCheckActorClasses;                       		// 0x0D40 (0x0010) [0x0000000000000000]              
	class UClass*                                      ExplosionProjClass;                               		// 0x0D50 (0x0008) [0x0000000000000000]              
	TArray< class ACombatProjectile* >                 TouchedProjectiles;                               		// 0x0D58 (0x0010) [0x0000000000000000]              
	struct FRotator                                    DesiredAimRotation;                               		// 0x0D68 (0x000C) [0x0000000000000000]              
	class USkelControlSingleBone*                      AimControl;                                       		// 0x0D74 (0x0008) [0x0000000000000000]              
	class UCombatAnim_BlendList*                       TrophyTurretAnimState;                            		// 0x0D7C (0x0008) [0x0000000000000000]              
	unsigned char                                      CurTrophyState;                                   		// 0x0D84 (0x0001) [0x0000000000000000]              
	struct FVector                                     SavedTargetExplodeLocation;                       		// 0x0D88 (0x000C) [0x0000000000000000]              
	int                                                WeaponIndex;                                      		// 0x0D94 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1809 ];

		return pClassPointer;
	};

	void GetRemovedFromPC ( );
	void GetRegisteredToPC ( );
	void DoInterceptExplode ( );
	void TimerFireCoolTime ( );
	void TimerFireHoldTime ( );
	void eventOnAimmingComplete ( );
	void TimerAimming ( );
	void recvTargetExplodeLocation ( );
	void eventOnAimming ( );
	void SetTargetLocationInfo ( );
	void GotoStateCompleteDeployed ( );
	void eventUnTouch ( );
	void eventTouch ( );
	void NotifyLocalPlayerTeamReceived ( );
	void NotifyTeamChanged ( );
	void CanBeBaseForPawn ( );
	void eventPostInitAnimTree ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( );
	void SetTouchComponent ( );
	void IsEnableCheckActorClass ( );
};

UClass* ACombatPawn_TrophyTurret::pClassPointer = NULL;

// Class CombatGame.CombatPawn_FlyingVehicle
// 0x0030 (0x0C98 - 0x0C68)
class ACombatPawn_FlyingVehicle : public ACombatGuy_NPC
{
public:
	float                                              TransformDamageRate;                              		// 0x0C68 (0x0004) [0x0000000000000000]              
	unsigned char                                      TransformNum;                                     		// 0x0C6C (0x0001) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )
	unsigned char                                      CurrentTransformNum;                              		// 0x0C6D (0x0001) [0x0000000000000000]              
	class UParticleSystem*                             ExploEmitter;                                     		// 0x0C70 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    DamageEffectPSC;                                  		// 0x0C78 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             DamageEffectPSCTemplate;                          		// 0x0C80 (0x0008) [0x0000000000000000]              
	struct FName                                       DamageEffectSocketName;                           		// 0x0C88 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ExplosionSound;                                   		// 0x0C90 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1810 ];

		return pClassPointer;
	};

	void StopDamageEffect ( );
	void PlayDamageEffect ( );
	void PlayExplosionffect ( );
	void OnExplosionParticleSystemFinished ( );
	void eventTakeDamage ( );
	void TransformByDamage ( );
	void eventReplicatedEvent ( );
	void PostBeginPlay ( );
};

UClass* ACombatPawn_FlyingVehicle::pClassPointer = NULL;

// Class CombatGame.CombatWaveFlyingVehicleBase
// 0x0048 (0x0CE0 - 0x0C98)
class ACombatWaveFlyingVehicleBase : public ACombatPawn_FlyingVehicle
{
public:
	struct FPointer                                    VfTable_Iinterface_WavePawn;                      		// 0x0C98 (0x0008) [0x0000000000000000]              
	struct FWavePawnData                               WavePawnData;                                     		// 0x0CA0 (0x0040) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1811 ];

		return pClassPointer;
	};

	void GetIFFEnemyType ( );
};

UClass* ACombatWaveFlyingVehicleBase::pClassPointer = NULL;

// Class CombatGame.CombatWavePawnBase
// 0x0048 (0x0CB0 - 0x0C68)
class ACombatWavePawnBase : public ACombatGuy_NPC
{
public:
	struct FPointer                                    VfTable_Iinterface_WavePawn;                      		// 0x0C68 (0x0008) [0x0000000000000000]              
	struct FWavePawnData                               WavePawnData;                                     		// 0x0C70 (0x0040) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1812 ];

		return pClassPointer;
	};

	void GetIFFEnemyType ( );
};

UClass* ACombatWavePawnBase::pClassPointer = NULL;

// Class CombatGame.CombatAIPawn_SelfDestuctBase
// 0x0038 (0x0CE8 - 0x0CB0)
class ACombatAIPawn_SelfDestuctBase : public ACombatWavePawnBase
{
public:
	class UParticleSystem*                             PS_DeathExplosion;                                		// 0x0CB0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SC_DeathExplosion;                                		// 0x0CB8 (0x0008) [0x0000000000000000]              
	class UClass*                                      DamageType_DeathExplosion;                        		// 0x0CC0 (0x0008) [0x0000000000000000]              
	float                                              Momentum_DeathExplosion;                          		// 0x0CC8 (0x0004) [0x0000000000000000]              
	int                                                Damage_DeathExplosion;                            		// 0x0CCC (0x0004) [0x0000000000000000]              
	float                                              DamageRadius_DeathExplosion;                      		// 0x0CD0 (0x0004) [0x0000000000000000]              
	struct FString                                     WeaponCodeName;                                   		// 0x0CD4 (0x0010) [0x0000000000000000]              
	int                                                WeaponID;                                         		// 0x0CE4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1813 ];

		return pClassPointer;
	};

	void HurtRadius ( );
	void eventDoDeathExplosion ( );
	void PlayDying ( );
	void eventTouch ( );
	void IsEnemy ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatAIPawn_SelfDestuctBase::pClassPointer = NULL;

// Class CombatGame.CombatGuy_Player
// 0x003C (0x0BDC - 0x0BA0)
class ACombatGuy_Player : public ACombatGuyBase
{
public:
	unsigned long                                      bNeedAutoHeal : 1;                                		// 0x0BA0 (0x0004) [0x0000000000400000] [0x00000001] ( CPF_NeedCtorLink )
	unsigned long                                      bPlayAutoHealStopEffect : 1;                      		// 0x0BA0 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                AddHealth;                                        		// 0x0BA4 (0x0004) [0x0000000000000000]              
	float                                              AutoHealTime;                                     		// 0x0BA8 (0x0004) [0x0000000000000000]              
	int                                                AutoHealAmount;                                   		// 0x0BAC (0x0004) [0x0000000000000000]              
	float                                              MaxAutoHealHealthModifier;                        		// 0x0BB0 (0x0004) [0x0000000000000000]              
	float                                              AutoHealConditionTime;                            		// 0x0BB4 (0x0004) [0x0000000000000000]              
	TArray< class ACombatProjectile* >                 GrenadeIndicators;                                		// 0x0BB8 (0x0010) [0x0000000000000000]              
	class UClass*                                      HandActorClass;                                   		// 0x0BC8 (0x0008) [0x0000000000000000]              
	class ACombatHandActor*                            HandActor;                                        		// 0x0BD0 (0x0008) [0x0000000000000000]              
	float                                              DamageMultiplierForTest;                          		// 0x0BD8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1814 ];

		return pClassPointer;
	};

	void UpdateHandActorMesh ( );
	void DestroyHandActor ( );
	void IsValidCharMeshActor ( );
	void GetHandActor ( );
	void CreateHandActor ( );
	void eventDestroyed ( );
	void eventRegisterGrenadeIndicator ( );
	void GetEffectedMaxAutoHealHealth ( );
	void GetEffectedAutoHealtime ( );
	void AutoHealStopEffect ( );
	void StopAutoHeal ( );
	void ClearAutoHeal ( );
	void UpdateAutoHeal ( );
	void PendingHealth ( );
	void CalculateAutoHeal ( );
	void HealingHealth ( );
	void ResetWhenHeal ( );
	void StartAutoHeal ( );
	void CheckAutoHeal ( );
	void Tick ( );
	void CalcThirdPersonCam ( );
	void AdjustDamage ( );
	void ProcessViewRotation ( );
	void PlayJumpingSound ( );
	void PlayLandingSound ( );
	void PlayFallingDamageLandSound ( );
	void NotifyClientTakeHit ( );
	void TryNewCamRot ( );
	void FindGoodEndView ( );
	void eventTakeDamage ( );
	void Survived ( );
	void Died ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatGuy_Player::pClassPointer = NULL;

// Class CombatGame.CombatPawnCylinderComponent
// 0x0000 (0x0260 - 0x0260)
class UCombatPawnCylinderComponent : public UCylinderComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1815 ];

		return pClassPointer;
	};

};

UClass* UCombatPawnCylinderComponent::pClassPointer = NULL;

// Class CombatGame.CombatPickupFactory
// 0x0058 (0x03C0 - 0x0368)
class ACombatPickupFactory : public APickupFactory
{
public:
	class UStaticMeshComponent*                        BaseMesh;                                         		// 0x0368 (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0370 (0x0008) [0x0000000000000000]              
	unsigned long                                      bCheckTeam : 1;                                   		// 0x0378 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdatingPickup : 1;                              		// 0x0378 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFloatingPickup : 1;                              		// 0x0378 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRotatingPickup : 1;                              		// 0x0378 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bForceDelayedSpawn : 1;                           		// 0x0378 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDelayedSpawn : 1;                                		// 0x0378 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bForceRespawn : 1;                                		// 0x0378 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned char                                      TeamIndex;                                        		// 0x037C (0x0001) [0x0000000000000000]              
	class USoundCue*                                   RespawnSound;                                     		// 0x0380 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   PickupSound;                                      		// 0x0388 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   EnemyPickupSound;                                 		// 0x0390 (0x0008) [0x0000000000000000]              
	float                                              BobTimer;                                         		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              BobOffset;                                        		// 0x039C (0x0004) [0x0000000000000000]              
	float                                              BobSpeed;                                         		// 0x03A0 (0x0004) [0x0000000000000000]              
	float                                              BobBaseOffset;                                    		// 0x03A4 (0x0004) [0x0000000000000000]              
	float                                              YawRotationRate;                                  		// 0x03A8 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    SpinningParticleEffects;                          		// 0x03AC (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             SpinningParticleTemplate;                         		// 0x03B4 (0x0008) [0x0000000000000000]              
	float                                              RespawnTime;                                      		// 0x03BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1816 ];

		return pClassPointer;
	};

	void PlayPickupSound ( );
	void InvalidatePickup ( );
	void ValidPickup ( );
	void eventScriptGetTeamNum ( );
	void OnToggle ( );
	void OnToggleHidden ( );
	void IsEnable ( );
	void ToggleEnable ( );
	void RespawnEffect ( );
	void PostBeginPlay ( );
	void SetPickupHidden ( );
	void GetRespawnTime ( );
	void SetRespawn ( );
	void InitializePickup ( );
	void eventSetInitialState ( );
};

UClass* ACombatPickupFactory::pClassPointer = NULL;

// Class CombatGame.CombatPingCheck
// 0x0010 (0x0070 - 0x0060)
class UCombatPingCheck : public UObject
{
public:
	TArray< struct FString >                           URLs;                                             		// 0x0060 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1817 ];

		return pClassPointer;
	};

	void GetURLs ( );
	void GetPing ( );
	void SetPing ( );
	void Suspend ( );
};

UClass* UCombatPingCheck::pClassPointer = NULL;

// Class CombatGame.CombatPlayDataInfo
// 0x0000 (0x0060 - 0x0060)
class UCombatPlayDataInfo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1818 ];

		return pClassPointer;
	};

	void SubBSCoin ( );
	void SubMCoin ( );
	void SubGCoin ( );
	void SubGameMedal ( );
	void SubGameCash ( );
	void SubGameMoney ( );
	void AddBSCoin ( );
	void AddMCoin ( );
	void AddGCoin ( );
	void AddGameMedal ( );
	void AddGameCash ( );
	void AddGameMoney ( );
	void SetBSCoin ( );
	void SetMCoin ( );
	void SetGCoin ( );
	void SetGameMedal ( );
	void SetGameCash ( );
	void SetGameMoney ( );
	void GetBSCoin ( );
	void GetMCoin ( );
	void GetGCoin ( );
	void GetGameMedal ( );
	void GetGameCash ( );
	void GetGameMoney ( );
};

UClass* UCombatPlayDataInfo::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndPC
// 0x0232 (0x0B34 - 0x0902)
class ACombatFrontEndPC : public ACombatPlayerControllerBase
{
public:
	class ACombatFrontEndHUD*                          MyComBatHUD;                                      		// 0x0904 (0x0008) [0x0000000000000000]              
	class UCombatGameTableDepot*                       TableDepot;                                       		// 0x090C (0x0008) [0x0000000000000000]              
	unsigned long                                      bShopZoom : 1;                                    		// 0x0914 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInvenZoom : 1;                                   		// 0x0914 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCameraZoom : 1;                                  		// 0x0914 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNeedOverridePostProcess : 1;                     		// 0x0914 (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< class AUIDisplayPoint* >                   StartPosition;                                    		// 0x0918 (0x0010) [0x0000000000000000]              
	struct FString                                     PawnDisplayPositionName;                          		// 0x0928 (0x0010) [0x0000000000000000]              
	struct FString                                     PawnShopDisplayPositionName;                      		// 0x0938 (0x0010) [0x0000000000000000]              
	class ACombatFrontEndActor*                        FEPlayerActor;                                    		// 0x0948 (0x0008) [0x0000000000000000]              
	TArray< struct FInputExpireTimeInfo >              InputExpireTime;                                  		// 0x0950 (0x0010) [0x0000000000000000]              
	float                                              DisconnectMatchServerTime;                        		// 0x0960 (0x0004) [0x0000000000000000]              
	TArray< struct FFrontEndCameraActorInfo >          FrontEndCameraActorInfos;                         		// 0x0964 (0x0010) [0x0000000000000000]              
	int                                                CameraZoomState;                                  		// 0x0974 (0x0004) [0x0000000000000000]              
	float                                              LastMouseScrollTime;                              		// 0x0978 (0x0004) [0x0000000000000000]              
	struct FPostProcessSettings                        CameraOverridePostProcess;                        		// 0x097C (0x0164) [0x0000000000000000]              
	struct FName                                       ZoomInCameraLocationActorName;                    		// 0x0AE0 (0x0008) [0x0000000000000000]              
	struct FName                                       ZoomOutCameraLocationActorName;                   		// 0x0AE8 (0x0008) [0x0000000000000000]              
	class ACameraLocationPoint*                        ZoomInCameraLocationActor;                        		// 0x0AF0 (0x0008) [0x0000000000000000]              
	class ACameraLocationPoint*                        ZoomOutCameraLocationActor;                       		// 0x0AF8 (0x0008) [0x0000000000000000]              
	struct FName                                       ZoomInShopCameraLocationActorName;                		// 0x0B00 (0x0008) [0x0000000000000000]              
	struct FName                                       ZoomOutShopCameraLocationActorName;               		// 0x0B08 (0x0008) [0x0000000000000000]              
	class ACameraLocationPoint*                        ZoomInShopCameraLocationActor;                    		// 0x0B10 (0x0008) [0x0000000000000000]              
	class ACameraLocationPoint*                        ZoomOutShopCameraLocationActor;                   		// 0x0B18 (0x0008) [0x0000000000000000]              
	float                                              AccumDeltaTime;                                   		// 0x0B20 (0x0004) [0x0000000000000000]              
	float                                              MouseWheelDeltaTime;                              		// 0x0B24 (0x0004) [0x0000000000000000]              
	float                                              LerpAmount;                                       		// 0x0B28 (0x0004) [0x0000000000000000]              
	int                                                TutorialModeIndex;                                		// 0x0B2C (0x0004) [0x0000000000000000]              
	int                                                TutorialMapIndex;                                 		// 0x0B30 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1819 ];

		return pClassPointer;
	};

	void StartTutorialGame ( );
	void eventIsContinuableRandomBox ( );
	void SetGameModeGuide ( );
	void NotifyChangedBoosterItem ( );
	void KickUser ( );
	void TeamSwap ( );
	void GetHost ( );
	void Dev_UnblockUser ( );
	void Dev_BlockUser ( );
	void Dev_RemoveFriend ( );
	void Dev_AddFriend ( );
	void Dev_RequestFriend ( );
	void eventGetFrontEndWeaponAttachmentMesh ( );
	void eventGetFrontEndCharacterMesh ( );
	void InitCameraZoomInfos ( );
	void SetShopCameraZoom ( );
	void SetInventoryCameraZoom ( );
	void SetFrontEndMouseScroll ( );
	void eventPlayerTick ( );
	void SetFEActorLocAndRot ( );
	void ZoomLerp ( );
	void OnSetCameraTarget ( );
	void RefreshItemTime ( );
	void eventPostBeginPlay ( );
	void GetCameraLocationPoints ( );
	void GetWorldAllCamera ( );
	void SetFrontEndActorRotationX ( );
	void Dev_AddDashboardNotice ( );
	void Dev_ShowExchange ( );
	void Dev_ShowRandomBox ( );
	void Dev_SetWeapon ( );
	void Dev_SetCharacter ( );
	void Dev_ShowCreateNickName ( );
	void Dev_ShowShop ( );
	void Dev_ShowInven ( );
	void Dev_ShowCharacter ( );
	void Dev_StandAloneGame ( );
	void SetFrontEndPlayerWeaponMeshByRefItemIndex ( );
	void GetWeaponInfoByRefItemIndex ( );
	void SetFrontEndPlayerCharacterMeshByRefItemIndex ( );
	void SetFrontEndPlayerActorVisible ( );
	void SpawnFrontEndPlayerActor ( );
	void eventDestroyed ( );
	void MakeClanRoomNumber ( );
	void MakeRoomNumber ( );
	void GetPawnPosition ( );
	void GetPosition ( );
	void GetDisconnectMatchServerTime ( );
	void GetInputExpireTime ( );
	void GetTableDepot ( );
	void SetNoticeMsg ( );
	void ReloadStringDataTable ( );
	void RleaseEscape ( );
	void ClientSetHUD ( );
};

UClass* ACombatFrontEndPC::pClassPointer = NULL;

// Class CombatGame.CombatChampionshipObserverPC
// 0x0014 (0x0BA4 - 0x0B90)
class ACombatChampionshipObserverPC : public ACombatPC
{
public:
	struct FWatchingPlayerData                         WatchingPlayerInfo;                               		// 0x0B90 (0x0008) [0x0000000000000000]              
	unsigned long                                      bShowObserverTeamColor : 1;                       		// 0x0B98 (0x0004) [0x0000000000000000] [0x00000001] 
	class UCombatChampionshipManager*                  ChampionshipManager;                              		// 0x0B9C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1820 ];

		return pClassPointer;
	};

	void IsCombatChampionshipObserverPC ( );
	void UpdateHP ( );
	void ResetUI ( );
	void eventResetCameraMode ( );
	void SetCameraMode ( );
	void eventUpdateDeadPlayerPawnLocationList ( );
	void ClientReset ( );
	void IsChangeSpectatingCameraMode ( );
	void eventPostBeginPlay ( );
	void IgnoreSpawnProtection ( );
	void ToggleObserverTeamColor ( );
	void ServerViewSelf ( );
	void ServerViewTargetPlayer ( );
	void ServerViewPrevTeamPlayer ( );
	void ServerViewNextTeamPlayer ( );
	void ServerViewPlayer ( );
	void GetTeamNum ( );
	void KeyBindingSettingFromProfile ( );
};

UClass* ACombatChampionshipObserverPC::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionPC
// 0x001C (0x0BAC - 0x0B90)
class ACombatDemolitionPC : public ACombatPC
{
public:
	TArray< class ACombatTrigger* >                    TriggerUsedList;                                  		// 0x0B90 (0x0010) [0x0000000000000000]              
	struct FSExactLocationInfo                         PawnExactLocation;                                		// 0x0BA0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1821 ];

		return pClassPointer;
	};

	void ThrowBombAction ( );
	void ServerThrowBomb ( );
	void ThrowBomb ( );
	void ReleaseUse ( );
	void TriggerUnused ( );
	void TriggerInteracted ( );
	void GetCombatTriggerUseList ( );
	void GetPossessedTriggerUseList ( );
	void ServerUse_DemolitionPos ( );
	void CanDefuseC4_Local ( );
	void Use ( );
	void Reset ( );
};

UClass* ACombatDemolitionPC::pClassPointer = NULL;

// Class CombatGame.CombatPlayerInputBase
// 0x0000 (0x02EC - 0x02EC)
class UCombatPlayerInputBase : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1822 ];

		return pClassPointer;
	};

	void eventPlayerInput ( );
	void IsInputExpired ( );
};

UClass* UCombatPlayerInputBase::pClassPointer = NULL;

// Class CombatGame.CombatChampionshipObserverInput
// 0x002C (0x0318 - 0x02EC)
class UCombatChampionshipObserverInput : public UCombatPlayerInputBase
{
public:
	TArray< struct FKeyBind >                          ObserverKeyBindings;                              		// 0x02EC (0x0010) [0x0000000000000000]              
	class UCombatChampionshipCameraManager*            CameraData;                                       		// 0x02FC (0x0008) [0x0000000000000000]              
	float                                              FOV_Min;                                          		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              FOV_Max;                                          		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              SpectatorCameraSpeed_Min;                         		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              SpectatorCameraSpeed_Max;                         		// 0x0310 (0x0004) [0x0000000000000000]              
	int                                                LastSelectedFreeCamPoint;                         		// 0x0314 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1823 ];

		return pClassPointer;
	};

	void DebugMessage ( );
	void ToggleChampionshipObserverDebugField ( );
	void FreeView_MoveToCamPoint ( );
	void FreeView_SaveFreeCam ( );
	void FreeView_SetFreeCamMoveSpeed ( );
	void FreeView_ResetFreeCamMoveSpeed ( );
	void FreeView_ToggleBlockingMap ( );
	void FreeView_SetFOV ( );
	void FreeView_ResetFOV ( );
	void UpdateObserverCameraUI ( );
	void IsCameraStyleFreeCam ( );
	void GetObserverCameraText ( );
	void UpdateCameraMode ( );
	void PlayerView_ThirdPersonView_Toggle ( );
	void PlayerView_TargetPlayer ( );
	void PlayerView_PrevPlayer ( );
	void PlayerView_NextPlayer ( );
	void FreeView ( );
	void ResetView ( );
	void TopView ( );
	void PlayerView ( );
	void eventInitInputSystem ( );
	void GetBind ( );
};

UClass* UCombatChampionshipObserverInput::pClassPointer = NULL;

// Class CombatGame.CombatPlayerInput
// 0x010C (0x03F8 - 0x02EC)
class UCombatPlayerInput : public UCombatPlayerInputBase
{
public:
	float                                              LastDuckTime;                                     		// 0x02EC (0x0004) [0x0000000000000000]              
	unsigned long                                      bHoldDuck : 1;                                    		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoCenterPitch : 1;                             		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ToggleMoveTest : 1;                               		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      ForcedDoubleClick;                                		// 0x02F4 (0x0001) [0x0000000000000000]              
	float                                              PitchAutoCenterSpeed;                             		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              PitchAutoCenterSpeedRoadieRun;                    		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              PitchAutoCenterDelay;                             		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              DuckDelayTime;                                    		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              PitchAutoCenterDelayCount;                        		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              PitchAutoCenterHorizonOffset;                     		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              ForcePitchCenteringSpeed;                         		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              ForcedPitchCenteringHorizonOffset;                		// 0x0314 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   PitchAutoCenterTargetPitchWindow;                 		// 0x0318 (0x0008) [0x0000000000000000]              
	float                                              SprintTurnScale;                                  		// 0x0320 (0x0004) [0x0000000000000000]              
	float                                              SlidingTurnScale;                                 		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              MouseSensitivityMax;                              		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              MouseSensitivityMin;                              		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              MouseSensitivityStep;                             		// 0x0330 (0x0004) [0x0000000000000000]              
	float                                              WeaponMouseSens;                                  		// 0x0334 (0x0004) [0x0000000000000000]              
	struct FsMouseSens                                 PresetWeaponMouseSens[ 0x4 ];                     		// 0x0338 (0x00B0) [0x0000000000000000]              
	int                                                bForceWalk;                                       		// 0x03E8 (0x0004) [0x0000000000000000]              
	int                                                bForceLeft;                                       		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              ForceTurn;                                        		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              LastToggleChaItemFXTime;                          		// 0x03F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1824 ];

		return pClassPointer;
	};

	void SetOnReceivedNativeInputKey ( );
	void GetBind ( );
	void InputKey ( );
	void SetAxisInputDirectly ( );
	void IsMouseUseAllModeInPreset ( );
	void IsMouseAutoScaleInPreset ( );
	void SetPresetMouseUseAllMode ( );
	void SetMouseAutoScaleModeInPreset ( );
	void UpdateMouseSensitivityInPreset ( );
	void SetMouseSensitivityInPreset ( );
	void SetMouseSensitivityInMaster ( );
	void AddMouseSensitivity ( );
	void GetCurrentPresetAndZoomState ( );
	void SensitivityDown ( );
	void SensitivityUp ( );
	void ResetMouseSensitivityInPreset ( );
	void ResetMouseSensitivityInMaster ( );
	void ResetMouseSensitivity ( );
	void SetMouseSensitivityMode ( );
	void InitializeMouseSettingsFromProfile ( );
	void AutoPitchCentering ( );
	void ProcessModifyInput ( );
	void ForcePitchCentering ( );
	void eventPlayerInput ( );
	void ToggleChaItemFX ( );
	void Jump ( );
	void Duck ( );
	void UnDuck ( );
	void IsInputExpired ( );
	void GetIsPressed ( );
	void GetIsShiftPressed ( );
	void GetUDKBindNameFromCommand ( );
};

UClass* UCombatPlayerInput::pClassPointer = NULL;

// Class CombatGame.CombatPracticePlayerInput
// 0x0010 (0x0408 - 0x03F8)
class UCombatPracticePlayerInput : public UCombatPlayerInput
{
public:
	TArray< struct FKeyBind >                          PracticeKeyBindings;                              		// 0x03F8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1825 ];

		return pClassPointer;
	};

	void ResetPracticeGameTimer ( );
	void TogglePracticeGameTimer ( );
	void ToggleProjectileCamera ( );
	void CheatChangeTeam ( );
	void KillAllCheatPawns ( );
	void SpawnCheatPawn ( );
	void GetBind ( );
};

UClass* UCombatPracticePlayerInput::pClassPointer = NULL;

// Class CombatGame.CombatPlayerStart
// 0x0038 (0x0384 - 0x034C)
class ACombatPlayerStart : public APlayerStart
{
public:
	struct FVector                                     StartVelocityInTheAir;                            		// 0x034C (0x000C) [0x0000000000000000]              
	unsigned long                                      bPlaceInTheAir : 1;                               		// 0x0358 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseFirstSpawn : 1;                               		// 0x0358 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      AreaIndex;                                        		// 0x035C (0x0001) [0x0000000000000000]              
	class USpriteComponent*                            TeamSpriteComponent;                              		// 0x0360 (0x0008) [0x0000000000000000]              
	class USpriteComponent*                            InTheAirSpriteComponent;                          		// 0x0368 (0x0008) [0x0000000000000000]              
	class UArrowComponent*                             InTheAirArrowComponent;                           		// 0x0370 (0x0008) [0x0000000000000000]              
	struct FVector                                     FloorLocation;                                    		// 0x0378 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1826 ];

		return pClassPointer;
	};

	void IsPlacedInTheAir ( );
	void GetFloorLocation ( );
	void GetTeamNum ( );
};

UClass* ACombatPlayerStart::pClassPointer = NULL;

// Class CombatGame.CombatGroupStart
// 0x0008 (0x038C - 0x0384)
class ACombatGroupStart : public ACombatPlayerStart
{
public:
	unsigned long                                      bPlayer : 1;                                      		// 0x0384 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                GroupID;                                          		// 0x0388 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1827 ];

		return pClassPointer;
	};

};

UClass* ACombatGroupStart::pClassPointer = NULL;

// Class CombatGame.CombatTeamStart
// 0x0000 (0x0384 - 0x0384)
class ACombatTeamStart : public ACombatPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1828 ];

		return pClassPointer;
	};

};

UClass* ACombatTeamStart::pClassPointer = NULL;

// Class CombatGame.CombatPlayerStartGroup
// 0x0000 (0x0350 - 0x0350)
class ACombatPlayerStartGroup : public APlayerStartGroup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1829 ];

		return pClassPointer;
	};

};

UClass* ACombatPlayerStartGroup::pClassPointer = NULL;

// Class CombatGame.CombatProfileSettings
// 0x0060 (0x0134 - 0x00D4)
class UCombatProfileSettings : public UOnlineProfileSettings
{
public:
	TArray< struct FString >                           DigitalButtonActionsToCommandMapping;             		// 0x00D4 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             KeyMappingArray;                                  		// 0x00E4 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           OptionMappingArray;                               		// 0x00F4 (0x0010) [0x0000000000000000]              
	TArray< struct FKeymapDatum >                      KeymapData;                                       		// 0x0104 (0x0010) [0x0000000000000000]              
	TArray< struct FFiexdKeyCommandInfo >              FiexdKeyCommandInfos;                             		// 0x0114 (0x0010) [0x0000000000000000]              
	TArray< int >                                      ReservedData;                                     		// 0x0124 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1830 ];

		return pClassPointer;
	};

	void SetOneFrameThreadLag ( );
	void GetForegroundFOVDelta ( );
	void GetCrosshairSetting ( );
	void GetTeamIFFViewSetting ( );
	void GetFlipMeshSetting ( );
	void FlashKeyCodeToUnrealKeyname ( );
	void UnrealKeynameToFlashKeyCode ( );
	void KeyCodetoFlashKeyName ( );
	void UnrealKeynameToFlashKeyname ( );
	void FlashKeynameToUnrealKeyname ( );
	void GetRangeProfileSettingDefaultbyName ( );
	void GetRangeProfileSettingDefault ( );
	void GetAimAssistValue ( );
	void GetHoldMode ( );
	void SetHoldMode ( );
	void GetGunTrailSystemSettings ( );
	void SetGunTrailSystemSettings ( );
	void SetGunTrailSettings ( );
	void VideoOptionLevel ( );
	void CalcelAspectAndResolution ( );
	void InitVideoOptionFromScreen ( );
	void ResetVideoOptionFromScreen ( );
	void ExcuteOptionCommand ( );
	void GetAdvanceOptionsSettings ( );
	void SetSceneToneSettings ( );
	void SetGoreLevelSettings ( );
	void SetScreenColorsSettings ( );
	void SetVignettingSettings ( );
	void SetDisplayGammaSettings ( );
	void SetBackgroundShadowSettings ( );
	void SetAntiAliasingSettings ( );
	void SetVideoProfileMappings ( );
	void GetVideoScoreLevel ( );
	void eventScriptSetToDefaults ( );
	void eventSetToDefaults ( );
	void ResetKeysToDefault ( );
	void RemoveDBABindings ( );
	void RemoveFixedKeyBindings ( );
	void GetKeyProfileValue ( );
	void ApplyKeyBinding ( );
	void CheckFixedKeyCommand ( );
	void ApplyAllKeyBindings ( );
	void UnbindKey ( );
	void SetKeyBinding ( );
	void RemoveCommandBinding ( );
	void ReplaceBindingKey ( );
	void SetKeyBindingUsingCommand ( );
	void GetDBAFromCommand ( );
	void GetProfileIDForDBA ( );
	void FindKeyEnum ( );
	void FindKeyName ( );
	void StoreKeysUsingPlayerInput ( );
	void SetRangedProfileSettingValueByName ( );
	void SetProfileSettingValueFloatByName ( );
	void SetProfileSettingValueIntByName ( );
	void GetRangedProfileSettingValueByName ( );
	void GetProfileSettingValueIdByName ( );
	void GetProfileSettingValueStringByName ( );
	void GetProfileSettingValueFloatByName ( );
	void GetProfileLocalizedKeyString ( );
	void SetProfileDefaultValueByCommand ( );
	void GetProfileKeyStringByCommand ( );
	void GetProfileDefaultValueInt ( );
	void GetProfileDefaultValueIntByName ( );
	void GetProfileSettingValueIntByName ( );
};

UClass* UCombatProfileSettings::pClassPointer = NULL;

// Class CombatGame.CombatProjectileBlockingVolume
// 0x0000 (0x0284 - 0x0284)
class ACombatProjectileBlockingVolume : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1831 ];

		return pClassPointer;
	};

};

UClass* ACombatProjectileBlockingVolume::pClassPointer = NULL;

// Class CombatGame.CombatRadarCore
// 0x01E0 (0x0424 - 0x0244)
class ACombatRadarCore : public AActor
{
public:
	class ACombatMinimapActor*                         CurrentMinimapActor;                              		// 0x0244 (0x0008) [0x0000000000000000]              
	TArray< class ACombatMapPoint* >                   MapPointList;                                     		// 0x024C (0x0010) [0x0000000000000000]              
	unsigned char                                      TacticalMapMode;                                  		// 0x025C (0x0001) [0x0000000000000000]              
	unsigned char                                      CachedMapModeBeforePressKey;                      		// 0x025D (0x0001) [0x0000000000000000]              
	unsigned char                                      AllyIconNameList[ 0x5 ];                          		// 0x025E (0x0005) [0x0000000000000000]              
	unsigned char                                      EnemyIconNameList[ 0x5 ];                         		// 0x0263 (0x0005) [0x0000000000000000]              
	float                                              RadarRange;                                       		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                MiniMapSize[ 0x3 ];                               		// 0x026C (0x000C) [0x0000000000000000]              
	int                                                MiniMapSizeType;                                  		// 0x0278 (0x0004) [0x0000000000000000]              
	int                                                WholeMapFrameSizeX;                               		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                WholeMapFrameSizeY;                               		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              HalfWholeMapFrameSizeX;                           		// 0x0284 (0x0004) [0x0000000000000000]              
	float                                              HalfWholeMapFrameSizeY;                           		// 0x0288 (0x0004) [0x0000000000000000]              
	int                                                WholeMapHybridFrameSizeX;                         		// 0x028C (0x0004) [0x0000000000000000]              
	int                                                WholeMapHybridFrameSizeY;                         		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              HalfWholeMapHybridFrameSizeX;                     		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              HalfWholeMapHybridFrameSizeY;                     		// 0x0298 (0x0004) [0x0000000000000000]              
	int                                                BroadcastingMapFrameSizeX;                        		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                BroadcastingMapFrameSizeY;                        		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              HalfBroadcastingMapFrameSizeX;                    		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              HalfBroadcastingMapFrameSizeY;                    		// 0x02A8 (0x0004) [0x0000000000000000]              
	float                                              CurrentHalfMapFrameSizeX;                         		// 0x02AC (0x0004) [0x0000000000000000]              
	float                                              CurrentHalfMapFrameSizeY;                         		// 0x02B0 (0x0004) [0x0000000000000000]              
	int                                                DefaultMapTextureSizeX;                           		// 0x02B4 (0x0004) [0x0000000000000000]              
	int                                                DefaultMapTextureSizeY;                           		// 0x02B8 (0x0004) [0x0000000000000000]              
	TArray< struct FObjectIconInfo >                   ObjectIconList;                                   		// 0x02BC (0x0010) [0x0000000000000000]              
	unsigned long                                      bFinishObjectIconList : 1;                        		// 0x02CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedUpdateMapSymbol : 1;                         		// 0x02CC (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                LastLocationLabelID;                              		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UCombatHUD_TacticalMapAndScoreboard*         TacticalMapUI;                                    		// 0x02D4 (0x0008) [0x0000000000000000]              
	struct FTacticalMapPlayerIconInfo                  AllyIconsInfoList[ 0x5 ];                         		// 0x02DC (0x0028) [0x0000000000000000]              
	struct FTacticalMapPlayerIconInfo                  EnemyIconsInfoList[ 0x5 ];                        		// 0x0304 (0x0028) [0x0000000000000000]              
	struct FMinimapObjectIconInfo                      MinimapObjectIconinfos[ 0x3E ];                   		// 0x032C (0x00F8) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1832 ];

		return pClassPointer;
	};

	void ClearAllIcons ( );
	void GetViewTargetPRI ( );
	void ToggleMiniMapSize ( );
	void SetGoalAndSpecialPointLabel ( );
	void SetModeName ( );
	void GetScoreboardType ( );
	void CanShowWholeMap ( );
	void CanShowMinimap ( );
	void CanShowScoreboard ( );
	void UpdateTacticalMap ( );
	void ClearLocationLabel ( );
	void UpdateLocationLabel ( );
	void SortByPriority ( );
	void SetMapSymbolList ( );
	void SetBroadcastingMapMode ( );
	void SetWholemapMode ( );
	void SetMinimapMode ( );
	void GetAIModeType ( );
	void SetTacticalMapAndScoreboardMode ( );
	void SetupFor ( );
	void DrawTacticalMap ( );
	void RemoveMissionActorIcon ( );
	void UpdateObjectIconList ( );
	void SetObjectIconList ( );
	void InitMiniMapSizeType ( );
	void Init ( );
	void Reset ( );
	void SetMinimapActor ( );
	void InitMapPointList ( );
	void PostBeginPlay ( );
};

UClass* ACombatRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatAIGameRadarCore
// 0x0008 (0x042C - 0x0424)
class ACombatAIGameRadarCore : public ACombatRadarCore
{
public:
	class UClass*                                      BotClass;                                         		// 0x0424 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1833 ];

		return pClassPointer;
	};

};

UClass* ACombatAIGameRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatAITDMGameRadarCore
// 0x0000 (0x042C - 0x042C)
class ACombatAITDMGameRadarCore : public ACombatAIGameRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1834 ];

		return pClassPointer;
	};

};

UClass* ACombatAITDMGameRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionRadarCore
// 0x0006 (0x042A - 0x0424)
class ACombatDemolitionRadarCore : public ACombatRadarCore
{
public:
	unsigned char                                      AllyWithC4IconNameList[ 0x5 ];                    		// 0x0424 (0x0005) [0x0000000000000000]              
	unsigned char                                      ExplosionAreaIconOffset;                          		// 0x0429 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1835 ];

		return pClassPointer;
	};

	void GetExplosionAreaUIIndex ( );
	void UpdateExplosionAreaIcon ( );
	void SetObjectIconList ( );
	void CanDrawC4State ( );
};

UClass* ACombatDemolitionRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatRadialBlurComponent
// 0x002C (0x0124 - 0x00F8)
class UCombatRadialBlurComponent : public URadialBlurComponent
{
public:
	float                                              LifeSpan;                                         		// 0x00F8 (0x0004) [0x0000000000000000]              
	struct FVector                                     Translation;                                      		// 0x00FC (0x000C) [0x0000000000000000]              
	unsigned long                                      AbsoluteTranslation : 1;                          		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CurrentLifeSpan;                                  		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              InitialBlurScale;                                 		// 0x0110 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnBlurFinished__Delegate;                       		// 0x0114 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0118 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1836 ];

		return pClassPointer;
	};

	void OnBlurFinished ( );
	void SetTranslation ( );
};

UClass* UCombatRadialBlurComponent::pClassPointer = NULL;

// Class CombatGame.CombatRadioSystem
// 0x002D (0x008D - 0x0060)
class UCombatRadioSystem : public UObject
{
public:
	TArray< struct FKeyBindingInfo >                   RadioKeyBindings;                                 		// 0x0060 (0x0010) [0x0000000000000000]              
	unsigned long                                      bIsBlockingRadioKey : 1;                          		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsRadioKeyBinding : 1;                           		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelectingSuccess : 1;                            		// 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                RadioKeyBlockTime;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                AutoHideTime;                                     		// 0x0078 (0x0004) [0x0000000000000000]              
	class UCombatHUD_RadioMessage*                     UIObject;                                         		// 0x007C (0x0008) [0x0000000000000000]              
	class ACombatPC*                                   OwnerPC;                                          		// 0x0084 (0x0008) [0x0000000000000000]              
	unsigned char                                      LastSelectTabIndex;                               		// 0x008C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1837 ];

		return pClassPointer;
	};

	void SetRadioKeyBinding ( );
	void GetRadioMsgKeyBinding ( );
	void HideRadioMessage ( );
	void ReleaseBlockRadioKey ( );
	void RequestRadioVoice ( );
	void UniqueIDToKeyMsgIndex ( );
	void KeyMsgIndexToUniqueID ( );
	void SelectRadioVoice ( );
	void ToggleRadioChat ( );
	void Init ( );
};

UClass* UCombatRadioSystem::pClassPointer = NULL;

// Class CombatGame.CombatRandomBoxTransaction
// 0x0010 (0x0070 - 0x0060)
class UCombatRandomBoxTransaction : public UObject
{
public:
	TArray< struct FRandomBoxPickUpInfo >              RandomBoxPickUpList;                              		// 0x0060 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1838 ];

		return pClassPointer;
	};

	void IsPickUpRandomBoxCube ( );
	void IsPickUpRandomBox ( );
	void MakeRandomBoxNameAndPercent ( );
	void MakeDayOfTheWeek ( );
	void MakeTimeString ( );
	void GetRandomBoxPickUpList ( );
};

UClass* UCombatRandomBoxTransaction::pClassPointer = NULL;

// Class CombatGame.CombatRelevantVolume
// 0x0000 (0x0280 - 0x0280)
class ACombatRelevantVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1839 ];

		return pClassPointer;
	};

	void eventUnTouch ( );
	void eventTouch ( );
};

UClass* ACombatRelevantVolume::pClassPointer = NULL;

// Class CombatGame.CombatRewardDataBase
// 0x0158 (0x01B8 - 0x0060)
class UCombatRewardDataBase : public UObject
{
public:
	class ACombatPlayerReplicationInfo*                Owner;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< struct FRelatedKillDataInfo >              RelatedKillData;                                  		// 0x0068 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0078 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatRewardDataBase.RecordData
	TArray< int >                                      KillMarkHistory;                                  		// 0x00C0 (0x0010) [0x0000000000000000]              
	TArray< struct FTableInfoType >                    PendingTableInfoList;                             		// 0x00D0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x00E0 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatRewardDataBase.Map_WeaponID_DBID
	unsigned char                                      UnknownData02[ 0x48 ];                            		// 0x0128 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatRewardDataBase.Map_WeaponID_InitialKillCount
	unsigned char                                      UnknownData03[ 0x48 ];                            		// 0x0170 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatRewardDataBase.Map_WeaponID_CurrentGameKillCount

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1840 ];

		return pClassPointer;
	};

	void GetWeaponInGameKillCount ( );
	void GetWeaponInitialKillCount ( );
	void OnWeaponKill ( );
	void UpdateKillMarkAchievement ( );
	void eventUpdatePendingAchievement ( );
	void Reset ( );
	void GetCurrentAchievement ( );
	void GainedNewAchievement ( );
	void GetRelatedKillCount ( );
	void eventSetRelatedKillData ( );
	void ResetWhenRoundStart ( );
	void SetCurrentGameKillCount ( );
	void ResetBasicKillCount ( );
	void ResetWhenTerminatedRespawn ( );
	void ResetWhenHeal ( );
	void Init ( );
};

UClass* UCombatRewardDataBase::pClassPointer = NULL;

// Class CombatGame.CombatClientRewardData
// 0x0000 (0x01B8 - 0x01B8)
class UCombatClientRewardData : public UCombatRewardDataBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1841 ];

		return pClassPointer;
	};

};

UClass* UCombatClientRewardData::pClassPointer = NULL;

// Class CombatGame.CombatServerRewardData
// 0x003C (0x01F4 - 0x01B8)
class UCombatServerRewardData : public UCombatRewardDataBase
{
public:
	int                                                AssistInLife;                                     		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              LastMultiKillTime;                                		// 0x01BC (0x0004) [0x0000000000000000]              
	unsigned char                                      MultiKillCount;                                   		// 0x01C0 (0x0001) [0x0000000000000000]              
	TArray< struct FDamagePerPlayer >                  DamagePerPlayers;                                 		// 0x01C4 (0x0010) [0x0000000000000000]              
	int                                                ConsecutiveDeathCount;                            		// 0x01D4 (0x0004) [0x0000000000000000]              
	float                                              LastDeathTime;                                    		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                BestKillCount;                                    		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                LastLifeKillCount;                                		// 0x01E0 (0x0004) [0x0000000000000000]              
	class AController*                                 TeamRevengeTarget;                                		// 0x01E4 (0x0008) [0x0000000000000000]              
	class AController*                                 RevengeTarget;                                    		// 0x01EC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1842 ];

		return pClassPointer;
	};

	void SetNewDamage ( );
	void ResetWhenRoundStart ( );
	void ResetWhenTerminatedRespawn ( );
	void eventFindMaxKillCountInLife ( );
	void ResetWhenHeal ( );
	void ResetWhenLogOut ( );
	void Init ( );
	void IncrementAssists ( );
};

UClass* UCombatServerRewardData::pClassPointer = NULL;

// Class CombatGame.CombatRewardInterface
// 0x0000 (0x0060 - 0x0060)
class UCombatRewardInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1843 ];

		return pClassPointer;
	};

	void GetHitPart ( );
	void GetAttackWeaponID ( );
	void IsSuicide ( );
	void IsObjectPenetration ( );
};

UClass* UCombatRewardInterface::pClassPointer = NULL;

// Class CombatGame.CombatSceneCapture2DComponent
// 0x000C (0x017C - 0x0170)
class UCombatSceneCapture2DComponent : public USceneCapture2DComponent
{
public:
	float                                              SurfaceWidth;                                     		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              SurfaceHeight;                                    		// 0x0174 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseMainSceneProjectionMatrix : 1;                		// 0x0178 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCaptureSceneOnce : 1;                            		// 0x0178 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1844 ];

		return pClassPointer;
	};

	void SetCombatCaptureParameters ( );
	void SetViewportSize ( );
};

UClass* UCombatSceneCapture2DComponent::pClassPointer = NULL;

// Class CombatGame.CombatScout
// 0x0000 (0x05F0 - 0x05F0)
class ACombatScout : public AScout
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1845 ];

		return pClassPointer;
	};

};

UClass* ACombatScout::pClassPointer = NULL;

// Class CombatGame.CombatSentinelManager
// 0x0014 (0x0258 - 0x0244)
class ACombatSentinelManager : public AInfo
{
public:
	unsigned long                                      bDoingASentinelRun : 1;                           		// 0x0244 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                CurrentMapId;                                     		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                CurrentModeIdx;                                   		// 0x024C (0x0004) [0x0000000000000000]              
	struct FPointer                                    RemoteDB;                                         		// 0x0250 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1846 ];

		return pClassPointer;
	};

	void CheckForSentinelRun ( );
	void HitBeginSentinelRun ( );
	void RoundBeginSentinelRun ( );
	void GameBeginSentinelRun ( );
	void Init ( );
};

UClass* ACombatSentinelManager::pClassPointer = NULL;

// Class CombatGame.CombatSkeletalMeshComponent
// 0x0000 (0x0770 - 0x0770)
class UCombatSkeletalMeshComponent : public USkeletalMeshComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1847 ];

		return pClassPointer;
	};

	void PreloadTexture ( );
	void DuplicateRecursive ( );
	void SetDynamicLightEnvironmentRecursive ( );
	void SetLightEnvironmentRecursive ( );
	void SetShadowParentRecursive ( );
	void SetHiddenRecursive ( );
};

UClass* UCombatSkeletalMeshComponent::pClassPointer = NULL;

// Class CombatGame.CombatSkillManager
// 0x0088 (0x00E8 - 0x0060)
class UCombatSkillManager : public UObject
{
public:
	TArray< struct FString >                           AcceptSkillList;                                  		// 0x0060 (0x0010) [0x0000000000000000]              
	TArray< class UCombatActiveSkill* >                CombatActiveSkillList;                            		// 0x0070 (0x0010) [0x0000000000000000]              
	TArray< class UCombatPassiveSkill* >               CombatPassiveSkillList;                           		// 0x0080 (0x0010) [0x0000000000000000]              
	TArray< struct FSkillSaveInfo >                    ActiveSkillSaveData;                              		// 0x0090 (0x0010) [0x0000000000000000]              
	class ACombatPlayerReplicationInfo*                OwnerPRI;                                         		// 0x00A0 (0x0008) [0x0000000000000000]              
	unsigned char                                      LastSkillGroupNum;                                		// 0x00A8 (0x0001) [0x0000000000000000]              
	int                                                LastCheckTime[ 0x4 ];                             		// 0x00AC (0x0010) [0x0000000000000000]              
	TArray< struct FSavedSkillInfo >                   SavedActiveSkillList;                             		// 0x00BC (0x0010) [0x0000000000000000]              
	TArray< struct FSavedSkillInfo >                   SavedPassiveSkillList;                            		// 0x00CC (0x0010) [0x0000000000000000]              
	unsigned long                                      SkipCooltime : 1;                                 		// 0x00DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInfiniteSkill : 1;                               		// 0x00DC (0x0004) [0x0000000000000000] [0x00000002] 
	class UClass*                                      SkillSoundGroup;                                  		// 0x00E0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1848 ];

		return pClassPointer;
	};

	void CheckValidPassiveSkill ( );
	void CheckValidActiveSkill ( );
	void GetPassiveSkillTableData ( );
	void GetActiveSkillTableData ( );
	void GetSkillRemainCount ( );
	void GetSavedPassiveSkillCount ( );
	void GetSavedActiveSkillCount ( );
	void IsActivateSkill ( );
	void ToggleSkillActivate ( );
	void NotifyUsedSkill ( );
	void isHoldSkill ( );
	void RemoveActiveSkillInfo ( );
	void CheckUseSkill ( );
	void CanUseSkill ( );
	void NotifyAllEmptyActiveSkill ( );
	void NotifyEmptyActiveSkill ( );
	void InitSkillInfo ( );
	void SetSkill ( );
	void RequestBuySkill ( );
	void CanUseSkillByCooltime ( );
	void CanBuySkill ( );
	void CheckBuySkill ( );
	void SetSkillOption ( );
	void NotifyUnlockSkill ( );
	void CheckUnlockSkill ( );
	void PreUnlockSkill ( );
	void FindSkillListByType ( );
	void GetActiveSkill ( );
	void IsSkillOption ( );
	void SetSkillWeaponRemainAmmo ( );
	void CreateSkill ( );
	void StartUseSkill ( );
	void SetSkillCoolTime ( );
	void eventTick ( );
	void AddAcceptSkillList ( );
	void FindActiveSkillByGroup ( );
	void ResetSavedSkillList ( );
	void RemoveAllSkill ( );
	void RemoveAllPassiveSkill ( );
	void RemoveAllActiveSkill ( );
	void RemoveSkill ( );
	void RemoveActiveSkillByIndex ( );
	void FindPassiveSkillByIndex ( );
	void FindActiveSkillByIndex ( );
	void GetPassiveSkillList ( );
	void GetActiveSkillList ( );
	void AddPassiveSkill ( );
	void AddActiveSkill ( );
	void Init ( );
};

UClass* UCombatSkillManager::pClassPointer = NULL;

// Class CombatGame.CombatSkillSoundGroup
// 0x0010 (0x0070 - 0x0060)
class UCombatSkillSoundGroup : public UObject
{
public:
	TArray< struct FSkillTeamAnnounceSound >           AnnounceSkillTeamSounds;                          		// 0x0060 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1849 ];

		return pClassPointer;
	};

	void PlayAnnounceSkillSound ( );
};

UClass* UCombatSkillSoundGroup::pClassPointer = NULL;

// Class CombatGame.CombatStatDataStore
// 0x0050 (0x00B0 - 0x0060)
class UCombatStatDataStore : public UObject
{
public:
	struct FName                                       EventType;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                OldRank;                                          		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                newRank;                                          		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                ScoringTableIndex;                                		// 0x0070 (0x0004) [0x0000000000000000]              
	class UClass*                                      DamageType;                                       		// 0x0074 (0x0008) [0x0000000000000000]              
	class ACombatWeapon*                               Weapon;                                           		// 0x007C (0x0008) [0x0000000000000000]              
	float                                              RespawnTime;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                WeaponID;                                         		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned char                                      HitPart;                                          		// 0x008C (0x0001) [0x0000000000000000]              
	float                                              LoginTime;                                        		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              MatchStartTime;                                   		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FStatSaveCondition                          SaveCondition;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	class ACombatPlayerReplicationInfo*                PRI;                                              		// 0x009C (0x0008) [0x0000000000000000]              
	unsigned long                                      bDesertion : 1;                                   		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWinner : 1;                                      		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              SavedPlayTime;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              SavedRespawnTime;                                 		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1850 ];

		return pClassPointer;
	};

	void SetEvent_MatchStart ( );
	void SetEvent_Login ( );
	void SetEvent_EndPlay ( );
	void SetEvent_Respawn ( );
	void SetEvent_RankUp ( );
	void SetEvent_Scoring ( );
	void SetEvent_LastPlayer ( );
};

UClass* UCombatStatDataStore::pClassPointer = NULL;

// Class CombatGame.CombatStaticMeshActor
// 0x0002 (0x0252 - 0x0250)
class ACombatStaticMeshActor : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0250 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatStaticMeshActor.MeshActorIndex

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1851 ];

		return pClassPointer;
	};

};

UClass* ACombatStaticMeshActor::pClassPointer = NULL;

// Class CombatGame.CombatBusterActor
// 0x00DE (0x0330 - 0x0252)
class ACombatBusterActor : public ACombatStaticMeshActor
{
public:
	float                                              HealthRatio;                                      		// 0x0254 (0x0004) [0x0000000000000000]              
	int                                                Health;                                           		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x025C (0x0004) [0x0000000000150000] [0x00000001] ( CPF_Travel | CPF_GlobalConfig )
	unsigned long                                      bIgnoreSameTeamDamage : 1;                        		// 0x025C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                HealthMax;                                        		// 0x0260 (0x0004) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	int                                                CurrentHealth;                                    		// 0x0264 (0x0004) [0x0000000000170000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	int                                                LastSubObjectIndex;                               		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                MissionActorArrayIndex;                           		// 0x026C (0x0004) [0x0000000000000000]              
	unsigned char                                      OwnerTeam;                                        		// 0x0270 (0x0001) [0x0000000000000000]              
	unsigned char                                      UIState;                                          		// 0x0271 (0x0001) [0x0000000000000000]              
	struct FOutlineProperty                            OutlineColorForComrade;                           		// 0x0274 (0x003C) [0x0000000000000000]              
	struct FOutlineProperty                            OutlineColorForEnemy;                             		// 0x02B0 (0x003C) [0x0000000000000000]              
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x02EC (0x0008) [0x0000000000000000]              
	TArray< struct FSubObjectInfo >                    SubObjectInfos;                                   		// 0x02F4 (0x0010) [0x0000000000000000]              
	int                                                UISortPriority;                                   		// 0x0304 (0x0004) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0308 (0x0008) [0x0000000000000000]              
	TArray< struct FDamageInfo >                       DamageInfoList;                                   		// 0x0310 (0x0010) [0x0000000000000000]              
	struct FString                                     HumanReadableName;                                		// 0x0320 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1852 ];

		return pClassPointer;
	};

	void eventDeactivate ( );
	void eventActivate ( );
	void ScriptGetTeamNum ( );
	void GetHighestDamageDealer ( );
	void AddMissionScore ( );
	void GetHumanReadableName ( );
	void AddDamageInfo ( );
	void GetHealth ( );
	void SetHealth ( );
	void DoExplosion ( );
	void PlayDamagedSound ( );
	void StopDamagedParticle ( );
	void PlayDamagedParticle ( );
	void ApplySubObjectInfo ( );
	void RestoreSubObjectInfo ( );
	void GetSubObjectIndex ( );
	void ClearDamagedUIState ( );
	void UpdateUIState ( );
	void eventNotifyChangedHealth ( );
	void UpdateOutline ( );
	void NotifyLocalPlayerTeamReceived ( );
	void eventTakeDamage ( );
	void InitHealth ( );
	void GetObjectIconStringID ( );
	void GetObjectIconType ( );
	void Reset ( );
	void RoundEnd ( );
	void GetMissionActorSortPriority ( );
	void InitMissionActor ( );
	void PostBeginPlay ( );
};

UClass* ACombatBusterActor::pClassPointer = NULL;

// Class CombatGame.CombatStaticMeshManager
// 0x0018 (0x0078 - 0x0060)
class UCombatStaticMeshManager : public UObject
{
public:
	class ACBGameReplicationInfo*                      CBGRI;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< class ACombatStaticMeshReplicationInfo* >  SMRIList;                                         		// 0x0068 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1853 ];

		return pClassPointer;
	};

	void DelayedUpdateAllSMActors ( );
	void RegisterSMRI ( );
	void UpdateSMActor ( );
	void UpdateClientSMActor ( );
	void UpdateAllSMActors ( );
	void Init ( );
};

UClass* UCombatStaticMeshManager::pClassPointer = NULL;

// Class CombatGame.CombatStaticMeshReplicationInfo
// 0x0904 (0x0B48 - 0x0244)
class ACombatStaticMeshReplicationInfo : public AReplicationInfo
{
public:
	unsigned char                                      MeshStateList[ 0x100 ];                           		// 0x0244 (0x0100) [0x0000000000150000]              ( CPF_Travel | CPF_GlobalConfig )
	class ACombatDestructibleSMActor*                  MeshActorList[ 0x100 ];                           		// 0x0344 (0x0800) [0x0000000000000000]              
	int                                                SMRIIndex;                                        		// 0x0B44 (0x0004) [0x000000000115000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1854 ];

		return pClassPointer;
	};

	void eventReceivedMeshState ( );
	void UpdateMeshState ( );
	void GetSMRIIndex ( );
	void SetSMRIIndex ( );
	void eventReceivedSMRIIndex ( );
};

UClass* ACombatStaticMeshReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatStatisticsTransaction
// 0x00F5 (0x0155 - 0x0060)
class UCombatStatisticsTransaction : public UObject
{
public:
	class UCBUIDataStore_Mission*                      MissionList;                                      		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FMatchResultData                            ResultData;                                       		// 0x0068 (0x003C) [0x0000000000000000]              
	struct FGrainInfoData                              UI_GrainData;                                     		// 0x00A4 (0x0018) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00BC (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatStatisticsTransaction.Quest_InfoMap
	struct FMatchResultMapInfoData                     MatchResultMap_InfoData;                          		// 0x0104 (0x0018) [0x0000000000000000]              
	class UCombatDBManager*                            CombatDBManager;                                  		// 0x011C (0x0008) [0x0000000000000000]              
	struct FString                                     CachedClanName[ 0x2 ];                            		// 0x0124 (0x0020) [0x0000000000000000]              
	int                                                CachedClanID[ 0x2 ];                              		// 0x0144 (0x0008) [0x0000000000000000]              
	int                                                AttendID;                                         		// 0x014C (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedPlayStampAnimation : 1;                      		// 0x0150 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedForceGotoEventScene : 1;                     		// 0x0150 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      InternetCafe_Benefit;                             		// 0x0154 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1855 ];

		return pClassPointer;
	};

	void UpdateToday ( );
	void ClearCachedClanIDInfo ( );
	void ClearCachedClanMatchInfo ( );
	void GetClanID ( );
	void GetClanName ( );
	void GetLastMapRefID ( );
	void GetLastModeRefID ( );
	void GetLastModeGroupRefID ( );
	void GetLastMissionRefID ( );
	void GetCurrentHudType ( );
	void GetCurrentGetModeUIType ( );
	void SetMatchMapRefInfo ( );
	void IsClanRankingMatch ( );
	void IsClanTeamChange ( );
	void GetCurrentStep ( );
	void GetReciveQuestInfo ( );
	void SetReceiveReward ( );
	void GetReceiveQuestReward ( );
	void SetFirstQuest ( );
	void GetFirstQuest ( );
	void GetQuestCurrentScore ( );
	void GetQuestActivated ( );
	void GetQuestID ( );
	void GetGrainClanRankPoint ( );
	void GetGrainMyRankPoint ( );
	void GetGrainClanTotalExp ( );
	void GetGrainClanExp ( );
	void GetGrainMoney ( );
	void GetGrainExp ( );
	void InitGrainData ( );
	void GetAllPlayerResultInfo ( );
	void GetRewardRank ( );
	void GetAIObjectHealth ( );
	void GetAIWave ( );
	void GetBestMissionScorePlayerUserID ( );
	void GetBestAssistPlayerUserID ( );
	void GetBestKillPlayerUserID ( );
	void GetBestScorePlayerUserID ( );
	void GetRoundPoint ( );
	void GetPlayerTeamIndex ( );
	void GetWinnerTeamIndex ( );
	void GetRoundCountType ( );
	void ClearMatchResultData ( );
	void InitDBManager ( );
	void eventGetDBManager ( );
};

UClass* UCombatStatisticsTransaction::pClassPointer = NULL;

// Class CombatGame.CombatStatStorageBase
// 0x0034 (0x0094 - 0x0060)
class UCombatStatStorageBase : public UObject
{
public:
	class ACombatPC*                                   StorageOwner;                                     		// 0x0060 (0x0008) [0x0000000000000000]              
	class UCombatStatDataStore*                        StatDataStore;                                    		// 0x0068 (0x0008) [0x0000000000000000]              
	TArray< struct FPlayerStatInfo >                   TempSaveStat;                                     		// 0x0070 (0x0010) [0x0000000000000000]              
	unsigned long                                      Processed : 1;                                    		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FStatSaveCondition                          StatSaveCondition_PlayerMode[ 0x4 ];              		// 0x0084 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1856 ];

		return pClassPointer;
	};

	void SavePlayerStat ( );
	void SaveGameSet ( );
	void PostEvent_MatchOver ( );
	void PreEvent_MatchOver ( );
	void EndGame ( );
	void eventOnEvent ( );
	void UpdateStatSaveCondition ( );
	void IsProcessed ( );
	void ProcessPlayerStatData ( );
	void Init ( );
};

UClass* UCombatStatStorageBase::pClassPointer = NULL;

// Class CombatGame.CombatStatStorage
// 0x0020 (0x00B4 - 0x0094)
class UCombatStatStorage : public UCombatStatStorageBase
{
public:
	struct FStatSaveCondition                          StatSaveCondition_ClanMode[ 0x4 ];                		// 0x0094 (0x0010) [0x0000000000000000]              
	struct FStatSaveCondition                          StatSaveCondition_Competitive[ 0x4 ];             		// 0x00A4 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1857 ];

		return pClassPointer;
	};

	void SaveDamageTypeEvent ( );
	void SaveWeaponEvent ( );
	void UpdateStatSaveCondition ( );
	void PostEvent_MatchOver ( );
	void eventOnEvent ( );
};

UClass* UCombatStatStorage::pClassPointer = NULL;

// Class CombatGame.CombatStatStoragePVE
// 0x0000 (0x0094 - 0x0094)
class UCombatStatStoragePVE : public UCombatStatStorageBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1858 ];

		return pClassPointer;
	};

	void PostEvent_MatchOver ( );
	void SaveStatByOther ( );
	void SaveStatByWin ( );
	void eventOnEvent ( );
};

UClass* UCombatStatStoragePVE::pClassPointer = NULL;

// Class CombatGame.CombatStatUnitTest
// 0x0000 (0x0060 - 0x0060)
class UCombatStatUnitTest : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1859 ];

		return pClassPointer;
	};

	void Clear ( );
	void CHECK_EMPTY ( );
	void Check ( );
	void WEAPON_HIT ( );
	void WEAPON_KILL ( );
	void WEAPON_FIRE ( );
	void CHANGE_MODE ( );
	void CHANGE_MAP ( );
	void StartTest ( );
	void Play ( );
	void RankUp ( );
	void EQU_SKILL_JUGGERNAUT_MINIGUN_01 ( );
	void EQU_SKILL_FSW_AMSR_STEYR50_01 ( );
	void EQU_SKILL_FSW_GL_XM25_01 ( );
	void EQU_SKILL_FSW_GL_M32_01 ( );
	void EQU_SKILL_FSW_RL_AT4_01 ( );
	void EQU_GRE_PRI_HANDGRENADE ( );
	void EQU_MEL_TOMAHAWK ( );
	void EQU_MEL_KUKRI ( );
	void EQU_MEL_NIMRAVUS ( );
	void EQU_PRI_BASR_AXMC ( );
	void EQU_PRI_SASR_G28E ( );
	void EQU_PRI_BASR_M107A1 ( );
	void EQU_PRI_BASR_ASW338 ( );
	void EQU_PRI_BASR_MSR ( );
	void EQU_PRI_BASR_BLAZERR93 ( );
	void EQU_PRI_BASR_DSR1 ( );
	void EQU_PRI_SASR_DRAGUNOV ( );
	void EQU_PRI_SASR_M110K ( );
	void EQU_PRI_LMG_HNK121 ( );
	void EQU_PRI_LMG_PECHENEG ( );
	void EQU_PRI_LMG_MK46 ( );
	void EQU_PRI_DMR_MK14MOD1 ( );
	void EQU_PRI_DMR_SCARH ( );
	void EQU_PRI_AR_MDR_G ( );
	void EQU_PRI_AR_G36_G ( );
	void EQU_PRI_AR_CZ805_G ( );
	void EQU_PRI_AR_ARX160_G ( );
	void EQU_PRI_AR_SR47_G ( );
	void EQU_PRI_AR_SIZ556XICARBON_G ( );
	void EQU_PRI_AR_TAR21_G ( );
	void EQU_PRI_AR_AK12_G ( );
	void EQU_PRI_AR_TYPE95_G ( );
	void EQU_PRI_AR_HNK416_G ( );
	void EQU_PRI_AR_EF88_G ( );
	void EQU_PRI_AR_SCARL_G ( );
	void EQU_PRI_AR_R5_G ( );
	void EQU_PRI_SMG_SIZMPX ( );
	void EQU_PRI_SMG_KRISSSUPERV ( );
	void EQU_PRI_SMG_MP7 ( );
	void EQU_SEC_PISTOL_CHIAPPARHINO ( );
	void EQU_SEC_PISTOL_DESERTEAGLE ( );
	void EQU_SEC_PISTOL_HNK45C ( );
	void EQU_SEC_PISTOL_G17LDF ( );
	void EQU_SEC_PISTOL_GLOCK17 ( );
};

UClass* UCombatStatUnitTest::pClassPointer = NULL;

// Class CombatGame.CombatSteamAchivementManager
// 0x0010 (0x0070 - 0x0060)
class UCombatSteamAchivementManager : public UObject
{
public:
	TArray< struct FSteamAchievementData >             SteamAchievements;                                		// 0x0060 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1860 ];

		return pClassPointer;
	};

	void CheckInGameScoreAchivements ( );
	void ClearAllAchievement ( );
	void OnSteamAchievementStored ( );
	void ClearAchievementByAPIName ( );
	void ClearAchievementByArrayIndex ( );
	void GetArchievementValue ( );
	void SetAchievementByAPIName ( );
	void SetAchievementByArrayIndex ( );
	void UpdateSteamUserAchievements ( );
	void OnSteamUserStatsReceived ( );
	void RequestStats ( );
};

UClass* UCombatSteamAchivementManager::pClassPointer = NULL;

// Class CombatGame.CombatTeamBlockingVolume
// 0x0001 (0x0285 - 0x0284)
class ACombatTeamBlockingVolume : public ABlockingVolume
{
public:
	unsigned char                                      IgnoreBlockTeam;                                  		// 0x0284 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1861 ];

		return pClassPointer;
	};

};

UClass* ACombatTeamBlockingVolume::pClassPointer = NULL;

// Class CombatGame.CombatTrigger
// 0x0004 (0x0258 - 0x0254)
class ACombatTrigger : public ATrigger
{
public:
	float                                              InteractDistance;                                 		// 0x0254 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1862 ];

		return pClassPointer;
	};

	void TriggerUnusedBy ( );
	void TriggerUsedBy ( );
};

UClass* ACombatTrigger::pClassPointer = NULL;

// Class CombatGame.CombatTrigger_Bomb
// 0x0224 (0x047C - 0x0258)
class ACombatTrigger_Bomb : public ACombatTrigger
{
public:
	struct FSExactLocationInfo                         C4ExactLocation;                                  		// 0x0258 (0x000C) [0x000000000015000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig )
	int                                                BombID;                                           		// 0x0264 (0x0004) [0x0000000000000000]              
	struct FName                                       StateName;                                        		// 0x0268 (0x0008) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	int                                                BombPlantTime;                                    		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                BombPlantTimeCount;                               		// 0x0274 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0278 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTrigger_Bomb.BombDefuseTime
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x027A (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTrigger_Bomb.BombDefuseTimeCount
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x027C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTrigger_Bomb.BombTimeLimit
	float                                              DroppedPickupCoolTime;                            		// 0x0280 (0x0004) [0x0000000000000000]              
	class UClass*                                      BombClass;                                        		// 0x0284 (0x0008) [0x0000000000000000]              
	struct FVector                                     SpawnLocation;                                    		// 0x028C (0x000C) [0x0000000000000000]              
	struct FRotator                                    SpawnRotation;                                    		// 0x0298 (0x000C) [0x0000000000000000]              
	int                                                PlanterID;                                        		// 0x02A4 (0x0004) [0x0000000000000000]              
	class ACBTeamInfo*                                 PlanterTeam;                                      		// 0x02A8 (0x0008) [0x0000000000000000]              
	class APawn*                                       Planter;                                          		// 0x02B0 (0x0008) [0x0000000000000000]              
	class AController*                                 PlanterController;                                		// 0x02B8 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      BombMesh;                                         		// 0x02C0 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceTimeVarying*                PlantedIndicatorMITV;                             		// 0x02C8 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceTimeVarying*                DefusedIndicatorMITV;                             		// 0x02D0 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceTimeVarying*                LensFlareMITV;                                    		// 0x02D8 (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          DefaultIndicatorMaterial;                         		// 0x02E0 (0x0008) [0x0000000000000000]              
	class ULensFlareComponent*                         LEDLensFEffect;                                   		// 0x02E8 (0x0008) [0x0000000000000000]              
	struct FBombIndicatorInfo                          IndicatorInfo[ 0x4 ];                             		// 0x02F0 (0x00C0) [0x0000000000000000]              
	unsigned char                                      IndicatorState;                                   		// 0x03B0 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastTickState;                                    		// 0x03B1 (0x0001) [0x0000000000000000]              
	unsigned char                                      ObtainableTeam;                                   		// 0x03B2 (0x0001) [0x0000000000000000]              
	float                                              TicTacCycleIntervalTime;                          		// 0x03B4 (0x0004) [0x0000000000000000]              
	float                                              TicTacCycleDeltaTime;                             		// 0x03B8 (0x0004) [0x0000000000000000]              
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x03BC (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DroppedSound;                                     		// 0x03C4 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   PickupSound;                                      		// 0x03CC (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             DefuseAC;                                         		// 0x03D4 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DefuseStartSoundCue;                              		// 0x03DC (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DefuseSuccessSoundCue;                            		// 0x03E4 (0x0008) [0x0000000000000000]              
	int                                                BombWeaponID;                                     		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              CylinderRadiusOnFalling;                          		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              TossSpeed;                                        		// 0x03F4 (0x0004) [0x0000000000000000]              
	float                                              TossZ;                                            		// 0x03F8 (0x0004) [0x0000000000000000]              
	struct FOutlineProperty                            OutlineColorForComrade;                           		// 0x03FC (0x003C) [0x0000000000000000]              
	struct FOutlineProperty                            OutlineColorForEnemy;                             		// 0x0438 (0x003C) [0x0000000000000000]              
	class AActor*                                      SavedInstigator;                                  		// 0x0474 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1863 ];

		return pClassPointer;
	};

	void GetBP ( );
	void GetGrade ( );
	void SetIndicatorState ( );
	void StopBombDefuseSound ( );
	void eventPostDemoRewind ( );
	void PlayBombDefuseSound ( );
	void PrepareExplosionActor ( );
	void TriggerExplosion ( );
	void HideProgressBarUI ( );
	void DisplayDefusingUI ( );
	void ApplyPlantingUI ( );
	void SuccessDefuseBomb ( );
	void DefuseBombTimer ( );
	void ProgressionDefuseUI ( );
	void eventIsDefusingBomb ( );
	void StopDefuseBombTimer ( );
	void StartDefuseBombTimer ( );
	void FailedExplodeBomb ( );
	void SuccessExplodeBomb ( );
	void SuccessPlantBomb ( );
	void GotoNextState ( );
	void PlantBombTimer ( );
	void eventIsPlantingBomb ( );
	void StopPlantBombTimer ( );
	void StartPlantBombTimer ( );
	void GetRealBombDefuseTime ( );
	void GetRealBombPlantTime ( );
	void BombGiveTo ( );
	void BombDroppedPickupCoolTimer ( );
	void eventToggleCylinderSize ( );
	void eventLanded ( );
	void HasDefuseKit ( );
	void GetBombInventory ( );
	void InitTriggerSetting ( );
	void IsPlanted ( );
	void SetIndicatorSkin ( );
	void InitIndicatorSkin ( );
	void NotifyRoundTimeOver ( );
	void NotifyRoundOver ( );
	void ClientReset ( );
	void Reset ( );
	void DropVelocity ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( );
	void UpdateUIState ( );
	void UpdateOutline ( );
	void NotifyLocalPlayerTeamReceived ( );
	void eventScriptGetTeamNum ( );
	void VolumeBasedDestroy ( );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( );
	void eventChangedBase ( );
	void BombLineCheck ( );
};

UClass* ACombatTrigger_Bomb::pClassPointer = NULL;

// Class CombatGame.CombatTypes
// 0x0000 (0x0060 - 0x0060)
class UCombatTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1864 ];

		return pClassPointer;
	};

	void SetSeqVar_String ( );
	void SetSeqVar_Float ( );
	void SetSeqVar_Int ( );
	void SetSeqVar_Bool ( );
	void GetWorldCamPosition ( );
	void GetWorldCamera ( );
	void ByteToRadioKeyType ( );
	void AddDeltaTime ( );
	void GetDeltaTime ( );
	void IsServicetime ( );
	void IsValidTime ( );
	void GetNowServerTime ( );
	void CylinderLineCheck ( );
	void GetReplicatedVector ( );
	void GetReplicatedRotator ( );
	void Update_TakeDamageData ( );
};

UClass* UCombatTypes::pClassPointer = NULL;

// Class CombatGame.CombatUIDataProvider_MenuOption
// 0x003C (0x00D0 - 0x0094)
class UCombatUIDataProvider_MenuOption : public UUIResourceDataProvider
{
public:
	TArray< struct FName >                             GameModeCodenameSet;                              		// 0x0094 (0x0010) [0x0000000000000000]              
	unsigned char                                      OptionMarkUp;                                     		// 0x00A4 (0x0001) [0x0000000000000000]              
	struct FName                                       OptionType;                                       		// 0x00A8 (0x0008) [0x0000000000000000]              
	struct FName                                       UIType;                                           		// 0x00B0 (0x0008) [0x0000000000000000]              
	struct FName                                       UILocationType;                                   		// 0x00B8 (0x0008) [0x0000000000000000]              
	struct FString                                     IniName;                                          		// 0x00C0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1865 ];

		return pClassPointer;
	};

};

UClass* UCombatUIDataProvider_MenuOption::pClassPointer = NULL;

// Class CombatGame.CombatUIDataStore_StringAliasBindingMap
// 0x005C (0x0150 - 0x00F4)
class UCombatUIDataStore_StringAliasBindingMap : public UUIDataStore_StringAliasMap
{
public:
	int                                                FakePlatform;                                     		// 0x00F4 (0x0004) [0x0000000000000000]              
	struct FMap_Mirror                                 CommandToBindNames;                               		// 0x00F8 (0x0048) [0x0000000000000000]              
	TArray< struct FControllerMap >                    ControllerMapArray;                               		// 0x0140 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1866 ];

		return pClassPointer;
	};

	void ClearBoundKeyCache ( );
	void AddMappingToBoundKeyCache ( );
	void FindMappingInBoundKeyCache ( );
	void GetBoundStringWithFieldName ( );
	void GetStringWithFieldName ( );
};

UClass* UCombatUIDataStore_StringAliasBindingMap::pClassPointer = NULL;

// Class CombatGame.CombatUIDataStore_StringAliasMap
// 0x0004 (0x00F8 - 0x00F4)
class UCombatUIDataStore_StringAliasMap : public UUIDataStore_StringAliasMap
{
public:
	int                                                FakePlatform;                                     		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1867 ];

		return pClassPointer;
	};

	void GetStringWithFieldName ( );
};

UClass* UCombatUIDataStore_StringAliasMap::pClassPointer = NULL;

// Class CombatGame.CombatVisBlocker
// 0x0018 (0x025C - 0x0244)
class ACombatVisBlocker : public AActor
{
public:
	class UCylinderComponent*                          CC;                                               		// 0x0244 (0x0008) [0x0000000000000000]              
	TArray< class ACombatPawn* >                       InVolumePawnList;                                 		// 0x024C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1868 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventUnTouch ( );
	void eventTouch ( );
};

UClass* ACombatVisBlocker::pClassPointer = NULL;

// Class CombatGame.CombatVoiceBase
// 0x0030 (0x0090 - 0x0060)
class UCombatVoiceBase : public UObject
{
public:
	TArray< struct FNotifySoundInfo >                  NotifySoundList;                                  		// 0x0060 (0x0010) [0x0000000000000000]              
	TArray< struct FRadioDisplayInfo >                 LeftKeyInfos;                                     		// 0x0070 (0x0010) [0x0000000000000000]              
	TArray< struct FRadioDisplayInfo >                 RightKeyInfos;                                    		// 0x0080 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1869 ];

		return pClassPointer;
	};

	void ActionVoice ( );
	void GetLocalizedMessage ( );
	void GetRadioInfo ( );
};

UClass* UCombatVoiceBase::pClassPointer = NULL;

// Class CombatGame.CombatVoiceChatUserList
// 0x007C (0x00DC - 0x0060)
class UCombatVoiceChatUserList : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0060 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.CombatVoiceChatUserList.UserMap
	struct FPlayerVoiceChat                            SelfData;                                         		// 0x00A8 (0x0020) [0x0000000000000000]              
	int                                                myUID;                                            		// 0x00C8 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           TalkingUserList;                                  		// 0x00CC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1870 ];

		return pClassPointer;
	};

	void UpdateTalkingUserUI ( );
	void eventOnReloadVoiceChatAllList ( );
	void eventOnDelTalkingUserList ( );
	void eventOnAddTalkingUserList ( );
	void SetMyData ( );
	void ResetAllList ( );
	void ReloadUserIndex ( );
	void GetUserCurrentState ( );
	void GetUIDFromUIIndex ( );
	void GetUserUIIndex ( );
	void UpdateUserMapState ( );
	void isMuteUserMap ( );
	void SetMuteMap ( );
	void GetUserArray ( );
	void GetVoiceUserData ( );
	void DelUserMap ( );
	void AddUserMap ( );
	void InitUserMapFromMatchroom ( );
};

UClass* UCombatVoiceChatUserList::pClassPointer = NULL;

// Class CombatGame.CombatVoiceInterfaceVivox
// 0x00E0 (0x0140 - 0x0060)
class UCombatVoiceInterfaceVivox : public UObject
{
public:
	struct FString                                     KeyString;                                        		// 0x0060 (0x0010) [0x0000000000000000]              
	struct FString                                     PlayerName;                                       		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FString                                     VivoxAccountName;                                 		// 0x0080 (0x0010) [0x0000000000000000]              
	struct FString                                     VivoxAccountUri;                                  		// 0x0090 (0x0010) [0x0000000000000000]              
	struct FString                                     VivoxEchoChannelUri;                              		// 0x00A0 (0x0010) [0x0000000000000000]              
	struct FString                                     VivoxTestChannelUri;                              		// 0x00B0 (0x0010) [0x0000000000000000]              
	struct FString                                     VivoxTeamChannelUri;                              		// 0x00C0 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           VivoxAccountNames;                                		// 0x00D0 (0x0010) [0x0000000000000000]              
	unsigned long                                      bCombineLogin : 1;                                		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsConnected : 1;                                 		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsLoggedIn : 1;                                  		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsChannelJoined : 1;                             		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                SerialNumber;                                     		// 0x00E4 (0x0004) [0x0000000000000000]              
	class ACombatPC*                                   CPC;                                              		// 0x00E8 (0x0008) [0x0000000000000000]              
	float                                              RefuseVoiceMeterEnergy;                           		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              CurrentRefuseVoiceMeterEnergy;                    		// 0x00F4 (0x0004) [0x0000000000000000]              
	TArray< struct FDelayedCallbackFunctionData >      DelayedCallbackFunctions;                         		// 0x00F8 (0x0010) [0x0000000000000000]              
	float                                              DelayedCallbackFunctionsCheckTimerDelta;          		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              DelayedCallbackFunctionsCheckCycle;               		// 0x010C (0x0004) [0x0000000000000000]              
	struct FString                                     OSInputDeviceName;                                		// 0x0110 (0x0010) [0x0000000000000000]              
	struct FString                                     APPInputDeviceName;                               		// 0x0120 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           InputDeviceNameList;                              		// 0x0130 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1871 ];

		return pClassPointer;
	};

	void GetUIDFromVivoxAccountName ( );
	void ResetRefuseMeterEnergyValue ( );
	void SetRefuseMeterEnergyValue ( );
	void eventProcessDelayedFunctions ( );
	void ServerReset ( );
	void LeaveTeamChannel ( );
	void ClientReset ( );
	void eventOnSetParticipantMutedForMeFailed ( );
	void eventOnSetParticipantMutedForMeCompleted ( );
	void eventOnSetParticipantAudioOutputDeviceVolumeForMeFailed ( );
	void eventOnSetParticipantAudioOutputDeviceVolumeForMeCompleted ( );
	void eventOnAvailableAudioDevicesChanged ( );
	void eventOnParticipantUpdated ( );
	void eventOnParticipantLeft ( );
	void eventOnParticipantAdded ( );
	void eventOnChannelExited ( );
	void eventOnChannelJoined ( );
	void eventOnLogoutCompleted ( );
	void eventOnLoginFailed ( );
	void eventOnLoginCompleted ( );
	void eventOnConnectFailed ( );
	void eventOnConnectCompleted ( );
	void ResetGlobalToken ( );
	void SetGlobalJoinToken ( );
	void SetGlobalLoginToken ( );
	void GenerateJoinToken ( );
	void GenerateLoginToken ( );
	void GetKeyString ( );
	void SetKeyString ( );
	void SetParticipantAudioOutputDeviceVolumeForMe ( );
	void GetParticipantAudioOutputDeviceVolumeForMe ( );
	void SetParticipantMutedForMe ( );
	void SetAudioOutputDeviceMuted ( );
	void GetAudioOutputDeviceMuted ( );
	void SetMasterAudioOutputDeviceVolume ( );
	void GetMasterAudioOutputDeviceVolume ( );
	void SetAudioInputDeviceMuted ( );
	void GetAudioInputDeviceMuted ( );
	void SetMasterAudioInputDeviceVolume ( );
	void GetMasterAudioInputDeviceVolume ( );
	void GetPlayerName ( );
	void GetTeamChannelUri ( );
	void GetAccountUri ( );
	void SetVivoxTeamChannelUri ( );
	void JoinTeamChannel ( );
	void SetPlayerName ( );
	void eventSetLoginInfos ( );
	void CombineLogin ( );
	void SetPC ( );
	void RemoveDelayedCallbackFunction ( );
	void CheckDelayedCallbackFunctions ( );
	void TeamChannelPlayerLogin ( );
	void EchoChannelPlayerLogin ( );
	void NoChannelPlayerLogin ( );
	void LeaveChannel ( );
	void JoinChannel ( );
	void LeaveAll ( );
	void Logout ( );
	void Login ( );
	void Uninitialize ( );
	void Disconnect ( );
	void Connect ( );
	void SetInputDevice ( );
	void InitializeInputDevice ( );
	void Initialize ( );
};

UClass* UCombatVoiceInterfaceVivox::pClassPointer = NULL;

// Class CombatGame.CombatVolumetricsActor
// 0x0028 (0x026C - 0x0244)
class ACombatVolumetricsActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   VolumetricsMI;                                    		// 0x0244 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   ParentVolumetricsMat;                             		// 0x024C (0x0008) [0x0000000000000000]              
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0254 (0x0008) [0x0000000000000000]              
	struct FColor                                      EffectColor;                                      		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              Distance;                                         		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              FalloffExponent;                                  		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              Opacity;                                          		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1872 ];

		return pClassPointer;
	};

	void SetVMMaterial ( );
};

UClass* ACombatVolumetricsActor::pClassPointer = NULL;

// Class CombatGame.CombatWeapAttachMeshActor
// 0x0034 (0x02E8 - 0x02B4)
class ACombatWeapAttachMeshActor : public ASkeletalMeshActorMAT
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x02B4 (0x0008) [0x0000000000000000]              
	TArray< struct FMeshPart >                         SubPartList;                                      		// 0x02BC (0x0010) [0x0000000000000000]              
	TArray< class USkeletalMeshComponent* >            SubPartCompList;                                  		// 0x02CC (0x0010) [0x0000000000000000]              
	unsigned long                                      bShowSilence : 1;                                 		// 0x02DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowLaserSite : 1;                               		// 0x02DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseFirstWeaponMesh : 1;                          		// 0x02DC (0x0004) [0x0000000000000000] [0x00000004] 
	class UParticleSystemComponent*                    LaserSitePSC;                                     		// 0x02E0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1873 ];

		return pClassPointer;
	};

	void UpdateLaserSite ( );
	void UpdateSilence ( );
	void UpdateWeaponClass ( );
};

UClass* ACombatWeapAttachMeshActor::pClassPointer = NULL;

// Class CombatGame.DynamicLadder
// 0x0000 (0x034C - 0x034C)
class ADynamicLadder : public ALadder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1874 ];

		return pClassPointer;
	};

	void eventSuggestMovePreparation ( );
	void UpdateMyLadder ( );
};

UClass* ADynamicLadder::pClassPointer = NULL;

// Class CombatGame.GamePlayEvent_Action
// 0x0050 (0x00B0 - 0x0060)
class UGamePlayEvent_Action : public UObject
{
public:
	TArray< struct FActionTableDataType >              TableDataList;                                    		// 0x0060 (0x0010) [0x0000000000000000]              
	TArray< struct FTableInfoType >                    TableInfoList;                                    		// 0x0070 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             ActionTargetList;                                 		// 0x0080 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             EventTypeList;                                    		// 0x0090 (0x0010) [0x0000000000000000]              
	TArray< int >                                      RegisteredActions;                                		// 0x00A0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1875 ];

		return pClassPointer;
	};

	void GetReward ( );
	void UpdateScore ( );
	void eventSendMsg ( );
	void PlayerAchievement ( );
	void eventMakeKeyByIndex ( );
	void eventMakeKey ( );
	void Register ( );
	void UpdateRegisterData ( );
	void SetRegisterList ( );
	void OnEvent ( );
	void Init ( );
};

UClass* UGamePlayEvent_Action::pClassPointer = NULL;

// Class CombatGame.GamePlayEvent_Kill
// 0x019C (0x03E0 - 0x0244)
class AGamePlayEvent_Kill : public AActor
{
public:
	int                                                KillPacketCount;                                  		// 0x0244 (0x0004) [0x0000000000000000]              
	struct FTakeDamageData                             SavedTakeDamageData;                              		// 0x0248 (0x0078) [0x0000000000000000]              
	float                                              LastKillTimeResetTime;                            		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                LongShotCondition;                                		// 0x02C4 (0x0004) [0x0000000000000000]              
	float                                              AssistCondition;                                  		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              DangerousKillCondition;                           		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              RescueConditionTime;                              		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              RescueCondition;                                  		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                MultiKillConditon;                                		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                ComeBackCondition;                                		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                EnemyKillCondition;                               		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              TeamRevengeCondition;                             		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                ConsecutiveAssistCondition;                       		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                ConsecutiveKillCondition;                         		// 0x02EC (0x0004) [0x0000000000000000]              
	TArray< struct FKillTableDataType >                TableDataList;                                    		// 0x02F0 (0x0010) [0x0000000000000000]              
	TArray< struct FTableInfoContainer >               TableInfoList;                                    		// 0x0300 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             RegisteredStates;                                 		// 0x0310 (0x0010) [0x0000000000000000]              
	unsigned long                                      bSuicide : 1;                                     		// 0x0320 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      OtherPlayerRewardMask;                            		// 0x0324 (0x0010) [0x0000000000000000]              
	unsigned char                                      ProcessingStateIndex;                             		// 0x0334 (0x0001) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0338 (0x0048) UNKNOWN PROPERTY: MapProperty CombatGame.GamePlayEvent_Kill.Achievement
	struct FString                                     CurrentMissionNameOfVictim;                       		// 0x0380 (0x0010) [0x0000000000000000]              
	class APawn*                                       VictimPawn;                                       		// 0x0390 (0x0008) [0x0000000000000000]              
	class APawn*                                       KillerPawn;                                       		// 0x0398 (0x0008) [0x0000000000000000]              
	class ACombatPawn*                                 VictimCombatPawn;                                 		// 0x03A0 (0x0008) [0x0000000000000000]              
	class ACombatPawn*                                 KillerCombatPawn;                                 		// 0x03A8 (0x0008) [0x0000000000000000]              
	class AController*                                 VictimController;                                 		// 0x03B0 (0x0008) [0x0000000000000000]              
	class AController*                                 KillerController;                                 		// 0x03B8 (0x0008) [0x0000000000000000]              
	class APlayerReplicationInfo*                      KillerPRI;                                        		// 0x03C0 (0x0008) [0x0000000000000000]              
	class APlayerReplicationInfo*                      VictimPRI;                                        		// 0x03C8 (0x0008) [0x0000000000000000]              
	class ACombatPlayerReplicationInfo*                VictimCombatPRI;                                  		// 0x03D0 (0x0008) [0x0000000000000000]              
	class ACombatPlayerReplicationInfo*                KillerCombatPRI;                                  		// 0x03D8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1876 ];

		return pClassPointer;
	};

	void IsSuicide ( );
	void IsSurvive ( );
	void IsConsecutiveAssist ( );
	void IsAssist ( );
	void IsOneShotOneKill ( );
	void IsDangerousKill ( );
	void IsEnemyKill ( );
	void IsTeamRevenge ( );
	void IsBackShot ( );
	void IsRevenge ( );
	void IsRescue ( );
	void GetReward_Rescue_Survive ( );
	void IsComeBack ( );
	void IsConsecutiveKillDepense ( );
	void IsMultiKill ( );
	void IsObjectPenetration ( );
	void IsLongShot ( );
	void IsAfterDeathKill ( );
	void IsFirstKill ( );
	void IsTargetDestroy ( );
	void IsMissionBlockingKill ( );
	void IsWeaponKill ( );
	void SendMsg ( );
	void RemoveAchievement ( );
	void SaveAchievement ( );
	void IsIgnoreCheckAchievement ( );
	void GetReward ( );
	void Register ( );
	void SaveStat ( );
	void MakeTargetPacket ( );
	void IsPacket ( );
	void MakePacket ( );
	void GetMaxTableInfoArrayIndex ( );
	void GetTableInfo ( );
	void UpdateRegisterData ( );
	void IsFindState ( );
	void SetRegisterList ( );
	void IsReward ( );
	void UnPack ( );
	void OnEvent ( );
	void Init ( );
	void SetTakeDamageData ( );
};

UClass* AGamePlayEvent_Kill::pClassPointer = NULL;

// Class CombatGame.GripAIDef
// 0x0000 (0x0060 - 0x0060)
class UGripAIDef : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1877 ];

		return pClassPointer;
	};

};

UClass* UGripAIDef::pClassPointer = NULL;

// Class CombatGame.Interface_CombatWeaponType
// 0x0000 (0x0060 - 0x0060)
class UInterface_CombatWeaponType : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1878 ];

		return pClassPointer;
	};

	void IsGrenade ( );
	void IsMeleeWeapon ( );
	void GetWeaponStatType ( );
	void GetWeaponType ( );
	void IsEquipWeapon ( );
	void IsPlacedUseItem ( );
	void IsPlacedWeapon ( );
	void IsPlacedActor ( );
	void IsSkillUseItem ( );
	void IsSkillWeapon ( );
	void IsSkillActor ( );
};

UClass* UInterface_CombatWeaponType::pClassPointer = NULL;

// Class CombatGame.interface_SplinePath
// 0x0000 (0x0060 - 0x0060)
class Uinterface_SplinePath : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1879 ];

		return pClassPointer;
	};

	void eventSetPassedSplineLength ( );
	void eventGetPassedSplineLength ( );
	void eventSetStartSplineActor ( );
	void eventGetSplinePositionOffset ( );
	void eventGetNextSplineActor ( );
	void eventGetGoalSplineActor ( );
	void eventGetStartSplineActor ( );
};

UClass* Uinterface_SplinePath::pClassPointer = NULL;

// Class CombatGame.interface_WavePawn
// 0x0000 (0x0060 - 0x0060)
class Uinterface_WavePawn : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1880 ];

		return pClassPointer;
	};

};

UClass* Uinterface_WavePawn::pClassPointer = NULL;

// Class CombatGame.OnlineSubsystemCombatBase
// 0x0000 (0x01BC - 0x01BC)
class UOnlineSubsystemCombatBase : public UOnlineSubsystem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1881 ];

		return pClassPointer;
	};

	void IsChampionshipObserver ( );
	void IsChampionshipPlayer ( );
	void IsAdminUser ( );
	void IsAdmin ( );
};

UClass* UOnlineSubsystemCombatBase::pClassPointer = NULL;

// Class CombatGame.OnlineSubsystemCombat
// 0x0404 (0x05C0 - 0x01BC)
class UOnlineSubsystemCombat : public UOnlineSubsystemCombatBase
{
public:
	struct FString                                     IPAddress;                                        		// 0x01BC (0x0010) [0x0000000000000000]              
	int                                                PortNumber;                                       		// 0x01CC (0x0004) [0x0000000000000000]              
	struct FString                                     IPAddressPmang;                                   		// 0x01D0 (0x0010) [0x0000000000000000]              
	int                                                PortNumberPmang;                                  		// 0x01E0 (0x0004) [0x0000000000000000]              
	class UCombatCharacterTransaction*                 CharacterTransaction;                             		// 0x01E4 (0x0008) [0x0000000000000000]              
	class UCombatItemTransaction*                      ItemTransaction;                                  		// 0x01EC (0x0008) [0x0000000000000000]              
	class UCombatStatisticsTransaction*                StatisticsTransaction;                            		// 0x01F4 (0x0008) [0x0000000000000000]              
	class UCombatChannelTransaction*                   ChannelTransaction;                               		// 0x01FC (0x0008) [0x0000000000000000]              
	class UCombatLobbyTransaction*                     LobbyTransaction;                                 		// 0x0204 (0x0008) [0x0000000000000000]              
	class UCombatClanTransaction*                      ClanTransaction;                                  		// 0x020C (0x0008) [0x0000000000000000]              
	class UCombatCommunityTransaction*                 CommunityTransaction;                             		// 0x0214 (0x0008) [0x0000000000000000]              
	class UCombatMailTransaction*                      MailTransaction;                                  		// 0x021C (0x0008) [0x0000000000000000]              
	class UCombatAwaitTransaction*                     AwaitTransaction;                                 		// 0x0224 (0x0008) [0x0000000000000000]              
	class UCombatRandomBoxTransaction*                 RandomBoxTransaction;                             		// 0x022C (0x0008) [0x0000000000000000]              
	class UCombatGameOptionTransaction*                GameOptionTransaction;                            		// 0x0234 (0x0008) [0x0000000000000000]              
	struct FPlayerTransactionData                      PlayerInfoData;                                   		// 0x023C (0x01AC) [0x0000000000000000]              
	unsigned char                                      wantScene;                                        		// 0x03E8 (0x0001) [0x0000000000000000]              
	unsigned char                                      LoggedInStatus;                                   		// 0x03E9 (0x0001) [0x0000000000000000]              
	class UOnlineProfileSettings*                      CachedProfile;                                    		// 0x03EC (0x0008) [0x0000000000000000]              
	TArray< struct FPointer >                          AsyncTasks;                                       		// 0x03F4 (0x0010) [0x0000000000000000]              
	struct FString                                     ProfileDataDirectory;                             		// 0x0404 (0x0010) [0x0000000000000000]              
	struct FString                                     ProfileDataExtension;                             		// 0x0414 (0x0010) [0x0000000000000000]              
	struct FString                                     ProfileMessageDataExtension;                      		// 0x0424 (0x0010) [0x0000000000000000]              
	struct FString                                     LoggedInPlayerName;                               		// 0x0434 (0x0010) [0x0000000000000000]              
	struct FString                                     LoggedInPlayerSteamIDStr;                         		// 0x0444 (0x0010) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   ReadProfileSettingsDelegates;                     		// 0x0454 (0x0010) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   WriteProfileSettingsDelegates;                    		// 0x0464 (0x0010) [0x0000000000000000]              
	unsigned long                                      bShowProtocolLogToChat : 1;                       		// 0x0474 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bImmersionDisplayed : 1;                          		// 0x0474 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNotifyDelayedPreMTSReset : 1;                    		// 0x0474 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bJustBecameClanMaster : 1;                        		// 0x0474 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNeedBackToGame : 1;                              		// 0x0474 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsUsingSpeechRecognition : 1;                    		// 0x0474 (0x0004) [0x0000000000000000] [0x00000020] 
	struct FComplaintReceiptInfo                       CurrentComplaintReceiptInfo;                      		// 0x0478 (0x0024) [0x0000000000000000]              
	struct FString                                     GameSerialNumber;                                 		// 0x049C (0x0010) [0x0000000000000000]              
	float                                              ImmersionCylcleTime;                              		// 0x04AC (0x0004) [0x0000000000000000]              
	float                                              ImmersionElapsedTime;                             		// 0x04B0 (0x0004) [0x0000000000000000]              
	float                                              ImmersionLifeTime;                                		// 0x04B4 (0x0004) [0x0000000000000000]              
	int                                                ImmersionHourCount;                               		// 0x04B8 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanNotice;                                       		// 0x04BC (0x0010) [0x0000000000000000]              
	struct FString                                     ClanIntroduce;                                    		// 0x04CC (0x0010) [0x0000000000000000]              
	struct FString                                     WebServerIPAddress;                               		// 0x04DC (0x0010) [0x0000000000000000]              
	struct FString                                     MACAddress;                                       		// 0x04EC (0x0010) [0x0000000000000000]              
	struct FString                                     WarnetKey;                                        		// 0x04FC (0x0010) [0x0000000000000000]              
	int                                                MaxLocalTalkers;                                  		// 0x050C (0x0004) [0x0000000000000000]              
	int                                                MaxRemoteTalkers;                                 		// 0x0510 (0x0004) [0x0000000000000000]              
	TArray< struct FUniqueNetId >                      MuteList;                                         		// 0x0514 (0x0010) [0x0000000000000000]              
	struct FPointer                                    VoiceEngine;                                      		// 0x0524 (0x0008) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   TalkingDelegates;                                 		// 0x052C (0x0010) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   SpeechRecognitionCompleteDelegates;               		// 0x053C (0x0010) [0x0000000000000000]              
	int                                                LoggedInPlayerNum;                                		// 0x054C (0x0004) [0x0000000000000000]              
	struct FUniqueNetId                                LoggedInPlayerId;                                 		// 0x0550 (0x0008) [0x0000000000000000]              
	struct FLocalTalkerSteam                           CurrentLocalTalker;                               		// 0x0558 (0x0008) [0x0000000000000000]              
	TArray< struct FRemoteTalker >                     RemoteTalkers;                                    		// 0x0560 (0x0010) [0x0000000000000000]              
	TArray< struct FUniqueNetId >                      ListenerList;                                     		// 0x0570 (0x0010) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadProfileSettingsComplete__Delegate;        		// 0x0580 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0584 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnWriteProfileSettingsComplete__Delegate;       		// 0x0590 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0594 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnPlayerTalkingStateChange__Delegate;           		// 0x05A0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x05A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnRecognitionComplete__Delegate;                		// 0x05B0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x05B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1882 ];

		return pClassPointer;
	};

	void eventUpdateInventoryItemUIData ( );
	void GetGameSerialNumber ( );
	void eventOnSetGameSerialNumber ( );
	void eventOnItemUnLock ( );
	void SendItemUnLock ( );
	void eventOnStartBulletSaleEventEffect ( );
	void eventOnSteamAchievementStored ( );
	void ClearAllAchievement ( );
	void ClearAchievementByAPIName ( );
	void ClearAchievementByArrayIndex ( );
	void SetAchievementByAPIName ( );
	void SetAchievementByArrayIndex ( );
	void eventOnSteamUserStatsReceived ( );
	void eventOnRequestSteamStats ( );
	void GetSteamAchivementManager ( );
	void UpdateListenerList ( );
	void NotifyVOIPPlaybackFinished ( );
	void OnVOIPPlaybackFinished ( );
	void ProcessSpeechRecognitionDelegates ( );
	void ProcessTalkingDelegates ( );
	void ProcessRemoteVoicePackets ( );
	void RecieveRemoteVoicePackets ( );
	void ClearLocalVoicePackets ( );
	void SendLocalVoicePackets ( );
	void BuildLocalVoicePackets ( );
	void ProcessLocalVoicePackets ( );
	void TickVoice ( );
	void UnregisterRemoteTalkers ( );
	void UnregisterLocalTalkers ( );
	void RegisterLocalTalkers ( );
	void SetSpeechRecognitionObject ( );
	void SelectVocabulary ( );
	void ClearRecognitionCompleteDelegate ( );
	void AddRecognitionCompleteDelegate ( );
	void OnRecognitionComplete ( );
	void GetRecognitionResults ( );
	void StopSpeechRecognition ( );
	void StartSpeechRecognition ( );
	void StopNetworkedVoice ( );
	void StartNetworkedVoice ( );
	void ClearPlayerTalkingDelegate ( );
	void AddPlayerTalkingDelegate ( );
	void OnPlayerTalkingStateChange ( );
	void UnmuteAll ( );
	void MuteAll ( );
	void UnmuteRemoteTalker ( );
	void MuteRemoteTalker ( );
	void SetRemoteTalkerPriority ( );
	void IsHeadsetPresent ( );
	void GetLoginStatus ( );
	void IsFriend ( );
	void IsRemotePlayerTalking ( );
	void IsLocalPlayerTalking ( );
	void UnregisterRemoteTalker ( );
	void RegisterRemoteTalker ( );
	void UnregisterLocalTalker ( );
	void RegisterLocalTalker ( );
	void eventOnTierPointPenaltyNonPlay ( );
	void eventOnTierPointUpdate ( );
	void eventOnMatchroomUserPenaltyEnd ( );
	void eventOnUserServiceAgreementSuccess ( );
	void eventOnShowAccessterms ( );
	void eventOnReturnBackPlayProcessEnd ( );
	void eventOnNeedBackToGame ( );
	void eventOnCalculateBulletSaleTimeDate ( );
	void eventOnClientEXIT ( );
	void RequestLeaveAgentServer ( );
	void eventOnUserNickChange_Failure ( );
	void eventOnUserNicChange_Success ( );
	void eventOnUpdateStorageExpiresCount ( );
	void eventOnUpdateStorageNewCount ( );
	void eventOnReceiveStorageContent_Failure ( );
	void eventOnReceiveStorageFinish ( );
	void eventOnReceiveStorageContent_Success ( );
	void eventOnUpdateStorageList ( );
	void eventOnMailBoxStateUpdate ( );
	void RequestMailBoxStateUpdate ( );
	void RequestMailBoxReceive ( );
	void RequestMailBoxList ( );
	void WaitSteamItemBuyAck ( );
	void RequestSendSteamItemBuyConfirm ( );
	void RequestSendSteamItemBuy ( );
	void eventOnUpdateMatchBanInfo ( );
	void eventOnUpdateMatchStartWaitTime ( );
	void eventOnEneterPracticeGame_Failure ( );
	void eventOnEneterPracticeGame ( );
	void RequestEnterPracticeGame ( );
	void eventOnLEAVE_PRACTICE_GAME_SUCCEED ( );
	void eventOnCheckRandomBoxInInventory ( );
	void RequestRandomBoxEnd ( );
	void RequestRandomBoxUse ( );
	void eventOnNotifyGetRandomBoxNotice ( );
	void eventOnRandomBoxUseFail ( );
	void eventOnRandomBoxUseSuccess ( );
	void eventUpdateTsQuestMessage ( );
	void RequestUpdatePCBangBenefit ( );
	void RequestResetAttend ( );
	void eventOnUpdateAttendInfo ( );
	void eventOnNotifyMTSReset_Failure ( );
	void eventOnNotifyMTSReset ( );
	void eventOnNotifyPreMTSReset ( );
	void eventOnDisplayCurrentMTS ( );
	void SetCurComplaintReceiptInfo ( );
	void eventOnComplaintReceipt ( );
	void eventOnComplaintReceiptFailure ( );
	void eventOnComplaintReceiptSuccess ( );
	void RequestUserComplaintReceipt ( );
	void eventSaveMiniMapSizeOption ( );
	void eventOnUpdateGameOption ( );
	void RequestUpdateGameOption ( );
	void eventOnUpdateScrNotice ( );
	void eventOnNewQuestAlram ( );
	void RequestChampionShipEnterMatchroomCreate ( );
	void eventOnChampionShipUserBlockChatting_Failure ( );
	void eventOnChampionShipUserBlockChatting_Success ( );
	void RequestChampionShipUserBlockChatting ( );
	void eventOnChampionShipChannelNoticeChatting_Failure ( );
	void eventOnUpdateChampionshipChannelNotice ( );
	void RequestChampionShipChannelNoticeChatting ( );
	void eventOnChampionshipObserverInGameChatting_Success ( );
	void eventOnChampionshipObserverMatchRoomChatting_Success ( );
	void eventOnChampionshipObserverChannelChatting_Success ( );
	void AmIChampionshipObserver ( );
	void AmIChampionshipPlayer ( );
	void AmIChampionshipPersonnel ( );
	void IsExistTicket ( );
	void eventHideOverImmersionGuard ( );
	void eventShowOverImmersionGuard ( );
	void eventOnGearSetChange_Used ( );
	void eventOnGearSetChange_Failure ( );
	void eventOnGearSetChange_Success ( );
	void RequestGearSetChange ( );
	void IsPlayingStartupMovie ( );
	void eventOnMatchroomInviteUser_Failure ( );
	void eventOnMatchroomInviteUser_Sucess ( );
	void eventOnMatchroomInviteUser ( );
	void RequestMatchRoomInviteUserReq ( );
	void eventOnMatchroomChannelInviteUserListFailed ( );
	void eventOnMatchroomChannelInviteUserList ( );
	void eventOnMatchroomTeamSwapFailed ( );
	void eventOnMatchroomKickUserFailed ( );
	void eventOnMatchroomChangeHostFailed ( );
	void RequestMatchRoomChangeHostReq ( );
	void eventOnUpdateMatchRoomChannelInviteUserList ( );
	void RequestMatchRoomChannelInviteUserListReq ( );
	void RequestMatchRoomTeamSwapReq ( );
	void RequestMatchRoomKickUserReq ( );
	void eventUpdateProtocoalLog ( );
	void eventIsShowProtocolLogToChat ( );
	void ShowProtocolLogToChat ( );
	void ShutdownNetEngine ( );
	void IsLoginComplete ( );
	void IsAdminUser ( );
	void GetUserGrade ( );
	void IsSpectatorMode ( );
	void eventOnSystemNotifyMessage ( );
	void eventOnMatchroomSlotUpdateDel ( );
	void eventReceiveNoticeMessage ( );
	void eventOnQuestStatus_Change ( );
	void eventOnSearchUser_Sucess ( );
	void eventOnInviteUser_Success ( );
	void eventOnBlockChat_Success ( );
	void eventOnBanUser_Success ( );
	void eventFailBlockPlayGame_WrongActivatedType ( );
	void eventSuccessBlockPlayGame ( );
	void eventNotifySpectatorMode ( );
	void eventOnRoundMonitoringOption_Failure ( );
	void eventOnRoundMonitoringOption_Success ( );
	void eventOnGMCMD_Failure ( );
	void eventOnGMCMD_Success ( );
	void RequestRandomBoxSimulator ( );
	void RequestDemoRec ( );
	void RequestSendRoundMonitoringOption ( );
	void RequestSendScrNoticeTimeout ( );
	void RequestSendScrNoticeDel ( );
	void RequestSendScrNoticeSet ( );
	void RequestSendNoticeMessage ( );
	void RequestSearchUser ( );
	void RequestInviteUser ( );
	void RequestBlockChat ( );
	void RequestBanUser ( );
	void RequestSpectatorMode ( );
	void RequestChangeGameForGM ( );
	void RequestEnterMatchroomForGM ( );
	void RequestTeamShuffle ( );
	void RequestTeamSwap ( );
	void RequestBlockPlayGame ( );
	void RequestKickUserAll ( );
	void RequestKickUser ( );
	void RequestIAmHost ( );
	void GetAimAssistValue ( );
	void OnWriteProfileSettingsComplete ( );
	void OnReadProfileSettingsComplete ( );
	void DoesProfileExist ( );
	void WriteProfileSettings ( );
	void ReadProfileSettings ( );
	void RequestSendDelegateClanMaster ( );
	void eventSetOnClanShutdownPenalty ( );
	void eventFailClanGradeChange ( );
	void eventFailClanMasterDelegate ( );
	void eventFailClanJoinRefuse ( );
	void eventFailClanJoinApprove ( );
	void eventFailClanJoinCancel ( );
	void eventFailClanJoinApply ( );
	void eventFailShutDownClan ( );
	void eventRecvClanClearInfoUpdate ( );
	void eventRecvBecameClanMaster ( );
	void eventRecvClanMasterChangeUpdate ( );
	void eventRecvClanChangeInfoUpdate ( );
	void RequestSendClanShutDown ( );
	void RequestSendClanMemberGradeChange ( );
	void eventMatchRoomClanListUpdate ( );
	void eventFailClanFind ( );
	void RequestSetClanJoinRefuse ( );
	void RequestSetClanJoinApprove ( );
	void RequestSetClanJoinCancel ( );
	void RequestSetClanJoinApply ( );
	void RequestSendClanDetail ( );
	void RequestSendClanFind ( );
	void RequestSendClanList ( );
	void eventSuccessClanJoinList ( );
	void eventClanListDetailView ( );
	void eventReNewalClanList ( );
	void eventFailAcceptClan ( );
	void eventSuccessAcceptClan ( );
	void RequestInviteAcceptClan ( );
	void eventFailBreakAwayClan ( );
	void RequestBreakAwayClan ( );
	void eventFailBanishClan ( );
	void RequestBanishClan ( );
	void eventClanInviteSuggest ( );
	void eventFailInviteClan ( );
	void eventSuccessInviteClan ( );
	void RequestInviteClan ( );
	void eventFailChangeClanPassword ( );
	void eventSuccessChangeClanPassword ( );
	void eventFailCreateClanName ( );
	void eventSuccessCreateClan ( );
	void eventOnClanRegionUpdateFailed ( );
	void eventOnClanRegionUpdateSucceeded ( );
	void eventOnClanRegionUpdate ( );
	void RequestSetClanRegion ( );
	void RequestModifyClanPassword ( );
	void RequestCreateClanName ( );
	void eventOnCallingCardObtain_Failure ( );
	void eventOnCallingCardObtain_Sucess ( );
	void eventOnCallingCardExpire ( );
	void eventOnCallingCardChange_Failure ( );
	void eventOnCallingCardChange_Sucess ( );
	void RequestCallingCardChange ( );
	void eventOnFollowingUser ( );
	void RequestFollowingUser ( );
	void eventOnPlayerInfo_Failure ( );
	void eventOnPlayerInfo_Success ( );
	void RequestPlayerInfoByName ( );
	void RequestPlayerInfo ( );
	void eventOnRemoveBlackList_Failure ( );
	void RequestBlackListRemove ( );
	void eventOnAddBlackList_Failure ( );
	void eventOnAddBlackList_Success ( );
	void RequestBlackListAppend ( );
	void eventOnRemoveFriend_Failure ( );
	void RequestMessengerRemoveFriend ( );
	void eventOnAnswerRejectFriendSuggestion_Failure ( );
	void eventOnAnswerAcceptFriendSuggestion_Failure ( );
	void RequestMessengerAnswerFriendSuggestion ( );
	void eventAlramFriendSuggestion ( );
	void eventOnSuggestFriend_Failure ( );
	void eventOnSuggestFriend_Success ( );
	void RequestMessengerSuggestFriend ( );
	void eventOnClanCreatableNameCheck_Success ( );
	void RequestSendClanCreatableNameCheck ( );
	void eventOnClanIntroduceUpdateFailed ( );
	void eventOnClanIntroduceUpdate ( );
	void eventOnClanIntroduceUpdateSucceded ( );
	void eventSetClanIntroduce ( );
	void RequestSendClanIntroduce ( );
	void eventOnClanNoticeUpdateFailed ( );
	void GetArrayedClanNotice ( );
	void eventOnClanNoticeUpdate ( );
	void eventOnClanNoticeUpdateSucceded ( );
	void eventSetClanNotice ( );
	void RequestSendClanNotice ( );
	void eventUpdateClanMessenge_ClanList_Offline ( );
	void eventUpdateClanMember_ClanList ( );
	void eventOnClanMemberKick ( );
	void eventOnClanMemberKickSucceed ( );
	void eventOnClanBreakAway ( );
	void eventOnClanBreakAwaySucceed ( );
	void eventOnClanAccept ( );
	void eventOnClanJoinApproveClan ( );
	void eventOnClanJoinApproveSucceed ( );
	void eventOnClanShutDownSucceed ( );
	void eventUpdateOnClanShutDown ( );
	void eventUpdateMessenger_BlockList ( );
	void eventUpdateMessenger_FriendList_Offline ( );
	void eventUpdateMessenger_FriendList ( );
	void eventUpdateMessenger_SuggestionList ( );
	void eventUpdateRadioMessage ( );
	void eventOnSendInGameTeamChatting_Success ( );
	void eventOnSendInGameChatting_Success ( );
	void eventDisplayPlayerInOutMessage ( );
	void eventOnSendMatchRoomChatting_Success ( );
	void eventOnSendChannelChatting_Success ( );
	void eventUpdateMessenger_NotifyMessage ( );
	void eventUpdateClanChat ( );
	void eventUpdateWhisperMessage ( );
	void eventOnSendChatting_Failure ( );
	void RequestSendChattingByType ( );
	void eventOnMatchHasFinished ( );
	void eventMatchEndResult ( );
	void eventUpdateGameCash ( );
	void RequestUserCash ( );
	void eventOnItemSell ( );
	void RequestItemSell ( );
	void eventOnSteamItemObtain ( );
	void eventDestroyedItem_Failure ( );
	void eventDestroyedItem ( );
	void eventExpiredItem ( );
	void eventOnRequestSendSteamItemBuyConfirmCancle ( );
	void eventOnRequestSendSteamItemBuyConfirmOK ( );
	void eventOnSteamItemBuyConfirm ( );
	void eventOnSteamItemBuy ( );
	void eventOnBuyItemCancel_Failure ( );
	void eventOnBuyItemCancel_Success ( );
	void RequestBuyItemCancel ( );
	void eventOnBuyItem_TryPayment ( );
	void eventOnBuyItem_Failure ( );
	void eventOnBuyItem_Success ( );
	void RequestBuyItem ( );
	void IsOnSale ( );
	void IsForSale ( );
	void eventNotifyExpiredItem ( );
	void eventLogOpenCubeResult ( );
	void eventSuccessBuyCubeItem ( );
	void eventUpdateItemRemainTime ( );
	void eventOnUpdateInventory_Failure ( );
	void eventOnUpdateInventory_Success ( );
	void SendChangeItemExpendReq ( );
	void SendItemExpendReq ( );
	void SendItemDeactiveReq ( );
	void SendItemActiveReq ( );
	void SetPlayEquipment ( );
	void ResetPlayEquipmentInformation ( );
	void RequestUpdateInventory ( );
	void eventSuccessRemoveInventoryItem ( );
	void RequestRemoveInventoryItem ( );
	void eventSetItemNameInvenItems ( );
	void eventSetActiveItems ( );
	void eventSetEquippedItem ( );
	void eventSetInitItemInfomation ( );
	void eventOnCompMatchDialogCheck ( );
	void RequestLeaveRoomSettingReq ( );
	void RequestEnterRoomSettingReq ( );
	void eventOnNotifyChangeMatchroomGameOption ( );
	void eventOnNotifyChangeHost ( );
	void eventDisplayTeamUpdateType ( );
	void eventUpdateMatchroom_TeamList ( );
	void eventUpdateMatchroom_Password ( );
	void eventUpdateMatchroom_Option ( );
	void eventUpdateMatchroom_ModeMap ( );
	void eventUpdateMatchroom_RoomName ( );
	void eventOnMatcroomUpdateOption_Failure ( );
	void RequestMatchRoomUpdateOptionByPassword ( );
	void RequestMatchRoomUpdateOptionByModeOption ( );
	void RequestMatchRoomUpdateOptionByGame ( );
	void RequestMatchRoomUpdateOptionByTitle ( );
	void eventOnLeaveMatchRoom_Failure ( );
	void PushLeaveMatchroomReasonDialog ( );
	void eventOnLeaveMatchRoom_Success ( );
	void RequestLeaveMatchRoom ( );
	void eventOnIntrude_Failure ( );
	void eventOnIntrude_Success ( );
	void eventOnIntrude_Try ( );
	void RequestIntrude ( );
	void eventOnChangeTeam_Success ( );
	void eventOnChangeTeam_Failure ( );
	void RequestChangeTeam ( );
	void eventOnReady_Failure ( );
	void RequestReady ( );
	void eventOnMatchBeginningAborted ( );
	void eventOnStartMatchBeginCountdown ( );
	void RequestAbortCountdown ( );
	void eventOnStartMatch_Failure_Notify ( );
	void eventOnStartMatch_Failure ( );
	void RequestStartMatch ( );
	void eventOnPlayerJoinMatchroom ( );
	void eventOnStartEnteringMatch ( );
	void eventOnMatchroomReadyButtonUpdate ( );
	void eventOnNotifyLazyHostWarning ( );
	void eventOnUpdateMatchroomTeamSwap ( );
	void eventOnUpdateMatchroom ( );
	void ClearCompMatchInfo ( );
	void MakeCompMatchInfo ( );
	void ClearClanMatchInfo ( );
	void MakeClanMatchInfo ( );
	void eventOnTodayModeUpdateNotify ( );
	void eventOnTodayModeUpdateFailed ( );
	void eventOnTodayModeUpdate ( );
	void isNeedUpdateTodayMode ( );
	void RequestTodayModeUpdate ( );
	void RequestQuickStart ( );
	void eventOnEnterMatchroomByCreation_Failure ( );
	void eventOnEnterMatchroomByCreation_Success ( );
	void RequestEnterMatchRoomByCreate ( );
	void eventOnMatchRoomLookIn ( );
	void RequestMatchRoomLookIn ( );
	void eventOnEnterMatchRoom ( );
	void RequestEnterMatchRoomByRoomNumber ( );
	void eventOnUpdateMatchRoomList ( );
	void eventOnEnterMatchChannel ( );
	void RequestEnterMatchChannel ( );
	void eventOnReportSingleGameResult ( );
	void RequestReportSingleGameResult ( );
	void eventOnLeaveSingleGame ( );
	void RequestLeaveSingleGame ( );
	void eventOnEnterSingleGame ( );
	void RequestEnterSingleGame ( );
	void eventOnUpdateMatchChannelState ( );
	void RequestMatchChannelState ( );
	void eventOnLeaveMatchChannel ( );
	void RequestLeaveMatchChannel ( );
	void eventOnUpdateCreateNickName ( );
	void RequestCreateNickName ( );
	void eventOnUserDataInfomation ( );
	void TimerGotoChannel ( );
	void eventOnReceiveUserData ( );
	void eventOnEnterMatchServer_Failure ( );
	void RequestEnterMatchServer ( );
	void eventUpdateCertifyWaitUserCount ( );
	void eventUpdateLoginProgressUI ( );
	void eventOnConnectAgentServer_Failure ( );
	void eventOnUserCertification_Failure ( );
	void eventOnModuleCertification_Failure ( );
	void RequestModuleCertification ( );
	void eventDisplayDialog_LoginError_Init ( );
	void eventDisplayDialog_LoginError_WebServer ( );
	void eventDisplayDialog_LoginError_Wait ( );
	void ParseLoginArgument ( );
	void OnWebServerRequestComplete ( );
	void eventConnectWebserver ( );
	void StartLogin ( );
	void CheckPassLoginUI ( );
	void eventUpdateDashboard_ClanButtons ( );
	void eventSetFrontEndPlayerActor ( );
	void eventOnSetItemConsum_Failure ( );
	void eventOnSetItemConsume_Success ( );
	void eventOnItemDeActivated ( );
	void eventOnItemActivated ( );
	void eventUpdateTooltipRentalTime ( );
	void eventIsDisplayedTooltip ( );
	void eventUpdateClanLevelUpMessage ( );
	void eventUpdateCurrentClanLevelData ( );
	void eventUpdateCurrentLevelData ( );
	void eventOnLeaveRoomSettingSucceed ( );
	void eventOnEnterRoomSettingSucceed ( );
	void eventOnLeavePersonalMaintenance_REVISAL ( );
	void eventOnLeavePersonalMaintenance_Failure ( );
	void eventOnLeavePersonalMaintenance_Success ( );
	void RequestLeavePersonalMaintenance ( );
	void eventOnEnterPersonalMaintenance_Failure ( );
	void eventOnEnterPersonalMaintenance_Success ( );
	void RequestEnterPersonalMaintenance ( );
	void eventOnUIBlock ( );
	void eventNotifyChangedBoosterItem ( );
	void eventFailSetActivePreset ( );
	void eventSuccessSetActivePreset ( );
	void RequestSetActivePreset ( );
	void eventDev_UpdateDevelopeMessage ( );
	void RequestChangeAFKState ( );
	void OpenFrontEnd ( );
	void eventGotoChannel ( );
	void eventGotoMainLobby ( );
	void eventGotoGameResult ( );
	void eventGotoMatchRoom ( );
	void eventFailReturnToMatchRoom ( );
	void RequestReturnToMatchRoom ( );
	void OnDisconnetToMatchServerDialogOK ( );
	void ShowDisconnetToMatchServerDialog ( );
	void eventDisconnetClientResult ( );
	void eventOnVersionDiscrepancy ( );
	void eventExit ( );
	void GetMoviePlayer ( );
	void GetHUD ( );
	void GetPC ( );
	void GetFrontEndGameInfo ( );
	void SendResetQuest ( );
	void SendResetQuestTime ( );
	void BoosterScheduleRegister ( );
	void eventInit ( );
};

UClass* UOnlineSubsystemCombat::pClassPointer = NULL;

// Class CombatGame.OnlineSubsystemCombatDedicatedSvr
// 0x0020 (0x01DC - 0x01BC)
class UOnlineSubsystemCombatDedicatedSvr : public UOnlineSubsystemCombatBase
{
public:
	TArray< struct FPresetItemInfo >                   PresetWeaponTransition;                           		// 0x01BC (0x0010) [0x0000000000000000]              
	TArray< struct FAvatarItemInfo >                   AvatarItemTransition;                             		// 0x01CC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1883 ];

		return pClassPointer;
	};

	void GetActivePreset ( );
	void LoadArmorListTransition ( );
	void LoadPresetWeaponTransition ( );
};

UClass* UOnlineSubsystemCombatDedicatedSvr::pClassPointer = NULL;

// Class CombatGame.PresetManager
// 0x06C0 (0x0720 - 0x0060)
class UPresetManager : public UObject
{
public:
	struct FString                                     PresetCode_First[ 0x9 ];                          		// 0x0060 (0x0090) [0x0000000000000000]              
	struct FString                                     PresetCode_Sec[ 0x9 ];                            		// 0x00F0 (0x0090) [0x0000000000000000]              
	struct FString                                     PresetCode_Third[ 0x9 ];                          		// 0x0180 (0x0090) [0x0000000000000000]              
	struct FString                                     PresetCode_Fourth[ 0x9 ];                         		// 0x0210 (0x0090) [0x0000000000000000]              
	struct FPresetData                                 PresetData_First[ 0x9 ];                          		// 0x02A0 (0x00FC) [0x0000000000000000]              
	struct FPresetData                                 PresetData_Sec[ 0x9 ];                            		// 0x039C (0x00FC) [0x0000000000000000]              
	struct FPresetData                                 PresetData_Third[ 0x9 ];                          		// 0x0498 (0x00FC) [0x0000000000000000]              
	struct FPresetData                                 PresetData_Fourth[ 0x9 ];                         		// 0x0594 (0x00FC) [0x0000000000000000]              
	TArray< struct FString >                           ArmorData;                                        		// 0x0690 (0x0010) [0x0000000000000000]              
	struct FAmmorInfo                                  AmmorPoint;                                       		// 0x06A0 (0x000C) [0x0000000000000000]              
	TArray< struct FTestChangeWeaponType >             PrimaryWeapon;                                    		// 0x06AC (0x0010) [0x0000000000000000]              
	TArray< struct FTestChangeWeaponType >             SubWeapon;                                        		// 0x06BC (0x0010) [0x0000000000000000]              
	TArray< struct FTestChangeWeaponType >             ArmorSet;                                         		// 0x06CC (0x0010) [0x0000000000000000]              
	class UCombatGameTableDepot*                       TableDepot;                                       		// 0x06DC (0x0008) [0x0000000000000000]              
	int                                                PresetData_ChaFXUpperItemID;                      		// 0x06E4 (0x0004) [0x0000000000000000]              
	int                                                PresetData_ChaFXFootItemID;                       		// 0x06E8 (0x0004) [0x0000000000000000]              
	int                                                PresetData_C4TimeReduceItemID;                    		// 0x06EC (0x0004) [0x0000000000000000]              
	int                                                PresetData_SprayID;                               		// 0x06F0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      SkillItemIndex;                                   		// 0x06F4 (0x0010) [0x0000000000000000]              
	int                                                GearSetItemIndex[ 0x3 ];                          		// 0x0704 (0x000C) [0x0000000000000000]              
	TArray< class UClass* >                            InvListToPreventGC;                               		// 0x0710 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1884 ];

		return pClassPointer;
	};

	void GetActivatedSprayID ( );
	void GetArmorData ( );
	void SetInventoryListClassToPreventGC ( );
	void GetPresetClass ( );
	void GetActiveItemData ( );
	void SetInitializedData ( );
	void LoadLocalFrontEndData ( );
	void GetInventoryPresetData ( );
	void IsValidArmorData ( );
	void ForceChangePresetWeapon ( );
	void Init ( );
	void InitPresetDataFromCode ( );
	void SetPresetItemID ( );
	void GetPresetClassName ( );
	void GetPresetID ( );
};

UClass* UPresetManager::pClassPointer = NULL;

// Class CombatGame.RankUpSystem
// 0x0000 (0x0060 - 0x0060)
class URankUpSystem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1885 ];

		return pClassPointer;
	};

	void ConvertExpToRank ( );
	void GetUnlockSkill_Range ( );
	void eventMakeID ( );
};

UClass* URankUpSystem::pClassPointer = NULL;

// Class CombatGame.SeqAct_CheckPrimaryWeapon
// 0x0000 (0x0108 - 0x0108)
class USeqAct_CheckPrimaryWeapon : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1886 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CheckPrimaryWeapon::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatBotSpawn
// 0x0054 (0x0174 - 0x0120)
class USeqAct_CombatBotSpawn : public USeqAct_Latent
{
public:
	class UClass*                                      PawnClass;                                        		// 0x0120 (0x0008) [0x0000000000000000]              
	class UClass*                                      ControllerClass;                                  		// 0x0128 (0x0008) [0x0000000000000000]              
	int                                                SpawnCount;                                       		// 0x0130 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x0134 (0x0010) [0x0000000000000000]              
	class UCCSBTTree*                                  BehaviorTree;                                     		// 0x0144 (0x0008) [0x0000000000000000]              
	unsigned long                                      bGiveDefaultInventory : 1;                        		// 0x014C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsSpawning : 1;                                  		// 0x014C (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class UClass* >                            InventoryList;                                    		// 0x0150 (0x0010) [0x0000000000000000]              
	float                                              SpawnedDelay;                                     		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              LastSpawnedTime;                                  		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                LastSpawnPointIndex;                              		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                SpawnedCount;                                     		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                DiedCount;                                        		// 0x0170 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1887 ];

		return pClassPointer;
	};

	void eventGetObjClassVersion ( );
	void eventOnNotifyActorDied ( );
};

UClass* USeqAct_CombatBotSpawn::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatDelay
// 0x0008 (0x013C - 0x0134)
class USeqAct_CombatDelay : public USeqAct_Delay
{
public:
	unsigned long                                      bDisplayHUD : 1;                                  		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                NotifyTime;                                       		// 0x0138 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1888 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CombatDelay::pClassPointer = NULL;

// Class CombatGame.SeqAct_GameInfo
// 0x0010 (0x0118 - 0x0108)
class USeqAct_GameInfo : public USequenceAction
{
public:
	TArray< class UObject* >                           Instigator;                                       		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1889 ];

		return pClassPointer;
	};

	void eventGetObjClassVersion ( );
	void GetControllerFromInstigator ( );
};

UClass* USeqAct_GameInfo::pClassPointer = NULL;

// Class CombatGame.SeqAct_MissionEvent
// 0x0014 (0x012C - 0x0118)
class USeqAct_MissionEvent : public USeqAct_GameInfo
{
public:
	struct FName                                       EventName;                                        		// 0x0118 (0x0008) [0x0000000000000000]              
	unsigned long                                      bValidMatchInProgress : 1;                        		// 0x0120 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              fReservedProperty;                                		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                iReservedProperty;                                		// 0x0128 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1890 ];

		return pClassPointer;
	};

	void eventGetObjClassVersion ( );
};

UClass* USeqAct_MissionEvent::pClassPointer = NULL;

// Class CombatGame.SeqAct_SpawnGroupIndex
// 0x0001 (0x0119 - 0x0118)
class USeqAct_SpawnGroupIndex : public USeqAct_GameInfo
{
public:
	unsigned char                                      SpawnGroupIndex;                                  		// 0x0118 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1891 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SpawnGroupIndex::pClassPointer = NULL;

// Class CombatGame.SeqCond_IsContinuableRandomBox
// 0x0000 (0x00EC - 0x00EC)
class USeqCond_IsContinuableRandomBox : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1892 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsContinuableRandomBox::pClassPointer = NULL;

// Class CombatGame.SeqCond_IsDifficulty
// 0x0000 (0x00EC - 0x00EC)
class USeqCond_IsDifficulty : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1893 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsDifficulty::pClassPointer = NULL;

// Class CombatGame.SeqCond_IsInstallSentryGun
// 0x0000 (0x00EC - 0x00EC)
class USeqCond_IsInstallSentryGun : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1894 ];

		return pClassPointer;
	};

	void eventIsInstallSentryGun ( );
};

UClass* USeqCond_IsInstallSentryGun::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatBase
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatBase : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1895 ];

		return pClassPointer;
	};

	void eventGetObjClassVersion ( );
	void eventActiveCurrentSeqEvent ( );
	void SetLinkedVariables ( );
	void ActiveSeqEvent ( );
};

UClass* USeqEvent_CombatBase::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatInvalidityTimeOver
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatInvalidityTimeOver : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1896 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatInvalidityTimeOver::pClassPointer = NULL;

// Class CombatGame.USSPawn
// 0x0064 (0x05BC - 0x0558)
class AUSSPawn : public APawn
{
public:
	struct FPointer                                    VfTable_ICCSPawn;                                 		// 0x0558 (0x0008) [0x0000000000000000]              
	unsigned char                                      MovementType;                                     		// 0x0560 (0x0001) [0x0000000000000000]              
	unsigned char                                      AlertnessState;                                   		// 0x0561 (0x0001) [0x0000000000000000]              
	unsigned char                                      WantedCoverPose;                                  		// 0x0562 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentCoverPose;                                 		// 0x0563 (0x0001) [0x0000000000000000]              
	unsigned long                                      bInCrouchedPosture : 1;                           		// 0x0564 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShouldCover : 1;                                 		// 0x0564 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInCover : 1;                                     		// 0x0564 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              CoverPct;                                         		// 0x0568 (0x0004) [0x0000000000000000]              
	float                                              CoverPoseBlendTimeOverride;                       		// 0x056C (0x0004) [0x0000000000000000]              
	struct FVector2D                                   AimCurrentSkel;                                   		// 0x0570 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   AimPitchRange;                                    		// 0x0578 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   AimYawRange;                                      		// 0x0580 (0x0008) [0x0000000000000000]              
	float                                              MaxPitchSpeed;                                    		// 0x0588 (0x0004) [0x0000000000000000]              
	float                                              MaxYawSpeed;                                      		// 0x058C (0x0004) [0x0000000000000000]              
	class UClass*                                      CurrentWeaponAttachmentClass;                     		// 0x0590 (0x0008) [0x0000000000000000]              
	class AUSSWeaponAttachment*                        CurrentWeaponAttachment;                          		// 0x0598 (0x0008) [0x0000000000000000]              
	float                                              WeaponHeight;                                     		// 0x05A0 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             BloodParticleSystem;                              		// 0x05A4 (0x0008) [0x0000000000000000]              
	TArray< class UAnimNodeAimOffset* >                AimNodes;                                         		// 0x05AC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1897 ];

		return pClassPointer;
	};

	void WeaponFired ( );
	void eventGetWeaponStartTraceLocation ( );
	void NeedToTurn ( );
	void eventDestroyed ( );
	void SetPawnRBChannels ( );
	void PlayDying ( );
	void PlayTakeHitEffects ( );
	void PlayHit ( );
	void eventPostInitAnimTree ( );
	void IsInCover ( );
	void MoveToInCover ( );
	void CoverPoseTransitionOver ( );
	void SetNoCoverPose ( );
	void SetCoverPose ( );
	void CanAim ( );
	void PostureTransitionOver ( );
	void SetPostureDefault ( );
	void SetCrouched ( );
	void IsCrouched ( );
	void SetMovementSpeedDefault ( );
	void SetSpeed ( );
	void GetSpeed ( );
	void SetAlertnessDefault ( );
	void SetAlertness ( );
	void GetAlertness ( );
	void SetMovementTypeDefault ( );
	void SetMovementType ( );
	void GetMovementType ( );
};

UClass* AUSSPawn::pClassPointer = NULL;

// Class CombatGame.CombatAnim_AimOffset
// 0x002C (0x018C - 0x0160)
class UCombatAnim_AimOffset : public UAnimNodeAimOffset
{
public:
	class ACombatPawn*                                 CombatPawnOwner;                                  		// 0x0160 (0x0008) [0x0000000000000000]              
	unsigned long                                      bOnlyUpdateIn360Aiming : 1;                       		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTurnOffWhenReloadingWeapon : 1;                  		// 0x0168 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOnlyUpdateOnBecomeRelevant : 1;                  		// 0x0168 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoingWeaponReloadInterp : 1;                     		// 0x0168 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              ReloadingBlendTime;                               		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              ReloadingBlendTimeToGo;                           		// 0x0170 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   LastAimOffset;                                    		// 0x0174 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   LastPostProcessedAimOffset;                       		// 0x017C (0x0008) [0x0000000000000000]              
	float                                              TurnAroundTimeToGo;                               		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              TurnAroundBlendTime;                              		// 0x0188 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1898 ];

		return pClassPointer;
	};

};

UClass* UCombatAnim_AimOffset::pClassPointer = NULL;

// Class CombatGame.CombatAnim_BlendList
// 0x0020 (0x0140 - 0x0120)
class UCombatAnim_BlendList : public UAnimNodeBlendList
{
public:
	TArray< float >                                    ChildBlendInTime;                                 		// 0x0120 (0x0010) [0x0000000000000000]              
	TArray< unsigned long >                            BlockSetActiveChildWhenRelevant;                  		// 0x0130 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1899 ];

		return pClassPointer;
	};

	void SetActiveChild ( );
};

UClass* UCombatAnim_BlendList::pClassPointer = NULL;

// Class CombatGame.CombatAnim_TurnInPlace
// 0x0080 (0x0190 - 0x0110)
class UCombatAnim_TurnInPlace : public UAnimNodeBlend
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDelayBlendOutToPlayAnim : 1;                     		// 0x0110 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPlayingTurnTransition : 1;                       		// 0x0110 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNoTransitionForInstantTurn : 1;                  		// 0x0110 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      PawnJustSeen : 1;                                 		// 0x0110 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      PawnNotSeen : 1;                                  		// 0x0110 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDoingInstantTurn : 1;                            		// 0x0110 (0x0004) [0x0000000000000000] [0x00000040] 
	int                                                LastPawnYaw;                                      		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              PawnRotationRate;                                 		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                YawOffset;                                        		// 0x011C (0x0004) [0x0000000000000000]              
	class ACombatPawn*                                 CombatPawnOwner;                                  		// 0x0120 (0x0008) [0x0000000000000000]              
	class ACombatPawn*                                 CachedBaseCombatPawn;                             		// 0x0128 (0x0008) [0x0000000000000000]              
	class AActor*                                      CachedBase;                                       		// 0x0130 (0x0008) [0x0000000000000000]              
	TArray< struct FRotTransitionInfo >                RotTransitions;                                   		// 0x0138 (0x0010) [0x0000000000000000]              
	float                                              TransitionBlendInTime;                            		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              TransitionBlendOutTime;                           		// 0x014C (0x0004) [0x0000000000000000]              
	int                                                CurrentTransitionIndex;                           		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              TransitionThresholdAngle;                         		// 0x0154 (0x0004) [0x0000000000000000]              
	TArray< class UCombatAnim_TurnInPlace_Player* >    PlayerNodes;                                      		// 0x0158 (0x0010) [0x0000000000000000]              
	TArray< class UCombatAnim_BlendList* >             BlendNodes;                                       		// 0x0168 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             BlendNodesNameList;                               		// 0x0178 (0x0010) [0x0000000000000000]              
	float                                              BlendNodesBlendInTime;                            		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              BlendNodesBlendOutTime;                           		// 0x018C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1900 ];

		return pClassPointer;
	};

	void ResetRotation ( );
};

UClass* UCombatAnim_TurnInPlace::pClassPointer = NULL;

// Class CombatGame.CombatAnim_TurnInPlace_Player
// 0x001C (0x0184 - 0x0168)
class UCombatAnim_TurnInPlace_Player : public UAnimNodeSequenceBlendBase
{
public:
	TArray< struct FTIP_Transition >                   TIP_Transitions;                                  		// 0x0168 (0x0010) [0x0000000000000000]              
	float                                              TransitionBlendTime;                              		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                ActiveChildIndex;                                 		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0180 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1901 ];

		return pClassPointer;
	};

};

UClass* UCombatAnim_TurnInPlace_Player::pClassPointer = NULL;

// Class CombatGame.CombatAnim_TurnInPlace_Rotator
// 0x0013 (0x0110 - 0x00FD)
class UCombatAnim_TurnInPlace_Rotator : public UAnimNodeBlendBase
{
public:
	class ACombatPawn*                                 CombatPawnOwner;                                  		// 0x0100 (0x0008) [0x0000000000000000]              
	class UCombatAnim_TurnInPlace*                     TurnInPlaceNode;                                  		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1902 ];

		return pClassPointer;
	};

};

UClass* UCombatAnim_TurnInPlace_Rotator::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendBase
// 0x0024 (0x0144 - 0x0120)
class UCombatAnimBlendBase : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x0120 (0x0004) [0x0000000000000000]              
	TArray< float >                                    ChildBlendTimes;                                  		// 0x0124 (0x0010) [0x0000000000000000]              
	TArray< unsigned char >                            ChildBlendType;                                   		// 0x0134 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1903 ];

		return pClassPointer;
	};

	void GetAnimDuration ( );
	void GetBlendTime ( );
};

UClass* UCombatAnimBlendBase::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlend_SimpleJump
// 0x0008 (0x014C - 0x0144)
class UCombatAnimBlend_SimpleJump : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 OwnerPawn;                                        		// 0x0144 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1904 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlend_SimpleJump::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendBaseByZoom
// 0x0008 (0x014C - 0x0144)
class UCombatAnimBlendBaseByZoom : public UCombatAnimBlendBase
{
public:
	class ACombatWeapon*                               Weapon;                                           		// 0x0144 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1905 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendBaseByZoom::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByDeath
// 0x0014 (0x0158 - 0x0144)
class UCombatAnimBlendByDeath : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0144 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsDeadOld : 1;                                   		// 0x014C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              UndeadTime;                                       		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              NoAnimTheshold;                                   		// 0x0154 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1906 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByDeath::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByFall
// 0x0018 (0x015C - 0x0144)
class UCombatAnimBlendByFall : public UCombatAnimBlendBase
{
public:
	float                                              PreLandTime;                                      		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              PreLandStartUprightTime;                          		// 0x0148 (0x0004) [0x0000000000000000]              
	unsigned char                                      FallState;                                        		// 0x014C (0x0001) [0x0000000000000000]              
	float                                              LastFallingVelocity;                              		// 0x0150 (0x0004) [0x0000000000000000]              
	class UCombatAnimNodeJumpLeanOffset*               CachedLeanNode;                                   		// 0x0154 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1907 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByFall::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByIdle
// 0x0018 (0x015C - 0x0144)
class UCombatAnimBlendByIdle : public UCombatAnimBlendBase
{
public:
	float                                              IdleSpeedThreshold;                               		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              IdleBlendDelay;                                   		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              IdleSpeedThresholdSqr;                            		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              TimeFromLastMovement;                             		// 0x0150 (0x0004) [0x0000000000000000]              
	class ACombatPawn*                                 CombatPawnOwner;                                  		// 0x0154 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1908 ];

		return pClassPointer;
	};

	void PlayAnim ( );
};

UClass* UCombatAnimBlendByIdle::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByMovement
// 0x0008 (0x014C - 0x0144)
class UCombatAnimBlendByMovement : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0144 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1909 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByMovement::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByPhysics
// 0x0039 (0x017D - 0x0144)
class UCombatAnimBlendByPhysics : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 POwner;                                           		// 0x0144 (0x0008) [0x0000000000000000]              
	int                                                PhysicsMap[ 0xC ];                                		// 0x014C (0x0030) [0x0000000000000000]              
	unsigned char                                      LastPhysics;                                      		// 0x017C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1910 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByPhysics::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByPosture
// 0x0000 (0x0144 - 0x0144)
class UCombatAnimBlendByPosture : public UCombatAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1911 ];

		return pClassPointer;
	};

	void OnInit ( );
};

UClass* UCombatAnimBlendByPosture::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByRISSlot
// 0x0009 (0x014D - 0x0144)
class UCombatAnimBlendByRISSlot : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0144 (0x0008) [0x0000000000000000]              
	unsigned char                                      ActivatedSlot;                                    		// 0x014C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1912 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByRISSlot::pClassPointer = NULL;

// Class CombatGame.CombatFirstAnimBlendByIdle
// 0x0008 (0x014C - 0x0144)
class UCombatFirstAnimBlendByIdle : public UCombatAnimBlendBase
{
public:
	class ACombatWeapon*                               Weapon;                                           		// 0x0144 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1913 ];

		return pClassPointer;
	};

};

UClass* UCombatFirstAnimBlendByIdle::pClassPointer = NULL;

// Class CombatGame.CombatFirstAnimBlendByZoom
// 0x000D (0x0151 - 0x0144)
class UCombatFirstAnimBlendByZoom : public UCombatAnimBlendBase
{
public:
	unsigned long                                      bUseBlendTime : 1;                                		// 0x0144 (0x0004) [0x0000000000000000] [0x00000001] 
	class ACombatWeapon*                               Weapon;                                           		// 0x0148 (0x0008) [0x0000000000000000]              
	unsigned char                                      LastZoomState;                                    		// 0x0150 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1914 ];

		return pClassPointer;
	};

};

UClass* UCombatFirstAnimBlendByZoom::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByDamage
// 0x001C (0x0160 - 0x0144)
class UCombatAnimBlendByDamage : public UAnimNodeBlendPerBone
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0144 (0x0008) [0x0000000000000000]              
	float                                              DamageAnimBlendOutTime;                           		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              DamageAnimBlendInTime;                            		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              MinDamageAnimDuration;                            		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              DamageAnimLength;                                 		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              ElapsedDamageAnimTime;                            		// 0x015C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1915 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByDamage::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByDamageType
// 0x0008 (0x0128 - 0x0120)
class UCombatAnimBlendByDamageType : public UAnimNodeBlendList
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0120 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1916 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByDamageType::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByParts
// 0x000C (0x012C - 0x0120)
class UCombatAnimBlendByParts : public UAnimNodeBlendList
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0120 (0x0008) [0x0000000000000000]              
	unsigned long                                      IgnoreNewHit : 1;                                 		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      WasFinishing : 1;                                 		// 0x0128 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1917 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByParts::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendBySlotActive
// 0x0008 (0x014C - 0x0144)
class UCombatAnimBlendBySlotActive : public UAnimNodeBlendPerBone
{
public:
	class UAnimNodeSlot*                               ChildSlot;                                        		// 0x0144 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1918 ];

		return pClassPointer;
	};

	void SetForceLocalSpaceBlend ( );
};

UClass* UCombatAnimBlendBySlotActive::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByWeapType
// 0x0000 (0x0144 - 0x0144)
class UCombatAnimBlendByWeapType : public UAnimNodeBlendPerBone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1919 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByWeapType::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByZoom
// 0x0011 (0x0155 - 0x0144)
class UCombatAnimBlendByZoom : public UAnimNodeBlendPerBone
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0144 (0x0008) [0x0000000000000000]              
	float                                              BlendTimeToZoom;                                  		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToNormal;                                		// 0x0150 (0x0004) [0x0000000000000000]              
	unsigned char                                      LastZoomState;                                    		// 0x0154 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1920 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByZoom::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendDirectional
// 0x0034 (0x0150 - 0x011C)
class UCombatAnimBlendDirectional : public UAnimNodeBlendDirectional
{
public:
	TArray< class USkelControlBase* >                  TorsoControllers;                                 		// 0x011C (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             TorsoControllerNames;                             		// 0x012C (0x0010) [0x0000000000000000]              
	unsigned long                                      EditorPreview : 1;                                		// 0x013C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              FullBwdThreshold;                                 		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              SkelBlendOutTime;                                 		// 0x0144 (0x0004) [0x0000000000000000]              
	class ACombatPawn*                                 Owner;                                            		// 0x0148 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1921 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendDirectional::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendHostage
// 0x0008 (0x0128 - 0x0120)
class UCombatAnimBlendHostage : public UAnimNodeBlendList
{
public:
	class ACombatHostageActor*                         HostageActor;                                     		// 0x0120 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1922 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendHostage::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendPerBone_Multi
// 0x0024 (0x0168 - 0x0144)
class UCombatAnimBlendPerBone_Multi : public UAnimNodeBlendPerBone
{
public:
	TArray< struct FBlendInfo >                        BlendInfoArr;                                     		// 0x0144 (0x0010) [0x0000000000000000]              
	class ACombatPawn*                                 Owner;                                            		// 0x0154 (0x0008) [0x0000000000000000]              
	int                                                ActiveChildIndex;                                 		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                LastActiveChild;                                  		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              SliderPosition;                                   		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1923 ];

		return pClassPointer;
	};

	void SetChildPlayRateByDesiredTime ( );
};

UClass* UCombatAnimBlendPerBone_Multi::pClassPointer = NULL;

// Class CombatGame.CombatAnimMetaData_SkelControl
// 0x0004 (0x0080 - 0x007C)
class UCombatAnimMetaData_SkelControl : public UAnimMetaData_SkelControl
{
public:
	float                                              AccumulatedWeight;                                		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1924 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimMetaData_SkelControl::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeAdditveBlending
// 0x0004 (0x0118 - 0x0114)
class UCombatAnimNodeAdditveBlending : public UAnimNodeAdditiveBlending
{
public:
	unsigned long                                      PlaySequenceOnRelevant : 1;                       		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1925 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeAdditveBlending::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeCopyBoneTranslation
// 0x0053 (0x0150 - 0x00FD)
class UCombatAnimNodeCopyBoneTranslation : public UAnimNodeBlendBase
{
public:
	class UAnimNodeAimOffset*                          CachedAimNode;                                    		// 0x0100 (0x0008) [0x0000000000000000]              
	struct FName                                       OldAimProfileName;                                		// 0x0108 (0x0008) [0x0000000000000000]              
	TArray< struct FBoneCopyInfo >                     DefaultBoneCopyArray;                             		// 0x0110 (0x0010) [0x0000000000000000]              
	TArray< struct FBoneCopyInfo >                     DualWieldBoneCopyArray;                           		// 0x0120 (0x0010) [0x0000000000000000]              
	TArray< struct FBoneCopyInfo >                     ActiveBoneCopyArray;                              		// 0x0130 (0x0010) [0x0000000000000000]              
	TArray< unsigned char >                            RequiredBones;                                    		// 0x0140 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1926 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeCopyBoneTranslation::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeFramePlayer
// 0x0000 (0x0158 - 0x0158)
class UCombatAnimNodeFramePlayer : public UAnimNodeSequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1927 ];

		return pClassPointer;
	};

	void SetAnimPosition ( );
	void SetAnimation ( );
};

UClass* UCombatAnimNodeFramePlayer::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeJumpLeanOffset
// 0x0040 (0x01A0 - 0x0160)
class UCombatAnimNodeJumpLeanOffset : public UAnimNodeAimOffset
{
public:
	float                                              JumpLeanStrength;                                 		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              MaxLeanChangeSpeed;                               		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              LeanBackRatio;                                    		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMultiplyByZVelocity : 1;                         		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	class UAnimNodeAimOffset*                          CachedAimNode;                                    		// 0x0170 (0x0008) [0x0000000000000000]              
	struct FName                                       OldAimProfileName;                                		// 0x0178 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   PreBlendAim;                                      		// 0x0180 (0x0008) [0x0000000000000000]              
	float                                              LeanWeight;                                       		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              LeanWeightTarget;                                 		// 0x018C (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0190 (0x0004) [0x0000000000000000]              
	int                                                LastYaw;                                          		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              IgnoredLateralVelThreshold;                       		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              StandardSpeed;                                    		// 0x019C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1928 ];

		return pClassPointer;
	};

	void SetLeanWeight ( );
};

UClass* UCombatAnimNodeJumpLeanOffset::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodePreAnim
// 0x0004 (0x0114 - 0x0110)
class UCombatAnimNodePreAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bSkipPlayingPreAnimWhenNotRendered : 1;           		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1929 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodePreAnim::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeScaleRateBySpeed
// 0x0014 (0x011C - 0x0108)
class UCombatAnimNodeScaleRateBySpeed : public UAnimNodeScaleRateBySpeed
{
public:
	float                                              FallingScale;                                     		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              RigidBodyScale;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      UsePawnGroundSpeed : 1;                           		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	class APawn*                                       Owner;                                            		// 0x0114 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1930 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeScaleRateBySpeed::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeq_Offset
// 0x0018 (0x0170 - 0x0158)
class UCombatAnimNodeSeq_Offset : public UAnimNodeSequence
{
public:
	unsigned long                                      bUseOffset : 1;                                   		// 0x0158 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              StartOffset;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	struct FName                                       AlternativeAnimSeqName;                           		// 0x0160 (0x0008) [0x0000000000000000]              
	class ACombatWeapon*                               Weapon;                                           		// 0x0168 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1931 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeq_Offset::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSequence
// 0x0014 (0x016C - 0x0158)
class UCombatAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned long                                      bAutoStart : 1;                                   		// 0x0158 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLoopLastSequence : 1;                            		// 0x0158 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FName >                             SeqStack;                                         		// 0x015C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1932 ];

		return pClassPointer;
	};

	void eventOnInit ( );
	void PlayAnimationSet ( );
	void PlayAnimation ( );
};

UClass* UCombatAnimNodeSequence::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeqHitDirection
// 0x0060 (0x01CC - 0x016C)
class UCombatAnimNodeSeqHitDirection : public UCombatAnimNodeSequence
{
public:
	struct FName                                       DefaultAnim;                                      		// 0x016C (0x0008) [0x0000000000000000]              
	struct FName                                       LeftAnim;                                         		// 0x0174 (0x0008) [0x0000000000000000]              
	struct FName                                       RightAnim;                                        		// 0x017C (0x0008) [0x0000000000000000]              
	struct FName                                       FrontAnim;                                        		// 0x0184 (0x0008) [0x0000000000000000]              
	struct FName                                       BackAnim;                                         		// 0x018C (0x0008) [0x0000000000000000]              
	struct FName                                       FrontLeftAnim;                                    		// 0x0194 (0x0008) [0x0000000000000000]              
	struct FName                                       FrontRightAnim;                                   		// 0x019C (0x0008) [0x0000000000000000]              
	struct FName                                       BackLeftAnim;                                     		// 0x01A4 (0x0008) [0x0000000000000000]              
	struct FName                                       BackRightAnim;                                    		// 0x01AC (0x0008) [0x0000000000000000]              
	unsigned char                                      RandomFactor;                                     		// 0x01B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      DirMode;                                          		// 0x01B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastDirIdx;                                       		// 0x01B6 (0x0001) [0x0000000000000000]              
	float                                              FrontHitThreshold;                                		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              DirAngle;                                         		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              SliderPosition;                                   		// 0x01C0 (0x0004) [0x0000000000000000]              
	class ACombatPawn*                                 OwnerPawn;                                        		// 0x01C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1933 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeqHitDirection::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeqWeap
// 0x0028 (0x0194 - 0x016C)
class UCombatAnimNodeSeqWeap : public UCombatAnimNodeSequence
{
public:
	struct FName                                       DefaultAnim;                                      		// 0x016C (0x0008) [0x0000000000000000]              
	struct FName                                       DualPistolAnim;                                   		// 0x0174 (0x0008) [0x0000000000000000]              
	struct FName                                       SinglePistolAnim;                                 		// 0x017C (0x0008) [0x0000000000000000]              
	struct FName                                       ShoulderRocketAnim;                               		// 0x0184 (0x0008) [0x0000000000000000]              
	struct FName                                       StingerAnim;                                      		// 0x018C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1934 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeqWeap::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSequenceBlendBase
// 0x0008 (0x0170 - 0x0168)
class UCombatAnimNodeSequenceBlendBase : public UAnimNodeSequenceBlendBase
{
public:
	int                                                DominantIdx;                                      		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              DominanceThreshold;                               		// 0x016C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1935 ];

		return pClassPointer;
	};

	void SetAnim ( );
};

UClass* UCombatAnimNodeSequenceBlendBase::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeqDirection
// 0x0034 (0x01A4 - 0x0170)
class UCombatAnimNodeSeqDirection : public UCombatAnimNodeSequenceBlendBase
{
public:
	float                                              BlendSpeed;                                       		// 0x0170 (0x0004) [0x0000000000000000]              
	unsigned long                                      Use8WayBlend : 1;                                 		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInterpolateWeights : 1;                          		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              DirAngle;                                         		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              LastDirAngle;                                     		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              LastRelevantTime;                                 		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              FullBwdThreshold;                                 		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              TooSlowSpeed;                                     		// 0x0188 (0x0004) [0x0000000000000000]              
	TArray< float >                                    TargetPlayRateData;                               		// 0x018C (0x0010) [0x0000000000000000]              
	class AActor*                                      AOwner;                                           		// 0x019C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1936 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeqDirection::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeqDirectionFire
// 0x0000 (0x01A4 - 0x01A4)
class UCombatAnimNodeSeqDirectionFire : public UCombatAnimNodeSeqDirection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1937 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeqDirectionFire::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_AttachStaticMesh
// 0x0070 (0x00D0 - 0x0060)
class UCombatAnimNotify_AttachStaticMesh : public UAnimNotify
{
public:
	struct FName                                       SocketName;                                       		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FName                                       TargetBoneName;                                   		// 0x0068 (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0070 (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 CurrStaticMesh;                                   		// 0x0078 (0x0008) [0x0000000000000000]              
	int                                                TargetBoneIndex;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0084 (0x000C) MISSED OFFSET
	struct FMatrix                                     SocketMatrix;                                     		// 0x0090 (0x0040) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1938 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_AttachStaticMesh::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_CameraEffect
// 0x0034 (0x009C - 0x0068)
class UCombatAnimNotify_CameraEffect : public UAnimNotify_CameraEffect
{
public:
	struct FString                                     PS_CameraEffect;                                  		// 0x0068 (0x0010) [0x0000000000000000]              
	struct FString                                     PS_CameraEffectNonExtremeContent;                 		// 0x0078 (0x0010) [0x0000000000000000]              
	float                                              LifeSpan;                                         		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              DistFromCamera;                                   		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              BaseFOV;                                          		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned char                                      DepthGroup;                                       		// 0x0094 (0x0001) [0x0000000000000000]              
	unsigned long                                      bClearCameraEffectOnStopAnim : 1;                 		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1939 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_CameraEffect::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_ChangeWeapAttachMeshSocket
// 0x0018 (0x0078 - 0x0060)
class UCombatAnimNotify_ChangeWeapAttachMeshSocket : public UAnimNotify
{
public:
	struct FName                                       NewSocketName;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FName                                       DefaultSocketNameForPreview;                      		// 0x0068 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      PreviewSkelComp;                                  		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1940 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_ChangeWeapAttachMeshSocket::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_DetachDroppedWeapon
// 0x0000 (0x0060 - 0x0060)
class UCombatAnimNotify_DetachDroppedWeapon : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1941 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_DetachDroppedWeapon::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_HideBone
// 0x0010 (0x0070 - 0x0060)
class UCombatAnimNotify_HideBone : public UAnimNotify
{
public:
	struct FName                                       TargetBoneName;                                   		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      bHideBone : 1;                                    		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              NotifyDuration;                                   		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1942 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_HideBone::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_HideBoneForAttachedMesh
// 0x0010 (0x0080 - 0x0070)
class UCombatAnimNotify_HideBoneForAttachedMesh : public UCombatAnimNotify_HideBone
{
public:
	struct FName                                       AttachedBoneName;                                 		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FName                                       AttachedSocketName;                               		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1943 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_HideBoneForAttachedMesh::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_LockSlide
// 0x0000 (0x0060 - 0x0060)
class UCombatAnimNotify_LockSlide : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1944 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_LockSlide::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_MaterialParam
// 0x0070 (0x00D0 - 0x0060)
class UCombatAnimNotify_MaterialParam : public UAnimNotify
{
public:
	struct FAnimNotifyScalarParameter                  ScalarConstantParam;                              		// 0x0060 (0x0010) [0x0000000000000000]              
	struct FAnimNotifyVectorParameter                  VectorConstantParam;                              		// 0x0070 (0x0028) [0x0000000000000000]              
	struct FTextureParameterValue                      TextureConstantParam;                             		// 0x0098 (0x0020) [0x0000000000000000]              
	TArray< struct FMICParam >                         SavedMICParam;                                    		// 0x00B8 (0x0010) [0x0000000000000000]              
	float                                              AnimStartTime;                                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              NotifyDuration;                                   		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1945 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_MaterialParam::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_MeleeAttackCheck
// 0x0000 (0x0060 - 0x0060)
class UCombatAnimNotify_MeleeAttackCheck : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1946 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_MeleeAttackCheck::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_MITVParam
// 0x005C (0x00BC - 0x0060)
class UCombatAnimNotify_MITVParam : public UAnimNotify
{
public:
	unsigned long                                      bOverride_AutoActiveAll : 1;                      		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoActivateAll : 1;                             		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bApplyPlayRate : 1;                               		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FAnimNotifyMITVScalarParam >        ScalarParam;                                      		// 0x0064 (0x0010) [0x0000000000000000]              
	TArray< struct FAnimNotifyMITVVectorParam >        VectorParam;                                      		// 0x0074 (0x0010) [0x0000000000000000]              
	TArray< struct FAnimNotifyMITVLinearColorParam >   LinearColorParam;                                 		// 0x0084 (0x0010) [0x0000000000000000]              
	TArray< struct FAnimNotifyMITVTextureParam >       TextureParam;                                     		// 0x0094 (0x0010) [0x0000000000000000]              
	TArray< struct FMITVParam >                        SavedMITVParam;                                   		// 0x00A4 (0x0010) [0x0000000000000000]              
	float                                              AnimStartTime;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              NotifyDuration;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1947 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_MITVParam::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_ReleaseSlide
// 0x0000 (0x0060 - 0x0060)
class UCombatAnimNotify_ReleaseSlide : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1948 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_ReleaseSlide::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_SpawnKActor
// 0x00A0 (0x0100 - 0x0060)
class UCombatAnimNotify_SpawnKActor : public UAnimNotify
{
public:
	struct FName                                       SocketName;                                       		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FName                                       TargetBoneName;                                   		// 0x0068 (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0070 (0x0008) [0x0000000000000000]              
	float                                              LifeSpan;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSkipIfLowFrameRate : 1;                          		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	class UClass*                                      KActorClass;                                      		// 0x0080 (0x0008) [0x0000000000000000]              
	struct FVector                                     KActorLinearVelocity;                             		// 0x0088 (0x000C) [0x0000000000000000]              
	struct FVector                                     KActorAngularVelocity;                            		// 0x0094 (0x000C) [0x0000000000000000]              
	int                                                TargetBoneIndex;                                  		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x00A4 (0x000C) MISSED OFFSET
	struct FMatrix                                     SocketMatrix;                                     		// 0x00B0 (0x0040) [0x0000000000000000]              
	class AKActorSpawnable*                            PreviewKActor;                                    		// 0x00F0 (0x0008) [0x0000000000000000]              
	class UStaticMeshComponent*                        PreviewSMC;                                       		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1949 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_SpawnKActor::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_StopCustomAnim
// 0x0004 (0x0064 - 0x0060)
class UCombatAnimNotify_StopCustomAnim : public UAnimNotify
{
public:
	float                                              BlendOutTime;                                     		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1950 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_StopCustomAnim::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_StopFrame
// 0x0004 (0x0064 - 0x0060)
class UCombatAnimNotify_StopFrame : public UAnimNotify
{
public:
	float                                              PassedTime;                                       		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1951 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_StopFrame::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_SwitchAnim
// 0x0010 (0x0070 - 0x0060)
class UCombatAnimNotify_SwitchAnim : public UAnimNotify
{
public:
	float                                              BlendInTime;                                      		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              BlendOutTime;                                     		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FName                                       NewAnim;                                          		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1952 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_SwitchAnim::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_UpdateHandGripPos
// 0x0000 (0x0060 - 0x0060)
class UCombatAnimNotify_UpdateHandGripPos : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1953 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_UpdateHandGripPos::pClassPointer = NULL;

// Class CombatGame.CombatHandGripController
// 0x0018 (0x0118 - 0x0100)
class UCombatHandGripController : public USkelControlSingleBone
{
public:
	struct FName                                       WeaponBoneName;                                   		// 0x0100 (0x0008) [0x0000000000000000]              
	struct FName                                       WeaponBoneName_Left;                              		// 0x0108 (0x0008) [0x0000000000000000]              
	struct FName                                       GripSocketName;                                   		// 0x0110 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1954 ];

		return pClassPointer;
	};

};

UClass* UCombatHandGripController::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_CantileverBeam
// 0x0040 (0x01AC - 0x016C)
class UCombatSkelCtrl_CantileverBeam : public USkelControlLookAt
{
public:
	struct FVector                                     WorldSpaceGoal;                                   		// 0x016C (0x000C) [0x0000000000000000]              
	struct FVector                                     InitialWorldSpaceGoalOffset;                      		// 0x0178 (0x000C) [0x0000000000000000]              
	struct FVector                                     Velocity;                                         		// 0x0184 (0x000C) [0x0000000000000000]              
	float                                              SpringStiffness;                                  		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              SpringDamping;                                    		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              PercentBeamVelocityTransfer;                      		// 0x0198 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EntireBeamVelocity__Delegate;                   		// 0x019C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x01A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1955 ];

		return pClassPointer;
	};

	void EntireBeamVelocity ( );
};

UClass* UCombatSkelCtrl_CantileverBeam::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_Hinge
// 0x0030 (0x0130 - 0x0100)
class UCombatSkelCtrl_Hinge : public USkelControlSingleBone
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 
	class ACombatPawn*                                 OwnerPawn;                                        		// 0x0104 (0x0008) [0x0000000000000000]              
	struct FName                                       AttachedBoneName;                                 		// 0x010C (0x0008) [0x0000000000000000]              
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x0114 (0x0008) [0x0000000000000000]              
	float                                              MaxAngle;                                         		// 0x011C (0x0004) [0x0000000000000000]              
	unsigned char                                      PivotAxis;                                        		// 0x0120 (0x0001) [0x0000000000000000]              
	float                                              AVModifier;                                       		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              CurrentAngle;                                     		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              SpringStiffness;                                  		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1956 ];

		return pClassPointer;
	};

};

UClass* UCombatSkelCtrl_Hinge::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_Recoil
// 0x0018 (0x0164 - 0x014C)
class UCombatSkelCtrl_Recoil : public UGameSkelCtrl_Recoil
{
public:
	unsigned long                                      TestRecoil : 1;                                   		// 0x014C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                GunIndex;                                         		// 0x0150 (0x0004) [0x0000000000000000]              
	TArray< struct FRecoilProfileData >                RecoilArray;                                      		// 0x0154 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1957 ];

		return pClassPointer;
	};

	void SetGunIndex ( );
};

UClass* UCombatSkelCtrl_Recoil::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_Spring
// 0x0064 (0x0164 - 0x0100)
class UCombatSkelCtrl_Spring : public USkelControlSingleBone
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 
	class ACombatPawn*                                 OwnerPawn;                                        		// 0x0104 (0x0008) [0x0000000000000000]              
	struct FName                                       AttachedBoneName;                                 		// 0x010C (0x0008) [0x0000000000000000]              
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x0114 (0x0008) [0x0000000000000000]              
	struct FRotator                                    MaxAngle;                                         		// 0x011C (0x000C) [0x0000000000000000]              
	struct FRotator                                    MinAngle;                                         		// 0x0128 (0x000C) [0x0000000000000000]              
	float                                              Falloff;                                          		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              SpringStiffness;                                  		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              AVModifier;                                       		// 0x013C (0x0004) [0x0000000000000000]              
	struct FRotator                                    CurrentAngle;                                     		// 0x0140 (0x000C) [0x0000000000000000]              
	float                                              RandomPortion;                                    		// 0x014C (0x0004) [0x0000000000000000]              
	struct FVector                                     LastHitMomentum;                                  		// 0x0150 (0x000C) [0x0000000000000000]              
	float                                              LastHitTime;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              MomentumPortion;                                  		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1958 ];

		return pClassPointer;
	};

};

UClass* UCombatSkelCtrl_Spring::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_WeaponLag
// 0x0024 (0x0124 - 0x0100)
class UCombatSkelCtrl_WeaponLag : public USkelControlSingleBone
{
public:
	int                                                PreviewIdx;                                       		// 0x0100 (0x0004) [0x0000000000000000]              
	TArray< struct FTranslationPack >                  Translations;                                     		// 0x0104 (0x0010) [0x0000000000000000]              
	TArray< struct FRotationPack >                     Rotations;                                        		// 0x0114 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1959 ];

		return pClassPointer;
	};

	void ApplyData ( );
};

UClass* UCombatSkelCtrl_WeaponLag::pClassPointer = NULL;

// Class CombatGame.CombatCameraThirdPersonCameraMode_default
// 0x0004 (0x0268 - 0x0264)
class UCombatCameraThirdPersonCameraMode_default : public UGameThirdPersonCameraMode_Default
{
public:
	unsigned long                                      bResetInterpolationOnActive : 1;                  		// 0x0264 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1960 ];

		return pClassPointer;
	};

	void OnBecomeActive ( );
	void GetDesiredFOV ( );
};

UClass* UCombatCameraThirdPersonCameraMode_default::pClassPointer = NULL;

// Class CombatGame.CombatCameraThirdPersonCameraMode_Dead
// 0x006C (0x02D4 - 0x0268)
class UCombatCameraThirdPersonCameraMode_Dead : public UCombatCameraThirdPersonCameraMode_default
{
public:
	struct FName                                       TargetBoneName;                                   		// 0x0268 (0x0008) [0x0000000000000000]              
	float                                              DistanceFromTarget;                               		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              CamHeightOffset;                                  		// 0x0274 (0x0004) [0x0000000000000000]              
	float                                              MaxCamPitchLimit;                                 		// 0x0278 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFollowKillerPawn : 1;                            		// 0x027C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDrawDebug : 1;                                   		// 0x027C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              FollowKillerPawnDelayTime;                        		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              FollowKillerPawnDuration;                         		// 0x0284 (0x0004) [0x0000000000000000]              
	float                                              KillerPawnHeightOffset;                           		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              DeathCamRotInterpSpeed;                           		// 0x028C (0x0004) [0x0000000000000000]              
	float                                              DeathCamInterpolationTime;                        		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              DeathCamInterpolationExp;                         		// 0x0294 (0x0004) [0x0000000000000000]              
	class UCameraAnim*                                 DeadCamAnim;                                      		// 0x0298 (0x0008) [0x0000000000000000]              
	float                                              DeadCamAnimBlendInTime;                           		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              DeadCamAnimBlendOutTime;                          		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FVector                                     DeathCamStartLocation;                            		// 0x02A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     DeathCamEndLocation;                              		// 0x02B4 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DeathCamRotation;                                 		// 0x02C0 (0x000C) [0x0000000000000000]              
	float                                              ActiveTimeSeconds;                                		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                UnrealMaxCamPitchLimit;                           		// 0x02D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1961 ];

		return pClassPointer;
	};

	void OnBecomeInActive ( );
	void OnBecomeActive ( );
	void eventGetTargetLocation ( );
	void InitCameraLocation ( );
	void eventGetCameraWorstCaseLoc ( );
};

UClass* UCombatCameraThirdPersonCameraMode_Dead::pClassPointer = NULL;

// Class CombatGame.CombatGamePlayerCamera
// 0x0088 (0x06A8 - 0x0620)
class ACombatGamePlayerCamera : public AGamePlayerCamera
{
public:
	unsigned long                                      bDOFUpdated : 1;                                  		// 0x0620 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAdjustDOF : 1;                                   		// 0x0620 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSetRotateCamPosition : 1;                        		// 0x0620 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              DOF_InterpolationDuration;                        		// 0x0624 (0x0004) [0x0000000000000000]              
	float                                              DOF_BlurKernelSize;                               		// 0x0628 (0x0004) [0x0000000000000000]              
	float                                              DOF_FalloffExponent;                              		// 0x062C (0x0004) [0x0000000000000000]              
	float                                              DOF_FocusDistance;                                		// 0x0630 (0x0004) [0x0000000000000000]              
	float                                              DOF_FocusInnerRadius;                             		// 0x0634 (0x0004) [0x0000000000000000]              
	unsigned char                                      DOF_FocusType;                                    		// 0x0638 (0x0001) [0x0000000000000000]              
	float                                              DOF_MaxFarBlurAmount;                             		// 0x063C (0x0004) [0x0000000000000000]              
	float                                              DOF_MaxNearBlurAmount;                            		// 0x0640 (0x0004) [0x0000000000000000]              
	struct FVector                                     DOFTraceExtent;                                   		// 0x0644 (0x000C) [0x0000000000000000]              
	float                                              DOFDistanceInterpSpeed;                           		// 0x0650 (0x0004) [0x0000000000000000]              
	float                                              LastDOFRadius;                                    		// 0x0654 (0x0004) [0x0000000000000000]              
	float                                              LastDOFDistance;                                  		// 0x0658 (0x0004) [0x0000000000000000]              
	float                                              DOF_RadiusFalloff;                                		// 0x065C (0x0004) [0x0000000000000000]              
	struct FVector2D                                   DOF_RadiusRange;                                  		// 0x0660 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   DOF_RadiusDistRange;                              		// 0x0668 (0x0008) [0x0000000000000000]              
	struct FVector                                     RotateCamPostion;                                 		// 0x0670 (0x000C) [0x0000000000000000]              
	struct FRotator                                    RotateCamRotation;                                		// 0x067C (0x000C) [0x0000000000000000]              
	struct FVector                                     RotateCamViewPoint;                               		// 0x0688 (0x000C) [0x0000000000000000]              
	int                                                RotateCamYaw;                                     		// 0x0694 (0x0004) [0x0000000000000000]              
	int                                                RotateCamYawDelta;                                		// 0x0698 (0x0004) [0x0000000000000000]              
	float                                              UnitRotateCamDistance;                            		// 0x069C (0x0004) [0x0000000000000000]              
	float                                              RotateCamDistance;                                		// 0x06A0 (0x0004) [0x0000000000000000]              
	float                                              RotateCamTraceRange;                              		// 0x06A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1962 ];

		return pClassPointer;
	};

	void SetAfterImageTextureSize ( );
	void ShowAfterImage ( );
	void InitializeAfterImage ( );
	void eventUpdateCamera ( );
	void BlendPOV ( );
	void DOFTrace ( );
	void GetDOFFocusLoc ( );
	void UpdatePostProcess ( );
	void UpdateRotateCamViewTarget ( );
	void UpdateViewTarget ( );
	void ChooseDirectionalCameraShakeAnim ( );
	void PlayCameraShakeAnim ( );
	void PlayRadialCameraShakeAnim ( );
	void DisplayDebug ( );
	void FindBestCameraType ( );
	void CameraShake ( );
	void InitializeFor ( );
};

UClass* ACombatGamePlayerCamera::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment
// 0x01E0 (0x0424 - 0x0244)
class ACBWeaponAttachment : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x0244 (0x0008) [0x0000000000000000]              
	TArray< struct FMeshPart >                         MeshParts;                                        		// 0x024C (0x0010) [0x0000000000000000]              
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x025C (0x0008) [0x0000000000000000]              
	float                                              BoundsScaleForHolster;                            		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              DefaultBoundsScale;                               		// 0x0268 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAlwaysShowTheHolster : 1;                        		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      UseGripIK : 1;                                    		// 0x026C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bExistLauncherGripSocket : 1;                     		// 0x026C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCalculateGripOffset : 1;                         		// 0x026C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInitWeaponMesh : 1;                              		// 0x026C (0x0004) [0x0000000000000000] [0x00000010] 
	struct FName                                       ExtraEffectSocket;                                		// 0x0270 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    MuzzleFlashPSC;                                   		// 0x0278 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             MuzzleFlashPSCTemplate;                           		// 0x0280 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             MuzzleFlashPSCSilencerTemplate;                   		// 0x0288 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    ExtraPSC;                                         		// 0x0290 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             ExtraPSCTemplate;                                 		// 0x0298 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             TracerPSCTemplate;                                		// 0x02A0 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             TracerPSCTemplate3rd;                             		// 0x02A8 (0x0008) [0x0000000000000000]              
	class UClass*                                      MuzzleFlashLightClass;                            		// 0x02B0 (0x0008) [0x0000000000000000]              
	class UClass*                                      MuzzleLowDetailFlashLightClass;                   		// 0x02B8 (0x0008) [0x0000000000000000]              
	class UCombatExplosionLight*                       MuzzleFlashLight;                                 		// 0x02C0 (0x0008) [0x0000000000000000]              
	float                                              MuzzleFlashDuration;                              		// 0x02C8 (0x0004) [0x0000000000000000]              
	struct FName                                       AttachmentSocket;                                 		// 0x02CC (0x0008) [0x0000000000000000]              
	struct FName                                       AttachmentSocket_Inven;                           		// 0x02D4 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   BulletWhip;                                       		// 0x02DC (0x0008) [0x0000000000000000]              
	float                                              BulletWhipRadius;                                 		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              BulletWhipAdditionalHeight;                       		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              MaxImpactEffectDistance;                          		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              MaxFireEffectDistance;                            		// 0x02F0 (0x0004) [0x0000000000000000]              
	float                                              MaxDecalRangeSq;                                  		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                SpawnTracerPerNum;                                		// 0x02F8 (0x0004) [0x0000000000000000]              
	int                                                SpawnTracerPerNumForFP;                           		// 0x02FC (0x0004) [0x0000000000000000]              
	struct FName                                       WeapAimProfileName[ 0x2 ];                        		// 0x0300 (0x0010) [0x0000000000000000]              
	class UAnimNodeSlot*                               CustomAnim;                                       		// 0x0310 (0x0008) [0x0000000000000000]              
	struct FString                                     WeaponMasterAnimSet[ 0x2 ];                       		// 0x0318 (0x0020) [0x0000000000000000]              
	struct FString                                     WeaponSubAnimSet[ 0x2 ];                          		// 0x0338 (0x0020) [0x0000000000000000]              
	struct FString                                     AttachmentAnimSet[ 0x2 ];                         		// 0x0358 (0x0020) [0x0000000000000000]              
	struct FName                                       HandGripSocket[ 0x2 ];                            		// 0x0378 (0x0010) [0x0000000000000000]              
	struct FName                                       LauncherGripSocket[ 0x2 ];                        		// 0x0388 (0x0010) [0x0000000000000000]              
	struct FString                                     InvenAnimSeq;                                     		// 0x0398 (0x0010) [0x0000000000000000]              
	float                                              InvenAnimChances[ 0x3 ];                          		// 0x03A8 (0x000C) [0x0000000000000000]              
	unsigned char                                      FireAnimType;                                     		// 0x03B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      HoldersGender;                                    		// 0x03B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      bPendingToLoadAsyncAnimSet;                       		// 0x03B6 (0x0001) [0x0000000000000000]              
	TArray< struct FAnimNotifyObjectData >             AnimNotifyData;                                   		// 0x03B8 (0x0010) [0x0000000000000000]              
	float                                              CharacterAnimSetBlendTime;                        		// 0x03C8 (0x0004) [0x0000000000000000]              
	float                                              LastAnimSetBlendTime;                             		// 0x03CC (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    PSC_ShellEject;                                   		// 0x03D0 (0x0008) [0x0000000000000000]              
	int                                                RecoilIndex;                                      		// 0x03D8 (0x0004) [0x0000000000000000]              
	TArray< struct FHideBoneDataByWeaponState >        HideBoneDataByWeapState;                          		// 0x03DC (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             CachedHideBoneData;                               		// 0x03EC (0x0010) [0x0000000000000000]              
	struct FName                                       HolsterSocketName;                                		// 0x03FC (0x0008) [0x0000000000000000]              
	struct FName                                       HolsterBoneName;                                  		// 0x0404 (0x0008) [0x0000000000000000]              
	class ACombatWeapon*                               OwnerWeapon;                                      		// 0x040C (0x0008) [0x0000000000000000]              
	class USkelControlSingleBone*                      IronSightTMNodeRear;                              		// 0x0414 (0x0008) [0x0000000000000000]              
	class USkelControlSingleBone*                      IronSightTMNodeFront;                             		// 0x041C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1963 ];

		return pClassPointer;
	};

	void MakeIronSightBone ( );
	void SetDecal ( );
	void GetCachedResources ( );
	void eventOnLoadAsyncAnimSetFinished ( );
	void ActiveExtraEffect ( );
	void PlayMuzzleFlashPSC ( );
	void AttachExtraEffect ( );
	void AttachMuzzleFlash ( );
	void GetMuzzleFlashParticleSystem ( );
	void SetHideBone ( );
	void SetSilencer ( );
	void ForceNetRelevant ( );
	void eventDestroyed ( );
	void PlayShellCaseEject ( );
	void HidePSC_ShellEject ( );
	void ChangeVisibility ( );
	void eventInitHideBones ( );
	void eventStopThirdPersonFireEffects ( );
	void PlayRecoilNode ( );
	void eventThirdPersonFireEffects ( );
	void CauseMuzzleFlash ( );
	void AttachMuzzleFlashLight ( );
	void MuzzleFlashTimer ( );
	void AttachToHolster ( );
	void DetachWeapon ( );
	void AttachTo ( );
	void GetGripOffset ( );
	void eventGetTargetMesh ( );
	void TryToAttachWeapon ( );
	void eventUpdateGender ( );
	void IsValidWeaponAnimSet ( );
	void IsValidWeaponMesh ( );
	void eventReAttachToGivenHand ( );
	void eventPreBeginPlay ( );
	void eventPostInitAnimTree ( );
	void VerifyWeapAttachAnimSeqName ( );
	void LoadAsyncAnimset ( );
	void PlayWeaponAttachmentAnim ( );
	void SetWeaponMesh ( );
	void UpdateAlwaysHideBone ( );
	void HideBoneByWeaponState ( );
};

UClass* ACBWeaponAttachment::pClassPointer = NULL;

// Class CombatGame.CombatExplosion
// 0x0078 (0x01C0 - 0x0148)
class UCombatExplosion : public UGameExplosion
{
public:
	float                                              MinDamage;                                        		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              FullDamageRadius;                                 		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              AmbientExploDamageRadius;                         		// 0x0150 (0x0004) [0x0000000000000000]              
	struct FDecalData                                  DecalData;                                        		// 0x0154 (0x0030) [0x0000000000000000]              
	float                                              DecalTraceDistance;                               		// 0x0184 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          RadialuBlurMaterial;                              		// 0x0188 (0x0008) [0x0000000000000000]              
	float                                              RadialBlurFallOffExponent;                        		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              RadialBlurScale;                                  		// 0x0194 (0x0004) [0x0000000000000000]              
	unsigned long                                      ForceHitNormalCheckForDecal : 1;                  		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreBlock : 1;                                 		// 0x0198 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIgnoreBlockForCamShake : 1;                      		// 0x0198 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIgnoreCamShake : 1;                              		// 0x0198 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsPlantExplosion : 1;                             		// 0x0198 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< struct FExplosionDamageAdjustment >        DamageAdjustmentList;                             		// 0x019C (0x0010) [0x0000000000000000]              
	float                                              DamageRatioForInstigator;                         		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              CheckOffSet;                                      		// 0x01B0 (0x0004) [0x0000000000000000]              
	struct FRotator                                    AddParticleSpawnRotation;                         		// 0x01B4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1964 ];

		return pClassPointer;
	};

};

UClass* UCombatExplosion::pClassPointer = NULL;

// Class CombatGame.CombatExplosionActor
// 0x0020 (0x02DC - 0x02BC)
class ACombatExplosionActor : public AGameExplosionActor
{
public:
	class UTimeDilationAnimInst*                       ActiveTimeDilationAnim;                           		// 0x02BC (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    ExplosionParticleComponent;                       		// 0x02C4 (0x0008) [0x0000000000000000]              
	struct FRotator                                    ExplosionParticleSystemRotation;                  		// 0x02CC (0x000C) [0x0000000000000000]              
	unsigned long                                      ShowDebugLines : 1;                               		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1965 ];

		return pClassPointer;
	};

	void SpecialPawnEffectsForPawn ( );
	void DoExplosionCameraEffects ( );
	void Explode ( );
	void SpawnExplosionDecal ( );
	void CreateDecal ( );
	void SetParticleSystemRotation ( );
	void DoExplosionDamage ( );
	void IsDamagableActor ( );
	void GetEffectCheckRadius ( );
	void IsBehindExplosion ( );
	void GetDamageRatio ( );
	void GetPhysicalMaterial ( );
	void SpawnExplosionParticleSystem ( );
	void UpdateExplosionTemplateWithPerMaterialFX ( );
	void Destroyed ( );
	void OnParticleSystemFinished ( );
	void DeferredDestroy ( );
	void ClientReset ( );
	void Rest ( );
	void PlayTimeDilationAnim ( );
};

UClass* ACombatExplosionActor::pClassPointer = NULL;

// Class CombatGame.CombatFlashExplosionActor
// 0x0024 (0x0300 - 0x02DC)
class ACombatFlashExplosionActor : public ACombatExplosionActor
{
public:
	TArray< struct FFlashEffectDataStruct >            FlashEffectDataList;                              		// 0x02DC (0x0010) [0x0000000000000000]              
	float                                              DefaultFlashEffectPlayTime;                       		// 0x02EC (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __RangeSort__Delegate;                            		// 0x02F0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1966 ];

		return pClassPointer;
	};

	void GetCurrentInabilityRate ( );
	void IsUnderFlashEffect ( );
	void GetFlashEffectType ( );
	void GetFlashEffectData ( );
	void IsAffectableToPawn ( );
	void SpecialPawnEffectsForPawn ( );
	void DoExplosionDamage ( );
	void GetEffectCheckRadius ( );
	void PostBeginPlay ( );
	void RangeSort ( );
};

UClass* ACombatFlashExplosionActor::pClassPointer = NULL;

// Class CombatGame.CombatProjectile
// 0x00F0 (0x0390 - 0x02A0)
class ACombatProjectile : public AProjectile
{
public:
	unsigned long                                      bSuppressAudio : 1;                               		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoStartInFlightAudio : 1;                      		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIgnoreInstigatorCollision : 1;                   		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAddBaseVelocity : 1;                             		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bThrowSound : 1;                                  		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bRegisterIndicator : 1;                           		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bInitRotation : 1;                                		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDeactivateTrailWhenStopped : 1;                  		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bUseZeroExtentCollision : 1;                      		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bStopSimulation : 1;                              		// 0x02A0 (0x0004) [0x0000000000150019] [0x00000200] ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_GlobalConfig )
	unsigned long                                      BounceOnAPawn : 1;                                		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bWaitForEffects : 1;                              		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIgnoreEventChangedInstigator : 1;                		// 0x02A0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bIgnoreCamShake : 1;                              		// 0x02A0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bIgnoreBlockForCamShake : 1;                      		// 0x02A0 (0x0004) [0x0000000000000000] [0x00004000] 
	class UAudioComponent*                             InFlightSound;                                    		// 0x02A4 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   InFlightSoundTemplate;                            		// 0x02AC (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             TrailTemplate;                                    		// 0x02B4 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    TrailPSC;                                         		// 0x02BC (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           ProjLightEnvironment;                             		// 0x02C4 (0x0008) [0x0000000000000000]              
	float                                              ExploCameraEffectRadius;                          		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              TossZ;                                            		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              TossUpDegree;                                     		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              GravityScale;                                     		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              IndicatorPriority;                                		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              GrenadeIndicatorsUpdateCycle;                     		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              GrenadeIndicatorsLastUpdateTime;                  		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              RegisterIndicatorDelayTime;                       		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              SimFixedFPS;                                      		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              SimFixedTimeStep;                                 		// 0x02F0 (0x0004) [0x0000000000000000]              
	float                                              SimInternalAdvanceTime;                           		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                WeaponIndex;                                      		// 0x02F8 (0x0004) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	struct FVector                                     InitialLocation;                                  		// 0x02FC (0x000C) [0x0000000000170019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	struct FRotator                                    InitialRotation;                                  		// 0x0308 (0x000C) [0x0000000000180019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Component )
	struct FVector                                     InitialVelocity;                                  		// 0x0314 (0x000C) [0x0000000000190019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_Component )
	unsigned char                                      NotifyMovement;                                   		// 0x0320 (0x0001) [0x00000000001A0019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_EditConst | CPF_Component )
	unsigned char                                      ExplosionEffectType;                              		// 0x0321 (0x0001) [0x0000000000000000]              
	struct FVector                                     LastHitNormal;                                    		// 0x0324 (0x000C) [0x0000000000000000]              
	class UPrimitiveComponent*                         Mesh;                                             		// 0x0330 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                 		// 0x0338 (0x0008) [0x0000000000000000]              
	class UStaticMeshComponent*                        StaticMeshComp;                                   		// 0x0340 (0x0008) [0x0000000000000000]              
	struct FMeshPart                                   ProjSkeletalMeshParts;                            		// 0x0348 (0x001C) [0x0000000000000000]              
	struct FStaticMeshPart                             ProjStaticMeshParts;                              		// 0x0364 (0x000C) [0x0000000000000000]              
	class UPhysicsAsset*                               ProjSkeletalPhysicsAsset;                         		// 0x0370 (0x0008) [0x0000000000000000]              
	TArray< struct FExplosionDamageAdjustment >        DamageAdjustmentList;                             		// 0x0378 (0x0010) [0x0000000000000000]              
	float                                              DamageRatioForInstigator;                         		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              AIModeDamageRate;                                 		// 0x038C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1967 ];

		return pClassPointer;
	};

	void eventFellOutOfWorld ( );
	void CalcHitNormal ( );
	void HandleCollision ( );
	void HitWall ( );
	void Landed ( );
	void eventTriggerExplosion ( );
	void TeammateTouch ( );
	void ProcessTouch ( );
	void Touch ( );
	void RegisterIndicator ( );
	void StopTrailEmitter ( );
	void ShoutGrenadeWarning ( );
	void eventStopSimulating ( );
	void IsStopSimulation ( );
	void PostVelocityWork ( );
	void Init ( );
	void Destroyed ( );
	void SuppressAudio ( );
	void StartInFlightAudio ( );
	void StopInFlightAudio ( );
	void SpawnTrail ( );
	void PostBeginPlay ( );
	void SetWeaponIndex ( );
	void InitEffect ( );
	void InitMovement ( );
	void ClientReset ( );
	void Reset ( );
	void eventReplicatedEvent ( );
	void eventChangedInstigator ( );
	void InitMesh ( );
	void GetGravityZ ( );
	void GetExplosionEffectType ( );
};

UClass* ACombatProjectile::pClassPointer = NULL;

// Class CombatGame.CombatProj_ExplosiveBase
// 0x0054 (0x03E4 - 0x0390)
class ACombatProj_ExplosiveBase : public ACombatProjectile
{
public:
	unsigned long                                      bAutoDestroyOnExplosion : 1;                      		// 0x0390 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasExploded : 1;                                 		// 0x0390 (0x0004) [0x00000000001B0000] [0x00000002] ( CPF_Travel | CPF_EditConst | CPF_Component )
	unsigned long                                      bAttachExplosionToHitMover : 1;                   		// 0x0390 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsCollideTeammatePawn : 1;                        		// 0x0390 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IgniteWhenToss : 1;                               		// 0x0390 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              MinDamage;                                        		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              FullDamageRadius;                                 		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              DamageFalloffExp;                                 		// 0x039C (0x0004) [0x0000000000000000]              
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x03A0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   GrenadeBounceSound;                               		// 0x03A8 (0x0008) [0x0000000000000000]              
	unsigned char                                      TeamNum;                                          		// 0x03B0 (0x0001) [0x00000000001C0000]              ( CPF_GlobalConfig | CPF_Component )
	unsigned char                                      ObjectGrade;                                      		// 0x03B1 (0x0001) [0x0000000000000000]              
	float                                              TimeBeforeBeep;                                   		// 0x03B4 (0x0004) [0x0000000000000000]              
	float                                              TimeAfterBeep;                                    		// 0x03B8 (0x0004) [0x0000000000000000]              
	int                                                MaxBounceCountToArm;                              		// 0x03BC (0x0004) [0x0000000000000000]              
	int                                                BounceCount;                                      		// 0x03C0 (0x0004) [0x0000000000000000]              
	float                                              VelocityDampingFactor;                            		// 0x03C4 (0x0004) [0x0000000000000000]              
	float                                              StopSimulatingVelocitySqrThreshhold;              		// 0x03C8 (0x0004) [0x0000000000000000]              
	float                                              Bounciness;                                       		// 0x03CC (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         BouncedComp;                                      		// 0x03D0 (0x0008) [0x0000000000000000]              
	int                                                BP;                                               		// 0x03D8 (0x0004) [0x0000000000000000]              
	class UClass*                                      ExplosionActorClass;                              		// 0x03DC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1968 ];

		return pClassPointer;
	};

	void GetBP ( );
	void GetGrade ( );
	void StopBounce ( );
	void IgniteGrenade ( );
	void DeferredDestroy ( );
	void SetDisplay ( );
	void eventFellOutOfWorld ( );
	void Explode ( );
	void GetExplosionDirection ( );
	void PrepareExplosionActor ( );
	void ForceExploded ( );
	void eventTriggerExplosion ( );
	void PrepareExplosionTemplate ( );
	void SetRadialDamageValues ( );
	void WarnProjExplode ( );
	void NotifyProjLanded ( );
	void Bounce ( );
	void NotifyMaxBouncedCount ( );
	void DoExplosion ( );
	void HandleCollision ( );
	void eventSetHasExploded ( );
	void eventGetTeamNum ( );
	void PostBeginPlay ( );
};

UClass* ACombatProj_ExplosiveBase::pClassPointer = NULL;

// Class CombatGame.CombatProj_Grenade
// 0x0010 (0x03F4 - 0x03E4)
class ACombatProj_Grenade : public ACombatProj_ExplosiveBase
{
public:
	unsigned long                                      IsStickyBomb : 1;                                 		// 0x03E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShoutWarning : 1;                                		// 0x03E4 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              WarningDistance;                                  		// 0x03E8 (0x0004) [0x0000000000000000]              
	float                                              ForWardAdditionalTossRate;                        		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              BackWardAdditionalTossRate;                       		// 0x03F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1969 ];

		return pClassPointer;
	};

	void PostVelocityWork ( );
	void CanSplash ( );
	void TakeDamage ( );
	void TriggerExplosion ( );
	void ShoutGrenadeWarning ( );
	void StopBounce ( );
};

UClass* ACombatProj_Grenade::pClassPointer = NULL;

// Class CombatGame.CombatProj_AttachGL
// 0x0000 (0x03F4 - 0x03F4)
class ACombatProj_AttachGL : public ACombatProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1970 ];

		return pClassPointer;
	};

	void NotifyMaxBouncedCount ( );
};

UClass* ACombatProj_AttachGL::pClassPointer = NULL;

// Class CombatGame.CombatProj_Plant
// 0x0078 (0x045C - 0x03E4)
class ACombatProj_Plant : public ACombatProj_ExplosiveBase
{
public:
	int                                                Health;                                           		// 0x03E4 (0x0004) [0x0000000000000000]              
	unsigned char                                      TeamNumIndex;                                     		// 0x03E8 (0x0001) [0x00000000001D000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig | CPF_Component )
	struct FName                                       StateName;                                        		// 0x03EC (0x0008) [0x00000000001E0000]              ( CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	int                                                PlayerID;                                         		// 0x03F4 (0x0004) [0x0000000000000000]              
	float                                              ExplosionDelayTime;                               		// 0x03F8 (0x0004) [0x0000000000000000]              
	float                                              DirectionalExplosionAngle;                        		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              AmbientExploDamageRadius;                         		// 0x0400 (0x0004) [0x0000000000000000]              
	struct FRotator                                    DropRotation;                                     		// 0x0404 (0x000C) [0x0000000000000000]              
	float                                              VolumeRadius;                                     		// 0x0410 (0x0004) [0x0000000000000000]              
	float                                              VolumeOffSetX;                                    		// 0x0414 (0x0004) [0x0000000000000000]              
	float                                              VolumeTouchHegiht;                                		// 0x0418 (0x0004) [0x0000000000000000]              
	float                                              LastPawnCheckTime;                                		// 0x041C (0x0004) [0x0000000000000000]              
	unsigned long                                      bExplosionAngleDrawDebug : 1;                     		// 0x0420 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStartExplosionTimer : 1;                         		// 0x0420 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bChangedLocation : 1;                             		// 0x0420 (0x0004) [0x0000000000000000] [0x00000004] 
	class ULensFlareComponent*                         AllyLensFEffect;                                  		// 0x0424 (0x0008) [0x0000000000000000]              
	class ULensFlareComponent*                         EnemyLensFEffect;                                 		// 0x042C (0x0008) [0x0000000000000000]              
	struct FName                                       EffectSocketName;                                 		// 0x0434 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DetectSound;                                      		// 0x043C (0x0008) [0x0000000000000000]              
	class UCylinderComponent*                          TouchCylinder;                                    		// 0x0444 (0x0008) [0x0000000000000000]              
	TArray< class ACombatPawn* >                       CheckPawnList;                                    		// 0x044C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1971 ];

		return pClassPointer;
	};

	void eventTriggerExplosion ( );
	void ForceExploded ( );
	void eventTakeDamage ( );
	void SetRadialDamageValues ( );
	void eventStartVolumeCheck ( );
	void TornOff ( );
	void eventStartExplosionTimer ( );
	void StartExplosion ( );
	void eventBaseChange ( );
	void Destroyed ( );
	void Init ( );
	void SetLensFEffect ( );
	void NotifyLocalPlayerTeamReceived ( );
	void eventReplicatedEvent ( );
	void LineCheckPawn ( );
	void SetTouchVolume ( );
};

UClass* ACombatProj_Plant::pClassPointer = NULL;

// Class CombatGame.CombatWeapon
// 0x1B0C (0x1EB0 - 0x03A4)
class ACombatWeapon : public AWeapon
{
public:
	struct FPointer                                    VfTable_IInterface_CombatWeaponType;              		// 0x03A4 (0x0008) [0x0000000000000000]              
	class UAnimNodeBlendPerBone*                       SlideNode;                                        		// 0x03AC (0x0008) [0x0000000000000000]              
	unsigned long                                      bPlayAmmoChat : 1;                                		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPlayFireSound : 1;                               		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPlayingFiringSound : 1;                          		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAutofire : 1;                                    		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNotAutofireReFireCheck : 1;                      		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bAutoSwitchEmptyWeapon : 1;                       		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAutoDestroyEmptyWeapon : 1;                      		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCanEquipEmptyWeapon : 1;                         		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIgnorePutdownEmptyWeapon : 1;                    		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRestoreZoomStatebyFire : 1;                      		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      EnableSoonZoom : 1;                               		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCrosshairinZOOM : 1;                             		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bUseActualSpreadUI : 1;                           		// 0x03B4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bIgnoreFiringStateOnRadar : 1;                    		// 0x03B4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bAutoReload : 1;                                  		// 0x03B4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCancelReloadingByFire : 1;                       		// 0x03B4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bClearPendingFire : 1;                            		// 0x03B4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bShowReloadingUI : 1;                             		// 0x03B4 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      UseHitpriority : 1;                               		// 0x03B4 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bMagType : 1;                                     		// 0x03B4 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bSilencerSupport : 1;                             		// 0x03B4 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bRealTimeRecoilRecover : 1;                       		// 0x03B4 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bRoundTrip : 1;                                   		// 0x03B4 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bAddBlendOutTimeAtAnimDuration : 1;               		// 0x03B4 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bClearFireDelayOnEndFire : 1;                     		// 0x03B4 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bGetFromPickupFactory : 1;                        		// 0x03B4 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bUseCameraShake : 1;                              		// 0x03B4 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      IsVerticalRecoilMax : 1;                          		// 0x03B4 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      IsSilencerAttached : 1;                           		// 0x03B4 (0x0004) [0x000000000018000A] [0x10000000] ( CPF_Const | CPF_ExportObject | CPF_Component )
	unsigned long                                      bTrySilencerAttach : 1;                           		// 0x03B4 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bRemoveVerticalRecoil : 1;                        		// 0x03B4 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bRemoveHorizonRecoil : 1;                         		// 0x03B4 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bNoSpread : 1;                                    		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMaxSpread : 1;                                   		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLastRightRecoil : 1;                             		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSuppressSounds : 1;                              		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnableFirstPersonMuzzleFlash : 1;                		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bTargetFrictionEnabled : 1;                       		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bInfiniteSpareAmmo : 1;                           		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bInfiniteExtraAmmo : 1;                           		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bInfiniteWeaponReload : 1;                        		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      AllowShellEjectPerBullet : 1;                     		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bZoomDisabled : 1;                                		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPreloadTextures : 1;                             		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bInitWeaponMesh : 1;                              		// 0x03B8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bIsLocalWeapon : 1;                               		// 0x03B8 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bIsAIWeapon : 1;                                  		// 0x03B8 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bReceiveOwnerEvents : 1;                          		// 0x03B8 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      AcceptPendingFire : 1;                            		// 0x03B8 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bUseTickIsDisabled : 1;                           		// 0x03B8 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bAsyncLoadedActor : 1;                            		// 0x03B8 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bEnableHackCheck : 1;                             		// 0x03B8 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIsFullReloading : 1;                             		// 0x03B8 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bNeedNotifyWeaponAmmoChanged : 1;                 		// 0x03B8 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      WeaponMeshFilpped : 1;                            		// 0x03B8 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      CannotBeFilpped : 1;                              		// 0x03B8 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      EnableBoneTransform : 1;                          		// 0x03B8 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      IsIronSight : 1;                                  		// 0x03B8 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bSpawnGunTrail : 1;                               		// 0x03B8 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bRepFlipMesh : 1;                                 		// 0x03B8 (0x0004) [0x0000000000190000] [0x08000000] ( CPF_Travel | CPF_Component )
	unsigned long                                      bHoldmode : 1;                                    		// 0x03B8 (0x0004) [0x0000000000000000] [0x10000000] 
	int                                                MinDamage;                                        		// 0x03BC (0x0004) [0x0000000000000000]              
	int                                                MaxDamage;                                        		// 0x03C0 (0x0004) [0x0000000000000000]              
	float                                              MinDamageRate;                                    		// 0x03C4 (0x0004) [0x0000000000000000]              
	int                                                SilencerDamagePenalty;                            		// 0x03C8 (0x0004) [0x0000000000000000]              
	TArray< struct FsDamageAdjustment >                DamageAdjustment;                                 		// 0x03CC (0x0010) [0x0000000000000000]              
	TArray< struct FsDamageAdjustment >                DamageAdjustmentVSPowerBullet;                    		// 0x03DC (0x0010) [0x0000000000000000]              
	float                                              MaxDamageRange;                                   		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              MinDamageRange;                                   		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              PenetrationDamageRate;                            		// 0x03F4 (0x0004) [0x0000000000000000]              
	float                                              DamagedDecelerationRatio;                         		// 0x03F8 (0x0004) [0x0000000000000000]              
	float                                              ZoomCancelDelaybyFire;                            		// 0x03FC (0x0004) [0x0000000000000000]              
	unsigned char                                      LastZoomStateByFire;                              		// 0x0400 (0x0001) [0x0000000000000000]              
	unsigned char                                      MainCrosshair;                                    		// 0x0401 (0x0001) [0x0000000000000000]              
	unsigned char                                      UnderBarrelCrosshair;                             		// 0x0402 (0x0001) [0x0000000000000000]              
	unsigned char                                      SubAmmoCount;                                     		// 0x0403 (0x0001) [0x0000000000000000]              
	unsigned char                                      ServerSubAmmoCount;                               		// 0x0404 (0x0001) [0x00000000001A0000]              ( CPF_EditConst | CPF_Component )
	unsigned char                                      ServerSubMagazineAmmo;                            		// 0x0405 (0x0001) [0x00000000001B0000]              ( CPF_Travel | CPF_EditConst | CPF_Component )
	unsigned char                                      MaxSubAmmoCount;                                  		// 0x0406 (0x0001) [0x0000000000000000]              
	unsigned char                                      SubMagazineAmmo;                                  		// 0x0407 (0x0001) [0x0000000000000000]              
	unsigned char                                      SubMaxMagazineAmmo;                               		// 0x0408 (0x0001) [0x0000000000000000]              
	unsigned char                                      SubAmmoPerReload;                                 		// 0x0409 (0x0001) [0x0000000000000000]              
	unsigned char                                      ChangingRISSlot;                                  		// 0x040A (0x0001) [0x0000000000000000]              
	unsigned char                                      ObjectGrade;                                      		// 0x040B (0x0001) [0x0000000000000000]              
	unsigned char                                      LeftrightStart;                                   		// 0x040C (0x0001) [0x0000000000000000]              
	unsigned char                                      ObjectPenetrationNum;                             		// 0x040D (0x0001) [0x0000000000000000]              
	unsigned char                                      PersonPenetrationNum;                             		// 0x040E (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrObjectPenetrationNum;                         		// 0x040F (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrPersonPenetrationNum;                         		// 0x0410 (0x0001) [0x0000000000000000]              
	unsigned char                                      bLastRecoilDir;                                   		// 0x0411 (0x0001) [0x0000000000000000]              
	unsigned char                                      InventoryGroup;                                   		// 0x0412 (0x0001) [0x0000000000000000]              
	unsigned char                                      SlotIndex;                                        		// 0x0413 (0x0001) [0x0000000000000000]              
	unsigned char                                      WeaponType;                                       		// 0x0414 (0x0001) [0x0000000000000000]              
	unsigned char                                      MeshSlideIndex;                                   		// 0x0415 (0x0001) [0x0000000000000000]              
	unsigned char                                      MeshSlideBlendType;                               		// 0x0416 (0x0001) [0x0000000000000000]              
	unsigned char                                      RotLagBlendType;                                  		// 0x0417 (0x0001) [0x0000000000000000]              
	unsigned char                                      ZoomState;                                        		// 0x0418 (0x0001) [0x00000000001C000A]              ( CPF_Const | CPF_ExportObject | CPF_GlobalConfig | CPF_Component )
	unsigned char                                      PreviousZoomState;                                		// 0x0419 (0x0001) [0x0000000000000000]              
	unsigned char                                      WeaponState;                                      		// 0x041A (0x0001) [0x00000000001D000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig | CPF_Component )
	unsigned char                                      PreWeaponState;                                   		// 0x041B (0x0001) [0x0000000000000000]              
	unsigned char                                      ActiveRISSlot;                                    		// 0x041C (0x0001) [0x00000000001E000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	unsigned char                                      PreviousActiveRISSlot;                            		// 0x041D (0x0001) [0x0000000000000000]              
	unsigned char                                      DeactivatedRISSlot;                               		// 0x041E (0x0001) [0x00000000001F0025]              ( CPF_Edit | CPF_Input | CPF_Net | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	unsigned char                                      GimmickType;                                      		// 0x041F (0x0001) [0x0000000000000000]              
	unsigned char                                      BloodTexStatus;                                   		// 0x0420 (0x0001) [0x0000000000000000]              
	unsigned char                                      AltFireBlock[ 0x5 ];                              		// 0x0421 (0x0005) [0x0000000000000000]              
	unsigned char                                      HUDDroppedPickupIconType;                         		// 0x0426 (0x0001) [0x0000000000000000]              
	float                                              BulletDropDelay;                                  		// 0x0428 (0x0004) [0x0000000000000000]              
	float                                              Durability;                                       		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              ControlAccuracy;                                  		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              SpreadRateForUI;                                  		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              SpreadMaxForUI;                                   		// 0x0438 (0x0004) [0x0000000000000000]              
	int                                                MaxActualSpreadForCrosshairLength;                		// 0x043C (0x0004) [0x0000000000000000]              
	int                                                MaxRecoilForCrosshairLegnth;                      		// 0x0440 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0444 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.AmmoCount
	int                                                ShardNumber;                                      		// 0x0448 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x044C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.ServerAmmoCount
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x044E (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.ServerMagazineAmmo
	unsigned char                                      UnknownData03[ 0x2 ];                             		// 0x0450 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.MaxAmmoCount
	unsigned char                                      UnknownData04[ 0x2 ];                             		// 0x0452 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.WeaponAmmoStart
	unsigned char                                      UnknownData05[ 0x2 ];                             		// 0x0454 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.MagazineAmmo
	unsigned char                                      UnknownData06[ 0x2 ];                             		// 0x0456 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.MaxMagazineAmmo
	unsigned char                                      UnknownData07[ 0x2 ];                             		// 0x0458 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.AmmoPerReload
	TArray< unsigned char >                            ClientShotCountOnFiring;                          		// 0x045C (0x0010) [0x0000000000000000]              
	TArray< unsigned char >                            ServerShotCountOnFiring;                          		// 0x046C (0x0010) [0x0000000000000000]              
	float                                              LastFiringTime;                                   		// 0x047C (0x0004) [0x0000000000000000]              
	float                                              ReloadTime;                                       		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              ReloadingActionTime;                              		// 0x0484 (0x0004) [0x0000000000000000]              
	float                                              PreReloadingActionTime;                           		// 0x0488 (0x0004) [0x0000000000000000]              
	float                                              PreReloadTime;                                    		// 0x048C (0x0004) [0x0000000000000000]              
	float                                              PostReloadTime;                                   		// 0x0490 (0x0004) [0x0000000000000000]              
	float                                              RevertMagazineAmmoTime;                           		// 0x0494 (0x0004) [0x0000000000000000]              
	float                                              ActivePartTimeList[ 0x5 ];                        		// 0x0498 (0x0014) [0x0000000000000000]              
	float                                              DeactivePartTimeList[ 0x5 ];                      		// 0x04AC (0x0014) [0x0000000000000000]              
	float                                              CurrentFireDelayTime;                             		// 0x04C0 (0x0004) [0x0000000000000000]              
	int                                                ScreenShakePitchAdhustment;                       		// 0x04C4 (0x0004) [0x0000000000000000]              
	int                                                ScreenShakeYawAdhustment;                         		// 0x04C8 (0x0004) [0x0000000000000000]              
	float                                              RecoilTime;                                       		// 0x04CC (0x0004) [0x0000000000000000]              
	float                                              RecoilAutoCorrectDelay;                           		// 0x04D0 (0x0004) [0x0000000000000000]              
	struct FName                                       SilencerBoneName;                                 		// 0x04D4 (0x0008) [0x0000000000000000]              
	struct FName                                       LaserBoneName;                                    		// 0x04DC (0x0008) [0x0000000000000000]              
	struct FName                                       LaserSiteBoneName;                                		// 0x04E4 (0x0008) [0x0000000000000000]              
	struct FName                                       ScopeBoneName;                                    		// 0x04EC (0x0008) [0x0000000000000000]              
	float                                              SilencerEquipTime;                                		// 0x04F4 (0x0004) [0x0000000000000000]              
	struct FString                                     Decalstring;                                      		// 0x04F8 (0x0010) [0x0000000000000000]              
	class UTexture*                                    DecalTexture;                                     		// 0x0508 (0x0008) [0x0000000000000000]              
	float                                              FireDelayTime;                                    		// 0x0510 (0x0004) [0x0000000000000000]              
	TArray< float >                                    PreFireDelayTime;                                 		// 0x0514 (0x0010) [0x0000000000000000]              
	class UClass*                                      InstantProjectile;                                		// 0x0524 (0x0008) [0x0000000000000000]              
	int                                                BP[ 0xA ];                                        		// 0x052C (0x0028) [0x0000000000000000]              
	float                                              InstantProjectileHitNormalAddScale;               		// 0x0554 (0x0004) [0x0000000000000000]              
	float                                              FirstpersonTracerSpawnDistance;                   		// 0x0558 (0x0004) [0x0000000000000000]              
	TArray< struct FRecoilFactor >                     RecoilFactorForHipShotView;                       		// 0x055C (0x0010) [0x0000000000000000]              
	TArray< struct FRecoilFactor >                     RecoilFactorForFirstZoomedView;                   		// 0x056C (0x0010) [0x0000000000000000]              
	TArray< struct FRecoilFactor >                     RecoilFactorForSecZoomedView;                     		// 0x057C (0x0010) [0x0000000000000000]              
	float                                              RecoilInterpSpeed;                                		// 0x058C (0x0004) [0x0000000000000000]              
	float                                              RecoilAutoCorrectSpeed;                           		// 0x0590 (0x0004) [0x0000000000000000]              
	int                                                Leftrightreactionswitch;                          		// 0x0594 (0x0004) [0x0000000000000000]              
	int                                                RecoilSpeedDownFirstRadius;                       		// 0x0598 (0x0004) [0x0000000000000000]              
	int                                                RecoilSpeedDownSecondRadius;                      		// 0x059C (0x0004) [0x0000000000000000]              
	float                                              SpreadCorrectInterpOuterSpeed;                    		// 0x05A0 (0x0004) [0x0000000000000000]              
	float                                              SpreadCorrectInterpInnerSpeed;                    		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              SpreadOuterSpeedAccuracy;                         		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              LastFiredTimeSeconds;                             		// 0x05AC (0x0004) [0x0000000000000000]              
	float                                              LastProjectileTimeSeconds;                        		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              ValidRefireToleranceTime;                         		// 0x05B4 (0x0004) [0x0000000000000000]              
	int                                                AddedPitchVerticalRecoilSum;                      		// 0x05B8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    WeaponRecoilOffset;                               		// 0x05BC (0x000C) [0x0000000000000000]              
	struct FRotator                                    LastFiredRecoilOffset;                            		// 0x05C8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    AutoCorrectWeaponRecoilOffset;                    		// 0x05D4 (0x000C) [0x0000000000000000]              
	float                                              RecoilAutoCorrectTime;                            		// 0x05E0 (0x0004) [0x0000000000000000]              
	float                                              fPitch;                                           		// 0x05E4 (0x0004) [0x0000000000000000]              
	float                                              fYaw;                                             		// 0x05E8 (0x0004) [0x0000000000000000]              
	int                                                FiredAmmo;                                        		// 0x05EC (0x0004) [0x0000000000000000]              
	int                                                ValidFiredNum;                                    		// 0x05F0 (0x0004) [0x0000000000000000]              
	float                                              Accuracy;                                         		// 0x05F4 (0x0004) [0x0000000000000000]              
	int                                                CurrentRecoilFactorType;                          		// 0x05F8 (0x0004) [0x0000000000000000]              
	struct FRecoilFactor                               CurRecoilFactor;                                  		// 0x05FC (0x0044) [0x0000000000000000]              
	struct FRotator                                    DeltaRecoil;                                      		// 0x0640 (0x000C) [0x0000000000000000]              
	TArray< int >                                      ShotCost;                                         		// 0x064C (0x0010) [0x0000000000000000]              
	TArray< struct FCameraShakeRotationFactor >        CameraShake_IncreaseByWeapon;                     		// 0x065C (0x0010) [0x0000000000000000]              
	TArray< float >                                    CameraShake_HitBodyAdjust;                        		// 0x066C (0x0010) [0x0000000000000000]              
	class UClass*                                      AttachmentClass;                                  		// 0x067C (0x0008) [0x0000000000000000]              
	class ACBWeaponAttachment*                         WeaponAttachment;                                 		// 0x0684 (0x0008) [0x0000000000000000]              
	int                                                SoundCueIndex;                                    		// 0x068C (0x0004) [0x0000000000000000]              
	TArray< class USoundCue* >                         WeaponFireSnd3rd;                                 		// 0x0690 (0x0010) [0x0000000000000000]              
	TArray< class USoundCue* >                         WeaponFireSnd;                                    		// 0x06A0 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   WeaponDryFireSnd;                                 		// 0x06B0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ZoomInSound;                                      		// 0x06B8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ZoomOutSound;                                     		// 0x06C0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ZoomInSound3rd;                                   		// 0x06C8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ZoomOutSound3rd;                                  		// 0x06D0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   WeaponBulletDropSnd;                              		// 0x06D8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   WeaponChangeSnd;                                  		// 0x06E0 (0x0008) [0x0000000000000000]              
	TArray< float >                                    BobDamping;                                       		// 0x06E8 (0x0010) [0x0000000000000000]              
	TArray< float >                                    BobDampingZ;                                      		// 0x06F8 (0x0010) [0x0000000000000000]              
	TArray< float >                                    WeaponBobSoundRatio;                              		// 0x0708 (0x0010) [0x0000000000000000]              
	float                                              MaxPitchLag;                                      		// 0x0718 (0x0004) [0x0000000000000000]              
	float                                              MaxYawLag;                                        		// 0x071C (0x0004) [0x0000000000000000]              
	float                                              LastRotUpdate;                                    		// 0x0720 (0x0004) [0x0000000000000000]              
	struct FRotator                                    LastRotation;                                     		// 0x0724 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastLocation;                                     		// 0x0730 (0x000C) [0x0000000000000000]              
	float                                              OldLeadMag[ 0x2 ];                                		// 0x073C (0x0008) [0x0000000000000000]              
	int                                                OldRotDiff[ 0x2 ];                                		// 0x0744 (0x0008) [0x0000000000000000]              
	float                                              OldMaxDiff[ 0x2 ];                                		// 0x074C (0x0008) [0x0000000000000000]              
	float                                              RotChgSpeed;                                      		// 0x0754 (0x0004) [0x0000000000000000]              
	float                                              ReturnChgSpeed;                                   		// 0x0758 (0x0004) [0x0000000000000000]              
	struct FName                                       MuzzleFlashSocket;                                		// 0x075C (0x0008) [0x0000000000000000]              
	struct FName                                       SilencerMuzzleFlashSocket;                        		// 0x0764 (0x0008) [0x0000000000000000]              
	struct FName                                       LauncherMuzzleFlashSocket;                        		// 0x076C (0x0008) [0x0000000000000000]              
	struct FName                                       HeadBloodSocket;                                  		// 0x0774 (0x0008) [0x0000000000000000]              
	struct FName                                       BloodSocket;                                      		// 0x077C (0x0008) [0x0000000000000000]              
	struct FName                                       ExtraEffectSocket;                                		// 0x0784 (0x0008) [0x0000000000000000]              
	struct FName                                       ShellEjectSocket;                                 		// 0x078C (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    MuzzleFlashPSC;                                   		// 0x0794 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             MuzzleFlashPSCTemplate;                           		// 0x079C (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             MuzzleFlashPSCTemplateForSilencer;                		// 0x07A4 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             MuzzleFlashPSCTemplateForGrenade;                 		// 0x07AC (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             MuzzleFlashPSCTemplateForGrenade3rd;              		// 0x07B4 (0x0008) [0x0000000000000000]              
	class UCombatFPMuzzleFlashLight*                   MuzzleFlashLight;                                 		// 0x07BC (0x0008) [0x0000000000000000]              
	class UClass*                                      MuzzleFlashLightClass;                            		// 0x07C4 (0x0008) [0x0000000000000000]              
	float                                              MuzzleFlashDuration;                              		// 0x07CC (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           PlayerViewOffset;                                 		// 0x07D0 (0x0010) [0x0000000000000000]              
	struct FVector                                     CurrentPlayerViewOffset;                          		// 0x07E0 (0x000C) [0x0000000000000000]              
	float                                              CurrentRating;                                    		// 0x07EC (0x0004) [0x0000000000000000]              
	int                                                AIWeaponSpreadRandom;                             		// 0x07F0 (0x0004) [0x0000000000000000]              
	float                                              AIModeDamageRate;                                 		// 0x07F4 (0x0004) [0x0000000000000000]              
	float                                              TargetFrictionDistanceMin;                        		// 0x07F8 (0x0004) [0x0000000000000000]              
	float                                              TargetFrictionDistanceMax;                        		// 0x07FC (0x0004) [0x0000000000000000]              
	struct FVector                                     TargetFrictionOffset;                             		// 0x0800 (0x000C) [0x0000000000000000]              
	float                                              TargetAdhesionAimDistZ;                           		// 0x080C (0x0004) [0x0000000000000000]              
	float                                              TargetAdhesionAimDistY;                           		// 0x0810 (0x0004) [0x0000000000000000]              
	float                                              AimAssistSpreadMultiplier;                        		// 0x0814 (0x0004) [0x0000000000000000]              
	float                                              RunSpeed;                                         		// 0x0818 (0x0004) [0x0000000000000000]              
	float                                              WalkingPct;                                       		// 0x081C (0x0004) [0x0000000000000000]              
	float                                              CrouchedPct;                                      		// 0x0820 (0x0004) [0x0000000000000000]              
	float                                              AccelRate;                                        		// 0x0824 (0x0004) [0x0000000000000000]              
	float                                              JumpZ;                                            		// 0x0828 (0x0004) [0x0000000000000000]              
	float                                              MaxGroundSpeed;                                   		// 0x082C (0x0004) [0x0000000000000000]              
	int                                                PickAddAmmo;                                      		// 0x0830 (0x0004) [0x0000000000000000]              
	struct FString                                     WeaponStatType;                                   		// 0x0834 (0x0010) [0x0000000000000000]              
	class UParticleSystemComponent*                    PSC_ShellEject;                                   		// 0x0844 (0x0008) [0x0000000000000000]              
	int                                                ShotInBurstCount;                                 		// 0x084C (0x0004) [0x0000000000000000]              
	TArray< int >                                      ShotPerFireBurst;                                 		// 0x0850 (0x0010) [0x0000000000000000]              
	int                                                FiredBulletNum;                                   		// 0x0860 (0x0004) [0x0000000000000000]              
	class UCombatSkelCtrl_WeaponLag*                   PitchControl[ 0x2 ];                              		// 0x0864 (0x0010) [0x0000000000000000]              
	class UCombatSkelCtrl_WeaponLag*                   YawControl[ 0x2 ];                                		// 0x0874 (0x0010) [0x0000000000000000]              
	class UCombatSkelCtrl_WeaponLag*                   TransControl[ 0x4 ];                              		// 0x0884 (0x0020) [0x0000000000000000]              
	TArray< struct FName >                             PitchControlName;                                 		// 0x08A4 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             YawControlName;                                   		// 0x08B4 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             TransControlName;                                 		// 0x08C4 (0x0010) [0x0000000000000000]              
	struct FString                                     WeaponCodeName;                                   		// 0x08D4 (0x0010) [0x0000000000000000]              
	struct FString                                     WeaponName;                                       		// 0x08E4 (0x0010) [0x0000000000000000]              
	class UCombatDataTableRefItem*                     RefItem;                                          		// 0x08F4 (0x0008) [0x0000000000000000]              
	int                                                WeaponID;                                         		// 0x08FC (0x0004) [0x0000000000000000]              
	int                                                OriginalWeaponID;                                 		// 0x0900 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   MeshSlide;                                        		// 0x0904 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MeshSlideSpeed;                                   		// 0x090C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MeshSlideComebackSpeed;                           		// 0x0914 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MeshSlideComebackThreshold;                       		// 0x091C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MeshSlideStartThreshold;                          		// 0x0924 (0x0008) [0x0000000000000000]              
	TArray< float >                                    ForegroundFOV;                                    		// 0x092C (0x0010) [0x0000000000000000]              
	TArray< float >                                    WorldFOV;                                         		// 0x093C (0x0010) [0x0000000000000000]              
	float                                              LastForegroundFOV;                                		// 0x094C (0x0004) [0x0000000000000000]              
	float                                              LastWorldFOV;                                     		// 0x0950 (0x0004) [0x0000000000000000]              
	float                                              ForegroundFOVAppliedRISList;                      		// 0x0954 (0x0004) [0x0000000000000000]              
	TArray< float >                                    WeaponBobRatio;                                   		// 0x0958 (0x0010) [0x0000000000000000]              
	TArray< float >                                    WeaponLagRatio;                                   		// 0x0968 (0x0010) [0x0000000000000000]              
	TArray< float >                                    WeaponZoomDuration;                               		// 0x0978 (0x0010) [0x0000000000000000]              
	TArray< float >                                    WeaponFOVDelayRatio;                              		// 0x0988 (0x0010) [0x0000000000000000]              
	TArray< float >                                    ZoomRotLagRatio;                                  		// 0x0998 (0x0010) [0x0000000000000000]              
	float                                              FOVInterpSpeed;                                   		// 0x09A8 (0x0004) [0x0000000000000000]              
	TArray< float >                                    ZoomAnimBlendTimes;                               		// 0x09AC (0x0010) [0x0000000000000000]              
	float                                              ZoomStateChangedTime;                             		// 0x09BC (0x0004) [0x0000000000000000]              
	float                                              ZoomStateChangeDurationRatio;                     		// 0x09C0 (0x0004) [0x0000000000000000]              
	float                                              CurrentWeaponZoomDuration;                        		// 0x09C4 (0x0004) [0x0000000000000000]              
	float                                              WeaponStateChangedTime;                           		// 0x09C8 (0x0004) [0x0000000000000000]              
	struct FName                                       WeaponStateName[ 0x1E ];                          		// 0x09CC (0x00F0) [0x0000000000000000]              
	struct FCustomAnimData                             StateInfo[ 0x1E ];                                		// 0x0ABC (0x08E8) [0x0000000000000000]              
	struct FCustomAnimData                             OverrideStateInfo[ 0x1E ];                        		// 0x13A4 (0x08E8) [0x0000000000000000]              
	struct FCustomAnimData                             CurrentStateInfo;                                 		// 0x1C8C (0x004C) [0x0000000000000000]              
	class UAnimNodeSlot*                               CustomAnim;                                       		// 0x1CD8 (0x0008) [0x0000000000000000]              
	class UAnimNodeSlot*                               CustomAnimOnIdle;                                 		// 0x1CE0 (0x0008) [0x0000000000000000]              
	TArray< struct FCustomAnimOnIdleData >             CustomAnimOnIdleData;                             		// 0x1CE8 (0x0010) [0x0000000000000000]              
	TArray< class UCombatWeaponRISBase* >              RISList;                                          		// 0x1CF8 (0x0010) [0x0000000000000000]              
	TArray< class UCombatWeaponRISBase* >              TickableRISList;                                  		// 0x1D08 (0x0010) [0x0000000000000000]              
	class UClass*                                      DefaultRISList[ 0x5 ];                            		// 0x1D18 (0x0028) [0x0000000000000000]              
	TArray< struct FHideBoneDataByWeaponState >        HideBoneDataByWeapState;                          		// 0x1D40 (0x0010) [0x0000000000000000]              
	TArray< struct FHideBoneDataByZoomState >          HideBoneDataByZoomState;                          		// 0x1D50 (0x0010) [0x0000000000000000]              
	TArray< struct FHideBoneDataByScreenPos >          HideBoneDataByScreenPos;                          		// 0x1D60 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             CachedHideBoneData;                               		// 0x1D70 (0x0010) [0x0000000000000000]              
	TArray< unsigned char >                            SavedDeactiveParts;                               		// 0x1D80 (0x0010) [0x0000000000000000]              
	TArray< struct FMeshPart >                         MeshParts;                                        		// 0x1D90 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             AlwaysHideBoneName;                               		// 0x1DA0 (0x0010) [0x0000000000000000]              
	struct FSocketLocation                             FirstMuzzleFlashLoc;                              		// 0x1DB0 (0x0010) [0x0000000000000000]              
	struct FSocketLocation                             ThirdMuzzleFlashLoc;                              		// 0x1DC0 (0x0010) [0x0000000000000000]              
	int                                                RelatedSkillGroupID;                              		// 0x1DD0 (0x0004) [0x0000000000220025]              ( CPF_Edit | CPF_Input | CPF_Net | CPF_EditConst )
	float                                              IdleVel;                                          		// 0x1DD4 (0x0004) [0x0000000000000000]              
	float                                              IdleVelocitySquareForRecoil;                      		// 0x1DD8 (0x0004) [0x0000000000000000]              
	class ACombatPawn*                                 CombatInstigator;                                 		// 0x1DDC (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      WeaponMesh;                                       		// 0x1DE4 (0x0008) [0x0000000000000000]              
	float                                              ZoomLv1MouseSensRatio;                            		// 0x1DEC (0x0004) [0x0000000000000000]              
	float                                              ZoomLv2MouseSensRatio;                            		// 0x1DF0 (0x0004) [0x0000000000000000]              
	int                                                ExposuredBulletNum;                               		// 0x1DF4 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             BulletNames;                                      		// 0x1DF8 (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             BulletHeadNames;                                  		// 0x1E08 (0x0010) [0x0000000000000000]              
	int                                                LastReloadedNum;                                  		// 0x1E18 (0x0004) [0x0000000000000000]              
	int                                                HideBoneNum;                                      		// 0x1E1C (0x0004) [0x0000000000000000]              
	struct FVector                                     Last_PV;                                          		// 0x1E20 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   MeshBob_WalkingMod;                               		// 0x1E2C (0x0008) [0x0000000000000000]              
	float                                              CurrentBloodTexValue;                             		// 0x1E34 (0x0004) [0x0000000000000000]              
	float                                              BloodTexDuration;                                 		// 0x1E38 (0x0004) [0x0000000000000000]              
	float                                              StartBloodTexTime;                                		// 0x1E3C (0x0004) [0x0000000000000000]              
	float                                              CurrentBloodTexBlendTime;                         		// 0x1E40 (0x0004) [0x0000000000000000]              
	float                                              BloodTexBlendTotalTime;                           		// 0x1E44 (0x0004) [0x0000000000000000]              
	struct FName                                       BloodScalarParam;                                 		// 0x1E48 (0x0008) [0x0000000000000000]              
	float                                              AllowedDelayTimeFromLastFiringTime;               		// 0x1E50 (0x0004) [0x0000000000000000]              
	float                                              ValidFiringDistance;                              		// 0x1E54 (0x0004) [0x0000000000000000]              
	float                                              ValidHitBoundScale;                               		// 0x1E58 (0x0004) [0x0000000000000000]              
	float                                              AllowTraceRangeRatio;                             		// 0x1E5C (0x0004) [0x0000000000000000]              
	float                                              ValidShotGunFiringDistance;                       		// 0x1E60 (0x0004) [0x0000000000000000]              
	int                                                ValidShotGunNumHits;                              		// 0x1E64 (0x0004) [0x0000000000000000]              
	float                                              ProjectileFireDelay;                              		// 0x1E68 (0x0004) [0x0000000000000000]              
	int                                                killcount;                                        		// 0x1E6C (0x0004) [0x000000000023000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_EditConst )
	TArray< struct FsBoneTransform >                   ABoneTransforms;                                  		// 0x1E70 (0x0010) [0x0000000000000000]              
	class USkelControlSingleBone*                      BoneTransformNode;                                		// 0x1E80 (0x0008) [0x0000000000000000]              
	class USkelControlSingleBone*                      IronSightNodeRear;                                		// 0x1E88 (0x0008) [0x0000000000000000]              
	class USkelControlSingleBone*                      IronSightNodeFront;                               		// 0x1E90 (0x0008) [0x0000000000000000]              
	struct FRotator                                    IronSightRotRear;                                 		// 0x1E98 (0x000C) [0x0000000000000000]              
	struct FRotator                                    IronSightRotFront;                                		// 0x1EA4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1972 ];

		return pClassPointer;
	};

	void ChangeSlide ( );
	void SetForegroundFOV ( );
	void SetMeshForegroundFOV ( );
	void MakeIronSightBone ( );
	void IsDisplayDroppedLocator ( );
	void SetPenetration ( );
	void SetBuff ( );
	void NotifyFiringForHUD ( );
	void CanDamageCameraShake ( );
	void GetMagType ( );
	void IsGrenade ( );
	void IsMeleeWeapon ( );
	void GetWeaponStatType ( );
	void GetWeaponType ( );
	void IsEquipWeapon ( );
	void IsPlacedUseItem ( );
	void IsPlacedWeapon ( );
	void IsPlacedActor ( );
	void IsSkillUseItem ( );
	void IsSkillWeapon ( );
	void IsSkillActor ( );
	void NotifyTeamChanged ( );
	void IsInactive ( );
	void ReleaseUse ( );
	void Use ( );
	void PlayCustomAnimOnIdle ( );
	void StopCustomAnim ( );
	void PlayBloodEffectForFP ( );
	void NotifySelectSkillHuD ( );
	void IsChangeSoundMode ( );
	void IsAIController ( );
	void GetBP ( );
	void GetGrade ( );
	void MakeBulletHeadBoneVisibility ( );
	void eventMakebulletBone ( );
	void MakeBoneTransform ( );
	void MakeBoneVisibility ( );
	void eventHideBoneForNotify ( );
	void ResetBoneVisibility ( );
	void HasBoneGimmic ( );
	void IsValidFireSound ( );
	void OwnerEvent ( );
	void eventCanAttachToHolster ( );
	void GetWeaponGroup ( );
	void SetAnimRateScale ( );
	void IsDisplayedLaserSiteUI ( );
	void eventGetCachedResources ( );
	void ToggleGrenadeLauncher ( );
	void ReselectWeapon ( );
	void eventInitHideBones ( );
	void eventSetSilencer ( );
	void ToggleLaserSite ( );
	void CanToggleSilencer ( );
	void ServerToggleSilencer ( );
	void ToggleSilencer ( );
	void AddRIS ( );
	void GetWeaponAttachmentClass ( );
	void StartAltFire ( );
	void StopFire ( );
	void UpdateHoldmode ( );
	void StartFire ( );
	void HandleFinishedFiring ( );
	void PlayNeedsAmmoChatter ( );
	void IsShellByShellReload ( );
	void eventPostInitAnimTree ( );
	void NotifyFireEvent ( );
	void NotifyWeaponFinishedFiring ( );
	void NotifyWeaponFired ( );
	void PlayBulletDropSnd ( );
	void eventPlayShellCaseEject ( );
	void HidePSC_ShellEject ( );
	void GetEffectedPutDownTime ( );
	void TraceNoVolumesOrTriggers ( );
	void eventWeaponStoppedFiring ( );
	void ShouldRegisterDamage ( );
	void GetFireModeDamage ( );
	void SpawnPentrationTracer ( );
	void PlayPenetrationEffects ( );
	void CheckBulletWhip ( );
	void SpawnTracer ( );
	void ProcessInstantHit_Internal ( );
	void ServerGotoState ( );
	void ServerNotifyHit ( );
	void ServerNotifySimpleHit ( );
	void GetBodyDamageAdjustment ( );
	void PassThroughDamageByPA ( );
	void CalcPenetration ( );
	void CheckPersonPenetration ( );
	void CalcWeaponFireNoPenetraion ( );
	void CalcWeaponFire ( );
	void GetPawnFinalHit ( );
	void eventUpdateBloodTexOnWeapon ( );
	void ClearBloodTexOnWeapon ( );
	void eventInitBloodMIC ( );
	void NotifyTakeHit ( );
	void NextBloodColumn ( );
	void InitBloodTexOnWeapon ( );
	void EndViewTarget ( );
	void BecomeViewTarget ( );
	void eventInitLastViewRotation ( );
	void eventAddSpread ( );
	void ResetSpread ( );
	void ResetRecoil ( );
	void eventCalcWeaponSpread ( );
	void eventCalcWeaponRecoil ( );
	void Activate ( );
	void CanFireOnReload ( );
	void ServerAbortWeaponReload ( );
	void eventIsReloadingWeapon ( );
	void PerformReload ( );
	void AbortWeaponReload ( );
	void IsFullReloading ( );
	void ReleaseMagazineAmmo ( );
	void CanMeleeAttack ( );
	void CanStare ( );
	void CanReload ( );
	void DoMeleeAIAttack ( );
	void ServerUpdateReloadState ( );
	void UpdateReloadState ( );
	void ServerDoStare ( );
	void DoStare ( );
	void ClientUpdateReloadState ( );
	void DoReload ( );
	void HasInfiniteSpareAmmo ( );
	void SetInfiniteSpareAmmo ( );
	void GetSubAmmoPerReload ( );
	void GetCurrentServerAmmoCount ( );
	void GetCurrentServerMagazineAmmo ( );
	void GetCurrentMagazineAmmo ( );
	void GetMaxSpareAmmoSize ( );
	void ItemRemovedFromInvManager ( );
	void eventGetDroppedPickupMesh ( );
	void DropFrom ( );
	void IsPlayerOperating ( );
	void DetourWeight ( );
	void ClientStopFire ( );
	void ClientStartFire ( );
	void IsValidFireMode ( );
	void InternalDelayedDestroy ( );
	void DelayedDestroy ( );
	void eventDestroyed ( );
	void NotifyUsedSkill ( );
	void ServerStopFire ( );
	void GetPhysicalFireStartLoc ( );
	void ShouldRefire ( );
	void TryPutDown ( );
	void NotifyWeaponReloadedUI ( );
	void GotoNextState ( );
	void ServerStartFire ( );
	void UpdateWeaponState ( );
	void eventInitChangedWeaponInfo ( );
	void ClientGivenTo ( );
	void eventIsForceNetRelevant ( );
	void AttachToHolster ( );
	void eventSetAIWeapon ( );
	void InitRecoilSeed ( );
	void SetLocalWeapon ( );
	void GivenTo ( );
	void RestoreLastZoomStateByFire ( );
	void EndZoomByFire ( );
	void FireAmmunition ( );
	void SetMouseSensitivity ( );
	void GetMouseSensitivityRatio ( );
	void EndZoom ( );
	void StartZoom ( );
	void GetWeaponBobSoundRatio ( );
	void eventGetWeaponBobRatio ( );
	void eventZoomStateChanged ( );
	void ServerSetPreviousZoomState ( );
	void SetPreviousZoomState ( );
	void ServerSetZoomState ( );
	void SetZoomState ( );
	void HasZoomProperties ( );
	void ProcessInstantHit ( );
	void NeedServerNotifyHit ( );
	void CheckMultiHit ( );
	void ClientConsumeAmmo ( );
	void ProjectileFire ( );
	void IsWhenDieDropGrenade ( );
	void IncrementFlashCount ( );
	void MakeProjectile ( );
	void ServerMakeProjectile ( );
	void IsMartyrdom ( );
	void InstantFire ( );
	void InstantFireEndTrace ( );
	void WeaponEmpty ( );
	void HasAnyAmmo ( );
	void GetNextStateDelay ( );
	void CanEquipUp ( );
	void HasAmmo ( );
	void HasSpareAmmo ( );
	void IsMaxSubAmmo ( );
	void IsMaxAmmo ( );
	void GetMaxSubAmmoCount ( );
	void GetMaxAmmoCount ( );
	void AddSubAmmo ( );
	void AddAmmo ( );
	void ServerNotifyFireEvent ( );
	void ConsumeAmmo ( );
	void StillFiring ( );
	void ReadyToFire ( );
	void IsFullyCharged ( );
	void BestMode ( );
	void ShouldFireWithoutTarget ( );
	void RangedAttackTime ( );
	void SuggestDefenseStyle ( );
	void SuggestAttackStyle ( );
	void RecommendRangedAttack ( );
	void FocusOnLeader ( );
	void BotDesireability ( );
	void CanAttack ( );
	void GetWeaponRating ( );
	void CanUseGlobalSkill ( );
	void RelativeStrengthVersus ( );
	void AdjustDistanceDamage ( );
	void CanThrow ( );
	void GetViewAxes ( );
	void eventGetExtraSocketName ( );
	void GetMuzzleFlashParticleSystem ( );
	void eventGetMuzzleFlashLightSocketName ( );
	void eventGetMuzzleFlashPSCSocketName ( );
	void DetachComponents ( );
	void UseTickIsDisabled ( );
	void DetachWeapon ( );
	void PlayMuzzleFlashPSC ( );
	void AttachMuzzleFlash ( );
	void PlayWeaponChangeSound ( );
	void WeaponChanged ( );
	void eventAttachShellEjectPSC ( );
	void AttachWeaponTo ( );
	void TryToAttachWeapon ( );
	void IsValidWeaponMesh ( );
	void GetEffectedEquipTime ( );
	void TimeWeaponEquipping ( );
	void WeaponIsDown ( );
	void TimeWeaponPutDown ( );
	void IsAllowShellEjectPerBullet ( );
	void eventCauseMuzzleFlash ( );
	void eventCauseMuzzleFlashLight ( );
	void eventMuzzleFlashTimer ( );
	void eventPlayFiringSound ( );
	void GetPlayingFiringSound ( );
	void RemovePlayingFiringSound ( );
	void eventWeaponFadeOutSound ( );
	void eventWeaponPlaySound ( );
	void StopFireEffects ( );
	void eventGetMuzzleLoc ( );
	void PlayImpactEffects ( );
	void PlayFireEffects ( );
	void SetEnableFirstPersonMuzzleFlash ( );
	void GetFireInterval ( );
	void eventInitFOV ( );
	void DisplayDebug ( );
	void GetWeaponDebug ( );
	void ConvertSpreadConeToScreenCord ( );
	void DrawWeaponCrosshair ( );
	void FlipMesh ( );
	void IsEmptyCrossHair ( );
	void GetAccuracyFactor ( );
	void ActiveRenderOverlays ( );
	void GetRemainAmmoCountForUIEX ( );
	void GetSubMaxMagazineAmmo ( );
	void GetMaxMagazineAmmo ( );
	void GetPickAddAmmo ( );
	void GetDefaultMaxMagazineAmmo ( );
	void GetWeaponAmmoStart ( );
	void GetDefaultWeaponAmmoStart ( );
	void eventNotifyWeaponAmmoChanged ( );
	void SetSubMagazineAmmo ( );
	void SetMagazineAmmo ( );
	void InitServerMagazineAmmo ( );
	void UpdateServerMagazineAmmo ( );
	void GetSubMagazineAmmo ( );
	void GetDefaultMagazineAmmo ( );
	void GetMagazineAmmo ( );
	void GetSubAmmoCount ( );
	void GetAmmoCount ( );
	void SetHiddenPrimitiveComponents ( );
	void IgnoreWeaponInput ( );
	void IgnoreInput ( );
	void ChangeVisibility ( );
	void AllowSwitchTo ( );
	void eventIsAimCorrect ( );
	void HasAnyPendingFire ( );
	void ClearAllPendingFire ( );
	void ClearAllShotCountOnFiring ( );
	void AddShotCountOnFiring ( );
	void GetShotCountOnFiring ( );
	void UpdateFlipMesh ( );
	void ServerSetFlipMesh ( );
	void PostBeginPlay ( );
	void SetData ( );
	void SetInfiniteWeaponReload ( );
	void eventPreBeginPlay ( );
	void GetRefItem ( );
	void eventChangedWeaponState ( );
	void eventDecideAnimSeq ( );
	void eventRestorePawnProperties ( );
	void eventOverridePawnProperties ( );
	void eventGetAnimDuration ( );
	void eventChangedRISSlot ( );
	void eventServerSetActiveRISSlot ( );
	void SetAmmoCount ( );
	void eventUpdateServerAmmoCount ( );
	void eventReceivedServerAmmoCount ( );
	void eventUpdateKillCount ( );
	void ReplicatedEvent ( );
	void GetAmmoPerReload ( );
	void GetMinRecoilRotation ( );
	void GetMergedRecoilRotation ( );
	void IsValidHitActor ( );
	void IsValidAmmo ( );
	void GetWeaponAttachment ( );
	void GetInterpValueByZoomState ( );
	void InstantFireStartTrace ( );
	void CorrectAccuracy ( );
	void UpdateRecoil ( );
	void InitRecoilFactor ( );
	void GetStanceState ( );
	void GetRecoilGaussRandom ( );
	void GetRecoilRandom ( );
	void InitAnimTreeWeight ( );
	void InitRISList ( );
	void SetWeaponMesh ( );
	void PreloadTextures ( );
	void IsAIWeapon ( );
	void IsLocalWeapon ( );
	void GetForegroundFOV ( );
	void GetWorldFOV ( );
	void eventChangedInstigator ( );
	void CanPlayRecoilNode ( );
	void GetWeaponFireSnd ( );
	void GetThirdPersonMuzzleLoc ( );
	void GetFirstPersonMuzzleLoc ( );
	void UpdateAlwaysHideBone ( );
	void UpdateWeaponStateAnim ( );
	void PlayWeaponAnim ( );
	void HasHolsterName ( );
	void IsDroppedWeapon ( );
	void IsInActiveState ( );
	void IsFireState ( );
	void GetWeaponState ( );
	void SetWeaponState ( );
	void ClearAllActiveRISSlot ( );
	void IsActiveRISSLot ( );
	void SetDeactivatedRISSlot ( );
	void ToggleActiveRISSlot ( );
	void SetActiveRISSlot ( );
	void NotifyPostDeactivePart ( );
	void UpdateActiveRISSlot ( );
	void SetRISState ( );
	void SetRISWeaponState ( );
	void InitPlayerViewOffset ( );
	void GetValidZoomState ( );
	void GetZoomState ( );
	void UpdateZoomInterpolation ( );
	void HideBoneByZoomState ( );
	void HideBoneByWeaponState ( );
};

UClass* ACombatWeapon::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_ETC
// 0x0020 (0x1ED0 - 0x1EB0)
class ACombatWeapon_ETC : public ACombatWeapon
{
public:
	struct FCameraAnimData                             AttachedCameraAnim;                               		// 0x1EB0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1973 ];

		return pClassPointer;
	};

	void EndViewTarget ( );
	void BecomeViewTarget ( );
	void StopAttachedCameraAnim ( );
	void PlayAttachedCameraAnim ( );
	void CanPlayAttachedCameraAnim ( );
	void Destroyed ( );
};

UClass* ACombatWeapon_ETC::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_Parachute
// 0x0070 (0x1F40 - 0x1ED0)
class ACombatWeaponBase_Parachute : public ACombatWeapon_ETC
{
public:
	float                                              OverrideGravityScalingForPawn[ 0x3 ];             		// 0x1ED0 (0x000C) [0x0000000000000000]              
	float                                              OverrideViewPitchMax[ 0x3 ];                      		// 0x1EDC (0x000C) [0x0000000000000000]              
	float                                              OverrideTerminalVelocity[ 0x3 ];                  		// 0x1EE8 (0x000C) [0x0000000000000000]              
	float                                              OverrideAirControl;                               		// 0x1EF4 (0x0004) [0x0000000000000000]              
	float                                              OverrideMaxFallSpeed;                             		// 0x1EF8 (0x0004) [0x0000000000000000]              
	float                                              LandedAnimDuration;                               		// 0x1EFC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   FallingSound;                                     		// 0x1F00 (0x0008) [0x0000000000000000]              
	unsigned char                                      InitialParachuteState;                            		// 0x1F08 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentParachuteState;                            		// 0x1F09 (0x0001) [0x0000000000240000]              ( CPF_GlobalConfig )
	unsigned long                                      bParachuteOpenOnPressJump : 1;                    		// 0x1F0C (0x0004) [0x0000000000000000] [0x00000001] 
	class UMaterialInterface*                          LandingZoneMaterialForAlly;                       		// 0x1F10 (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          LandingZoneMaterialForEnemy;                      		// 0x1F18 (0x0008) [0x0000000000000000]              
	float                                              LandingZoneSize;                                  		// 0x1F20 (0x0004) [0x0000000000000000]              
	float                                              LandingZoneDecalDepth;                            		// 0x1F24 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             FallingSoundCom;                                  		// 0x1F28 (0x0008) [0x0000000000000000]              
	class ACombatPlayerStart*                          InstigatorAnchor;                                 		// 0x1F30 (0x0008) [0x000000000025001B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_GlobalConfig )
	class ACombatPlayerStart*                          LastInstigatorAnchor;                             		// 0x1F38 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1974 ];

		return pClassPointer;
	};

	void StartFallingSound ( );
	void StopFallingSound ( );
	void OwnerEvent ( );
	void RestorePawnProperties ( );
	void UpdateAttachmentMeshVisibility ( );
	void ChangeVisibility ( );
	void ApplyMaxVelocity ( );
	void OverridePawnProperties ( );
	void ParachuteStateChanged ( );
	void CanPlayAttachedCameraAnim ( );
	void SetParachuteState ( );
	void eventSetInstigatorAnchor ( );
	void UpdateLandingZone ( );
	void GetLandingZoneDecalMaterial ( );
	void NotifyTeamChanged ( );
	void ChangedInstigator ( );
	void ReplicatedEvent ( );
	void SetLocalWeapon ( );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* ACombatWeaponBase_Parachute::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Skill_Weapon
// 0x0020 (0x1ED0 - 0x1EB0)
class ACombatWeapon_Skill_Weapon : public ACombatWeapon
{
public:
	struct FName                                       FireActionVoiceName;                              		// 0x1EB0 (0x0008) [0x0000000000000000]              
	class AActor*                                      TargetActor;                                      		// 0x1EB8 (0x0008) [0x0000000000000000]              
	struct FVector                                     TargetLoc;                                        		// 0x1EC0 (0x000C) [0x0000000000000000]              
	unsigned long                                      bForceFireAmmunition : 1;                         		// 0x1ECC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1975 ];

		return pClassPointer;
	};

	void GetBP ( );
	void ForceEndFire ( );
	void ServerSkillFire ( );
	void FireAmmunition ( );
	void NotifyWeaponFired ( );
	void eventPlayFiringSound ( );
	void PlayFireActionVoice ( );
	void GetSkillFireTargetLoc ( );
	void GetSkillFireTarget ( );
	void SkillFire ( );
};

UClass* ACombatWeapon_Skill_Weapon::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Guided_Weapon
// 0x0018 (0x1EE8 - 0x1ED0)
class ACombatWeapon_Guided_Weapon : public ACombatWeapon_Skill_Weapon
{
public:
	class UParticleSystemComponent*                    GuidedPSC;                                        		// 0x1ED0 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             SimulatingEffect;                                 		// 0x1ED8 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             TargetingEffect;                                  		// 0x1EE0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1976 ];

		return pClassPointer;
	};

	void ChangeVisibility ( );
	void UpdateMITVParameter ( );
	void SetGuidedEffect ( );
	void Destroyed ( );
	void UpdateTargetLocation ( );
};

UClass* ACombatWeapon_Guided_Weapon::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase
// 0x0CD0 (0x0D30 - 0x0060)
class UCombatWeaponRISBase : public UObject
{
public:
	class ACombatWeapon*                               OwnerWeapon;                                      		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsFirstPersonCam : 1;                            		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsAttachedToWeapon : 1;                          		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAutoAttachToWeapon : 1;                          		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCallTickFunction : 1;                            		// 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FFunctionTable                              FunctionTableForWeaponState[ 0x1E ];              		// 0x006C (0x02D0) [0x0000000000000000]              
	struct FFunctionTable                              FunctionTableForRISState[ 0xA ];                  		// 0x033C (0x00F0) [0x0000000000000000]              
	unsigned char                                      RISSlotIndex;                                     		// 0x042C (0x0001) [0x0000000000000000]              
	struct FCustomAnimData                             PartStateInfo[ 0x1E ];                            		// 0x0430 (0x08E8) [0x0000000000000000]              
	float                                              ActivePartTime;                                   		// 0x0D18 (0x0004) [0x0000000000000000]              
	float                                              DeactivePartTime;                                 		// 0x0D1C (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            SavedWeaponPropery;                               		// 0x0D20 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1977 ];

		return pClassPointer;
	};

	void WeaponPartChanged ( );
	void RemoveAnimSet ( );
	void AddAnimSet ( );
	void Init ( );
	void eventInitRIS ( );
	void IsFirstPersonCam ( );
	void PostDeactivePart ( );
	void PreActivePart ( );
	void ModifyWeaponProperties ( );
	void NotifyTeamChanged ( );
	void InitThirdPersonMesh ( );
	void InitFirstPersonMesh ( );
	void OwnerChangeViewMode ( );
	void ZoomStateChanged ( );
	void DetachFromWeapon ( );
	void AttachToWeapon ( );
	void WeaponDeactivePart ( );
	void WeaponActivePart ( );
	void RestoreWeaponProperty ( );
	void ApplyWeaponProperty ( );
	void IsAttachedToWeapon ( );
	void IsValidForAttach ( );
	void SetRISState ( );
	void SetRISWeaponState ( );
	void InitFunctionList ( );
};

UClass* UCombatWeaponRISBase::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_SkeletalmeshComponent
// 0x0054 (0x0D84 - 0x0D30)
class UCombatWeaponRISBase_SkeletalmeshComponent : public UCombatWeaponRISBase
{
public:
	class USkeletalMeshComponent*                      FirstPersonSkelComponent;                         		// 0x0D30 (0x0008) [0x0000000000000000]              
	class UPhysicsAsset*                               FirstPersonPhysicsAsset;                          		// 0x0D38 (0x0008) [0x0000000000000000]              
	struct FName                                       FirstPersonNameToAttach;                          		// 0x0D40 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsAttachToFirstPersonSocket : 1;                 		// 0x0D48 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsAttachToThirdPersonSocket : 1;                 		// 0x0D48 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FMeshPart >                         FirstPersonMeshParts;                             		// 0x0D4C (0x0010) [0x0000000000000000]              
	class USkeletalMeshComponent*                      ThirdPersonSkelComponent;                         		// 0x0D5C (0x0008) [0x0000000000000000]              
	class UPhysicsAsset*                               ThirdPersonPhysicsAsset;                          		// 0x0D64 (0x0008) [0x0000000000000000]              
	struct FName                                       ThirdPersonNameToAttach;                          		// 0x0D6C (0x0008) [0x0000000000000000]              
	TArray< struct FMeshPart >                         ThirdPersonMeshParts;                             		// 0x0D74 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1978 ];

		return pClassPointer;
	};

	void DetachFromWeapon ( );
	void AttachToWeapon ( );
	void SetThirdPersonSkelComponentPhysics ( );
	void SetFirstPersonSkelComponentPhysics ( );
	void AttachSkeletalMeshComponent ( );
	void GetThirdPersonWeaponMeshComponent ( );
	void GetFirstPersonWeaponMeshComponent ( );
};

UClass* UCombatWeaponRISBase_SkeletalmeshComponent::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_Aiming
// 0x00C4 (0x0E48 - 0x0D84)
class UCombatWeaponRISBase_Aiming : public UCombatWeaponRISBase_SkeletalmeshComponent
{
public:
	TArray< float >                                    WorldFOVMagnification;                            		// 0x0D84 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideForegroundFOV;                            		// 0x0D94 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideWeaponBobRatio;                           		// 0x0DA4 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideWeaponLagRatio;                           		// 0x0DB4 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideWeaponZoomDuration;                       		// 0x0DC4 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideWeaponFOVDelayRatio;                      		// 0x0DD4 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideZoomRotLagRatio;                          		// 0x0DE4 (0x0010) [0x0000000000000000]              
	float                                              OverrideWeaponFOVInterpSpeed;                     		// 0x0DF4 (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           OverrideViewOffset;                               		// 0x0DF8 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideBobDamping;                               		// 0x0E08 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideBobDampingZ;                              		// 0x0E18 (0x0010) [0x0000000000000000]              
	TArray< float >                                    OverrideZoomAnimBlendTimes;                       		// 0x0E28 (0x0010) [0x0000000000000000]              
	TArray< struct FHideBoneDataByScreenPos >          OverrideHideBoneDataByScreenPos;                  		// 0x0E38 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1979 ];

		return pClassPointer;
	};

	void ModifyWeaponProperties ( );
};

UClass* UCombatWeaponRISBase_Aiming::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_Scope
// 0x004C (0x0E94 - 0x0E48)
class UCombatWeaponRISBase_Scope : public UCombatWeaponRISBase_Aiming
{
public:
	class UAnimNodeSlot*                               FPCustomAnim;                                     		// 0x0E48 (0x0008) [0x0000000000000000]              
	struct FName                                       FireAnimName;                                     		// 0x0E50 (0x0008) [0x0000000000000000]              
	class UMaterialInstance*                           ScopeMaterial;                                    		// 0x0E58 (0x0008) [0x0000000000000000]              
	struct FScopeMaterialVectorParameter               ReadyToFireParam;                                 		// 0x0E60 (0x0018) [0x0000000000000000]              
	struct FScopeMaterialVectorParameter               UnavailableToFireParam;                           		// 0x0E78 (0x0018) [0x0000000000000000]              
	unsigned long                                      bLastReadyToFire : 1;                             		// 0x0E90 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1980 ];

		return pClassPointer;
	};

	void ZoomStateChanged ( );
	void SetVisibleScope ( );
	void StopCustomAnim ( );
	void WeaponZoomFireSec ( );
	void WeaponZoomFire ( );
	void GetCustomAnimNode ( );
	void OwnerChangeViewMode ( );
	void DetachFromWeapon ( );
	void eventReadyToFire ( );
	void InitScopeMaterial ( );
	void Init ( );
	void UpdateScopeMaterial ( );
	void IsVisibleScope ( );
};

UClass* UCombatWeaponRISBase_Scope::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_GrenadeLauncher
// 0x0048 (0x0DCC - 0x0D84)
class UCombatWeaponRISBase_GrenadeLauncher : public UCombatWeaponRISBase_SkeletalmeshComponent
{
public:
	struct FName                                       OverrideDataName;                                 		// 0x0D84 (0x0008) [0x0000000000000000]              
	float                                              WorldFOVMagnification;                            		// 0x0D8C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseLauncherForegroundFOV : 1;                    		// 0x0D90 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              LauncherForegroundFOV;                            		// 0x0D94 (0x0004) [0x0000000000000000]              
	float                                              LauncherZoomInDelayRatio;                         		// 0x0D98 (0x0004) [0x0000000000000000]              
	float                                              LauncherZoomOutDelayRatio;                        		// 0x0D9C (0x0004) [0x0000000000000000]              
	float                                              OverrideWeaponBobRatio;                           		// 0x0DA0 (0x0004) [0x0000000000000000]              
	float                                              OverrideWeaponLagRatio;                           		// 0x0DA4 (0x0004) [0x0000000000000000]              
	float                                              OverrideZoomRotLagRatio;                          		// 0x0DA8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   OverrideWeaponFireSnd;                            		// 0x0DAC (0x0008) [0x0000000000000000]              
	class USoundCue*                                   OverrideWeaponFireSnd3rd;                         		// 0x0DB4 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             OverrideMuzzleFlashPSCTemplateForGrenade;         		// 0x0DBC (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             OverrideMuzzleFlashPSCTemplateForGrenade3rd;      		// 0x0DC4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1981 ];

		return pClassPointer;
	};

	void WeaponDeactivePart ( );
	void PostDeactivePart ( );
	void PreActivePart ( );
	void ModifyWeaponProperties ( );
};

UClass* UCombatWeaponRISBase_GrenadeLauncher::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_LaserPoint
// 0x0070 (0x0DF4 - 0x0D84)
class UCombatWeaponRISBase_LaserPoint : public UCombatWeaponRISBase_SkeletalmeshComponent
{
public:
	struct FLinearColor                                TeamColor[ 0x2 ];                                 		// 0x0D84 (0x0020) [0x0000000000000000]              
	struct FName                                       FirstPersonBoneName;                              		// 0x0DA4 (0x0008) [0x0000000000000000]              
	struct FName                                       TeamColorParameterName;                           		// 0x0DAC (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    ThirdPersonPSC;                                   		// 0x0DB4 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             ThirdPersonPSCTemplate;                           		// 0x0DBC (0x0008) [0x0000000000000000]              
	struct FName                                       ThirdPersonSocketName;                            		// 0x0DC4 (0x0008) [0x0000000000000000]              
	struct FName                                       ParticleLengthParameterName;                      		// 0x0DCC (0x0008) [0x0000000000000000]              
	float                                              ParticleLengthUpdateDelay;                        		// 0x0DD4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   LaserSightOnSnd;                                  		// 0x0DD8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   LaserSightOffSnd;                                 		// 0x0DE0 (0x0008) [0x0000000000000000]              
	class UMaterialInstance*                           LaserPointMI;                                     		// 0x0DE8 (0x0008) [0x0000000000000000]              
	float                                              LastParticleLengthUpdateTime;                     		// 0x0DF0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1982 ];

		return pClassPointer;
	};

	void UpdateLaserPoint ( );
	void NotifyTeamChanged ( );
	void InitThirdPersonMesh ( );
	void InitFirstPersonMesh ( );
	void OwnerChangeViewMode ( );
	void DetachFromWeapon ( );
	void AttachToWeapon ( );
	void PostDeactivePart ( );
	void PreActivePart ( );
	void UpdateParticleLength ( );
};

UClass* UCombatWeaponRISBase_LaserPoint::pClassPointer = NULL;

// Class CombatGame.CBGameReplicationInfo
// 0x00D8 (0x0380 - 0x02A8)
class ACBGameReplicationInfo : public AGameReplicationInfo
{
public:
	struct FName                                       InitGameStatus;                                   		// 0x02A8 (0x0008) [0x0000000000200000]              
	int                                                CountDownTime;                                    		// 0x02B0 (0x0004) [0x000000000021000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel )
	int                                                LastCountDownTime;                                		// 0x02B4 (0x0004) [0x0000000000000000]              
	int                                                GoalRound;                                        		// 0x02B8 (0x0004) [0x0000000000220000]              ( CPF_EditConst )
	int                                                GoalMission;                                      		// 0x02BC (0x0004) [0x0000000000230000]              ( CPF_Travel | CPF_EditConst )
	int                                                CurrentRound;                                     		// 0x02C0 (0x0004) [0x000000000024000A]              ( CPF_Const | CPF_ExportObject | CPF_GlobalConfig )
	int                                                ModeID;                                           		// 0x02C4 (0x0004) [0x0000000000250000]              ( CPF_Travel | CPF_GlobalConfig )
	unsigned char                                      RankSystemID;                                     		// 0x02C8 (0x0001) [0x000000000026000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_GlobalConfig )
	unsigned char                                      SpawnGroupIndex;                                  		// 0x02C9 (0x0001) [0x000000000027000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	class ACombatPlayerControllerBase*                 PCOwner;                                          		// 0x02CC (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsSuddenDeath : 1;                               		// 0x02D4 (0x0004) [0x000000000028000A] [0x00000001] ( CPF_Const | CPF_ExportObject | CPF_Component )
	unsigned long                                      UseRigidBodyForInformation : 1;                   		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsChampionship : 1;                              		// 0x02D4 (0x0004) [0x000000000029000A] [0x00000004] ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_Component )
	unsigned long                                      bUseParachuteRespawn : 1;                         		// 0x02D4 (0x0004) [0x00000000002A000A] [0x00000008] ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component )
	unsigned long                                      bSkipSkillLicense : 1;                            		// 0x02D4 (0x0004) [0x00000000002B000A] [0x00000010] ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_EditConst | CPF_Component )
	TArray< class ACombatProj_Decoy* >                 DecoyActors;                                      		// 0x02D8 (0x0010) [0x0000000000000000]              
	class UCombatInGameResourcePool*                   ResourcePool;                                     		// 0x02E8 (0x0008) [0x0000000000000000]              
	class UClass*                                      CombatGameClass;                                  		// 0x02F0 (0x0008) [0x0000000000000000]              
	struct FMissionActorInfo                           TeamMissionActor[ 0x2 ];                          		// 0x02F8 (0x0020) [0x0000000000000000]              
	struct FMissionActorInfo                           NeutralMissionActor;                              		// 0x0318 (0x0010) [0x0000000000000000]              
	TArray< class ACombatPlayerReplicationInfo* >      PlayerPRIArray;                                   		// 0x0328 (0x0010) [0x0000000000000000]              
	class UCombatChampionshipManager*                  ChampionshipManager;                              		// 0x0338 (0x0008) [0x0000000000000000]              
	class UCombatStaticMeshManager*                    CombatSMManager;                                  		// 0x0340 (0x0008) [0x0000000000000000]              
	struct FName                                       CurrentGameClassShortName;                        		// 0x0348 (0x0008) [0x00000000002C0000]              ( CPF_GlobalConfig | CPF_Component )
	class AGamePlayEvent_Kill*                         GamePlayKillEvent;                                		// 0x0350 (0x0008) [0x0000000000000000]              
	class UGamePlayEvent_Action*                       GamePlayActionEvent;                              		// 0x0358 (0x0008) [0x0000000000000000]              
	TArray< class AActor* >                            PickupItemActors;                                 		// 0x0360 (0x0010) [0x0000000000000000]              
	int                                                TotalPickupItemsCount;                            		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                SeqAct_CombatDelayTime;                           		// 0x0374 (0x0004) [0x00000000002D000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig | CPF_Component )
	int                                                CompetitiveWarmingUpReamainTime;                  		// 0x0378 (0x0004) [0x00000000002E000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	int                                                SurrendCanRound;                                  		// 0x037C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1983 ];

		return pClassPointer;
	};

	void GetSyncedElapsedTime ( );
	void TriggerInGameClientEvent ( );
	void RemovePRI ( );
	void RemovePlayerPRI ( );
	void AddPlayerPRI ( );
	void IsRealPlayer ( );
	void CanUseClassSystem ( );
	void GetClassSelectCondition ( );
	void GetRespawnDelay ( );
	void SetRankSystemID ( );
	void eventGetRankSystemID ( );
	void IsTeamGame ( );
	void eventIsMatchPointRoundForNative ( );
	void IsMatchPointRound ( );
	void SetStopCountDown ( );
	void IsClientReady2ChangeHUDState ( );
	void Check ( );
	void GetSpawnGroupIndex ( );
	void SetSpawnGroupIndex ( );
	void ChangeHUDState ( );
	void ChangeState ( );
	void IsPlayingGameState ( );
	void eventIsWarmupState ( );
	void eventCheckGlobalCoolTime ( );
	void eventTimer ( );
	void UpdateModeInfo ( );
	void eventReplicatedEvent ( );
	void NotifyRoundOver ( );
	void IsCanSurrend ( );
	void GetTeam ( );
	void Reset ( );
	void eventDestroyed ( );
	void RemoveDeocyActor ( );
	void AddDecoyActor ( );
	void eventPreBeginPlay ( );
	void CheckChampionshipSetting ( );
	void ProcessTakeDamage ( );
	void GetCombatSMManager ( );
	void InitCombatSMManager ( );
	void eventPostBeginPlay ( );
	void ReceivedGameClass ( );
	void CanBeBaseForPawn ( );
	void IsSupportsRespawn ( );
	void GetTeamInfo ( );
	void UpdatePickupLocatorActors ( );
	void CleanUpIndicatedPickupItems ( );
	void RemovePickupItemInfo ( );
	void AddPickupItemInfo ( );
	void InitMissionActor ( );
	void SortMissionActor ( );
	void SortMissionActorByPriority ( );
	void RemoveMissionActor ( );
	void AddMissionActor ( );
	void eventGetAllMissionActors ( );
	void GetMissionActor ( );
	void GetMissionActorNum ( );
	void GetTotalMissionActorNum ( );
	void GetBomb ( );
	void GetBombSite ( );
	void GetResourcePool ( );
	void GetCachedLocalPC ( );
	void eventUpdateSeqActDelayTime ( );
};

UClass* ACBGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatAIGameReplicationInfo
// 0x0080 (0x0400 - 0x0380)
class ACombatAIGameReplicationInfo : public ACBGameReplicationInfo
{
public:
	class ACombatBarricade*                            MissionActor;                                     		// 0x0380 (0x0008) [0x0000000000000000]              
	int                                                WaveCount;                                        		// 0x0388 (0x0004) [0x00000000002F0000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	int                                                WaveStartTime;                                    		// 0x038C (0x0004) [0x0000000000300000]              
	int                                                PlayTime;                                         		// 0x0390 (0x0004) [0x0000000000310000]              ( CPF_Travel )
	int                                                CurrentWaveRemainBotCount;                        		// 0x0394 (0x0004) [0x0000000000320000]              ( CPF_EditConst )
	struct FSAimRocket                                 RepAimRocket;                                     		// 0x0398 (0x003C) [0x0000000000330014]              ( CPF_Input | CPF_OptionalParm | CPF_Travel | CPF_EditConst )
	TArray< class USeqAct_ProjAttack* >                SeqAct_ProjAttackArray;                           		// 0x03D4 (0x0010) [0x0000000000000000]              
	unsigned long                                      bInitProjAttackSequence : 1;                      		// 0x03E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      RewardRank;                                       		// 0x03E8 (0x0001) [0x000000000034000A]              ( CPF_Const | CPF_ExportObject | CPF_GlobalConfig )
	int                                                ValidComboTime;                                   		// 0x03EC (0x0004) [0x0000000000000000]              
	TArray< class UCombatDataTableRefKillCombo* >      ComboList;                                        		// 0x03F0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1984 ];

		return pClassPointer;
	};

	void UpdateModeInfo ( );
	void Recv_AimRocket ( );
	void Send_AimRocket ( );
	void eventGetDefenseObject ( );
	void eventReplicatedEvent ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatAIGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatCTFGameReplicationInfo
// 0x0000 (0x0380 - 0x0380)
class ACombatCTFGameReplicationInfo : public ACBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1985 ];

		return pClassPointer;
	};

};

UClass* ACombatCTFGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatDemGameReplicationInfo
// 0x002A (0x03AA - 0x0380)
class ACombatDemGameReplicationInfo : public ACBGameReplicationInfo
{
public:
	TArray< class ACombatBombsiteVolume* >             Bombsites;                                        		// 0x0380 (0x0010) [0x0000000000000000]              
	TArray< class ACombatTrigger_Bomb* >               Bombs;                                            		// 0x0390 (0x0010) [0x0000000000000000]              
	int                                                TotalBombsites;                                   		// 0x03A0 (0x0004) [0x0000000000000000]              
	int                                                TotalBombs;                                       		// 0x03A4 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x03A8 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatDemGameReplicationInfo.PlantedBombSettingTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1986 ];

		return pClassPointer;
	};

	void NotifyRoundOver ( );
	void GetBombLocation ( );
	void GetBombsiteLocation ( );
	void eventPostBeginPlay ( );
	void eventDestroyed ( );
	void Reset ( );
	void RemoveBomb ( );
	void FindBomb ( );
	void AddBomb ( );
	void CleanUpBombsites ( );
	void RemoveBombSite ( );
	void AddBombsite ( );
	void GetBomb ( );
	void GetBombSite ( );
};

UClass* ACombatDemGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatRSCGameReplicationInfo
// 0x0009 (0x0389 - 0x0380)
class ACombatRSCGameReplicationInfo : public ACBGameReplicationInfo
{
public:
	class ACombatHostageActor*                         HostageActor;                                     		// 0x0380 (0x0008) [0x0000000000000000]              
	unsigned char                                      CurrentScene;                                     		// 0x0388 (0x0001) [0x00000000002F0000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1987 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( );
	void IsLastScene ( );
	void SetCurrentScene ( );
	void Reset ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatRSCGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatSEIGameReplicationInfo
// 0x0014 (0x0394 - 0x0380)
class ACombatSEIGameReplicationInfo : public ACBGameReplicationInfo
{
public:
	TArray< class ACombatOccupiedAreaVolume* >         OccupiedAreas;                                    		// 0x0380 (0x0010) [0x0000000000000000]              
	int                                                TotalOccupiedAreaNum;                             		// 0x0390 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1988 ];

		return pClassPointer;
	};

	void AddOccupiedAreaVolume ( );
	void FindOccupiedAreaVolume ( );
	void NotifyDeadOccupiedPawn ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatSEIGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CBTeamInfo
// 0x00A8 (0x030C - 0x0264)
class ACBTeamInfo : public ATeamInfo
{
public:
	TArray< class AController* >                       TeamMembers;                                      		// 0x0264 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0274 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.Kills
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x0276 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.AssistCount
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x0278 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.DeathCount
	unsigned char                                      WinRounds;                                        		// 0x027A (0x0001) [0x0000000000190000]              ( CPF_Travel | CPF_Component )
	unsigned char                                      AliveMemberCount;                                 		// 0x027B (0x0001) [0x00000000001A0000]              ( CPF_EditConst | CPF_Component )
	unsigned char                                      SkillGlobalCooltime[ 0x10 ];                      		// 0x027C (0x0010) [0x0000000000000000]              
	unsigned char                                      RepNotifyActiveSkilltime;                         		// 0x028C (0x0001) [0x00000000001B000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_EditConst | CPF_Component )
	unsigned long                                      bWasPlayerInRoundStart : 1;                       		// 0x0290 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsActiveSkillCooltime : 1;                       		// 0x0290 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bActiveTimer : 1;                                 		// 0x0290 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseClassSystem : 1;                              		// 0x0290 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsSetGlobalSkill : 1;                            		// 0x0290 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      UnknownData03[ 0x2 ];                             		// 0x0294 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.CurrentMissionCount
	int                                                SkillOwnerplayerID;                               		// 0x0298 (0x0004) [0x00000000001D000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig | CPF_Component )
	unsigned char                                      UnknownData04[ 0x20 ];                            		// 0x029C (0x0020) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.CurrentSkillGlobalCooltime
	float                                              CoolCheckTime;                                    		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              MissionScore;                                     		// 0x02C0 (0x0004) [0x00000000002E0000]              ( CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	int                                                OriginalTeamIndex;                                		// 0x02C4 (0x0004) [0x0000000000000000]              
	class ACombatPC*                                   LastUser;                                         		// 0x02C8 (0x0008) [0x0000000000000000]              
	int                                                ClanMatch_MainClanID;                             		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                ClanMatch_ModeID;                                 		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                SurrendRemainTime;                                		// 0x02D8 (0x0004) [0x00000000002F0000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component )
	int                                                SurrendCoolTime;                                  		// 0x02DC (0x0004) [0x0000000000300000]              
	int                                                SurrendStartUserCount;                            		// 0x02E0 (0x0004) [0x0000000000000000]              
	struct FSurrendInfo                                SurrendInfoArray[ 0x5 ];                          		// 0x02E4 (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1989 ];

		return pClassPointer;
	};

	void AddBounsTargetMemeber ( );
	void GetMainClanMemberCount ( );
	void IsMainClanMember ( );
	void GetRoundPointForUI ( );
	void GetSpecialScore ( );
	void InitScoreCount ( );
	void AddMissionScore ( );
	void AddScore ( );
	void IsMemberAllDead ( );
	void eventGetValue ( );
	void IncrementMissionCount ( );
	void GetSuccessedMission ( );
	void IsMatchPoint ( );
	void IncrementDeathCount ( );
	void IncrementAssistCount ( );
	void IncrementKills ( );
	void eventReplicatedEvent ( );
	void eventDestroyed ( );
	void BotNameTaken ( );
	void SetBotOrders ( );
	void Initialize ( );
	void AllBotsSpawned ( );
	void SettingGlobalCoolTime ( );
	void CheckGlobalCoolTime ( );
	void UpdateGlobalSkill ( );
	void eventTimer ( );
	void CanUseGlobalSkill ( );
	void NotifyGlobalActiveSkilltime ( );
	void SetGlobalCooltime ( );
	void Reset ( );
	void GetPlayerCount ( );
	void RemoveFromTeam ( );
	void AddToTeam ( );
	void PostBeginPlay ( );
};

UClass* ACBTeamInfo::pClassPointer = NULL;

// Class CombatGame.CombatBusterTeamInfo
// 0x0000 (0x030C - 0x030C)
class ACombatBusterTeamInfo : public ACBTeamInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1990 ];

		return pClassPointer;
	};

};

UClass* ACombatBusterTeamInfo::pClassPointer = NULL;

// Class CombatGame.CombatLCTFTeamInfo
// 0x0000 (0x030C - 0x030C)
class ACombatLCTFTeamInfo : public ACBTeamInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1991 ];

		return pClassPointer;
	};

};

UClass* ACombatLCTFTeamInfo::pClassPointer = NULL;

// Class CombatGame.CombatSEIModeTeamInfo
// 0x0004 (0x0310 - 0x030C)
class ACombatSEIModeTeamInfo : public ACBTeamInfo
{
public:
	unsigned long                                      bFirstOccupation : 1;                             		// 0x030C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1992 ];

		return pClassPointer;
	};

	void GetValue ( );
	void GetOccupationScoreInNotOccupationZone ( );
};

UClass* ACombatSEIModeTeamInfo::pClassPointer = NULL;

// Class CombatGame.CombatPlayerReplicationInfoBase
// 0x0078 (0x0390 - 0x0318)
class ACombatPlayerReplicationInfoBase : public APlayerReplicationInfo
{
public:
	class ACombatPawn*                                 CachedPawn;                                       		// 0x0318 (0x0008) [0x0000000000000000]              
	class ACombatPlayerReplicationInfoBase*            KillerForOutline;                                 		// 0x0320 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsLive : 1;                                      		// 0x0328 (0x0004) [0x0000000000270000] [0x00000001] ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	unsigned long                                      bClientExposedByLocalPlayer : 1;                  		// 0x0328 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bClientExposedByUAV : 1;                          		// 0x0328 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FBasePlayerStateForHUDInfo                  BasePlayerStateForHUDList[ 0x5 ];                 		// 0x032C (0x003C) [0x0000000000000000]              
	struct FCurrentPlayerStateForHUDInfo               CurrentHUDPlayerStateList[ 0x5 ];                 		// 0x0368 (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1993 ];

		return pClassPointer;
	};

	void OnSetSteamID ( );
	void DropCTFFlag ( );
	void IsHaveCTFFlag ( );
	void GetTeamNum ( );
	void IncrementDefusedCount ( );
	void IncrementPlantedCount ( );
	void SetBomb ( );
	void eventHasBomb ( );
	void UpdateObserverWeaponInfo ( );
	void UpdateLocalPlayerTeamReceived ( );
	void UpdatePreloadTexture ( );
	void ClientInitialize ( );
	void IsInPlayerStateForHUD ( );
	void UpdatePlayerHUDState ( );
	void NotifyPlayingState ( );
	void GetPlayerStateForHUD_Duration ( );
	void ResetExposedByLocalPlayer ( );
	void ResetPlayerHUDState ( );
	void ReleasePawn ( );
	void InitPawn ( );
	void SetWaitingPlayer ( );
	void ClientReset ( );
	void Reset ( );
	void PostBeginPlay ( );
	void eventSetKillerOutline ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatPlayerReplicationInfoBase::pClassPointer = NULL;

// Class CombatGame.CombatBotReplicationInfo
// 0x0010 (0x03A0 - 0x0390)
class ACombatBotReplicationInfo : public ACombatPlayerReplicationInfoBase
{
public:
	int                                                SpawnerID;                                        		// 0x0390 (0x0004) [0x0000000000000000]              
	int                                                Cost;                                             		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                BotGroupID;                                       		// 0x0398 (0x0004) [0x0000000000000000]              
	int                                                BotID;                                            		// 0x039C (0x0004) [0x0000000000280000]              ( CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1994 ];

		return pClassPointer;
	};

};

UClass* ACombatBotReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatPlayerReplicationInfo
// 0x0178 (0x0508 - 0x0390)
class ACombatPlayerReplicationInfo : public ACombatPlayerReplicationInfoBase
{
public:
	float                                              InGameCR;                                         		// 0x0390 (0x0004) [0x0000000000280019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Component )
	float                                              TotalGameCR;                                      		// 0x0394 (0x0004) [0x0000000000000000]              
	unsigned long                                      bChangedCR : 1;                                   		// 0x0398 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAllSkillReady : 1;                               		// 0x0398 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsLastman : 1;                                   		// 0x0398 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSkillTest : 1;                                   		// 0x0398 (0x0004) [0x0000000000290019] [0x00000008] ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_Component )
	unsigned long                                      bDelayApplySkill : 1;                             		// 0x0398 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDelayApplyCooltime : 1;                          		// 0x0398 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bChangedSkillOption : 1;                          		// 0x0398 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bActiveUAV : 1;                                   		// 0x0398 (0x0004) [0x00000000002A0019] [0x00000080] ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_EditConst | CPF_Component )
	unsigned long                                      bSelectedMilitaryClass : 1;                       		// 0x0398 (0x0004) [0x00000000002B0019] [0x00000100] ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_EditConst | CPF_Component )
	unsigned long                                      bClientReadyToPlay : 1;                           		// 0x0398 (0x0004) [0x00000000002C0023] [0x00000200] ( CPF_Edit | CPF_Const | CPF_Net | CPF_GlobalConfig | CPF_Component )
	unsigned long                                      bNeedLoadGameKillCount : 1;                       		// 0x0398 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bBestScorePlayer : 1;                             		// 0x0398 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bBestKillPlayer : 1;                              		// 0x0398 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bBestAssistPlayer : 1;                            		// 0x0398 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bBestModeScorePlayer : 1;                         		// 0x0398 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bChampionshipSettingDone : 1;                     		// 0x0398 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      RepEnableChaItemFX : 1;                           		// 0x0398 (0x0004) [0x00000000002D0019] [0x00010000] ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_GlobalConfig | CPF_Component )
	unsigned long                                      bSessionConnected : 1;                            		// 0x0398 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x039C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatPlayerReplicationInfo.AccumulatedAssist
	int                                                pendingAssistCount;                               		// 0x03A0 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x03A4 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatPlayerReplicationInfo.ScoreKills
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x03A6 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatPlayerReplicationInfo.SuicideCount
	unsigned char                                      UnknownData03[ 0x2 ];                             		// 0x03A8 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatPlayerReplicationInfo.HeadShotCount
	class UCombatRewardDataBase*                       RewardData;                                       		// 0x03AC (0x0008) [0x0000000000000000]              
	int                                                LastKillTime;                                     		// 0x03B4 (0x0004) [0x0000000000000000]              
	int                                                RespawnCount;                                     		// 0x03B8 (0x0004) [0x0000000000000000]              
	unsigned char                                      Rank;                                             		// 0x03BC (0x0001) [0x0000000000300019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm )
	unsigned char                                      SavedActiveSkillOption[ 0x4 ];                    		// 0x03BD (0x0004) [0x0000000000310000]              ( CPF_Travel )
	unsigned char                                      bRepNotifySavedSkillOption;                       		// 0x03C1 (0x0001) [0x0000000000350000]              ( CPF_Travel | CPF_GlobalConfig )
	unsigned char                                      RepNotifyApplyInstanceItem;                       		// 0x03C2 (0x0001) [0x0000000000360019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_EditConst | CPF_GlobalConfig )
	unsigned char                                      RepNotifyAcceptSkillList;                         		// 0x03C3 (0x0001) [0x0000000000370000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	unsigned char                                      RepNotifyCoolTime;                                		// 0x03C4 (0x0001) [0x0000000000380000]              ( CPF_Component )
	unsigned char                                      NotifySkillReset;                                 		// 0x03C5 (0x0001) [0x0000000000390019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_Component )
	unsigned char                                      MilitaryClass;                                    		// 0x03C6 (0x0001) [0x00000000003A0019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_EditConst | CPF_Component )
	unsigned char                                      SortOrder;                                        		// 0x03C7 (0x0001) [0x0000000000000000]              
	unsigned char                                      ChampionshipIndex;                                		// 0x03C8 (0x0001) [0x00000000003B003E]              ( CPF_Const | CPF_Input | CPF_ExportObject | CPF_OptionalParm | CPF_Net | CPF_Travel | CPF_EditConst | CPF_Component )
	unsigned char                                      AccountGrade;                                     		// 0x03C9 (0x0001) [0x0000000000000000]              
	unsigned char                                      WinRounds;                                        		// 0x03CA (0x0001) [0x0000000000000000]              
	unsigned char                                      LoseRounds;                                       		// 0x03CB (0x0001) [0x0000000000000000]              
	unsigned char                                      ActionAchievement[ 0xA ];                         		// 0x03CC (0x000A) [0x00000000003C0048]              ( CPF_ExportObject | CPF_EditConstArray | CPF_GlobalConfig | CPF_Component )
	unsigned char                                      ActionAchievement_StartIndex;                     		// 0x03D6 (0x0001) [0x0000000000000000]              
	unsigned char                                      ActionAchievement_EndIndex;                       		// 0x03D7 (0x0001) [0x0000000000460048]              ( CPF_ExportObject | CPF_EditConstArray | CPF_EditConst | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              RankExp;                                          		// 0x03D8 (0x0004) [0x0000000000470019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     RankName;                                         		// 0x03DC (0x0010) [0x0000000000000000]              
	struct FString                                     RankBigIconName;                                  		// 0x03EC (0x0010) [0x0000000000000000]              
	struct FString                                     RankSmallIconName;                                		// 0x03FC (0x0010) [0x0000000000000000]              
	int                                                RankBigIconImageID;                               		// 0x040C (0x0004) [0x0000000000000000]              
	int                                                RankSmallIconImageID;                             		// 0x0410 (0x0004) [0x0000000000000000]              
	struct FString                                     OldRankBigIconName;                               		// 0x0414 (0x0010) [0x0000000000000000]              
	int                                                OldRankBigIconImageID;                            		// 0x0424 (0x0004) [0x0000000000000000]              
	class UCombatClassSystem*                          CombatClassSystem;                                		// 0x0428 (0x0008) [0x0000000000000000]              
	class UCombatSkillManager*                         SkillManager;                                     		// 0x0430 (0x0008) [0x0000000000000000]              
	class UCombatInstanceItemManager*                  InstanceItemManager;                              		// 0x0438 (0x0008) [0x0000000000000000]              
	struct FString                                     SkillManagerClassName;                            		// 0x0440 (0x0010) [0x0000000000000000]              
	class UClass*                                      InstanceItems[ 0x4 ];                             		// 0x0450 (0x0020) [0x0000000000480019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Component | CPF_NeedCtorLink )
	int                                                AcceptSkillItemIndexList[ 0x10 ];                 		// 0x0470 (0x0040) [0x00000000004C0000]              ( CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink )
	int                                                RepNotifyPassiveSkillIndex;                       		// 0x04B0 (0x0004) [0x00000000005C0019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink )
	struct FString                                     SkillCoolTimeCodeName;                            		// 0x04B4 (0x0010) [0x00000000005D0000]              ( CPF_Travel | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FString >                           CharClassInfoData;                                		// 0x04C4 (0x0010) [0x0000000000000000]              
	class UClass*                                      CurrCharClassInfo;                                		// 0x04D4 (0x0008) [0x00000000005E003E]              ( CPF_Const | CPF_Input | CPF_ExportObject | CPF_OptionalParm | CPF_Net | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink )
	int                                                RepChaFXUpperItemID;                              		// 0x04DC (0x0004) [0x00000000005F0019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink )
	int                                                RepChaFXFootItemID;                               		// 0x04E0 (0x0004) [0x0000000000600019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_NeedCtorLink )
	class UClass*                                      CharFXUpperItemClass;                             		// 0x04E4 (0x0008) [0x0000000000000000]              
	class UClass*                                      CharFXFootItemClass;                              		// 0x04EC (0x0008) [0x0000000000000000]              
	int                                                RepC4TimeReduceItemID;                            		// 0x04F4 (0x0004) [0x0000000000610019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_NeedCtorLink )
	class UClass*                                      C4TimeReduceItemClass;                            		// 0x04F8 (0x0008) [0x0000000000000000]              
	int                                                ClanID;                                           		// 0x0500 (0x0004) [0x0000000000000000]              
	int                                                PingWarnningCount;                                		// 0x0504 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1995 ];

		return pClassPointer;
	};

	void OnSurrendChangeTeam ( );
	void GameSurrenderResult ( );
	void GameSurrendReplyUpdate ( );
	void GameSurrenderReply ( );
	void GameSurrenderFailed ( );
	void GameSurrender ( );
	void GameSurrenderRequest ( );
	void eventNotifyCurrentGameKillCount ( );
	void eventPushActionAchievementMsg ( );
	void DropCTFFlag ( );
	void IsHaveCTFFlag ( );
	void SetPlayerTeam ( );
	void SetCharClassInfoData ( );
	void SaveLastKillTime ( );
	void GetSpecialScore ( );
	void eventIncrementAssists ( );
	void TestLoadC4TimeReduceItem ( );
	void GetRefItem ( );
	void LoadC4TimeReduceItem ( );
	void RecvC4TimeReduceItemIDFromLobby ( );
	void LoadChaFXFootItem ( );
	void LoadChaFXUpperItem ( );
	void RecvChaFXItemInfoFromLobby ( );
	void NotifyCreateSkill ( );
	void NotifySetTestMode ( );
	void NotifyRemoveAllSkill ( );
	void ServerStartUseSkill ( );
	void ServerBuySkill ( );
	void ServerUnlockClass ( );
	void NotifySelectedMilitaryClass ( );
	void NotifyRankUp ( );
	void eventAddRankExp ( );
	void AddMissionScore ( );
	void AddScore ( );
	void ForcedSelecetedPosition ( );
	void ForcedSelecetPosition ( );
	void AddAcceptSkillList ( );
	void NotifySkillItemIndex ( );
	void NotifyGearSetItem ( );
	void EmptyGearSetItem ( );
	void CreateGearSetItemIndex ( );
	void CreateGearSet ( );
	void NotifySetCooltime ( );
	void NotifyChangeSkillGroupNum ( );
	void NotifyChangedSkillOption ( );
	void ClientChampionshipPlayer ( );
	void UpdateActionAchievement ( );
	void CheckInGameSteamAchivements ( );
	void IncreaseHeadShotCount ( );
	void IncreaseSuicideCount ( );
	void eventReplicatedEvent ( );
	void ServerToggleChaItemFX ( );
	void IsChampionshipObserver ( );
	void IsChampionshipTarget ( );
	void IsChampionshipPlayer ( );
	void UpdateRankSmallIconName ( );
	void UpdateRankBigIconName ( );
	void UpdateRankName ( );
	void GetRankExp ( );
	void GetRank ( );
	void GetRankSmallIconImageID ( );
	void GetRankBigIconImageID ( );
	void GetRankSmallIconName ( );
	void GetRankBigIconName ( );
	void GetRankName ( );
	void CopyProperties ( );
	void OverrideWith ( );
	void IncrementKills ( );
	void IncrementDeaths ( );
	void CanChangeCR ( );
	void NotifyChangedCR ( );
	void eventChangeCR ( );
	void GetPRIFromPlayerName ( );
	void GetPRIFromPlayerId ( );
	void CheckValidUserID ( );
	void eventTick ( );
	void GetInstanceItemManager ( );
	void CreateClassSystem ( );
	void CreateRewardData ( );
	void UpdatePreloadTexture ( );
	void eventDestroyed ( );
	void InitPawn ( );
	void CheckRepPRI ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatPlayerReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatAIModePRI
// 0x0014 (0x051C - 0x0508)
class ACombatAIModePRI : public ACombatPlayerReplicationInfo
{
public:
	int                                                LifeCount;                                        		// 0x0508 (0x0004) [0x000000000062000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink )
	int                                                MaxLifeCount;                                     		// 0x050C (0x0004) [0x0000000000630000]              ( CPF_Travel | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bGiveRewardLife : 1;                              		// 0x0510 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                ConsecutiveCombo;                                 		// 0x0514 (0x0004) [0x0000000000000000]              
	int                                                CurrentStep;                                      		// 0x0518 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1996 ];

		return pClassPointer;
	};

	void ClientForceGarbageCollection ( );
	void OnWaveEnd ( );
	void SetPauseComboTimer ( );
	void SetInvalidComboTimer ( );
	void UpdateKillCombo ( );
	void IncrementKills ( );
	void DecrementLifeCount ( );
	void IncrementLifeCount ( );
	void HasLifeCount ( );
};

UClass* ACombatAIModePRI::pClassPointer = NULL;

// Class CombatGame.CombatBusterModePRI
// 0x0004 (0x050C - 0x0508)
class ACombatBusterModePRI : public ACombatPlayerReplicationInfo
{
public:
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0508 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatBusterModePRI.BusterDamage
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x050A (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatBusterModePRI.LastBusterDamage

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1997 ];

		return pClassPointer;
	};

	void GetSpecialScore ( );
	void DisplayScore ( );
	void eventReplicatedEvent ( );
	void AddMissionScore ( );
	void Reset ( );
};

UClass* ACombatBusterModePRI::pClassPointer = NULL;

// Class CombatGame.CombatDemModePRI
// 0x000C (0x0514 - 0x0508)
class ACombatDemModePRI : public ACombatPlayerReplicationInfo
{
public:
	unsigned long                                      bHasBomb : 1;                                     		// 0x0508 (0x0004) [0x0000000000620000] [0x00000001] ( CPF_EditConst | CPF_NeedCtorLink )
	int                                                BombPlantedCount;                                 		// 0x050C (0x0004) [0x0000000000630000]              ( CPF_Travel | CPF_EditConst | CPF_NeedCtorLink )
	int                                                BombDefusedCount;                                 		// 0x0510 (0x0004) [0x0000000000640000]              ( CPF_GlobalConfig | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1998 ];

		return pClassPointer;
	};

	void GetSpecialScore ( );
	void IncrementDefusedCount ( );
	void IncrementPlantedCount ( );
	void SetBomb ( );
	void eventHasBomb ( );
	void CheckSteamDefuseAchivement ( );
	void eventReplicatedEvent ( );
	void Reset ( );
	void CopyProperties ( );
};

UClass* ACombatDemModePRI::pClassPointer = NULL;

// Class CombatGame.CombatLCTFModePRI
// 0x0022 (0x052A - 0x0508)
class ACombatLCTFModePRI : public ACombatPlayerReplicationInfo
{
public:
	class ACombatLCTFFlagActor*                        CTFFlag;                                          		// 0x0508 (0x0008) [0x0000000000000000]              
	int                                                TakeCount;                                        		// 0x0510 (0x0004) [0x0000000000000000]              
	TArray< struct FLimitAddScoreCountStruct >         AddScoreCountList;                                		// 0x0514 (0x0010) [0x0000000000000000]              
	unsigned long                                      bHaveCTFFlag : 1;                                 		// 0x0524 (0x0004) [0x0000000000620000] [0x00000001] ( CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bFirstExtortion : 1;                              		// 0x0524 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0528 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatLCTFModePRI.TotalCTFScore

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1999 ];

		return pClassPointer;
	};

	void GetSpecialScore ( );
	void AddMissionScore ( );
	void DisplayScore ( );
	void eventDisplayFirstExtortion ( );
	void InitTakeCount ( );
	void DropCTFFlag ( );
	void ReturnToHomeCTFFlag ( );
	void IsHaveCTFFlag ( );
	void IsFirstExtortion ( );
	void SetHaveCTFFlag ( );
	void AddScoreCount ( );
	void IsAddScore ( );
	void ResetScoreCount ( );
	void Reset ( );
};

UClass* ACombatLCTFModePRI::pClassPointer = NULL;

// Class CombatGame.CombatSEIModePRI
// 0x0008 (0x0510 - 0x0508)
class ACombatSEIModePRI : public ACombatPlayerReplicationInfo
{
public:
	int                                                OccupyingAreaID;                                  		// 0x0508 (0x0004) [0x0000000000620000]              ( CPF_EditConst | CPF_NeedCtorLink )
	int                                                OccupationScore;                                  		// 0x050C (0x0004) [0x0000000000630019]              ( CPF_Edit | CPF_ExportObject | CPF_OptionalParm | CPF_Travel | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2000 ];

		return pClassPointer;
	};

	void GetSpecialScore ( );
	void AddMissionScore ( );
	void AddScore ( );
	void Reset ( );
};

UClass* ACombatSEIModePRI::pClassPointer = NULL;

// Class CombatGame.CombatTDMMeleeModePRI
// 0x0004 (0x050C - 0x0508)
class ACombatTDMMeleeModePRI : public ACombatPlayerReplicationInfo
{
public:
	unsigned long                                      bHasSpecialWeapon : 1;                            		// 0x0508 (0x0004) [0x0000000000620000] [0x00000001] ( CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bLastHasSpecialWeapon : 1;                        		// 0x0508 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2001 ];

		return pClassPointer;
	};

	void InitPawn ( );
	void eventHasSpecialWeapon ( );
	void SetSpecialWeapon ( );
	void eventReplicatedEvent ( );
	void Reset ( );
};

UClass* ACombatTDMMeleeModePRI::pClassPointer = NULL;

// Class CombatGame.CombatTeamOwnedInfo
// 0x0008 (0x024C - 0x0244)
class ACombatTeamOwnedInfo : public AReplicationInfo
{
public:
	class ATeamInfo*                                   Team;                                             		// 0x0244 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2002 ];

		return pClassPointer;
	};

	void GetTeamNum ( );
};

UClass* ACombatTeamOwnedInfo::pClassPointer = NULL;

// Class CombatGame.CombatSquadAI
// 0x0048 (0x0294 - 0x024C)
class ACombatSquadAI : public ACombatTeamOwnedInfo
{
public:
	class ANavigationPoint*                            RouteObjective;                                   		// 0x024C (0x0008) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  ObjectiveRouteCache;                              		// 0x0254 (0x0010) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  PreviousObjectiveRouteCache;                      		// 0x0264 (0x0010) [0x0000000000000000]              
	class ACombatBot*                                  PendingSquadRouteMaker;                           		// 0x0274 (0x0008) [0x0000000000000000]              
	int                                                SquadRouteIteration;                              		// 0x027C (0x0004) [0x0000000000000000]              
	TArray< struct FAlternateRoute >                   SquadRoutes;                                      		// 0x0280 (0x0010) [0x0000000000000000]              
	int                                                MaxSquadRoutes;                                   		// 0x0290 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2003 ];

		return pClassPointer;
	};

};

UClass* ACombatSquadAI::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatMovementOnlyNode
// 0x0004 (0x00C4 - 0x00C0)
class UCCSBTCombatMovementOnlyNode : public UGripBTBooleanCondition
{
public:
	unsigned long                                      bClearEnemy : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2004 ];

		return pClassPointer;
	};

};

UClass* UCCSBTCombatMovementOnlyNode::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatTargetExistence
// 0x0005 (0x00C5 - 0x00C0)
class UCCSBTCombatTargetExistence : public UGripBTBooleanCondition
{
public:
	unsigned long                                      CurrentTarget : 1;                                		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ClosestEnemy : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      VisibleEnemy : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      LowestLKPAgeEnemy : 1;                            		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      EnemyAware : 1;                                   		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      CheckMethod;                                      		// 0x00C4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2005 ];

		return pClassPointer;
	};

};

UClass* UCCSBTCombatTargetExistence::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatTargetLost
// 0x0000 (0x00BC - 0x00BC)
class UCCSBTCombatTargetLost : public UGripBTNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2006 ];

		return pClassPointer;
	};

};

UClass* UCCSBTCombatTargetLost::pClassPointer = NULL;

// Class CombatGame.CCSBTActionWhileMoving
// 0x0007 (0x00CA - 0x00C3)
class UCCSBTActionWhileMoving : public UCCSBTMoveTo
{
public:
	float                                              DelayBetweenBursts;                               		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned char                                      Target;                                           		// 0x00C8 (0x0001) [0x0000000000000000]              
	unsigned char                                      Action;                                           		// 0x00C9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2007 ];

		return pClassPointer;
	};

};

UClass* UCCSBTActionWhileMoving::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatPatrol
// 0x0009 (0x00CD - 0x00C4)
class UCCSBTCombatPatrol : public UCCSBTMoveToActor
{
public:
	float                                              TargetSelectionCycleTime;                         		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              VisibleRange;                                     		// 0x00C8 (0x0004) [0x0000000000000000]              
	unsigned char                                      TargetSelectionAlgorithm;                         		// 0x00CC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2008 ];

		return pClassPointer;
	};

};

UClass* UCCSBTCombatPatrol::pClassPointer = NULL;

// Class CombatGame.CombatAIManager
// 0x0074 (0x02C0 - 0x024C)
class ACombatAIManager : public AGripAIManagerHolder
{
public:
	TArray< struct FAITypeInfo >                       AITypeList;                                       		// 0x024C (0x0010) [0x0000000000000000]              
	struct FString                                     DefaultBotControllerClassName;                    		// 0x025C (0x0010) [0x0000000000000000]              
	unsigned long                                      bUseFlocking : 1;                                 		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 
	class UCombatFlocking*                             FlockingObj;                                      		// 0x0270 (0x0008) [0x0000000000000000]              
	class ACombatGame*                                 GameInfo;                                         		// 0x0278 (0x0008) [0x0000000000000000]              
	class UClass*                                      DefaultBotControllerClass;                        		// 0x0280 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           DebugCategoryList;                                		// 0x0288 (0x0010) [0x0000000000000000]              
	class ACombatGuy_NPC*                              CurDebugTarget;                                   		// 0x0298 (0x0008) [0x0000000000000000]              
	TArray< class ACombatBotController* >              BotList;                                          		// 0x02A0 (0x0010) [0x0000000000000000]              
	TArray< class AAIBeacon* >                         AIBeaconArray;                                    		// 0x02B0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2009 ];

		return pClassPointer;
	};

	void DisplayDebug ( );
	void RemoveDebugCategory ( );
	void AddDebugCategory ( );
	void ToggleDebugCategory ( );
	void NextDebugTarget ( );
	void PrevDebugTarget ( );
	void TraceDebugTarget ( );
	void UnRegisterAI ( );
	void RegisterAI ( );
	void ForceNetRelevant ( );
	void SpawnBot ( );
	void GetBTTree ( );
	void GetWeaponClass ( );
	void GetControllerClass ( );
	void GetPawnClass ( );
	void ResetAIBeacons ( );
	void PostBeginPlay ( );
};

UClass* ACombatAIManager::pClassPointer = NULL;

// Class CombatGame.CombatPatrolPoint
// 0x0004 (0x0340 - 0x033C)
class ACombatPatrolPoint : public ANavigationPoint
{
public:
	int                                                Priority;                                         		// 0x033C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2010 ];

		return pClassPointer;
	};

};

UClass* ACombatPatrolPoint::pClassPointer = NULL;

// Class CombatGame.Path_AvoidActor
// 0x0008 (0x0074 - 0x006C)
class UPath_AvoidActor : public UPathConstraint
{
public:
	class AActor*                                      AvoidTarget;                                      		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2011 ];

		return pClassPointer;
	};

	void AvoidActor ( );
};

UClass* UPath_AvoidActor::pClassPointer = NULL;

// Class CombatGame.ParticleModuleKillVolume
// 0x0081 (0x00E9 - 0x0068)
class UParticleModuleKillVolume : public UParticleModuleKillBase
{
public:
	struct FString                                     VolumeName;                                       		// 0x0068 (0x0010) [0x0000000000000000]              
	struct FRawDistributionVector                      LowerLeftCorner;                                  		// 0x0078 (0x0024) [0x0000000000000000]              
	struct FRawDistributionVector                      UpperRightCorner;                                 		// 0x009C (0x0024) [0x0000000000000000]              
	struct FRawDistributionFloat                       Height;                                           		// 0x00C0 (0x0024) [0x0000000000000000]              
	unsigned long                                      bAbsolute : 1;                                    		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bKillInside : 1;                                  		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAxisAlignedAndFixedSize : 1;                     		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFloor : 1;                                       		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bApplyPSysScale : 1;                              		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      KillVolumeType;                                   		// 0x00E8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2012 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleKillVolume::pClassPointer = NULL;

// Class CombatGame.ParticleModuleRadialBlur
// 0x007C (0x0130 - 0x00B4)
class UParticleModuleRadialBlur : public UParticleModuleLocationPrimitiveBase
{
public:
	class UMaterialInterface*                          OpacityMaterial;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FRawDistributionFloat                       BlurScale;                                        		// 0x00BC (0x0024) [0x0000000000000000]              
	struct FRawDistributionFloat                       BlurFalloffExponent;                              		// 0x00E0 (0x0024) [0x0000000000000000]              
	struct FRawDistributionFloat                       BlurOpacity;                                      		// 0x0104 (0x0024) [0x0000000000000000]              
	float                                              MaxCullDistance;                                  		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              DistanceFalloffExponent;                          		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2013 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRadialBlur::pClassPointer = NULL;

// Class CombatGame.CombatSplineActor
// 0x002C (0x02D8 - 0x02AC)
class ACombatSplineActor : public ASplineActor
{
public:
	unsigned long                                      bSpawnPoint : 1;                                  		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMovementOnly : 1;                                		// 0x02AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFixedTrack : 1;                                  		// 0x02AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSkipDestroy : 1;                                 		// 0x02AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAddedSplineActorList : 1;                        		// 0x02AC (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              MovementSpeedModifier;                            		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              WaitingPeriod;                                    		// 0x02B4 (0x0004) [0x0000000000000000]              
	struct FColor                                      DefaultPointColor;                                		// 0x02B8 (0x0004) [0x0000000000000000]              
	struct FColor                                      WaitingPointColor;                                		// 0x02BC (0x0004) [0x0000000000000000]              
	struct FColor                                      MovementPointColor;                               		// 0x02C0 (0x0004) [0x0000000000000000]              
	unsigned char                                      TeamIndex;                                        		// 0x02C4 (0x0001) [0x0000000000000000]              
	unsigned char                                      MovementSpeedType;                                		// 0x02C5 (0x0001) [0x0000000000000000]              
	unsigned char                                      SPawnActorType;                                   		// 0x02C6 (0x0001) [0x0000000000000000]              
	class USpriteComponent*                            SpriteComp;                                       		// 0x02C8 (0x0008) [0x0000000000000000]              
	class UDrawSphereComponent*                        SphereComp;                                       		// 0x02D0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2014 ];

		return pClassPointer;
	};

	void eventScriptGetTeamNum ( );
	void GetNearestSplineActor ( );
	void GetSpawnSplineActor ( );
	void FindCirculationList ( );
	void IsDisableDestination ( );
	void InitSplineActorList ( );
};

UClass* ACombatSplineActor::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatBusterActor
// 0x0000 (0x00B0 - 0x00B0)
class UActorFactoryCombatBusterActor : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41111 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatBusterActor::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatDestructibleSMActor
// 0x0000 (0x00B0 - 0x00B0)
class UActorFactoryCombatDestructibleSMActor : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41113 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatDestructibleSMActor::pClassPointer = NULL;

// Class CombatGame.CombatDestructibleSMActor
// 0x001A (0x026C - 0x0252)
class ACombatDestructibleSMActor : public ACombatStaticMeshActor
{
public:
	TArray< struct FMeshInfo >                         MeshInfoList;                                     		// 0x0254 (0x0010) [0x0000000000000000]              
	unsigned char                                      CurrentMeshInfoIndex;                             		// 0x0264 (0x0001) [0x0000000000000000]              
	int                                                CurrentDamage;                                    		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41115 ];

		return pClassPointer;
	};

	void eventForceNetRelevant ( );
	void UpdateMesh ( );
	void GetMeshInfoIndex ( );
	void eventSetMeshInfo ( );
	void TakeDamage ( );
	void Reset ( );
};

UClass* ACombatDestructibleSMActor::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatGroupStart
// 0x0000 (0x009C - 0x009C)
class UActorFactoryCombatGroupStart : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41116 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatGroupStart::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatMapPoint
// 0x0000 (0x009C - 0x009C)
class UActorFactoryCombatMapPoint : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41118 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatMapPoint::pClassPointer = NULL;

// Class CombatGame.CombatMapPoint
// 0x0014 (0x0258 - 0x0244)
class ACombatMapPoint : public AActor
{
public:
	unsigned char                                      iconType;                                         		// 0x0244 (0x0001) [0x0000000000000000]              
	int                                                DesStringID;                                      		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                Priority;                                         		// 0x024C (0x0004) [0x0000000000000000]              
	struct FName                                       MapPointName;                                     		// 0x0250 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41120 ];

		return pClassPointer;
	};

	void eventForceNetRelevant ( );
};

UClass* ACombatMapPoint::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatSplineActor
// 0x0000 (0x009C - 0x009C)
class UActorFactoryCombatSplineActor : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41121 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatSplineActor::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatStaticMesh
// 0x0000 (0x00B0 - 0x00B0)
class UActorFactoryCombatStaticMesh : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41123 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatStaticMesh::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatTeamStart
// 0x0000 (0x009C - 0x009C)
class UActorFactoryCombatTeamStart : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41125 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatTeamStart::pClassPointer = NULL;

// Class CombatGame.ActorFactorySplineActor
// 0x0000 (0x009C - 0x009C)
class UActorFactorySplineActor : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41128 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySplineActor::pClassPointer = NULL;

// Class CombatGame.CombatOnlineMetaphors
// 0x0098 (0x00F8 - 0x0060)
class UCombatOnlineMetaphors : public UObject
{
public:
	float                                              BUFF_ADDMAINAMMO_MIN;                             		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              BUFF_ADDMAINAMMO_MAX;                             		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              BUFF_ADDSUBAMMO_MIN;                              		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              BUFF_ADDSUBAMMO_MAX;                              		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              BUFF_RELOADING_RATE_MIN;                          		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              BUFF_RELOADING_RATE_MAX;                          		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              BUFF_WEAPONCHANGE_RATE_MIN;                       		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              BUFF_WEAPONCHANGE_RATE_MAX;                       		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              BUFF_MAXAUTOCUREHEALTH_MIN;                       		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              BUFF_MAXAUTOCUREHEALTH_MAX;                       		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              BUFF_HEALTHCURE_RATE_MIN;                         		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              BUFF_HEALTHCURE_RATE_MAX;                         		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              BUFF_CROUCHSPEED_RATE_MIN;                        		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              BUFF_CROUCHSPEED_RATE_MAX;                        		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              BUFF_FPSSPEED_RATE_MIN;                           		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              BUFF_FPSSPEED_RATE_MAX;                           		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              BUFF_ACCELATION_RATE_MIN;                         		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              BUFF_ACCELATION_RATE_MAX;                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              BUFF_RUNSPEED_RATE_MIN;                           		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              BUFF_RUNSPEED_RATE_MAX;                           		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              BUFF_SPRINTSPEED_RATE_MIN;                        		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              BUFF_SPRINTSPEED_RATE_MAX;                        		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              BUFF_DETAILEDRADAR_DISTANCE_MIN;                  		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              BUFF_DETAILEDRADAR_DISTANCE_MAX;                  		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              BUFF_RADAR_RANGE_MIN;                             		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              BUFF_RADAR_RANGE_MAX;                             		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              BUFF_GUNATTACK_RATE_MIN;                          		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              BUFF_GUNATTACK_RATE_MAX;                          		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              BUFF_GUNGUARD_RATE_MIN;                           		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              BUFF_GUNGUARD_RATE_MAX;                           		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              BUFF_MELEEATTACK_RATE_MIN;                        		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              BUFF_MELEEATTACK_RATE_MAX;                        		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              BUFF_MELEEGUARD_RATE_MIN;                         		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              BUFF_MELEEGUARD_RATE_MAX;                         		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              BUFF_EXPLOSIVEATTACK_RATE_MIN;                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              BUFF_EXPLOSIVEATTACK_RATE_MAX;                    		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              BUFF_EXPLOSIVEGUARD_RATE_MIN;                     		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              BUFF_EXPLOSIVEGUARD_RATE_MAX;                     		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41140 ];

		return pClassPointer;
	};

	void CATEGORY_CLAN ( );
	void IsGearSetSlotIndex ( );
	void IsWeaponBySlotIndex ( );
};

UClass* UCombatOnlineMetaphors::pClassPointer = NULL;

// Class CombatGame.ActorFactroyCombatLCTFFlagActor
// 0x0000 (0x009C - 0x009C)
class UActorFactroyCombatLCTFFlagActor : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41390 ];

		return pClassPointer;
	};

};

UClass* UActorFactroyCombatLCTFFlagActor::pClassPointer = NULL;

// Class CombatGame.ActorFactroyCombatLCTFFlagPoint
// 0x0000 (0x009C - 0x009C)
class UActorFactroyCombatLCTFFlagPoint : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41392 ];

		return pClassPointer;
	};

};

UClass* UActorFactroyCombatLCTFFlagPoint::pClassPointer = NULL;

// Class CombatGame.ActorFactroyCombatPlayerStartGroup
// 0x0000 (0x009C - 0x009C)
class UActorFactroyCombatPlayerStartGroup : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41394 ];

		return pClassPointer;
	};

};

UClass* UActorFactroyCombatPlayerStartGroup::pClassPointer = NULL;

// Class CombatGame.AIDebugCameraController
// 0x0098 (0x0830 - 0x0798)
class AAIDebugCameraController : public ADebugCameraController
{
public:
	class ACombatAIManager*                            AIManager;                                        		// 0x0798 (0x0008) [0x0000000000000000]              
	class ACombatPawn*                                 SelectedPawn;                                     		// 0x07A0 (0x0008) [0x0000000000000000]              
	unsigned char                                      CameraType;                                       		// 0x07A8 (0x0001) [0x0000000000000000]              
	struct FName                                       PCCameraType;                                     		// 0x07AC (0x0008) [0x0000000000000000]              
	unsigned long                                      bPressUp : 1;                                     		// 0x07B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPressDown : 1;                                   		// 0x07B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPressLeft : 1;                                   		// 0x07B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPressRight : 1;                                  		// 0x07B4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x07B8 (0x0008) MISSED OFFSET
	struct FMatrix                                     RelativeRotMat;                                   		// 0x07C0 (0x0040) [0x0000000000000000]              
	struct FVector                                     RelativeLoc;                                      		// 0x0800 (0x000C) [0x0000000000000000]              
	float                                              RelativeDist;                                     		// 0x080C (0x0004) [0x0000000000000000]              
	float                                              RelativeDistZ;                                    		// 0x0810 (0x0004) [0x0000000000000000]              
	struct FRotator                                    RelativeRot;                                      		// 0x0814 (0x000C) [0x0000000000000000]              
	TArray< struct FString >                           DebugCategories;                                  		// 0x0820 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41427 ];

		return pClassPointer;
	};

	void NextSelectAI ( );
	void PrevSelectAI ( );
	void ToggleCamera ( );
	void TogglePCMesh ( );
	void SelectPawn ( );
	void SelectPC ( );
	void ClearKeyInput ( );
	void NativeInputKey ( );
	void OnDeactivate ( );
	void OnActivate ( );
};

UClass* AAIDebugCameraController::pClassPointer = NULL;

// Class CombatGame.CameraLocationPoint
// 0x0168 (0x03AC - 0x0244)
class ACameraLocationPoint : public AActor
{
public:
	float                                              CameraActorFOV;                                   		// 0x0244 (0x0004) [0x0000000000000000]              
	struct FPostProcessSettings                        CameraActorOverridePostProcess;                   		// 0x0248 (0x0164) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41523 ];

		return pClassPointer;
	};

};

UClass* ACameraLocationPoint::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByFall
// 0x0000 (0x015C - 0x015C)
class UCBAnimBlendByFall : public UCombatAnimBlendByFall
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41545 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByFall::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByIdle
// 0x0000 (0x015C - 0x015C)
class UCBAnimBlendByIdle : public UCombatAnimBlendByIdle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41556 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByIdle::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByPhysics
// 0x0003 (0x0180 - 0x017D)
class UCBAnimBlendByPhysics : public UCombatAnimBlendByPhysics
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41561 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByPhysics::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByPosture
// 0x0000 (0x0144 - 0x0144)
class UCBAnimBlendByPosture : public UCombatAnimBlendByPosture
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41564 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByPosture::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendBySlotActive
// 0x0000 (0x014C - 0x014C)
class UCBAnimBlendBySlotActive : public UCombatAnimBlendBySlotActive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41569 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendBySlotActive::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByWeapType
// 0x0000 (0x0144 - 0x0144)
class UCBAnimBlendByWeapType : public UCombatAnimBlendByWeapType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41571 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByWeapType::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeFramePlayer
// 0x0000 (0x0158 - 0x0158)
class UCBAnimNodeFramePlayer : public UCombatAnimNodeFramePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41578 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeFramePlayer::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeJumpLeanOffset
// 0x0000 (0x01A0 - 0x01A0)
class UCBAnimNodeJumpLeanOffset : public UCombatAnimNodeJumpLeanOffset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41596 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeJumpLeanOffset::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeSequence
// 0x0000 (0x016C - 0x016C)
class UCBAnimNodeSequence : public UCombatAnimNodeSequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41612 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeSequence::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSequenceByBoneRotation
// 0x001C (0x0174 - 0x0158)
class UCombatAnimNodeSequenceByBoneRotation : public UAnimNodeSequence
{
public:
	struct FName                                       BoneName;                                         		// 0x0158 (0x0008) [0x0000000000000000]              
	unsigned char                                      BoneAxis;                                         		// 0x0160 (0x0001) [0x0000000000000000]              
	TArray< struct FAnimByRotation >                   AnimList;                                         		// 0x0164 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41614 ];

		return pClassPointer;
	};

	void eventOnBecomeRelevant ( );
};

UClass* UCombatAnimNodeSequenceByBoneRotation::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeSequenceByBoneRotation
// 0x0000 (0x0174 - 0x0174)
class UCBAnimNodeSequenceByBoneRotation : public UCombatAnimNodeSequenceByBoneRotation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41629 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeSequenceByBoneRotation::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeSeqWeap
// 0x0000 (0x0194 - 0x0194)
class UCBAnimNodeSeqWeap : public UCombatAnimNodeSeqWeap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41636 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeSeqWeap::pClassPointer = NULL;

// Class CombatGame.CBCharInfo
// 0x002C (0x008C - 0x0060)
class UCBCharInfo : public UObject
{
public:
	TArray< struct FCharacterInfo >                    Characters;                                       		// 0x0060 (0x0010) [0x0000000000000000]              
	TArray< class UClass* >                            Families;                                         		// 0x0070 (0x0010) [0x0000000000000000]              
	float                                              LOD1DisplayFactor;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              LOD2DisplayFactor;                                		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              LOD3DisplayFactor;                                		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41735 ];

		return pClassPointer;
	};

	void GetRandomCharClassName ( );
};

UClass* UCBCharInfo::pClassPointer = NULL;

// Class CombatGame.CombatSkill
// 0x0020 (0x0080 - 0x0060)
class UCombatSkill : public UObject
{
public:
	unsigned char                                      Skilltype;                                        		// 0x0060 (0x0001) [0x0000000000000000]              
	unsigned char                                      SkillGroup;                                       		// 0x0061 (0x0001) [0x0000000000000000]              
	class ACombatPawn*                                 SkillOwner;                                       		// 0x0064 (0x0008) [0x0000000000000000]              
	struct FString                                     SkillCodeName;                                    		// 0x006C (0x0010) [0x0000000000000000]              
	int                                                refIndex;                                         		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42248 ];

		return pClassPointer;
	};

	void SetSkillTableInfo ( );
	void Init ( );
	void DeactivateSkill ( );
	void ActivateSkill ( );
};

UClass* UCombatSkill::pClassPointer = NULL;

// Class CombatGame.CBFrontEndPlayerInput
// 0x0000 (0x02EC - 0x02EC)
class UCBFrontEndPlayerInput : public UCombatPlayerInputBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43288 ];

		return pClassPointer;
	};

	void IsReadyState ( );
	void IsShowWall ( );
	void IsInputExpired ( );
};

UClass* UCBFrontEndPlayerInput::pClassPointer = NULL;

// Class CombatGame.CombatProj_SpecialGrenade
// 0x0004 (0x03F8 - 0x03F4)
class ACombatProj_SpecialGrenade : public ACombatProj_Grenade
{
public:
	float                                              Lifetime;                                         		// 0x03F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43317 ];

		return pClassPointer;
	};

	void SpendAllTime ( );
	void ExplodedEffect ( );
	void TriggerExplosion ( );
};

UClass* ACombatProj_SpecialGrenade::pClassPointer = NULL;

// Class CombatGame.CombatProj_Decoy
// 0x0014 (0x040C - 0x03F8)
class ACombatProj_Decoy : public ACombatProj_SpecialGrenade
{
public:
	float                                              RadarExposeRange;                                 		// 0x03F8 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    EnemyAttachPSC;                                   		// 0x03FC (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    FriendlyAttachPSC;                                		// 0x0404 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43316 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void ExplodedEffect ( );
};

UClass* ACombatProj_Decoy::pClassPointer = NULL;

// Class CombatGame.CombatBombsiteVolume
// 0x0024 (0x02A4 - 0x0280)
class ACombatBombsiteVolume : public AVolume
{
public:
	struct FString                                     BombsiteName;                                     		// 0x0280 (0x0010) [0x0000000000000000]              
	unsigned char                                      MapIconType;                                      		// 0x0290 (0x0001) [0x0000000000000000]              
	class UParticleSystem*                             SiteEffect;                                       		// 0x0294 (0x0008) [0x0000000000000000]              
	float                                              SiteEffectSizeRatio;                              		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                PlantedBombID;                                    		// 0x02A0 (0x0004) [0x0000000000150000]              ( CPF_Travel | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43364 ];

		return pClassPointer;
	};

	void UnTouch ( );
	void IsBombPlanted ( );
	void GetPlantedBombID ( );
	void SetPlantedBombID ( );
	void UpdateUIState ( );
	void NotifyBombPlantInfo ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatBombsiteVolume::pClassPointer = NULL;

// Class CombatGame.Interface_MissionActor
// 0x0000 (0x0060 - 0x0060)
class UInterface_MissionActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43399 ];

		return pClassPointer;
	};

	void GetMissionActorSortPriority ( );
	void InitMissionActor ( );
};

UClass* UInterface_MissionActor::pClassPointer = NULL;

// Class CombatGame.CombatTDMMovie
// 0x000C (0x0A80 - 0x0A74)
class UCombatTDMMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_PickupItemContainer*              PickupItemContainer;                              		// 0x0A74 (0x0008) [0x0000000000000000]              
	int                                                PickupLocatorNum;                                 		// 0x0A7C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43414 ];

		return pClassPointer;
	};

	void SetVisiblePickupLocator ( );
	void UpdatePickupLocator ( );
	void Tick ( );
	void UpdatePickupLocatorActor ( );
	void registerLevelObject ( );
	void RegisterGOContainer ( );
	void NotifyPickupSpecialWeaponSystemMessage ( );
	void GetRounOverPoint ( );
	void GetRoundPoint ( );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( );
};

UClass* UCombatTDMMovie::pClassPointer = NULL;

// Class CombatGame.Interface_PickupItemActor
// 0x0000 (0x0060 - 0x0060)
class UInterface_PickupItemActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43419 ];

		return pClassPointer;
	};

	void IsDisplayLocator ( );
	void InvalidatePickup ( );
	void ValidPickup ( );
};

UClass* UInterface_PickupItemActor::pClassPointer = NULL;

// Class CombatGame.GamePlayEvent_KillData
// 0x0000 (0x03E0 - 0x03E0)
class AGamePlayEvent_KillData : public AGamePlayEvent_Kill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43435 ];

		return pClassPointer;
	};

	void SetRegisterList ( );
};

UClass* AGamePlayEvent_KillData::pClassPointer = NULL;

// Class CombatGame.SeqEvent_InGameClientEvent
// 0x0009 (0x0131 - 0x0128)
class USeqEvent_InGameClientEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                        		// 0x0128 (0x0008) [0x0000000000000000]              
	unsigned char                                      TeamIndex;                                        		// 0x0130 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43610 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_InGameClientEvent::pClassPointer = NULL;

// Class CombatGame.CBGunMuzzleFlashLight
// 0x0020 (0x028C - 0x026C)
class UCBGunMuzzleFlashLight : public UCombatExplosionLight
{
public:
	TArray< struct FLightValues >                      RedTeamTimeShift;                                 		// 0x026C (0x0010) [0x0000000000000000]              
	TArray< struct FLightValues >                      BlueTeamTimeShift;                                		// 0x027C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43636 ];

		return pClassPointer;
	};

	void SetTeam ( );
};

UClass* UCBGunMuzzleFlashLight::pClassPointer = NULL;

// Class CombatGame.CBGunLowDetailMuzzleFlashLight
// 0x0000 (0x028C - 0x028C)
class UCBGunLowDetailMuzzleFlashLight : public UCBGunMuzzleFlashLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43644 ];

		return pClassPointer;
	};

};

UClass* UCBGunLowDetailMuzzleFlashLight::pClassPointer = NULL;

// Class CombatGame.CombatActiveSkill
// 0x0048 (0x00C8 - 0x0080)
class UCombatActiveSkill : public UCombatSkill
{
public:
	TArray< struct FGivenWeaponInfo >                  GivenWeaponClassName;                             		// 0x0080 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           GivenWeaponClassNameOnFinished;                   		// 0x0090 (0x0010) [0x0000000000000000]              
	unsigned long                                      bDiscardInventoryOnFinished : 1;                  		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bActivatedSkill : 1;                              		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FString >                           StartUpResources;                                 		// 0x00A4 (0x0010) [0x0000000000000000]              
	struct FName                                       ActiveActionVoiceName;                            		// 0x00B4 (0x0008) [0x0000000000000000]              
	int                                                WeaponIndex;                                      		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FName                                       ActiveSkillType;                                  		// 0x00C0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44067 ];

		return pClassPointer;
	};

	void GetWeaponClassName ( );
	void GetPawnClassName ( );
	void GetCachedResourceNameList ( );
	void GiveWeapon ( );
	void Use ( );
	void PendingUse ( );
	void DeactivateSkill ( );
	void PlayActiveActionVoice ( );
	void ActivateSkill ( );
};

UClass* UCombatActiveSkill::pClassPointer = NULL;

// Class CombatGame.CombatSkill_SentryGun
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_SentryGun : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44066 ];

		return pClassPointer;
	};

	void Use ( );
};

UClass* UCombatSkill_SentryGun::pClassPointer = NULL;

// Class CombatGame.CombatSkill_TrophyTurret
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_TrophyTurret : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44069 ];

		return pClassPointer;
	};

	void Use ( );
	void LoadTrophyTurretPawnClass ( );
};

UClass* UCombatSkill_TrophyTurret::pClassPointer = NULL;

// Class CombatGame.CombatItemFXBase
// 0x0020 (0x0080 - 0x0060)
class UCombatItemFXBase : public UObject
{
public:
	struct FSItemFX                                    ItemFX[ 0x2 ];                                    		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44071 ];

		return pClassPointer;
	};

	void LoadFX ( );
	void ClearFX ( );
	void UpdateFX ( );
};

UClass* UCombatItemFXBase::pClassPointer = NULL;

// Class CombatGame.CombatHUD_IFFObject
// 0x0094 (0x0150 - 0x00BC)
class UCombatHUD_IFFObject : public UCombatHUDComponent_Base
{
public:
	class UCombatHUD_IFFContainer*                     Container;                                        		// 0x00BC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BombMC;                                           		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  RadioMC;                                          		// 0x00CC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  KillerMC;                                         		// 0x00D4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  RankIconMC;                                       		// 0x00DC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  HPMC;                                             		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  AggroMC;                                          		// 0x00EC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  FriendlyNameMC;                                   		// 0x00F4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  EnemyNameMC;                                      		// 0x00FC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  FlashIconMC;                                      		// 0x0104 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsDisplayRadio : 1;                              		// 0x010C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsDisplayKiller : 1;                             		// 0x010C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFlashIconVisible : 1;                            		// 0x010C (0x0004) [0x0000000000000000] [0x00000004] 
	struct FString                                     LastRankIcon;                                     		// 0x0110 (0x0010) [0x0000000000000000]              
	struct FString                                     LastClanName;                                     		// 0x0120 (0x0010) [0x0000000000000000]              
	int                                                LastRankIconImageID;                              		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              MinLocatorScale;                                  		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              MaxLocatorScale;                                  		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              DistanceForMinScale;                              		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              LocatorScale;                                     		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                LastLocatorScale;                                 		// 0x0144 (0x0004) [0x0000000000000000]              
	int                                                UpdateIFFHUDCallCount;                            		// 0x0148 (0x0004) [0x0000000000000000]              
	int                                                UpdateIFFHUDCallFrequency;                        		// 0x014C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44097 ];

		return pClassPointer;
	};

	void UpdateFlashEffect ( );
	void SetFlashBangVisible ( );
	void UpdateNameTextScale ( );
	void UpdateKillerIcon ( );
	void GetCurrentLocatorScale ( );
	void SetRankIcon ( );
	void SetIFFType ( );
	void UpdateIFFHUD ( );
	void Show ( );
	void Hide ( );
	void SetRankIconVisible ( );
	void SetHP ( );
	void ToggleKillerIcon ( );
	void SetKillerIconVisible ( );
	void ToggleRadioIcon ( );
	void SetRadioVisible ( );
	void ToggleBombEquip ( );
	void SetBombVisible ( );
	void Init ( );
};

UClass* UCombatHUD_IFFObject::pClassPointer = NULL;

// Class CombatGame.CombatDecal
// 0x000C (0x03DC - 0x03D0)
class UCombatDecal : public UDecalComponent
{
public:
	class UMaterialInstanceTimeVarying*                MITV_Decal;                                       		// 0x03D0 (0x0008) [0x0000000000000000]              
	float                                              MinExplosionThickness;                            		// 0x03D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44107 ];

		return pClassPointer;
	};

	void SetMITV ( );
	void GetMITV ( );
};

UClass* UCombatDecal::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Air
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Air : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44310 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Air::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Flesh : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44312 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh::pClassPointer = NULL;

// Class CombatGame.CBPhysM_BodyMetalPart
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_BodyMetalPart : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44314 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_BodyMetalPart::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Brick
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Brick : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44316 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Brick::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Common
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Common : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44318 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Common::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Dust
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Dust : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44320 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Dust::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Earth
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Earth : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44322 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Earth::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Fabric
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Fabric : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44324 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Fabric::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh_Arm
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Flesh_Arm : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44326 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh_Arm::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh_Body
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Flesh_Body : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44328 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh_Body::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh_Head
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Flesh_Head : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44330 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh_Head::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh_Leg
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Flesh_Leg : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44332 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh_Leg::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Fresh_ChestUpper
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Fresh_ChestUpper : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44334 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Fresh_ChestUpper::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Fresh_HeadCenter
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Fresh_HeadCenter : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44336 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Fresh_HeadCenter::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Glass
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Glass : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44338 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Glass::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Grass
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Grass : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44340 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Grass::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Ice
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Ice : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44342 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Ice::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Metal
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Metal : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44344 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Metal::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Plastic
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Plastic : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44346 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Plastic::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Stone
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Stone : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44348 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Stone::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Vehicle
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Vehicle : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44350 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Vehicle::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Vehicle_WeakP
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Vehicle_WeakP : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44352 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Vehicle_WeakP::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Water
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Water : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44354 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Water::pClassPointer = NULL;

// Class CombatGame.CBPhysM_WetMetal
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_WetMetal : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44356 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_WetMetal::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Wood
// 0x0000 (0x00D8 - 0x00D8)
class UCBPhysM_Wood : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44358 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Wood::pClassPointer = NULL;

// Class CombatGame.CBSpawnedEmitter
// 0x0000 (0x0258 - 0x0258)
class ACBSpawnedEmitter : public ACBEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44360 ];

		return pClassPointer;
	};

	void HideBecauseFinished ( );
};

UClass* ACBSpawnedEmitter::pClassPointer = NULL;

// Class CombatGame.CombatLocalMessage
// 0x0000 (0x0074 - 0x0074)
class UCombatLocalMessage : public ULocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44418 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( );
};

UClass* UCombatLocalMessage::pClassPointer = NULL;

// Class CombatGame.CombatSkillMessage
// 0x0000 (0x0074 - 0x0074)
class UCombatSkillMessage : public UCombatLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44417 ];

		return pClassPointer;
	};

	void AnnouncePredatorUseToTeam ( );
	void AnnounceHowitzerUseToTeam ( );
	void AnnounceAirStrikeUseToTeam ( );
	void AnnounceAttackHelicopterUseToTeam ( );
	void AnnounceUAVPatrolUseToTeam ( );
	void NotifyFailedBuySkill ( );
	void NotifyBuySkill ( );
	void NotifyUnlockSkill ( );
	void NotifyFailedNoLicenseSkill ( );
	void ClientReceiveEx ( );
};

UClass* UCombatSkillMessage::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_QuickstartSetting
// 0x0014 (0x00AC - 0x0098)
class UCBUIDataStore_QuickstartSetting : public UUIDataStore_Settings
{
public:
	int                                                CurrentSelections[ 0x5 ];                         		// 0x0098 (0x0014) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45209 ];

		return pClassPointer;
	};

};

UClass* UCBUIDataStore_QuickstartSetting::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_StringAliasBindingsMap
// 0x0000 (0x0150 - 0x0150)
class UCBUIDataStore_StringAliasBindingsMap : public UCombatUIDataStore_StringAliasBindingMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45245 ];

		return pClassPointer;
	};

};

UClass* UCBUIDataStore_StringAliasBindingsMap::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_StringAliasMap
// 0x0000 (0x00F8 - 0x00F8)
class UCBUIDataStore_StringAliasMap : public UCombatUIDataStore_StringAliasMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45252 ];

		return pClassPointer;
	};

};

UClass* UCBUIDataStore_StringAliasMap::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_TacticalGear
// 0x0010 (0x00A8 - 0x0098)
class UCBUIDataStore_TacticalGear : public UUIDataStore_Settings
{
public:
	TArray< struct FUITacticalGearStruct >             UITacticalGearList;                               		// 0x0098 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45254 ];

		return pClassPointer;
	};

	void UpdateUITacticalGearList_Condition ( );
	void PrintUITacticalGearList ( );
	void InitUITacticalGearList ( );
};

UClass* UCBUIDataStore_TacticalGear::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_IronSight
// 0x0000 (0x0E48 - 0x0E48)
class UCombatWeaponRISBase_IronSight : public UCombatWeaponRISBase_Aiming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45470 ];

		return pClassPointer;
	};

};

UClass* UCombatWeaponRISBase_IronSight::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_modifiedIronSight
// 0x0004 (0x0E4C - 0x0E48)
class UCombatWeaponRISBase_modifiedIronSight : public UCombatWeaponRISBase_IronSight
{
public:
	unsigned long                                      IronSight : 1;                                    		// 0x0E48 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45469 ];

		return pClassPointer;
	};

};

UClass* UCombatWeaponRISBase_modifiedIronSight::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment_DualWeaponBase
// 0x004C (0x0470 - 0x0424)
class ACBWeaponAttachment_DualWeaponBase : public ACBWeaponAttachment
{
public:
	class USkeletalMeshComponent*                      DualMesh;                                         		// 0x0424 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    MuzzleFlashPSCForDual;                            		// 0x042C (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             TracerPSCTemplateForDual;                         		// 0x0434 (0x0008) [0x0000000000000000]              
	class UCombatExplosionLight*                       MuzzleFlashLightForDual;                          		// 0x043C (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    PSC_ShellEjectForDual;                            		// 0x0444 (0x0008) [0x0000000000000000]              
	unsigned long                                      bRightFired : 1;                                  		// 0x044C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     RightElbowPos;                                    		// 0x0450 (0x000C) [0x0000000000000000]              
	struct FVector                                     LeftElbowPos;                                     		// 0x045C (0x000C) [0x0000000000000000]              
	struct FName                                       AttachmentSocket_Left;                            		// 0x0468 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45518 ];

		return pClassPointer;
	};

};

UClass* ACBWeaponAttachment_DualWeaponBase::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment_ETC
// 0x0000 (0x0424 - 0x0424)
class ACBWeaponAttachment_ETC : public ACBWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45532 ];

		return pClassPointer;
	};

};

UClass* ACBWeaponAttachment_ETC::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment_ParachuteBase
// 0x0004 (0x0428 - 0x0424)
class ACBWeaponAttachment_ParachuteBase : public ACBWeaponAttachment_ETC
{
public:
	float                                              TranslationOffset;                                		// 0x0424 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45537 ];

		return pClassPointer;
	};

	void UpdateMeshRotation ( );
	void AttachToHolster ( );
};

UClass* ACBWeaponAttachment_ParachuteBase::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment_ShotGunBase
// 0x000C (0x0430 - 0x0424)
class ACBWeaponAttachment_ShotGunBase : public ACBWeaponAttachment
{
public:
	class ACombatWeapon_Shotgun_Base*                  OwnerShotgunWeapon;                               		// 0x0424 (0x0008) [0x0000000000000000]              
	int                                                SimulatedAccuracy;                                		// 0x042C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45562 ];

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};

UClass* ACBWeaponAttachment_ShotGunBase::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Shotgun_Base
// 0x0004 (0x1EB4 - 0x1EB0)
class ACombatWeapon_Shotgun_Base : public ACombatWeapon
{
public:
	int                                                TransientShotgunDamage;                           		// 0x1EB0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45565 ];

		return pClassPointer;
	};

	void PlayImpactEffects ( );
	void PlayImpactEffect ( );
	void PlayFireEffects ( );
	void GetBodyDamageAdjustment ( );
	void GetFireModeDamage ( );
	void ProcessInstantHit ( );
	void ServerNotifyHit ( );
	void SetTransientShotgunDamage ( );
	void FireAllPellets ( );
	void CustomFire ( );
	void InitRecoilSeed ( );
};

UClass* ACombatWeapon_Shotgun_Base::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatChangeBTTree
// 0x0010 (0x00DC - 0x00CC)
class UCCSBTCombatChangeBTTree : public UGripBTScriptBehavior
{
public:
	class ACombatBotController*                        bc;                                               		// 0x00CC (0x0008) [0x0000000000000000]              
	class UCCSBTTree*                                  NewBTTree;                                        		// 0x00D4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45734 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void ComputeCondition ( );
	void Initialize ( );
};

UClass* UCCSBTCombatChangeBTTree::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatMelee
// 0x0008 (0x00D4 - 0x00CC)
class UCCSBTCombatMelee : public UGripBTScriptBehavior
{
public:
	class ACombatGuy_NPC*                              CAIP;                                             		// 0x00CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45745 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void Execute ( );
	void ExecutePre ( );
	void ComputeCondition ( );
	void Initialize ( );
};

UClass* UCCSBTCombatMelee::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatReloadWeapon
// 0x0008 (0x00D4 - 0x00CC)
class UCCSBTCombatReloadWeapon : public UGripBTScriptBehavior
{
public:
	class ACombatBotController*                        bc;                                               		// 0x00CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45778 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void Execute ( );
	void ExecutePre ( );
	void ComputeCondition ( );
	void Initialize ( );
};

UClass* UCCSBTCombatReloadWeapon::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatSwitchWeapon
// 0x000C (0x00D8 - 0x00CC)
class UCCSBTCombatSwitchWeapon : public UGripBTScriptBehavior
{
public:
	unsigned char                                      WeaponSlotIndex;                                  		// 0x00CC (0x0001) [0x0000000000000000]              
	class ACombatBotController*                        bc;                                               		// 0x00D0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45794 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void Execute ( );
	void ExecutePre ( );
	void ComputeCondition ( );
	void Initialize ( );
};

UClass* UCCSBTCombatSwitchWeapon::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatThrowGrenade
// 0x0024 (0x00F0 - 0x00CC)
class UCCSBTCombatThrowGrenade : public UGripBTScriptBehavior
{
public:
	class ACombatGuy_NPC*                              CAIP;                                             		// 0x00CC (0x0008) [0x0000000000000000]              
	class ACCSController*                              CCSController;                                    		// 0x00D4 (0x0008) [0x0000000000000000]              
	struct FRotator                                    FireRor;                                          		// 0x00DC (0x000C) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x00E8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45820 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void Execute ( );
	void ExecutePre ( );
	void ComputeCondition ( );
	void Initialize ( );
};

UClass* UCCSBTCombatThrowGrenade::pClassPointer = NULL;

// Class CombatGame.CCSBTCrouch
// 0x0005 (0x00D9 - 0x00D4)
class UCCSBTCrouch : public UCCSBTScriptBehavior
{
public:
	unsigned long                                      bCrouch : 1;                                      		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Speed;                                            		// 0x00D8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45862 ];

		return pClassPointer;
	};

	void eventExecutePost ( );
	void eventExecute ( );
	void eventExecutePre ( );
};

UClass* UCCSBTCrouch::pClassPointer = NULL;

// Class CombatGame.CCSBTHealth
// 0x0008 (0x00DC - 0x00D4)
class UCCSBTHealth : public UCCSBTScriptCondition
{
public:
	unsigned char                                      Operator;                                         		// 0x00D4 (0x0001) [0x0000000000000000]              
	int                                                Threshold;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45877 ];

		return pClassPointer;
	};

	void eventGetNodeTitle ( );
	void ComputeCondition ( );
	void FlagUsedBBMembers ( );
};

UClass* UCCSBTHealth::pClassPointer = NULL;

// Class CombatGame.CCSBTMelee
// 0x0028 (0x00FC - 0x00D4)
class UCCSBTMelee : public UCCSBTScriptBehavior
{
public:
	float                                              BlendInTime;                                      		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              BlendOutTime;                                     		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FName                                       MeleeBlendName;                                   		// 0x00DC (0x0008) [0x0000000000000000]              
	struct FName                                       MeleeSequenceName;                                		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UAnimNodeBlend*                              MeleeBlend;                                       		// 0x00EC (0x0008) [0x0000000000000000]              
	class UAnimNodeSequence*                           MeleeSequence;                                    		// 0x00F4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45894 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void Execute ( );
	void ExecutePre ( );
	void ComputeCondition ( );
	void Initialize ( );
};

UClass* UCCSBTMelee::pClassPointer = NULL;

// Class CombatGame.CCSBTSetHealth
// 0x0004 (0x00D8 - 0x00D4)
class UCCSBTSetHealth : public UCCSBTScriptBehavior
{
public:
	int                                                Health;                                           		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45958 ];

		return pClassPointer;
	};

	void Execute ( );
	void ExecutePre ( );
};

UClass* UCCSBTSetHealth::pClassPointer = NULL;

// Class CombatGame.CCSBTSimpleFlee
// 0x002C (0x0100 - 0x00D4)
class UCCSBTSimpleFlee : public UCCSBTScriptBehavior
{
public:
	float                                              FleeDistance;                                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FVector                                     CachedEnemyPosition;                              		// 0x00D8 (0x000C) [0x0000000000000000]              
	struct FVector                                     CachedPawnPosition;                               		// 0x00E4 (0x000C) [0x0000000000000000]              
	unsigned long                                      CachedResult : 1;                                 		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CachedMaxDist2D;                                  		// 0x00F4 (0x0004) [0x0000000000000000]              
	class UCCSAFMoveTo*                                MoveToHandle;                                     		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45973 ];

		return pClassPointer;
	};

	void GetEnemy ( );
	void ValidateFleePoint ( );
	void PickFleePoint ( );
	void eventExecute ( );
	void eventExecutePre ( );
	void ComputeCondition ( );
	void FlagUsedBBMembers ( );
};

UClass* UCCSBTSimpleFlee::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Grenade
// 0x0004 (0x1EB4 - 0x1EB0)
class ACombatWeapon_Grenade : public ACombatWeapon
{
public:
	unsigned long                                      bMartyrdom : 1;                                   		// 0x1EB0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsAlreadyMakeProjectile : 1;                      		// 0x1EB0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46083 ];

		return pClassPointer;
	};

	void IsInstigatorAlive ( );
	void MakeProjectile ( );
	void ServerMakeProjectile ( );
	void HolderDied ( );
	void GetProjectileClass ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatWeapon_Grenade::pClassPointer = NULL;

// Class CombatGame.SeqAct_SetState
// 0x0010 (0x0118 - 0x0108)
class USeqAct_SetState : public USequenceAction
{
public:
	struct FString                                     StateName;                                        		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46102 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetState::pClassPointer = NULL;

// Class CombatGame.SeqAct_RemoveState
// 0x0010 (0x0118 - 0x0108)
class USeqAct_RemoveState : public USequenceAction
{
public:
	struct FString                                     StateName;                                        		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46106 ];

		return pClassPointer;
	};

};

UClass* USeqAct_RemoveState::pClassPointer = NULL;

// Class CombatGame.SeqAct_SetInitialCover
// 0x0010 (0x0118 - 0x0108)
class USeqAct_SetInitialCover : public USequenceAction
{
public:
	TArray< class AActor* >                            Actors;                                           		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46111 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetInitialCover::pClassPointer = NULL;

// Class CombatGame.SeqAct_CCSTriggerEvent
// 0x0010 (0x0118 - 0x0108)
class USeqAct_CCSTriggerEvent : public USequenceAction
{
public:
	struct FString                                     EventType;                                        		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46115 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CCSTriggerEvent::pClassPointer = NULL;

// Class CombatGame.CombatPawn_SentryGun
// 0x0014 (0x0D00 - 0x0CEC)
class ACombatPawn_SentryGun : public ACombatPawn_AttackSkillActor
{
public:
	unsigned long                                      Reloading : 1;                                    		// 0x0CEC (0x0004) [0x0000000000450000] [0x00000001] ( CPF_Travel | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FName                                       ReloadAnim;                                       		// 0x0CF0 (0x0008) [0x0000000000000000]              
	class USkelControlSingleBone*                      BaseControl;                                      		// 0x0CF8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46229 ];

		return pClassPointer;
	};

	void GetRemovedFromPC ( );
	void GetRegisteredToPC ( );
	void SetIKPrePassBone ( );
	void StopFire ( );
	void PostBeginPlay ( );
	void NotifyLocalPlayerTeamReceived ( );
	void NotifyTeamChanged ( );
	void SetBaseYaw ( );
	void eventPostInitAnimTree ( );
	void PlayReloadAnim ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatPawn_SentryGun::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItemManager
// 0x0020 (0x0080 - 0x0060)
class UCombatInstanceItemManager : public UObject
{
public:
	class UClass*                                      InstanceItemList[ 0x4 ];                          		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46910 ];

		return pClassPointer;
	};

	void ApplyAP ( );
	void InstanceItemListCount ( );
	void GetGEARItemInfo ( );
	void CreateGEARItemIndex ( );
	void CreateGEARItem ( );
	void SetGearItemClass ( );
	void Init ( );
};

UClass* UCombatInstanceItemManager::pClassPointer = NULL;

// Class CombatGame.interface_BP
// 0x0000 (0x0060 - 0x0060)
class Uinterface_BP : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46956 ];

		return pClassPointer;
	};

	void GetBP ( );
	void GetGrade ( );
};

UClass* Uinterface_BP::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_Melee
// 0x007C (0x1F2C - 0x1EB0)
class ACombatWeaponBase_Melee : public ACombatWeapon
{
public:
	struct FMeleeAttackFactor                          MeleeFactors[ 0x2 ];                              		// 0x1EB0 (0x0060) [0x0000000000000000]              
	unsigned long                                      bHitPawn : 1;                                     		// 0x1F10 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHitWorldActor : 1;                               		// 0x1F10 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bContinousAttack : 1;                             		// 0x1F10 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                LastAttackIndex;                                  		// 0x1F14 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            VictimsSaveList;                                  		// 0x1F18 (0x0010) [0x0000000000000000]              
	int                                                ArcSectIndex;                                     		// 0x1F28 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47258 ];

		return pClassPointer;
	};

	void CustomFire ( );
	void IsArcSectionAttack ( );
	void IsArcFire ( );
	void PlayPenetrationEffects ( );
	void DecideAnimSeq ( );
	void GetFireModeDamage ( );
	void GetMeleeStartTraceLocation ( );
	void CalcWeaponArcFire ( );
	void DoFireArc ( );
	void EndOfMeleeAttack ( );
	void MeleeAttackEnded ( );
	void PlayMeleeAttackAnimation ( );
	void PlayMeleeAttack ( );
	void eventGetTraceRange ( );
	void ServerSetLastImpactLocation ( );
	void eventCheckMeleeAttackCollision ( );
	void MeleeAttackStarted ( );
	void IsMeleeing ( );
};

UClass* ACombatWeaponBase_Melee::pClassPointer = NULL;

// Class CombatGame.CombatProj_SmokeGrenade
// 0x0038 (0x042C - 0x03F4)
class ACombatProj_SmokeGrenade : public ACombatProj_Grenade
{
public:
	class UParticleSystem*                             SmokeTemplate;                                    		// 0x03F4 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    SmokePSC;                                         		// 0x03FC (0x0008) [0x0000000000000000]              
	float                                              SmokeDuration;                                    		// 0x0404 (0x0004) [0x0000000000000000]              
	float                                              VolumeHeight;                                     		// 0x0408 (0x0004) [0x0000000000000000]              
	float                                              VolumeRadius;                                     		// 0x040C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   StartSound;                                       		// 0x0410 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SmokeLoopingSound;                                		// 0x0418 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             SmokeLoopingSoundCom;                             		// 0x0420 (0x0008) [0x0000000000000000]              
	unsigned long                                      Is : 1;                                           		// 0x0428 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47490 ];

		return pClassPointer;
	};

	void StartSmokeLoopingSound ( );
	void StopSmokeLoopingSound ( );
	void EndSmoke ( );
	void SpawnSmoke ( );
	void TriggerExplosion ( );
};

UClass* ACombatProj_SmokeGrenade::pClassPointer = NULL;

// Class CombatGame.ComBatPC_AIGame
// 0x0010 (0x0BA0 - 0x0B90)
class AComBatPC_AIGame : public ACombatPC
{
public:
	class USoundCue*                                   AIAggroMeSound;                                   		// 0x0B90 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   AIAggroMeReleaseSound;                            		// 0x0B98 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47566 ];

		return pClassPointer;
	};

	void OnAIAggroMeRelease ( );
	void OnAIAggroMe ( );
};

UClass* AComBatPC_AIGame::pClassPointer = NULL;

// Class CombatGame.Combat_MissionPawn
// 0x0000 (0x0C68 - 0x0C68)
class ACombat_MissionPawn : public ACombatGuy_NPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47628 ];

		return pClassPointer;
	};

	void AdjustDamage ( );
	void GoRagdoll_MissionPawn ( );
	void GetObjectIconType ( );
	void GetMissionActorSortPriority ( );
	void RemoveMissionActorIcon ( );
	void InitMissionActor ( );
	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* ACombat_MissionPawn::pClassPointer = NULL;

// Class CombatGame.CombatAssasinGame
// 0x0008 (0x0770 - 0x0768)
class ACombatAssasinGame : public ACombatPVPGame
{
public:
	unsigned long                                      bVIPMove : 1;                                     		// 0x0768 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVIPalive : 1;                                    		// 0x0768 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      GameStatus;                                       		// 0x076C (0x0001) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x076E (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatAssasinGame.EVACRemainTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47648 ];

		return pClassPointer;
	};

	void SetRemainTime ( );
	void EnableEVACPoint ( );
	void AddTeamBonus ( );
	void OnMissionSuccess ( );
	void OnMissionEvent ( );
	void Reset ( );
	void CheckLive ( );
	void CheckTimeOver ( );
	void CheckGoalScore ( );
};

UClass* ACombatAssasinGame::pClassPointer = NULL;

// Class CombatGame.CombatAccessControl
// 0x0000 (0x03A8 - 0x03A8)
class ACombatAccessControl : public AAccessControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47666 ];

		return pClassPointer;
	};

	void ForceKickPlayer ( );
	void eventPreLogin ( );
};

UClass* ACombatAccessControl::pClassPointer = NULL;

// Class CombatGame.CombatAI_Helicopter
// 0x0000 (0x05E8 - 0x05E8)
class ACombatAI_Helicopter : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47921 ];

		return pClassPointer;
	};

	void GetAdjustedAimFor ( );
};

UClass* ACombatAI_Helicopter::pClassPointer = NULL;

// Class CombatGame.CombatAI_Minetrain
// 0x0000 (0x05E8 - 0x05E8)
class ACombatAI_Minetrain : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47929 ];

		return pClassPointer;
	};

};

UClass* ACombatAI_Minetrain::pClassPointer = NULL;

// Class CombatGame.CombatAI_MoveToPathNode
// 0x0000 (0x05E8 - 0x05E8)
class ACombatAI_MoveToPathNode : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47933 ];

		return pClassPointer;
	};

	void OnAIMoveToActor ( );
};

UClass* ACombatAI_MoveToPathNode::pClassPointer = NULL;

// Class CombatGame.CombatAI_MoveToPathNodeForTut
// 0x0000 (0x05E8 - 0x05E8)
class ACombatAI_MoveToPathNodeForTut : public ACombatAI_MoveToPathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47941 ];

		return pClassPointer;
	};

};

UClass* ACombatAI_MoveToPathNodeForTut::pClassPointer = NULL;

// Class CombatGame.CombatAI_SentryGun
// 0x0000 (0x05E8 - 0x05E8)
class ACombatAI_SentryGun : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47945 ];

		return pClassPointer;
	};

	void eventFireWeapon ( );
};

UClass* ACombatAI_SentryGun::pClassPointer = NULL;

// Class CombatGame.CombatAI_TDMBase
// 0x0018 (0x0600 - 0x05E8)
class ACombatAI_TDMBase : public ACombatBotController_GuyBase
{
public:
	unsigned long                                      bThrowedGrenadeCount : 1;                         		// 0x05E8 (0x0004) [0x0000000000000000] [0x00000001] 
	class ACombatAIPawn_TDMBase*                       AIPawn_TDMBase;                                   		// 0x05EC (0x0008) [0x0000000000000000]              
	class ACombatAIGameTDMBase*                        AIGame_TDMBase;                                   		// 0x05F4 (0x0008) [0x0000000000000000]              
	int                                                UsableAIBeaconIndex;                              		// 0x05FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47966 ];

		return pClassPointer;
	};

	void PawnDied ( );
	void NotifyWeaponFired ( );
	void GetUsableAIBeaconIndex ( );
	void TakePossession ( );
	void Possess ( );
};

UClass* ACombatAI_TDMBase::pClassPointer = NULL;

// Class CombatGame.CombatTDMGameBase
// 0x0002 (0x076A - 0x0768)
class ACombatTDMGameBase : public ACombatPVPGame
{
public:
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0768 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTDMGameBase.SuddenDeathTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47971 ];

		return pClassPointer;
	};

	void BroadcastSuddenDeathMessage ( );
	void CheckTimeOver ( );
	void CheckRoundOver ( );
	void CheckSuddenDeathKill ( );
	void CheckGoalMission ( );
};

UClass* ACombatTDMGameBase::pClassPointer = NULL;

// Class CombatGame.CombatTDMGame
// 0x0002 (0x076C - 0x076A)
class ACombatTDMGame : public ACombatTDMGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47970 ];

		return pClassPointer;
	};

	void eventGetGoalScoreValue ( );
	void CheckLive ( );
};

UClass* ACombatTDMGame::pClassPointer = NULL;

// Class CombatGame.CombatAIGameTDMBase
// 0x0074 (0x07E0 - 0x076C)
class ACombatAIGameTDMBase : public ACombatTDMGame
{
public:
	TArray< struct FSAITypeInfo >                      AITypeInfoArray;                                  		// 0x076C (0x0010) [0x0000000000000000]              
	TArray< struct FSAIWeaponInfo >                    PrimaryWeaponInfoArray;                           		// 0x077C (0x0010) [0x0000000000000000]              
	TArray< struct FSAIWeaponInfo >                    SubWeaponInfoArray;                               		// 0x078C (0x0010) [0x0000000000000000]              
	TArray< struct FSAIWeaponInfo >                    MeleeWeaponInfoArray;                             		// 0x079C (0x0010) [0x0000000000000000]              
	TArray< struct FSAIWeaponInfo >                    GrenadeWeaponInfoArray;                           		// 0x07AC (0x0010) [0x0000000000000000]              
	unsigned char                                      AITeam;                                           		// 0x07BC (0x0001) [0x0000000000000000]              
	unsigned char                                      PlayerTeam;                                       		// 0x07BD (0x0001) [0x0000000000000000]              
	float                                              AIRespawnDelay;                                   		// 0x07C0 (0x0004) [0x0000000000000000]              
	float                                              AIInvulnerableTime;                               		// 0x07C4 (0x0004) [0x0000000000000000]              
	TArray< class UCCSBTTree* >                        BTResouceArray;                                   		// 0x07C8 (0x0010) [0x0000000000000000]              
	class ACombatAIManager*                            AIMan;                                            		// 0x07D8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47969 ];

		return pClassPointer;
	};

	void GetInvulnerableTime ( );
	void GetRespawnDelay ( );
	void RestartPlayer ( );
	void GetDefaultPlayerClass ( );
	void PickTeam ( );
	void eventPostLogin ( );
	void SpawnBotsDestNumber ( );
	void FindAISpawnPoint ( );
	void ChooseAISpawnPoint ( );
	void IsValidAISpawnPoint ( );
	void FindPlayerStart ( );
	void StartBots ( );
	void GetDestAINumber ( );
	void GetCurAINumber ( );
	void GetCurPlayerNumber ( );
	void GetRandomAIWeapon ( );
	void GetRandomAITypePRINone ( );
	void RemoveAIPRI ( );
	void InitAITypeInfo ( );
};

UClass* ACombatAIGameTDMBase::pClassPointer = NULL;

// Class CombatGame.CombatAIPawn_TDMBase
// 0x001C (0x0C84 - 0x0C68)
class ACombatAIPawn_TDMBase : public ACombatGuy_NPC
{
public:
	class ACombatAI_TDMBase*                           AI_TDMBase;                                       		// 0x0C68 (0x0008) [0x0000000000000000]              
	class ACombatAIGameTDMBase*                        AIGame_TDMBase;                                   		// 0x0C70 (0x0008) [0x0000000000000000]              
	class UClass*                                      BotArmorClass;                                    		// 0x0C78 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsAIFemale : 1;                                  		// 0x0C80 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47973 ];

		return pClassPointer;
	};

	void IsPossessWeaponByGroup ( );
	void AddDefaultInventory ( );
	void IsFemale ( );
	void ApplyArmor ( );
	void PossessedBy ( );
};

UClass* ACombatAIPawn_TDMBase::pClassPointer = NULL;

// Class CombatGame.CombatAI_TDMBase_SMG
// 0x0000 (0x0600 - 0x0600)
class ACombatAI_TDMBase_SMG : public ACombatAI_TDMBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48003 ];

		return pClassPointer;
	};

};

UClass* ACombatAI_TDMBase_SMG::pClassPointer = NULL;

// Class CombatGame.CombatAI_TDMBase_Sniper
// 0x0000 (0x0600 - 0x0600)
class ACombatAI_TDMBase_Sniper : public ACombatAI_TDMBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48007 ];

		return pClassPointer;
	};

};

UClass* ACombatAI_TDMBase_Sniper::pClassPointer = NULL;

// Class CombatGame.CombatAIAction_Sleep
// 0x0008 (0x0080 - 0x0078)
class UCombatAIAction_Sleep : public UCombatAIActionBase
{
public:
	class UCombatAIActionNode_Sleep*                   ActionNode;                                       		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48065 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void EndAIAction ( );
	void ExecutePre ( );
};

UClass* UCombatAIAction_Sleep::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNode_Sleep
// 0x0004 (0x00F8 - 0x00F4)
class UCombatAIActionNode_Sleep : public UCombatAIActionNodeBase
{
public:
	float                                              SleepTime;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48067 ];

		return pClassPointer;
	};

	void eventGetNodeTitle ( );
};

UClass* UCombatAIActionNode_Sleep::pClassPointer = NULL;

// Class CombatGame.CombatAICond_TargetExistenceDetail
// 0x000C (0x00E0 - 0x00D4)
class UCombatAICond_TargetExistenceDetail : public UCCSBTScriptCondition
{
public:
	unsigned char                                      Target;                                           		// 0x00D4 (0x0001) [0x0000000000000000]              
	unsigned char                                      DistanceOperator;                                 		// 0x00D5 (0x0001) [0x0000000000000000]              
	unsigned long                                      EnableDistanceCheck : 1;                          		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      EnableVisibleCheck : 1;                           		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      Visible : 1;                                      		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              Distance;                                         		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48112 ];

		return pClassPointer;
	};

	void eventGetNodeTitle ( );
	void ComputeCondition ( );
	void FlagUsedBBMembers ( );
};

UClass* UCombatAICond_TargetExistenceDetail::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatBGMPlay
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatBGMPlay : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48156 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatBGMPlay::pClassPointer = NULL;

// Class CombatGame.CombatGameMessage
// 0x0010 (0x0084 - 0x0074)
class UCombatGameMessage : public UCombatLocalMessage
{
public:
	TArray< struct FName >                             RegisteredMessage;                                		// 0x0074 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48475 ];

		return pClassPointer;
	};

	void LastUserMessage ( );
	void SuddenDeathMessage ( );
	void GameResultMessage ( );
	void RoundResultMessage ( );
	void ClientReceiveEx ( );
	void GetMessageType ( );
};

UClass* UCombatGameMessage::pClassPointer = NULL;

// Class CombatGame.Interface_RoundEnd
// 0x0000 (0x0060 - 0x0060)
class UInterface_RoundEnd : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48502 ];

		return pClassPointer;
	};

	void RoundEnd ( );
};

UClass* UInterface_RoundEnd::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatRoundProgress
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatRoundProgress : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48507 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatRoundProgress::pClassPointer = NULL;

// Class CombatGame.CombatBroadcastHandler
// 0x0000 (0x024C - 0x024C)
class ACombatBroadcastHandler : public ABroadcastHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48831 ];

		return pClassPointer;
	};

	void eventAllowBroadcastLocalizedEx ( );
	void eventAllowBroadcastLocalizedTeamEx ( );
	void BroadcastLocalizedEx ( );
};

UClass* ACombatBroadcastHandler::pClassPointer = NULL;

// Class CombatGame.CombatErrorMessage
// 0x0000 (0x0074 - 0x0074)
class UCombatErrorMessage : public UCombatLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48908 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( );
};

UClass* UCombatErrorMessage::pClassPointer = NULL;

// Class CombatGame.CombatOccupiedAreaVolume
// 0x00B4 (0x0334 - 0x0280)
class ACombatOccupiedAreaVolume : public AVolume
{
public:
	struct FFlagParticleParam                          ParticleParamList_Unocuupied;                     		// 0x0280 (0x0014) [0x0000000000000000]              
	struct FFlagParticleParam                          ParticleParamList_Battling;                       		// 0x0294 (0x0014) [0x0000000000000000]              
	struct FFlagParticleParam                          ParticleParamList_OurTeam;                        		// 0x02A8 (0x0014) [0x0000000000000000]              
	struct FFlagParticleParam                          ParticleParamList_Enemy;                          		// 0x02BC (0x0014) [0x0000000000000000]              
	class UParticleSystem*                             SeizeEffect;                                      		// 0x02D0 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    SeizePSC;                                         		// 0x02D8 (0x0008) [0x0000000000000000]              
	float                                              SeizeEffectSizeRatio;                             		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                FirstOccupiedTeamIndex;                           		// 0x02E4 (0x0004) [0x0000000000000000]              
	TArray< class ACombatOccupiedAreaData* >           OccupationAreaDatas;                              		// 0x02E8 (0x0010) [0x0000000000000000]              
	TArray< struct FOccupiedTeamMemberInfo >           WithInTeamInfo;                                   		// 0x02F8 (0x0010) [0x0000000000000000]              
	struct FOccupyDataType                             CurrentOccupyState;                               		// 0x0308 (0x0008) [0x000000000015000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig )
	int                                                AreaID;                                           		// 0x0310 (0x0004) [0x0000000000000000]              
	struct FString                                     AreaName;                                         		// 0x0314 (0x0010) [0x0000000000000000]              
	unsigned long                                      bDirectGoalSetting : 1;                           		// 0x0324 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                GoalScore;                                        		// 0x0328 (0x0004) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	class ACombatSeizeFlagActor*                       TargetFlagActor;                                  		// 0x032C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49398 ];

		return pClassPointer;
	};

	void IsOccupied ( );
	void AddScore ( );
	void GetOccupationScore ( );
	void GetOccupiedScoringTime ( );
	void CheckOccupationNum ( );
	void AddOccupationScore ( );
	void NotifyTurnOff ( );
	void NotifyWork ( );
	void OutOccupiedArea ( );
	void SetFlagState ( );
	void PostBeginPlay ( );
	void AddOccupationAreaData ( );
	void SetOccupationAreaData ( );
	void GetFirstOccupiedTeamIndex ( );
	void SetFirstOccupiedTeamIndex ( );
	void GetSeizeFlagActor ( );
	void UpdateOccupyParticle ( );
	void ChangedOccupyState ( );
	void eventReplicatedEvent ( );
	void SuccessedOccupation ( );
	void ReleaseTouchInfo ( );
	void CheckFirstMissionSuccesser ( );
	void Reset ( );
};

UClass* ACombatOccupiedAreaVolume::pClassPointer = NULL;

// Class CombatGame.CombatAIGameMessage
// 0x0000 (0x0084 - 0x0084)
class UCombatAIGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49601 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( );
};

UClass* UCombatAIGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatStatStorageAIDefence
// 0x0000 (0x0094 - 0x0094)
class UCombatStatStorageAIDefence : public UCombatStatStoragePVE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49602 ];

		return pClassPointer;
	};

	void SaveStatByOther ( );
	void SaveStatByWin ( );
	void eventOnEvent ( );
};

UClass* UCombatStatStorageAIDefence::pClassPointer = NULL;

// Class CombatGame.CombatInGameLocalSoundGroup_Base
// 0x0120 (0x0190 - 0x0070)
class UCombatInGameLocalSoundGroup_Base : public UCombatHUDSoundGroup
{
public:
	class USoundCue*                                   CountDownSound;                                   		// 0x0070 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   RespawnSound;                                     		// 0x0078 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   PresetChangeInfo[ 0x3 ];                          		// 0x0080 (0x0018) [0x0000000000000000]              
	class USoundCue*                                   TeamChangeSound;                                  		// 0x0098 (0x0008) [0x0000000000000000]              
	TArray< struct FTeamSoundData >                    TeamSoundDataList;                                		// 0x00A0 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   RadioWindowOpenSound;                             		// 0x00B0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   RadioWindowCloseSound;                            		// 0x00B8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SkillBuySound_Success;                            		// 0x00C0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SkillBuySound_Fail;                               		// 0x00C8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SelectPlayerClass;                                		// 0x00D0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   HostageVocieList[ 0x6 ];                          		// 0x00D8 (0x0030) [0x0000000000000000]              
	class USoundCue*                                   AnnounceSoundList[ 0x3 ];                         		// 0x0108 (0x0018) [0x0000000000000000]              
	class USoundCue*                                   C4BombPickupSound;                                		// 0x0120 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   C4BombDropSound;                                  		// 0x0128 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   C4BombPlantBGM;                                   		// 0x0130 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ModeScoreGettingSound;                            		// 0x0138 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SpearTacRespawn;                                  		// 0x0140 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   StartWaveSound;                                   		// 0x0148 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SuccessedWaveSound;                               		// 0x0150 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   FailedWaveSound;                                  		// 0x0158 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   WarningSound;                                     		// 0x0160 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ExplotionBeepSound;                               		// 0x0168 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             ExplosionBeepSoundComponent;                      		// 0x0170 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ChangedViewTargetOnSpectator;                     		// 0x0178 (0x0008) [0x0000000000000000]              
	TArray< class USoundCue* >                         AIRewardRankSound;                                		// 0x0180 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49757 ];

		return pClassPointer;
	};

	void GetRoundConditionSound ( );
	void Init ( );
	void PlayChangedViewTargetOnSpectator ( );
	void StopExplotionBeepSound ( );
	void PlayExplotionBeepSound ( );
	void PlayAnnounceSound ( );
	void OnChangePlayerClass ( );
};

UClass* UCombatInGameLocalSoundGroup_Base::pClassPointer = NULL;

// Class CombatGame.CombatHUD_RadioMessage
// 0x004B (0x0108 - 0x00BD)
class UCombatHUD_RadioMessage : public UCombatHUDEntity_Base
{
public:
	struct FLableDataType                              LableData[ 0x2 ];                                 		// 0x00C0 (0x0028) [0x0000000000000000]              
	struct FScriptDelegate                             __OnGetRadioMsgKeyBinding__Delegate;              		// 0x00E8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00EC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnSetRadioKeyBinding__Delegate;                 		// 0x00F8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00FC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50195 ];

		return pClassPointer;
	};

	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
	void ToggleDisplay ( );
	void Hide ( );
	void Show ( );
	void SelectTab ( );
	void AddLabels ( );
	void OnSetRadioKeyBinding ( );
	void OnGetRadioMsgKeyBinding ( );
};

UClass* UCombatHUD_RadioMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PresetSelectScene
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_PresetSelectScene : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50199 ];

		return pClassPointer;
	};

	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_PresetSelectScene::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Preset
// 0x0018 (0x00D8 - 0x00C0)
class UCombatHUD_Preset : public UCombatHUD_PresetSelectScene
{
public:
	struct FString                                     DescriptionStr;                                   		// 0x00C0 (0x0010) [0x0000000000000000]              
	class UGFxObject*                                  DescriptionMC;                                    		// 0x00D0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50198 ];

		return pClassPointer;
	};

	void HideOkButton ( );
	void ShowOkButton ( );
	void SetOkButton ( );
	void HidePresetDescription ( );
	void ShowPresetDescription ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
	void SelectPreset ( );
	void UpdateLocalPreset ( );
	void receivePresetHide ( );
	void SetKeyString ( );
	void Init ( );
};

UClass* UCombatHUD_Preset::pClassPointer = NULL;

// Class CombatGame.CombatHUD_SpawnPointSelection
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_SpawnPointSelection : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50203 ];

		return pClassPointer;
	};

	void SetKeyString ( );
	void SelectSpawnPoint ( );
	void Init ( );
};

UClass* UCombatHUD_SpawnPointSelection::pClassPointer = NULL;

// Class CombatGame.CombatAIGameHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatAIGameHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50459 ];

		return pClassPointer;
	};

	void DisplayMatchEnd ( );
	void SetPlayerIsDead ( );
	void PauseComboUI ( );
	void HideComboUI ( );
	void UpdateKillComboUI ( );
	void StopWave ( );
	void StartWave ( );
	void AIGlobalMessage ( );
	void OnChangedCountDown ( );
	void GetRoundGoalInfo ( );
	void CheckPlayerInfoForScoreboard ( );
	void SetUIData_Scoreboard ( );
	void SetPlayerInfoForScoreboard ( );
	void UpdateScoreboard_PlayTime ( );
	void UpdateScoreboard ( );
	void AIGameMovie ( );
	void eventPostRender ( );
};

UClass* ACombatAIGameHUD::pClassPointer = NULL;

// Class CombatGame.CombatCommon_VoiceChatOption
// 0x0000 (0x00AC - 0x00AC)
class UCombatCommon_VoiceChatOption : public UCombatCommon_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50618 ];

		return pClassPointer;
	};

	void receiveVoicechatTeamsettingStateBtn ( );
	void receiveVoicechatTeamsettingCloseBtn ( );
	void receiveVoicechatTeamsettingMuteAllBtn ( );
	void CallSetPlayerVoice ( );
	void CallSetMuteAllSelected ( );
	void CallSetMuteAllText ( );
	void CallSetCloseLabel ( );
	void CallSetTitle ( );
	void ResetUserListAll ( );
	void ReloadListAll ( );
	void UpdateUserStatusList ( );
	void UpdateUserList ( );
	void InitLabels ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatCommon_VoiceChatOption::pClassPointer = NULL;

// Class CombatGame.CombatCommon_OverImmersionGuard
// 0x0024 (0x00D0 - 0x00AC)
class UCombatCommon_OverImmersionGuard : public UCombatCommon_Base
{
public:
	unsigned char                                      Icon1;                                            		// 0x00AC (0x0001) [0x0000000000000000]              
	unsigned char                                      Icon2;                                            		// 0x00AD (0x0001) [0x0000000000000000]              
	struct FString                                     HourCountStr;                                     		// 0x00B0 (0x0010) [0x0000000000000000]              
	struct FString                                     WarningStr;                                       		// 0x00C0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50620 ];

		return pClassPointer;
	};

	void CallHideAnimation ( );
	void CallShowAnimation ( );
	void ShowAnimaion ( );
	void SetHourString ( );
	void InitIconAndString ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatCommon_OverImmersionGuard::pClassPointer = NULL;

// Class CombatGame.CombatCommon_Option
// 0x0100 (0x01AC - 0x00AC)
class UCombatCommon_Option : public UCombatCommon_Base
{
public:
	unsigned char                                      OptionMode;                                       		// 0x00AC (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectedTab;                                      		// 0x00AD (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectedGamePlaySubTab;                           		// 0x00AE (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectedControlSubTab;                            		// 0x00AF (0x0001) [0x0000000000000000]              
	int                                                LabelSettingInfoIndex;                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	TArray< struct FLabelSettingInfo >                 LabelSettingInfos;                                		// 0x00B4 (0x0010) [0x0000000000000000]              
	int                                                ButtonEnableInfoIndex;                            		// 0x00C4 (0x0004) [0x0000000000000000]              
	TArray< struct FButtonEnableInfo >                 ButtonEnableInfos;                                		// 0x00C8 (0x0010) [0x0000000000000000]              
	TArray< struct FVideoOptionItemInfo >              VideoOptionInfos;                                 		// 0x00D8 (0x0010) [0x0000000000000000]              
	int                                                VideoOptionInitDataIndex;                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                VideoOptionSetValueIndex;                         		// 0x00EC (0x0004) [0x0000000000000000]              
	TArray< struct FVideoOptionPresetInfo >            VideoPresets;                                     		// 0x00F0 (0x0010) [0x0000000000000000]              
	int                                                ControlValueSettingInfoIndex;                     		// 0x0100 (0x0004) [0x0000000000000000]              
	TArray< struct FControlOptionItemInfo >            ControlOptionInfos;                               		// 0x0104 (0x0010) [0x0000000000000000]              
	int                                                SoundValueSettingInfoIndex;                       		// 0x0114 (0x0004) [0x0000000000000000]              
	TArray< struct FSoundOptionItemInfo >              SoundOptionInfos;                                 		// 0x0118 (0x0010) [0x0000000000000000]              
	int                                                SoundOptionInitDataIndex;                         		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                SoundOptionSetValueIndex;                         		// 0x012C (0x0004) [0x0000000000000000]              
	struct FString                                     VoiceInputModBindingKeyString;                    		// 0x0130 (0x0010) [0x0000000000000000]              
	int                                                GamePlayValueSettingInfoIndex;                    		// 0x0140 (0x0004) [0x0000000000000000]              
	TArray< struct FGamePlayOptionItemInfo >           GamePlayOptionInfos;                              		// 0x0144 (0x0010) [0x0000000000000000]              
	int                                                CrosshairOptionItemInfoIndex;                     		// 0x0154 (0x0004) [0x0000000000000000]              
	TArray< struct FCrosshairOptionItemInfo >          CrosshairOptionItemInfos;                         		// 0x0158 (0x0010) [0x0000000000000000]              
	TArray< struct FOptionKeyBindingInfo >             KeyBindingInfos;                                  		// 0x0168 (0x0010) [0x0000000000000000]              
	int                                                SelectedKeySlotIndex;                             		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                OldSelectedKeySlotIndex;                          		// 0x017C (0x0004) [0x0000000000000000]              
	TArray< struct FKeymapDatum >                      UnbindingKeys;                                    		// 0x0180 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           RatingStrings;                                    		// 0x0190 (0x0010) [0x0000000000000000]              
	unsigned long                                      CrosshairSettingsChanged : 1;                     		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                VivoxDeviceIndex;                                 		// 0x01A4 (0x0004) [0x0000000000000000]              
	int                                                VivoxOldDeviceIndex;                              		// 0x01A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50622 ];

		return pClassPointer;
	};

	void GetProfileSettings_IgnoreTeamChat ( );
	void GetProfileSettings_IgnoreAllChat ( );
	void receiveCommonOptionGamePlayCrossHairRecoilChange ( );
	void receiveCommonOptionGamePlayCrossHairAlphaChange ( );
	void receiveCommonOptionGamePlayCrossHairShadowChange ( );
	void receiveCommonOptionGamePlayCrossHairLengthChange ( );
	void receiveCommonOptionGamePlayCrossHairColorChange ( );
	void receiveCommonOptionGamePlayCrossHairFormChange ( );
	void CallSetCrosshairDataArray ( );
	void CallSetCrosshairColorIndex ( );
	void CallSetCrosshairCustomColor ( );
	void CallSetCrosshairValue ( );
	void SaveCrosshairSetting ( );
	void CancelCrosshairSetting ( );
	void SetCrosshairDataArray ( );
	void InitFriendInviteRefuseSetting ( );
	void InitCrosshairSetting ( );
	void CallsetRatingDesc ( );
	void CallsetRatingIcon ( );
	void InitializeRatingSetting ( );
	void receiveCommonOptionGamePlaySubTabClick ( );
	void receiveCommonOptionTabMenuClick ( );
	void ReceiveControlOptionReturnCode ( );
	void SetVideoAdvancedOption ( );
	void SetOneFrameThreadLag ( );
	void SetSystemCounter ( );
	void SetFPS ( );
	void SetGamma ( );
	void ReceiveVideoOptionIndex ( );
	void receiveLobbyOptionReturnCode ( );
	void receiveCommonOptionCancelBtnClick ( );
	void CallInitialization ( );
	void DisplayOptionRestartDialog ( );
	void receiveCommonOptionSaveBtnClick ( );
	void receiveCommonOptionInitBtnClick ( );
	void receiveCommonOptionApplyBtnClick ( );
	void SetInGameForegroundFOV ( );
	void receiveCommonOptionGamePlayWFovChange ( );
	void receiveCommonOptionGamePlayIffVeiwOnOffChange ( );
	void receiveCommonOptionGamePlayWeaponFlipChange ( );
	void receiveCommonOptionGamePlayFovChange ( );
	void receiveCommonOptionGamePlayDeadChatBtnClik ( );
	void receiveCommonOptionGamePlayFriendRequestBtnClick ( );
	void receiveCommonOptionGamePlayTeamChatBtnClik ( );
	void receiveCommonOptionGamePlayFullChatBtnClick ( );
	void SaveGamePlaySetting ( );
	void CallSetGamePlayIntValue ( );
	void CallSetGamePlayBoolValue ( );
	void ToggleTeamChat ( );
	void ToggleAllChat ( );
	void CallSetHoldToAimDataArray ( );
	void CallSetIffViewDataArray ( );
	void CallWeaponFlipDataArray ( );
	void CallPresentlyFovData ( );
	void CallSetPreviousFovData ( );
	void CallSetPresentlyFovLabel ( );
	void CallSetPreviousFovLabel ( );
	void SetFovDefaultData ( );
	void SetGamePlayValue ( );
	void CancelGamePlayOptionSetting ( );
	void InitializeHoldtoAimDataSetting ( );
	void InitializeIFFViewSetting ( );
	void InitializeFlipMeshSetting ( );
	void InitializeGamePlayOptionSetting ( );
	void SaveVivoxInputDeviceSoundSetting ( );
	void SaveSoundSetting ( );
	void CallSetInputModeKeyValue ( );
	void UpdateVoiceInputModBindingKeyString ( );
	void CallSetSoundBoolValue ( );
	void CallSetSoundArrayValue ( );
	void CallSetSoundIntValue ( );
	void ReceiveSoundOptionIndex ( );
	void SetSoundValue ( );
	void CancelSoundOptionSetting ( );
	void CallSetSoundOptionDataArray ( );
	void SetSoundOptionDataArray ( );
	void SetSoundOptionInputDeviceDataArray ( );
	void receiveCommonOptionInputDeviceChange ( );
	void SetVCInputDeviceSoundValue ( );
	void InitializeSoundOptionSetting ( );
	void SaveKeyBindingSetting ( );
	void SaveMouseSetting ( );
	void SaveControlSetting ( );
	void CallOffKeyCodeDataLink ( );
	void CheckKeyBindingDuplication ( );
	void CheckUnbindingKey ( );
	void SetSlotKeyBinding ( );
	void ReleaseKeySlot ( );
	void receiveCommonOptionKeyboardKeyUp ( );
	void CallonKeyCodeDataLink ( );
	void CallUpdateKeyBindingData ( );
	void UpdateKeyBindingData ( );
	void PrepareForKeyBinding ( );
	void CallSelectKeyBindingList ( );
	void SetOldSlotKeyBinding ( );
	void receiveCommonOptionKeyBindingBtnClick ( );
	void CallSetKeyBindingData ( );
	void CancelKeyBinding ( );
	void InitializeKeyBinding ( );
	void receiveCommonOptionIndividualMouseSensitivityBtnClick ( );
	void receiveCommonOptionMasterMouseSensitivityBtnClick ( );
	void CallSelectIndividualSensitivityBtn ( );
	void CallSelectMasterSensitivityBtn ( );
	void CallSelectReverseMouseBtn ( );
	void receiveCommonOptionGamePlayHoldToAimChange ( );
	void receiveCommonOptionReverseMouseBtnClick ( );
	void CancelHoldtoAim ( );
	void CancelMouseInvert ( );
	void CancelPresetMouseSensitivity ( );
	void CancelMasterMouseSensitivity ( );
	void CancelMouseSensMode ( );
	void CancelMouseSetting ( );
	void InitializeHoldtoAim ( );
	void InitializeMouseInvert ( );
	void InitializePresetMouseSensitivity ( );
	void InitializeMasterMouseSensitivity ( );
	void InitializeMouseSensMode ( );
	void InitializeMouseSetting ( );
	void CancelControlOptionSetting ( );
	void ReceiveCommonOptionPresetAllChkBtnClick ( );
	void ReceiveControlOptionIndex ( );
	void CallSetControlValueWithTwoParam ( );
	void CallSetControlValueWithOneParam ( );
	void CallSetControlValue ( );
	void SetControlValueWithTwoParamAndSetOldIndex ( );
	void SetControlValueWithTwoParam ( );
	void SetControlValueWithOneParam ( );
	void SetControlValue ( );
	void InitializeControlOptionSetting ( );
	void SaveGraphicSetting ( );
	void SelectSceneTone ( );
	void SelectBackgroundShadow ( );
	void SelectGoreLevel ( );
	void SelectScreenMode ( );
	void SelectScanRates ( );
	void SelectResolutions ( );
	void SelectAspectRatios ( );
	void ApplyScreenResolution ( );
	void SetVideoAdvancedOptionDisabled ( );
	void CalldisableGrpQuality ( );
	void CallSetVideoOptionDataArray ( );
	void SetVideoOptionDataArray ( );
	void GetVideoPresetLevelIndex ( );
	void PresetVideoQualityLevel ( );
	void VideoItemSelectSetUI ( );
	void AddScanResolutionItem ( );
	void AddScanRateItem ( );
	void AddAspectRatioItem ( );
	void AddScreenInfoLabel ( );
	void CallSetVideoValue ( );
	void SetVideoValue ( );
	void CancelAspectAndResolution ( );
	void SetAspectRatios ( );
	void CancelVideoOptionSetting ( );
	void ResetInitVideoOptions ( );
	void InitializeVideoOptionSetting ( );
	void CallSetButtonActivation ( );
	void SetButtonActivation ( );
	void InitButtonEnable ( );
	void CallSetLabelAndTwoValues ( );
	void CallSetLabelAndValue ( );
	void CallSetLabelAndTooltip ( );
	void CallSetLabel ( );
	void InitLabelData ( );
	void CallControlSubSelectTab ( );
	void CallGamePlaySubSelectTab ( );
	void CallSelectTab ( );
	void Init ( );
	void SetMode ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatCommon_Option::pClassPointer = NULL;

// Class CombatGame.CombatChatManager
// 0x0BC8 (0x0C28 - 0x0060)
class UCombatChatManager : public UObject
{
public:
	class UInterface_Chat*                             MainChatUI;                                       		// 0x0060 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UInterface_Chat*                             MirrorChatUI;                                     		// 0x0070 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x0078 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FChattingDisplayInfo                        ChattingDisplayInfoList[ 0x18 ];                  		// 0x0080 (0x0AE0) [0x0000000000000000]              
	struct FChattingDisplayInfo                        GameManagerChattingDisplayInfo;                   		// 0x0B60 (0x0074) [0x0000000000000000]              
	struct FString                                     DefaultColor;                                     		// 0x0BD4 (0x0010) [0x0000000000000000]              
	unsigned char                                      ChattingType;                                     		// 0x0BE4 (0x0001) [0x0000000000000000]              
	struct FString                                     MsgColor;                                         		// 0x0BE8 (0x0010) [0x0000000000000000]              
	struct FString                                     ChatUserColor;                                    		// 0x0BF8 (0x0010) [0x0000000000000000]              
	struct FString                                     ClanNameColor;                                    		// 0x0C08 (0x0010) [0x0000000000000000]              
	TArray< struct FChattingInfo >                     ChatListInfo;                                     		// 0x0C18 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50624 ];

		return pClassPointer;
	};

	void Dev_UpdateDevelopeMessage ( );
	void AddGMChatMessage ( );
	void AddChatMessage ( );
	void MakeChatUIInfo ( );
	void AddMsg ( );
	void AddClanName ( );
	void AddChatUser ( );
	void AddGMLabel ( );
	void AddInGameTeamLabel ( );
	void AddChatLabal ( );
	void SetChatColors ( );
	void GetGMLabel ( );
	void GetChatLabel ( );
	void GetChatUserInfo ( );
	void ClearMirrorChatUI ( );
	void SetMirrorChatUI ( );
	void SetMainChatUI ( );
	void Init ( );
};

UClass* UCombatChatManager::pClassPointer = NULL;

// Class CombatGame.CombatDialogManager
// 0x0070 (0x00D0 - 0x0060)
class UCombatDialogManager : public UObject
{
public:
	class UInterface_Dialog*                           OwnerMovie;                                       		// 0x0060 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                DefaultOKBtnLabelID;                              		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                DefaultCancelBtnLabelID;                          		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                DefaultTitleLabelID;                              		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultOKBtnLabel;                                		// 0x007C (0x0010) [0x0000000000000000]              
	struct FString                                     DefaultCancelBtnLabel;                            		// 0x008C (0x0010) [0x0000000000000000]              
	struct FString                                     DefaultTitleLabel;                                		// 0x009C (0x0010) [0x0000000000000000]              
	TArray< struct FDialogInfo >                       DialogInfos;                                      		// 0x00AC (0x0010) [0x0000000000000000]              
	TArray< unsigned long >                            DialogUseInfos;                                   		// 0x00BC (0x0010) [0x0000000000000000]              
	unsigned long                                      bIgnoreCreateDailog : 1;                          		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50627 ];

		return pClassPointer;
	};

	void SetIgnoreCreateDialog ( );
	void IsDialogShown ( );
	void HideDialog ( );
	void ShowDialog ( );
	void InitDialogDefaultLabels ( );
	void InitDialogInfos ( );
	void Init ( );
};

UClass* UCombatDialogManager::pClassPointer = NULL;

// Class CombatGame.Interface_Dialog
// 0x0000 (0x0060 - 0x0060)
class UInterface_Dialog : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50681 ];

		return pClassPointer;
	};

	void UnloadDialog ( );
	void LoadDialog ( );
};

UClass* UInterface_Dialog::pClassPointer = NULL;

// Class CombatGame.CombatDialog
// 0x0030 (0x00DC - 0x00AC)
class UCombatDialog : public UCombatCommon_Base
{
public:
	class UGFxClikWidget*                              OKBtn;                                            		// 0x00AC (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              CancelBtn;                                        		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             OKBtnDelegate;                                    		// 0x00BC (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00C0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             CancelBtnDelegate;                                		// 0x00CC (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00D0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50828 ];

		return pClassPointer;
	};

	void ASRemoveAllEventListeners ( );
	void ASAddEventListener ( );
	void SetListener ( );
	void RemoveAllEventListeners ( );
	void CombatAddEventListener ( );
	void SetButtonListener ( );
	void eventWidgetInitialized ( );
	void InitDailog ( );
};

UClass* UCombatDialog::pClassPointer = NULL;

// Class CombatGame.CombatHUD_StatusEffect
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_StatusEffect : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51292 ];

		return pClassPointer;
	};

	void CallSetFlashEffectGauge ( );
	void CallHideFlashEffect ( );
	void CallShowFlashEffect ( );
};

UClass* UCombatHUD_StatusEffect::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialMessage
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_TutorialMessage : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51294 ];

		return pClassPointer;
	};

	void CallSetMessage ( );
	void Init ( );
};

UClass* UCombatHUD_TutorialMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialQuest
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_TutorialQuest : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51296 ];

		return pClassPointer;
	};

	void CallResetQuest ( );
	void CallCompleteQuest ( );
	void CallAddQuest ( );
	void Init ( );
};

UClass* UCombatHUD_TutorialQuest::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialHelp
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_TutorialHelp : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51298 ];

		return pClassPointer;
	};

	void CallSetHelpText ( );
	void Init ( );
};

UClass* UCombatHUD_TutorialHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialDialog
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_TutorialDialog : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51300 ];

		return pClassPointer;
	};

	void CallSetShowTime ( );
	void CallAddDialog ( );
	void Init ( );
};

UClass* UCombatHUD_TutorialDialog::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChampionshipObserverDebugMessage
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_ChampionshipObserverDebugMessage : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51302 ];

		return pClassPointer;
	};

	void ToggleDisplay ( );
	void CallAddMessage ( );
};

UClass* UCombatHUD_ChampionshipObserverDebugMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BigSizeStringTextBox
// 0x0018 (0x00D4 - 0x00BC)
class UCombatHUD_BigSizeStringTextBox : public UCombatHUD_Base
{
public:
	class UGFxObject*                                  TextField;                                        		// 0x00BC (0x0008) [0x0000000000000000]              
	struct FString                                     msg;                                              		// 0x00C4 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51305 ];

		return pClassPointer;
	};

	void SetArmorSet ( );
	void SetSubWeapon ( );
	void SetPrimaryWeapon ( );
	void Init ( );
};

UClass* UCombatHUD_BigSizeStringTextBox::pClassPointer = NULL;

// Class CombatGame.CombatHUD_VoiceChatTalking
// 0x0013 (0x00D0 - 0x00BD)
class UCombatHUD_VoiceChatTalking : public UCombatHUDEntity_Base
{
public:
	TArray< struct FString >                           CurrentTalkingUsers;                              		// 0x00C0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51316 ];

		return pClassPointer;
	};

	void CallDrawOff ( );
	void CallDrawOn ( );
	void UIReset ( );
	void UpdateTalkingUser ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_VoiceChatTalking::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChangeTeam
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_ChangeTeam : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51318 ];

		return pClassPointer;
	};

	void GetActivateHUDByGameState ( );
	void CallFadeOut ( );
	void CallStoppedAnimation ( );
	void CallStartAnimation ( );
};

UClass* UCombatHUD_ChangeTeam::pClassPointer = NULL;

// Class CombatGame.CombatHUD_NoticePosition
// 0x000F (0x00CC - 0x00BD)
class UCombatHUD_NoticePosition : public UCombatHUDEntity_Base
{
public:
	unsigned char                                      CurrentStatus;                                    		// 0x00C0 (0x0001) [0x0000000000000000]              
	unsigned long                                      bTryShowNoticeposition : 1;                       		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              LastUpdateTime;                                   		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51320 ];

		return pClassPointer;
	};

	void CallShowBlinkMessageFadeInOutAnimation ( );
	void SetShowBlinkMessageFadeInOutAnimation ( );
	void CallShowMessageFadeInOutAnimation ( );
	void SetShowMessageFadeInOutAnimation ( );
	void CallSetNoticePositionMessage ( );
	void SetNoticePositionMessage ( );
	void SetShowMessageFadeInOutCombinationText ( );
	void SetNoticepositionCombinationText ( );
	void CallHideAnimationNoticePosition ( );
	void Tick ( );
	void Show ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
	void Custom ( );
};

UClass* UCombatHUD_NoticePosition::pClassPointer = NULL;

// Class CombatGame.CombatHUD_OccupationMessage
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_OccupationMessage : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51322 ];

		return pClassPointer;
	};

	void CallMessage ( );
};

UClass* UCombatHUD_OccupationMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_SelectSkillList
// 0x001B (0x00D8 - 0x00BD)
class UCombatHUD_SelectSkillList : public UCombatHUDEntity_Base
{
public:
	unsigned long                                      bTryShowSkillList : 1;                            		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      binitCreateSkilldata : 1;                         		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                CurrentGroupIndex;                                		// 0x00C4 (0x0004) [0x0000000000000000]              
	TArray< int >                                      UnlockAnimPlayedIndices;                          		// 0x00C8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51324 ];

		return pClassPointer;
	};

	void SetGlobalCoolTimeText ( );
	void SetCoolTimeText ( );
	void callUnlockAnimation ( );
	void CallstartFadeInAnimation ( );
	void CallSelectAnimation ( );
	void CallsetSkillPriceText ( );
	void GetHotKeyString ( );
	void callstopCoolTime ( );
	void callPlayCoolTime ( );
	void callLockAnimation ( );
	void callUpdateCRPoint ( );
	void DoLockAnimation ( );
	void CallsetData ( );
	void UpdateSkillList ( );
	void SelectSkillList ( );
	void CreateSkillList ( );
	void StartCreateSkillList ( );
	void ShowSkillList ( );
	void IsInitSkillList ( );
	void InitSkillList ( );
	void Tick ( );
	void Hide ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
	void Custom ( );
};

UClass* UCombatHUD_SelectSkillList::pClassPointer = NULL;

// Class CombatGame.CombatHUD_SelectPosition
// 0x001B (0x00D8 - 0x00BD)
class UCombatHUD_SelectPosition : public UCombatHUDEntity_Base
{
public:
	unsigned char                                      CurrentStatus;                                    		// 0x00C0 (0x0001) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTryShowSelectposition : 1;                       		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                CurrentSelectPositionIndex;                       		// 0x00CC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SelectInfo;                                       		// 0x00D0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51326 ];

		return pClassPointer;
	};

	void GetPositionData ( );
	void GetSkillPositionData ( );
	void SetPosistionInfo ( );
	void SetPositionList ( );
	void CallSelectionInfoHide ( );
	void CallSelectionInfoShow ( );
	void CallSetUpdatePositionList ( );
	void CallSetSelectedIndex ( );
	void SetSelectedIndex ( );
	void IsInitSelectposition ( );
	void Tick ( );
	void Show ( );
	void HideAnimation ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
	void Custom ( );
	void SetpositionInfo ( );
	void Init ( );
};

UClass* UCombatHUD_SelectPosition::pClassPointer = NULL;

// Class CombatGame.CombatHUD_MagazineState
// 0x008B (0x0148 - 0x00BD)
class UCombatHUD_MagazineState : public UCombatHUDEntity_Base
{
public:
	int                                                LastMagazineState;                                		// 0x00C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitLabels : 1;                                  		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     StateString[ 0x4 ];                               		// 0x00C8 (0x0040) [0x0000000000000000]              
	struct FString                                     StateFontColor[ 0x4 ];                            		// 0x0108 (0x0040) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51328 ];

		return pClassPointer;
	};

	void CallSetMagazineStateTxt ( );
	void InitLabels ( );
	void UpdateMagazineState ( );
	void Hide ( );
	void Init ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_MagazineState::pClassPointer = NULL;

// Class CombatGame.CombatHUD_NoticeHotKey
// 0x0043 (0x0100 - 0x00BD)
class UCombatHUD_NoticeHotKey : public UCombatHUDEntity_Base
{
public:
	struct FString                                     HotKeyFontColor;                                  		// 0x00C0 (0x0010) [0x0000000000000000]              
	struct FString                                     ItemFontColor;                                    		// 0x00D0 (0x0010) [0x0000000000000000]              
	struct FString                                     PrevHotKey;                                       		// 0x00E0 (0x0010) [0x0000000000000000]              
	struct FString                                     PrevActionName;                                   		// 0x00F0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51330 ];

		return pClassPointer;
	};

	void CallSetNoticeTxt ( );
	void SetHotKeyText ( );
	void IsShowHotKey ( );
	void HideHotKey ( );
	void DisplayHotKey ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
	void Custom ( );
};

UClass* UCombatHUD_NoticeHotKey::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_RankUp
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_Message_RankUp : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51333 ];

		return pClassPointer;
	};

	void CallAlertRankUpMessage ( );
	void Init ( );
};

UClass* UCombatHUD_Message_RankUp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Surrender
// 0x000F (0x00CC - 0x00BD)
class UCombatHUD_Surrender : public UCombatHUDEntity_Base
{
public:
	unsigned char                                      CurrentTeamIndex;                                 		// 0x00C0 (0x0001) [0x0000000000000000]              
	int                                                UI_RemainSecond;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCanVote : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51335 ];

		return pClassPointer;
	};

	void CallSetVotingIcon ( );
	void CallSetShortKey ( );
	void CallSetTitleText ( );
	void UpdateSurrendReply ( );
	void UpdateSurrenderTitle ( );
	void Tick ( );
	void HideSurrender ( );
	void UpdateTeamIndex ( );
	void InitSurrender ( );
};

UClass* UCombatHUD_Surrender::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BattleLog
// 0x0007 (0x00C4 - 0x00BD)
class UCombatHUD_BattleLog : public UCombatHUDEntity_Base
{
public:
	unsigned long                                      bDisplayed : 1;                                   		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51337 ];

		return pClassPointer;
	};

	void Callinitialize ( );
	void CallsetData ( );
	void Hide ( );
	void Show ( );
	void SetBattleLogData ( );
	void Init ( );
	void DisplayTimer ( );
	void GetDisplayed ( );
	void SetDisplayed ( );
};

UClass* UCombatHUD_BattleLog::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChampionshipSpectatedPlayerInfo
// 0x0013 (0x00D0 - 0x00BD)
class UCombatHUD_ChampionshipSpectatedPlayerInfo : public UCombatHUDEntity_Base
{
public:
	struct FString                                     LastPlayerName;                                   		// 0x00C0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51339 ];

		return pClassPointer;
	};

	void CallChangeBg ( );
	void CallHidePlayerInfo ( );
	void CallShowPlayerInfo ( );
	void CallSetClanInfo ( );
	void CallSetPlayerName ( );
	void GetGrenadeUIType ( );
	void GetWeaponUIType ( );
	void UpdateGreandeCount ( );
	void InitGrenadeCount ( );
	void UpdateObserverWeaponInfo ( );
	void ClearViewTargetInfo ( );
	void UpdateViewTargetInfo ( );
	void SetObserverInformation ( );
	void Init ( );
	void GetActivateHUDByPlayerState ( );
};

UClass* UCombatHUD_ChampionshipSpectatedPlayerInfo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_DeathCamInfo
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_DeathCamInfo : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51341 ];

		return pClassPointer;
	};

	void SetKillInfo ( );
	void GetActivateHUDByPlayerState ( );
	void Init ( );
};

UClass* UCombatHUD_DeathCamInfo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_DeathCamRecord
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_DeathCamRecord : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51343 ];

		return pClassPointer;
	};

	void ClassSetSuicideMessage ( );
	void GetActivateHUDByPlayerState ( );
	void Init ( );
	void CallSetScore ( );
};

UClass* UCombatHUD_DeathCamRecord::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ObserverRevivalWeapon
// 0x0047 (0x0104 - 0x00BD)
class UCombatHUD_ObserverRevivalWeapon : public UCombatHUDEntity_Base
{
public:
	unsigned char                                      LastReservedPreset;                               		// 0x00C0 (0x0001) [0x0000000000000000]              
	struct FString                                     TitleMessage;                                     		// 0x00C4 (0x0010) [0x0000000000000000]              
	struct FString                                     PresetKeyName[ 0x3 ];                             		// 0x00D4 (0x0030) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51345 ];

		return pClassPointer;
	};

	void UpdateReservedWeapon ( );
	void Show ( );
	void Init ( );
	void GetActivateHUDByPlayerState ( );
};

UClass* UCombatHUD_ObserverRevivalWeapon::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ObserverHelp
// 0x0007 (0x00C4 - 0x00BD)
class UCombatHUD_ObserverHelp : public UCombatHUDEntity_Base
{
public:
	unsigned long                                      bInitKeyData : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51347 ];

		return pClassPointer;
	};

	void IsChangeSpectatingCameraMode ( );
	void GetActivateHUDByPlayerState ( );
	void InitLabels ( );
	void Show ( );
	void Init ( );
};

UClass* UCombatHUD_ObserverHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ObserverInfo
// 0x006B (0x0128 - 0x00BD)
class UCombatHUD_ObserverInfo : public UCombatHUDEntity_Base
{
public:
	int                                                LastHealth;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                LastAmmoCount;                                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                LastMagazineCount;                                		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                LastGrenadeA;                                     		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                LastGrenadeB;                                     		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FString                                     LastWeaponName;                                   		// 0x00D4 (0x0010) [0x0000000000000000]              
	unsigned long                                      LastHasBomb : 1;                                  		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      LastShowBullet : 1;                               		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                LastLevel;                                        		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                LastTierPoint;                                    		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                LastCCardID;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FString                                     LastLevelImgPath;                                 		// 0x00F4 (0x0010) [0x0000000000000000]              
	struct FString                                     LastTierImgSmallPath;                             		// 0x0104 (0x0010) [0x0000000000000000]              
	struct FString                                     LastCCardPath;                                    		// 0x0114 (0x0010) [0x0000000000000000]              
	int                                                LastKillCount;                                    		// 0x0124 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51349 ];

		return pClassPointer;
	};

	void UpdateBombImage ( );
	void UpdateGreandeCount ( );
	void InitGrenadeCount ( );
	void UpdateWeaponAmmo ( );
	void CallSetWeaponKill ( );
	void UpdateWeaponName ( );
	void UpdateKillCount ( );
	void UpdateObserverWeaponInfo ( );
	void CallSetPlayerInfo ( );
	void UpdateViewTargetInfo ( );
	void GetRefCallingCardTable ( );
	void Init ( );
	void GetActivateHUDByPlayerState ( );
};

UClass* UCombatHUD_ObserverInfo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GrenadeIndicator
// 0x0047 (0x0104 - 0x00BD)
class UCombatHUD_GrenadeIndicator : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  Indicators[ 0x4 ];                                		// 0x00C0 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  GrenadeIconMC[ 0x4 ];                             		// 0x00E0 (0x0020) [0x0000000000000000]              
	unsigned long                                      bShowInit : 1;                                    		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51354 ];

		return pClassPointer;
	};

	void SetIndicatorRotation ( );
	void HideAllIndicators ( );
	void HideIndicator ( );
	void Init ( );
	void Hide ( );
	void Show ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_GrenadeIndicator::pClassPointer = NULL;

// Class CombatGame.CombatHUD_CompetitionWarmUp
// 0x0007 (0x00C4 - 0x00BD)
class UCombatHUD_CompetitionWarmUp : public UCombatHUDEntity_Base
{
public:
	int                                                UI_ReaminSecond;                                  		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51355 ];

		return pClassPointer;
	};

	void CallSetTeamData ( );
	void CallsetTimer ( );
	void CallSetBottomText ( );
	void CallSetBG ( );
	void CallUpdateUserState ( );
	void CallSetCompetitionData ( );
	void Callinitialize ( );
	void UpdateWarmUpInfomation ( );
	void InitWarmUpInfomation ( );
	void Tick ( );
	void Init ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_CompetitionWarmUp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_WarmUp
// 0x0023 (0x00E0 - 0x00BD)
class UCombatHUD_WarmUp : public UCombatHUDEntity_Base
{
public:
	TArray< struct FWarmUpInfo >                       WarmUpPmInfos;                                    		// 0x00C0 (0x0010) [0x0000000000000000]              
	TArray< struct FWarmUpInfo >                       WarmUpVcInfos;                                    		// 0x00D0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51356 ];

		return pClassPointer;
	};

	void Reset ( );
	void UpdateWarmUpInfomation ( );
	void Tick ( );
	void CallHideModeGuide ( );
	void CallShowModeGuide ( );
	void CallHideAnimation ( );
	void CallSetWeapon ( );
	void CallSetVcPlayerList ( );
	void CallSetPmPlayerList ( );
	void SetWarmUpPresetImage ( );
	void Init ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_WarmUp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_RoundOver
// 0x00CB (0x0188 - 0x00BD)
class UCombatHUD_Message_RoundOver : public UCombatHUDEntity_Base
{
public:
	struct FString                                     RoundWinLabel;                                    		// 0x00C0 (0x0010) [0x0000000000000000]              
	struct FString                                     RoundLoseLabel;                                   		// 0x00D0 (0x0010) [0x0000000000000000]              
	struct FString                                     MatchEndWinLabel;                                 		// 0x00E0 (0x0010) [0x0000000000000000]              
	struct FString                                     MatchEndLoseLabel;                                		// 0x00F0 (0x0010) [0x0000000000000000]              
	struct FString                                     AISuccessLabel;                                   		// 0x0100 (0x0010) [0x0000000000000000]              
	struct FString                                     AIFailLabel;                                      		// 0x0110 (0x0010) [0x0000000000000000]              
	struct FString                                     AIPlayTimeLabel;                                  		// 0x0120 (0x0010) [0x0000000000000000]              
	struct FString                                     AIWaveLabel;                                      		// 0x0130 (0x0010) [0x0000000000000000]              
	struct FString                                     AIDefendMarkHpLabel;                              		// 0x0140 (0x0010) [0x0000000000000000]              
	struct FString                                     AITeamScoreLabel;                                 		// 0x0150 (0x0010) [0x0000000000000000]              
	int                                                RoundWinReasonLabelID;                            		// 0x0160 (0x0004) [0x0000000000000000]              
	int                                                RoundLoseReasonLabelID;                           		// 0x0164 (0x0004) [0x0000000000000000]              
	struct FString                                     RoundWinReasonLabel;                              		// 0x0168 (0x0010) [0x0000000000000000]              
	struct FString                                     RoundLoseReasonLabel;                             		// 0x0178 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51359 ];

		return pClassPointer;
	};

	void CallStartAIRoundMessage ( );
	void CallStartCompititiveRoundMessage ( );
	void CallStartSingleRound ( );
	void CallStartMultiRound ( );
	void GetActivateHUDByGameState ( );
	void MakeCompetitiveMatchClanData ( );
	void MakeClanMatchData ( );
	void DisplayAIMatchEndInfo ( );
	void DisplayMatchEndInfo ( );
	void DisplayRoundOverInfo ( );
	void SendLabels_MatchEnd ( );
	void SendLabels_RoundOver ( );
	void SetRoundReasonLabels ( );
	void InitLabels ( );
	void Init ( );
};

UClass* UCombatHUD_Message_RoundOver::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_CountDown
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_Message_CountDown : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51361 ];

		return pClassPointer;
	};

	void CallMessage ( );
	void Init ( );
};

UClass* UCombatHUD_Message_CountDown::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_RoundStart
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_Message_RoundStart : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51362 ];

		return pClassPointer;
	};

	void CallHideAnimationMessage ( );
	void CallStartMessage ( );
	void Init ( );
};

UClass* UCombatHUD_Message_RoundStart::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Chat
// 0x0010 (0x00CC - 0x00BC)
class UCombatHUD_Chat : public UCombatHUDComponent_Base
{
public:
	struct FString                                     LastWhisperSenderName;                            		// 0x00BC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51369 ];

		return pClassPointer;
	};

	void UpdateLastWhisperList ( );
	void SaveLastWhisperSenderName ( );
	void AddMessage ( );
	void AbleClanChatting ( );
	void CallSetWhisperId ( );
	void CallSetModeLables ( );
	void CallSetKeyLabels ( );
	void CallAddMessage ( );
	void CallSetLabelLastWhisperList ( );
	void CallRemoveLastWhisperListData ( );
	void CallSetLastWhisperListData ( );
	void Init ( );
};

UClass* UCombatHUD_Chat::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PresetSelectWaiting
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_PresetSelectWaiting : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51373 ];

		return pClassPointer;
	};

	void GetActivateHUDByGameState ( );
	void Init ( );
};

UClass* UCombatHUD_PresetSelectWaiting::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PresetTimer
// 0x0000 (0x00C0 - 0x00C0)
class UCombatHUD_PresetTimer : public UCombatHUD_PresetSelectScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51375 ];

		return pClassPointer;
	};

	void CallStartTimer ( );
	void CallSetTimerEnd ( );
};

UClass* UCombatHUD_PresetTimer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PresetHelp
// 0x0000 (0x00C0 - 0x00C0)
class UCombatHUD_PresetHelp : public UCombatHUD_PresetSelectScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51377 ];

		return pClassPointer;
	};

	void SetDisplayText ( );
	void SetKeyString ( );
	void Init ( );
};

UClass* UCombatHUD_PresetHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Bomb_TimeBar
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_Bomb_TimeBar : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51380 ];

		return pClassPointer;
	};

	void CallC4KitDefusing ( );
	void CallC4KitMessage ( );
	void CallEndTimeBar ( );
	void CallStartTimeBar ( );
	void CallInitTimeBar ( );
	void HideBombProgressBar ( );
	void EndBombDefuseProgressBar ( );
	void EndBombPlantProgressBar ( );
	void StartBombDefuseProgressBar ( );
	void SetBombPlantProgressBar ( );
};

UClass* UCombatHUD_Bomb_TimeBar::pClassPointer = NULL;

// Class CombatGame.CombatHUD_DeviceCoolTimer
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_DeviceCoolTimer : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51382 ];

		return pClassPointer;
	};

	void Reset ( );
	void CallInitCoolTime ( );
	void CallStartCoolTime ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_DeviceCoolTimer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GOContainer
// 0x001B (0x00D8 - 0x00BD)
class UCombatHUD_GOContainer : public UCombatHUDEntity_Base
{
public:
	TArray< class UCombatHUD_GameObject* >             Components;                                       		// 0x00C0 (0x0010) [0x0000000000000000]              
	int                                                Count;                                            		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                LastGOLocalMessageID;                             		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51385 ];

		return pClassPointer;
	};

	void DisplayGODistanceMessage ( );
	void Update ( );
	void RegisterComponent ( );
	void Hide ( );
	void Show ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_GOContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BombsitesContainer
// 0x0004 (0x00DC - 0x00D8)
class UCombatHUD_BombsitesContainer : public UCombatHUD_GOContainer
{
public:
	float                                              GoMsgUpdateTime;                                  		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51384 ];

		return pClassPointer;
	};

	void CheckNearbyGO ( );
	void CheckHotKeyMessage ( );
	void CheckAvailableGO ( );
	void DisplayGODistanceMessage ( );
	void Update ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_BombsitesContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_HitDamageBoard
// 0x0023 (0x00E0 - 0x00BD)
class UCombatHUD_HitDamageBoard : public UCombatHUDEntity_Base
{
public:
	TArray< class UGFxObject* >                        BoardList;                                        		// 0x00C0 (0x0010) [0x0000000000000000]              
	TArray< class UGFxObject* >                        BoardList_DamageTF;                               		// 0x00D0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51388 ];

		return pClassPointer;
	};

	void GetBoardName ( );
	void SetDamage ( );
	void SetBoardPosition ( );
	void SetBoardVisible ( );
	void Init ( );
	void Hide ( );
	void Show ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_HitDamageBoard::pClassPointer = NULL;

// Class CombatGame.CombatHUD_KillMark
// 0x0033 (0x00F0 - 0x00BD)
class UCombatHUD_KillMark : public UCombatHUDEntity_Base
{
public:
	TArray< struct FKillMarkStringStruct >             KMStringList;                                     		// 0x00C0 (0x0010) [0x0000000000000000]              
	struct FString                                     ImagePath;                                        		// 0x00D0 (0x0010) [0x0000000000000000]              
	struct FString                                     SoundPath;                                        		// 0x00E0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51390 ];

		return pClassPointer;
	};

	void ShowVictimName ( );
	void GetSoundPath ( );
	void CallVictimNameMessage ( );
	void CallKillMessage ( );
	void DisplayKillMark ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_KillMark::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ScoringRight
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_ScoringRight : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51393 ];

		return pClassPointer;
	};

	void CallMessage ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_ScoringRight::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ScoringList
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_ScoringList : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51395 ];

		return pClassPointer;
	};

	void CallComboMessage ( );
	void CallMessage ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_ScoringList::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BlockAndReport
// 0x0047 (0x0104 - 0x00BD)
class UCombatHUD_BlockAndReport : public UCombatHUDEntity_Base
{
public:
	struct FString                                     ImageReportURL;                                   		// 0x00C0 (0x0010) [0x0000000000000000]              
	TArray< struct FBlockAndReportLabelSettingInfo >   BlockAndReportLabelSettingInfos;                  		// 0x00D0 (0x0010) [0x0000000000000000]              
	TArray< struct FBlockAndReportLabelSettingInfo >   BlockAndReportRadioButtonInfos;                   		// 0x00E0 (0x0010) [0x0000000000000000]              
	TArray< struct FReportPlayerInfo >                 ReportReceiptList;                                		// 0x00F0 (0x0010) [0x0000000000000000]              
	int                                                ReportPlayerID;                                   		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51398 ];

		return pClassPointer;
	};

	void receiveBlackListDeclarationCancelButton ( );
	void receiveBlackListDeclarationOkButton ( );
	void receiveBlackListPlayerListCancelButton ( );
	void receiveBlackListPlayerListOkButton ( );
	void CallChangePlayerListMode ( );
	void CallSetDeclarationTarget ( );
	void CallChangeDeclarationMode ( );
	void CallSetPlayerList ( );
	void UpdateReportReceiptList ( );
	void ReportReceiptCheck ( );
	void SetCurrentReportPlayerID ( );
	void IsTeamMateByUserID ( );
	void UpdateUserList ( );
	void InitLabels ( );
	void Show ( );
	void Init ( );
};

UClass* UCombatHUD_BlockAndReport::pClassPointer = NULL;

// Class CombatGame.CombatInGameOptionMenu
// 0x0013 (0x00D0 - 0x00BD)
class UCombatInGameOptionMenu : public UCombatHUDEntity_Base
{
public:
	TArray< struct FMenuInfo >                         MenuInfoList;                                     		// 0x00C0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51399 ];

		return pClassPointer;
	};

	void receiveOptionMenuButton ( );
	void OptionBtnDisable ( );
	void BlockAndReportBtnDisable ( );
	void CallSetVisibleButton ( );
	void CallSetDisableButton ( );
	void InitBtns ( );
	void InitLabels ( );
	void SetButtonDisable ( );
	void Hide ( );
	void Show ( );
	void Init ( );
};

UClass* UCombatInGameOptionMenu::pClassPointer = NULL;

// Class CombatGame.CombatHUD_KillDeathList
// 0x0063 (0x0120 - 0x00BD)
class UCombatHUD_KillDeathList : public UCombatHUDEntity_Base
{
public:
	struct FString                                     KillDeathList_KillTypeIcons[ 0x6 ];               		// 0x00C0 (0x0060) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51401 ];

		return pClassPointer;
	};

	void AddKillDeathInfo ( );
	void AddSuicideInfo ( );
	void CallKillInfoList ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_KillDeathList::pClassPointer = NULL;

// Class CombatGame.CombatHUD_IFFContainer
// 0x001F (0x00DC - 0x00BD)
class UCombatHUD_IFFContainer : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  AttachLayerMC;                                    		// 0x00C0 (0x0008) [0x0000000000000000]              
	TArray< struct FIFFObjectData >                    IFFs;                                             		// 0x00C8 (0x0010) [0x0000000000000000]              
	int                                                IFFObjectCreateRange;                             		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51403 ];

		return pClassPointer;
	};

	void CallFlashEffectAlign ( );
	void CallFlashEffectGauge ( );
	void CallSetLevelIcon ( );
	void CallSetAggroName ( );
	void CallInitAlign ( );
	void ClearIFF ( );
	void Init ( );
	void ResizeIFF ( );
	void FindNoUsingIFF ( );
	void GetIFF ( );
	void SetObserverIFF ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_IFFContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_Personal
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_Message_Personal : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51406 ];

		return pClassPointer;
	};

	void ClearMessage ( );
	void SetMessage ( );
	void Hide ( );
	void Show ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_Message_Personal::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_Personal_Auto
// 0x0000 (0x00C0 - 0x00C0)
class UCombatHUD_Message_Personal_Auto : public UCombatHUD_Message_Personal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51405 ];

		return pClassPointer;
	};

	void SetMessage ( );
};

UClass* UCombatHUD_Message_Personal_Auto::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GlobalMessage
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_GlobalMessage : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51409 ];

		return pClassPointer;
	};

	void CallMessagePush ( );
	void Init ( );
};

UClass* UCombatHUD_GlobalMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_RespawnProgressBar
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_RespawnProgressBar : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51411 ];

		return pClassPointer;
	};

	void CallStartTimer ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_RespawnProgressBar::pClassPointer = NULL;

// Class CombatGame.CombatHUD_RoundStatusBar
// 0x0033 (0x00F0 - 0x00BD)
class UCombatHUD_RoundStatusBar : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  MinTF;                                            		// 0x00C0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  SecTF;                                            		// 0x00C8 (0x0008) [0x0000000000000000]              
	int                                                LastWinCondition;                                 		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FString                                     C4Label;                                          		// 0x00D4 (0x0010) [0x0000000000000000]              
	class UObject*                                     Option;                                           		// 0x00E4 (0x0008) [0x0000000000000000]              
	int                                                TimerState;                                       		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51418 ];

		return pClassPointer;
	};

	void CallVCPeopleCount ( );
	void SetVCPlayerCount ( );
	void CallPMPeopleCount ( );
	void SetPMPlayerCount ( );
	void HideVipStatus ( );
	void ShowVipStatus ( );
	void InvokeSetModeScoring ( );
	void SetModeScoring ( );
	void SetBunkerGoalNum ( );
	void SetMissionActorState ( );
	void InvokeCreateBunkerMode ( );
	void CreateBunkerMode ( );
	void SetC4IconVisible ( );
	void SetRoundWinCondition ( );
	void SetCount ( );
	void SetMyTeam ( );
	void CallHideHostageState ( );
	void CallSetHostageState ( );
	void CallTimerOnOff ( );
	void CallSetDurationTime ( );
	void CallStopC4Timer ( );
	void CallUpdateC4Minute ( );
	void CallStartC4Timer ( );
	void CallPauseTimer ( );
	void CallUpdateMinute ( );
	void CallStartOneMinute ( );
	void CallInitTimer ( );
	void Custom ( );
	void StartRescueTimer ( );
	void StartC4Timer ( );
	void ChangeAIWaveMode ( );
	void ChangeRescueDeffenseMode ( );
	void ChangeRescueAttackMode ( );
	void ChangeBusterMode ( );
	void ChangeSEIMode ( );
	void ChangeDemolitionDeffenseMode ( );
	void ChangeDemolitionAttackMode ( );
	void ChangeTdmHardCoreMode ( );
	void ChangeTdmMode ( );
	void SetTime_Sec ( );
	void SetTime_Min ( );
	void Reset ( );
	void Init ( );
	void SetObserverRoundDisplay ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_RoundStatusBar::pClassPointer = NULL;

// Class CombatGame.CombatHUD_HitIndicator
// 0x003B (0x00F8 - 0x00BD)
class UCombatHUD_HitIndicator : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  Direction[ 0x7 ];                                 		// 0x00C0 (0x0038) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51424 ];

		return pClassPointer;
	};

	void Disappear ( );
	void Appear ( );
	void SetDirectionRotation ( );
	void Init ( );
	void Hide ( );
	void Show ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_HitIndicator::pClassPointer = NULL;

// Class CombatGame.CombatHUD_WeaponInfo
// 0x003B (0x00F8 - 0x00BD)
class UCombatHUD_WeaponInfo : public UCombatHUDEntity_Base
{
public:
	int                                                LastAmmoCount;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                LastRemainAmmoCount;                              		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                LastChamberAmmoCount;                             		// 0x00C8 (0x0004) [0x0000000000000000]              
	unsigned char                                      LastUIType;                                       		// 0x00CC (0x0001) [0x0000000000000000]              
	unsigned char                                      LastSelectedGrenadeSlot;                          		// 0x00CD (0x0001) [0x0000000000000000]              
	struct FString                                     LastGrenadeSlotACount;                            		// 0x00D0 (0x0010) [0x0000000000000000]              
	struct FString                                     LastGrenadeSlotBCount;                            		// 0x00E0 (0x0010) [0x0000000000000000]              
	int                                                LastGrenadeSlotAType;                             		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                LastGrenadeSlotBType;                             		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51436 ];

		return pClassPointer;
	};

	void CallStopSkill ( );
	void CallPlaySkill ( );
	void CallHideSkill ( );
	void CallShowSkill ( );
	void CallHideKillInfo ( );
	void CallShowKillInfo ( );
	void IsAvailableGrenadeType ( );
	void SetSelectedGrenadeType ( );
	void SetGrenadeSlotBType ( );
	void SetGrenadeSlotBCount ( );
	void SetGrenadeSlotAType ( );
	void SetGrenadeSlotACount ( );
	void CallAlarmC4 ( );
	void CallHideC4 ( );
	void CallShowC4 ( );
	void CallSetWeapon ( );
	void CallSetBulletType3 ( );
	void CallSetBulletType2 ( );
	void CallSetBulletType1 ( );
	void CallSetBulletType0 ( );
	void Reset ( );
	void UpdateObserverWeaponInfo ( );
	void UpdateGreandeCount ( );
	void InitGrenadeCount ( );
	void GetGrenadeUIType ( );
	void GetWeaponUIType ( );
	void UpdateGrenadeCount ( );
	void UpdateAmmoCount ( );
	void UpdateKillCount ( );
	void ChangeWeaponInfo ( );
	void Init ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_WeaponInfo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_CharacterInfo
// 0x002F (0x00EC - 0x00BD)
class UCombatHUD_CharacterInfo : public UCombatHUDEntity_Base
{
public:
	int                                                LastHealth;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                LastHealthMax;                                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	struct FString                                     LastRankName;                                     		// 0x00C8 (0x0010) [0x0000000000000000]              
	struct FString                                     LastRankIconPath;                                 		// 0x00D8 (0x0010) [0x0000000000000000]              
	int                                                LastPositionType;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51439 ];

		return pClassPointer;
	};

	void CallSetPortrait ( );
	void CallHideChaFootItemFXIcon ( );
	void CallShowChaFootItemFXIcon ( );
	void CallHideChaUpperItemFXIcon ( );
	void CallShowChaUpperItemFXIcon ( );
	void CallHideTactical ( );
	void CallShowTactical ( );
	void CallHidePassiveSkill ( );
	void CallShowPassiveSkill ( );
	void CallSetCrPoint ( );
	void CallShowPosition ( );
	void CallUpdateHP ( );
	void CallUpdateLevelInfo ( );
	void SetPortraitIcon ( );
	void SetChaFootItemFXIcon ( );
	void SetChaUpperItemFXIcon ( );
	void ShowTacticalGearSetIcon ( );
	void Tick ( );
	void Reset ( );
	void UpdateRankInfo ( );
	void UpdateHP ( );
	void GetActivateHUDByPlayerState ( );
	void GetActivateHUDByGameState ( );
	void Show ( );
	void Init ( );
};

UClass* UCombatHUD_CharacterInfo::pClassPointer = NULL;

// Class CombatGame.CombatMain_HUD
// 0x0000 (0x00AC - 0x00AC)
class UCombatMain_HUD : public UCombatMain_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51481 ];

		return pClassPointer;
	};

	void Init ( );
};

UClass* UCombatMain_HUD::pClassPointer = NULL;

// Class CombatGame.Interface_Chat
// 0x0000 (0x0060 - 0x0060)
class UInterface_Chat : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51564 ];

		return pClassPointer;
	};

	void UpdateLastWhisperList ( );
	void SaveLastWhisperSenderName ( );
	void AddMessage ( );
};

UClass* UInterface_Chat::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChampionshipPlayerInfoList
// 0x0000 (0x00BC - 0x00BC)
class UCombatHUD_ChampionshipPlayerInfoList : public UCombatHUDComponent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51622 ];

		return pClassPointer;
	};

	void Initialize ( );
	void CallSetPlayerHp ( );
	void CallSetPlayerName_AttackTeam ( );
	void CallSetPlayerName_DefenseTeam ( );
	void CallSetPlayerStatus ( );
	void CallSetPlayerKillNum ( );
	void CallSetPlayerWeaponName ( );
	void CallSetPlayerName ( );
};

UClass* UCombatHUD_ChampionshipPlayerInfoList::pClassPointer = NULL;

// Class CombatGame.CombatInGameBattleLog
// 0x008C (0x00EC - 0x0060)
class UCombatInGameBattleLog : public UObject
{
public:
	TArray< struct FbattleLog >                        BattleLogData;                                    		// 0x0060 (0x0010) [0x0000000000000000]              
	TArray< struct FDisplayTable >                     OtherPlayersTables;                               		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FDisplayTable                               MyTable;                                          		// 0x0080 (0x0030) [0x0000000000000000]              
	struct FString                                     LocalPlayerName;                                  		// 0x00B0 (0x0010) [0x0000000000000000]              
	int                                                KillerIndex;                                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           SupportedGameNames;                               		// 0x00C4 (0x0010) [0x0000000000000000]              
	unsigned long                                      bActive : 1;                                      		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	class UCombatHUD_BattleLog*                        BattleLogMC;                                      		// 0x00D8 (0x0008) [0x0000000000000000]              
	class ACombatPC*                                   LocalPC;                                          		// 0x00E0 (0x0008) [0x0000000000000000]              
	float                                              DisplayTableSettingDelayTime;                     		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51813 ];

		return pClassPointer;
	};

	void ResetAll ( );
	void SetBattleLog ( );
	void SortOtherPlayersTablesByTimeStamp ( );
	void SetMyTable ( );
	void ExtractOtherPlayersTables ( );
	void SetOtherPlayersTables ( );
	void SetDisplayTables ( );
	void GatheringLastTakeHitInfo ( );
	void GetActive ( );
	void SetActive ( );
	void SetGameMode ( );
	void GetDisplayed ( );
	void SetBattleLogMC ( );
	void Init ( );
};

UClass* UCombatInGameBattleLog::pClassPointer = NULL;

// Class CombatGame.CombatInGameChatManager
// 0x0000 (0x0C28 - 0x0C28)
class UCombatInGameChatManager : public UCombatChatManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52494 ];

		return pClassPointer;
	};

	void AddInGameTeamLabel ( );
};

UClass* UCombatInGameChatManager::pClassPointer = NULL;

// Class CombatGame.CombatHUD_AIDefenseKillCombo
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_AIDefenseKillCombo : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52500 ];

		return pClassPointer;
	};

	void CallPlayWave ( );
	void CallPauseWave ( );
	void CallPlayAnimation ( );
	void CallSetSecond ( );
	void CallSetComboImageUrl ( );
	void Init ( );
};

UClass* UCombatHUD_AIDefenseKillCombo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_AIMissionActorContainer
// 0x0000 (0x00D8 - 0x00D8)
class UCombatHUD_AIMissionActorContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52502 ];

		return pClassPointer;
	};

	void Update ( );
	void InitGameObject ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_AIMissionActorContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUDOption_AIWaveRoundStatus
// 0x0018 (0x0078 - 0x0060)
class UCombatHUDOption_AIWaveRoundStatus : public UObject
{
public:
	struct FRoundStatusInfo                            RoundStatus;                                      		// 0x0060 (0x0014) [0x0000000000000000]              
	int                                                ObjectHealthWarningCondition;                     		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52504 ];

		return pClassPointer;
	};

	void SetLabel ( );
	void UpdateObjectHealthWarning ( );
	void UpdateObjectHealth ( );
	void UpdateRemainingBotCount ( );
	void UpdateMaxWave ( );
	void UpdateCurrentWave ( );
	void UpdateTeamScore ( );
	void Update ( );
	void InitData ( );
};

UClass* UCombatHUDOption_AIWaveRoundStatus::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_Warning
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_Message_Warning : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52508 ];

		return pClassPointer;
	};

	void CallStartWarning ( );
	void Init ( );
};

UClass* UCombatHUD_Message_Warning::pClassPointer = NULL;

// Class CombatGame.CombatHUD_WaveModePlayTime
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_WaveModePlayTime : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52510 ];

		return pClassPointer;
	};

	void CallSetPlayTime ( );
	void GetActivateHUDByGameState ( );
};

UClass* UCombatHUD_WaveModePlayTime::pClassPointer = NULL;

// Class CombatGame.CombatHUD_AIMissionActor
// 0x000D (0x01BD - 0x01B0)
class UCombatHUD_AIMissionActor : public UCombatHUD_GameObject
{
public:
	class ACombatBarricade*                            TargetActor;                                      		// 0x01B0 (0x0008) [0x0000000000000000]              
	int                                                LastDisplayHealth;                                		// 0x01B8 (0x0004) [0x0000000000000000]              
	unsigned char                                      LastUIState;                                      		// 0x01BC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52591 ];

		return pClassPointer;
	};

	void CallsetHpGauge ( );
	void UpdateHealth ( );
	void SetTarget ( );
	void GetLevelObjectMovieClips ( );
	void UpdateVisible ( );
	void Update ( );
	void GetIconFrameLabel ( );
};

UClass* UCombatHUD_AIMissionActor::pClassPointer = NULL;

// Class CombatGame.SeqAct_ProjAttack
// 0x0060 (0x0180 - 0x0120)
class USeqAct_ProjAttack : public USeqAct_Latent
{
public:
	class UClass*                                      ProjectileClass;                                  		// 0x0120 (0x0008) [0x0000000000000000]              
	float                                              SpawnHegiht;                                      		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              RandomRadius;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              InitDelay;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                MaxSpawnCount;                                    		// 0x0134 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             AimPS;                                            		// 0x0138 (0x0008) [0x0000000000000000]              
	unsigned long                                      bUseWarningMessage : 1;                           		// 0x0140 (0x0004) [0x0000000000000000] [0x00000001] 
	class AActor*                                      Instigator;                                       		// 0x0144 (0x0008) [0x0000000000000000]              
	TArray< struct FVector >                           SpawnLocationList;                                		// 0x014C (0x0010) [0x0000000000000000]              
	TArray< struct FVector >                           DestinationList;                                  		// 0x015C (0x0010) [0x0000000000000000]              
	TArray< struct FVector >                           AimPSLocList;                                     		// 0x016C (0x0010) [0x0000000000000000]              
	int                                                ProjSpawnCount;                                   		// 0x017C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52734 ];

		return pClassPointer;
	};

	void OnWarning ( );
	void TimerSpawnProjectile ( );
	void SpawnAimPS ( );
	void ReadyToAttack ( );
	void SuccessFinish ( );
	void eventActivated ( );
};

UClass* USeqAct_ProjAttack::pClassPointer = NULL;

// Class CombatGame.CombatTDMGameReplicationInfo
// 0x0000 (0x0380 - 0x0380)
class ACombatTDMGameReplicationInfo : public ACBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52778 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ACombatTDMGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatStatStorageAITDM
// 0x0000 (0x0094 - 0x0094)
class UCombatStatStorageAITDM : public UCombatStatStoragePVE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52898 ];

		return pClassPointer;
	};

	void SaveStatByOther ( );
};

UClass* UCombatStatStorageAITDM::pClassPointer = NULL;

// Class CombatGame.CombatBotPRI_AITDM
// 0x0000 (0x0508 - 0x0508)
class ACombatBotPRI_AITDM : public ACombatPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52899 ];

		return pClassPointer;
	};

	void ResetPlayerHUDState ( );
	void NotifyPlayingState ( );
};

UClass* ACombatBotPRI_AITDM::pClassPointer = NULL;

// Class CombatGame.Interface_ClientReset
// 0x0000 (0x0060 - 0x0060)
class UInterface_ClientReset : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53050 ];

		return pClassPointer;
	};

	void ClientReset ( );
};

UClass* UInterface_ClientReset::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItem_C4TimeReduceKitBase
// 0x0008 (0x00D0 - 0x00C8)
class UCombatInstanceItem_C4TimeReduceKitBase : public UCombatInstanceItem
{
public:
	int                                                ReducePlantTime;                                  		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                ReduceDefuseTime;                                 		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53054 ];

		return pClassPointer;
	};

};

UClass* UCombatInstanceItem_C4TimeReduceKitBase::pClassPointer = NULL;

// Class CombatGame.CombatAINoWaveGame
// 0x0000 (0x0768 - 0x0768)
class ACombatAINoWaveGame : public ACombatPVEGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53376 ];

		return pClassPointer;
	};

	void CheckBestStartForPlayer ( );
	void ChoosePlayerStart ( );
};

UClass* ACombatAINoWaveGame::pClassPointer = NULL;

// Class CombatGame.CombatTDMHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatTDMHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53509 ];

		return pClassPointer;
	};

	void NotifyPickupSpecialWeaponGlobalMessage ( );
	void NotifyPickupSpecialWeaponSystemMessage ( );
	void GetGoalStringIDForScoreboard ( );
	void GetRoundGoalInfo ( );
};

UClass* ACombatTDMHUD::pClassPointer = NULL;

// Class CombatGame.CombatTDMRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatTDMRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53532 ];

		return pClassPointer;
	};

	void SetObjectIconList ( );
};

UClass* ACombatTDMRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatAITeamGameHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatAITeamGameHUD : public ACombatTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53533 ];

		return pClassPointer;
	};

};

UClass* ACombatAITeamGameHUD::pClassPointer = NULL;

// Class CombatGame.CombatWeaponPickupFactory
// 0x0089 (0x0449 - 0x03C0)
class ACombatWeaponPickupFactory : public ACombatPickupFactory
{
public:
	class UClass*                                      WeaponPickupClass;                                		// 0x03C0 (0x0008) [0x0000000000000000]              
	float                                              WeaponPickupScaling;                              		// 0x03C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x03CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDrawOutline : 1;                                 		// 0x03CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisplayHUDIcon : 1;                              		// 0x03CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDropSameInventoryGroup : 1;                      		// 0x03CC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDestroySameInventoryGroup : 1;                   		// 0x03CC (0x0004) [0x0000000000000000] [0x00000010] 
	struct FOutlineProperty                            OutlineColorForComrade;                           		// 0x03D0 (0x003C) [0x0000000000000000]              
	struct FOutlineProperty                            OutlineColorForEnemy;                             		// 0x040C (0x003C) [0x0000000000000000]              
	unsigned char                                      HUDIconType;                                      		// 0x0448 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53594 ];

		return pClassPointer;
	};

	void GetObjectIconType ( );
	void NotifyLocalPlayerTeamReceived ( );
	void UpdateOutline ( );
	void SetPickupMesh ( );
	void DelayRespawn ( );
	void SpawnCopyFor ( );
	void AddAmmo ( );
	void IsFullAmmo ( );
	void CheckForErrors ( );
	void eventReplicatedEvent ( );
	void SetPickupHidden ( );
	void SetPickupVisible ( );
	void IsDisplayLocator ( );
	void InitializePickup ( );
};

UClass* ACombatWeaponPickupFactory::pClassPointer = NULL;

// Class CombatGame.CombatAmmoPickupFactory
// 0x0017 (0x0460 - 0x0449)
class ACombatAmmoPickupFactory : public ACombatWeaponPickupFactory
{
public:
	int                                                MainAmmoRate;                                     		// 0x044C (0x0004) [0x0000000000000000]              
	int                                                SubAmmoRate;                                      		// 0x0450 (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_A;                                    		// 0x0454 (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_B;                                    		// 0x0458 (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_C;                                    		// 0x045C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53677 ];

		return pClassPointer;
	};

	void CanSupplyTo ( );
	void SupplyTo ( );
	void SpawnCopyFor ( );
};

UClass* ACombatAmmoPickupFactory::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSlot
// 0x0000 (0x0124 - 0x0124)
class UCombatAnimNodeSlot : public UAnimNodeSlot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53882 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSlot::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceGame
// 0x0002 (0x076C - 0x076A)
class ACombatArmsRaceGame : public ACombatTDMGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54047 ];

		return pClassPointer;
	};

	void CanDropWeapon ( );
	void Killed ( );
};

UClass* ACombatArmsRaceGame::pClassPointer = NULL;

// Class CombatGame.CombatArmsRacePawn
// 0x0010 (0x0BEC - 0x0BDC)
class ACombatArmsRacePawn : public ACombatGuy_Player
{
public:
	TArray< struct FWeaponLevelInfo >                  WeaponLevelList;                                  		// 0x0BDC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54057 ];

		return pClassPointer;
	};

	void AddPresetInventory ( );
	void ServerLevelUp ( );
	void LevelUp ( );
	void CurrentLevelWeapon ( );
};

UClass* ACombatArmsRacePawn::pClassPointer = NULL;

// Class CombatGame.CombatArmsRacePC
// 0x0000 (0x0B90 - 0x0B90)
class ACombatArmsRacePC : public ACombatPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54058 ];

		return pClassPointer;
	};

};

UClass* ACombatArmsRacePC::pClassPointer = NULL;

// Class CombatGame.CombatArmsRacePRI
// 0x0004 (0x050C - 0x0508)
class ACombatArmsRacePRI : public ACombatPlayerReplicationInfo
{
public:
	int                                                WeaponLevel;                                      		// 0x0508 (0x0004) [0x0000000000620000]              ( CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54059 ];

		return pClassPointer;
	};

	void IncrementKills ( );
};

UClass* ACombatArmsRacePRI::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceGameReplicationInfo
// 0x0000 (0x0380 - 0x0380)
class ACombatArmsRaceGameReplicationInfo : public ACombatTDMGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54074 ];

		return pClassPointer;
	};

};

UClass* ACombatArmsRaceGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatArmsRaceHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54076 ];

		return pClassPointer;
	};

};

UClass* ACombatArmsRaceHUD::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatArmsRaceRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54078 ];

		return pClassPointer;
	};

};

UClass* ACombatArmsRaceRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceMovie
// 0x0000 (0x0A74 - 0x0A74)
class UCombatArmsRaceMovie : public UCombatTeamGameMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54079 ];

		return pClassPointer;
	};

};

UClass* UCombatArmsRaceMovie::pClassPointer = NULL;

// Class CombatGame.CombatDecalActorMovable
// 0x0000 (0x0254 - 0x0254)
class ACombatDecalActorMovable : public ADecalActorMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54685 ];

		return pClassPointer;
	};

};

UClass* ACombatDecalActorMovable::pClassPointer = NULL;

// Class CombatGame.CombatSprayDecalActor
// 0x0054 (0x02A8 - 0x0254)
class ACombatSprayDecalActor : public ACombatDecalActorMovable
{
public:
	int                                                SprayID;                                          		// 0x0254 (0x0004) [0x0000000000150000]              ( CPF_Travel | CPF_GlobalConfig )
	float                                              Angle;                                            		// 0x0258 (0x0004) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	float                                              SprayedTime;                                      		// 0x025C (0x0004) [0x0000000000170000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )
	float                                              SprayDecalFarPlane;                               		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              SprayFloatDist;                                   		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              SprayPreviewAlpha;                                		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                SpraySyncTime;                                    		// 0x026C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SpraySound_1p;                                    		// 0x0270 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SpraySound_3p;                                    		// 0x0278 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   SprayMIC;                                         		// 0x0280 (0x0008) [0x0000000000000000]              
	class ACombatDecalManager*                         CachedDecalManager;                               		// 0x0288 (0x0008) [0x0000000000000000]              
	class ACBGameReplicationInfo*                      CachedGRI;                                        		// 0x0290 (0x0008) [0x0000000000000000]              
	struct FVector                                     LastSprayLocation;                                		// 0x0298 (0x000C) [0x0000000000000000]              
	unsigned long                                      bIsPreviewSpray : 1;                              		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54684 ];

		return pClassPointer;
	};

	void TryActivate ( );
	void GetCurrentSprayedTime ( );
	void OnSprayed ( );
	void OnAngleChanged ( );
	void OnSprayIDChanged ( );
	void SetSprayAlpha ( );
	void SetSprayAngle ( );
	void SetSprayDrawInfo ( );
	void SetSprayID ( );
	void SetPreviewSpray ( );
	void InitializeDecalComponent ( );
	void RegisterToDecalManager ( );
	void Reset ( );
	void eventTick ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatSprayDecalActor::pClassPointer = NULL;

// Class CombatGame.CombatDroppedSupplies
// 0x003F (0x035C - 0x031D)
class ACombatDroppedSupplies : public ACombatDroppedBase
{
public:
	unsigned char                                      SuppliesType;                                     		// 0x0320 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentIdentifyState;                             		// 0x0321 (0x0001) [0x0000000000000000]              
	struct FLinearColor                                TeamIdentifyColor[ 0x3 ];                         		// 0x0324 (0x0030) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   TeamIdentifyMIC;                                  		// 0x0354 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54722 ];

		return pClassPointer;
	};

	void CanPickup ( );
	void SupplyTo ( );
	void GiveTo ( );
	void SetTeamIdentify ( );
	void Init ( );
	void UpdateTeamIFFColor ( );
	void PostBeginPlay ( );
};

UClass* ACombatDroppedSupplies::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatDemolitionHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55568 ];

		return pClassPointer;
	};

	void NotifyC4BombPlanted ( );
	void SetUIData_Scoreboard ( );
	void SetPlayerInfoForScoreboard ( );
	void CheckPlayerInfoForScoreboard ( );
	void GetGoalStringIDForScoreboard ( );
	void GetSpecialScoreStringID ( );
	void GetRoundResultString ( );
	void GetRoundGoalInfo ( );
	void DisplayDemolitionGlobalMessage ( );
	void NotifyDemolitionSystemMessage ( );
	void EndBombProgressBar_Defuse ( );
	void StartBombProgressBar_Defuse ( );
	void SetBombBombProgressBar_Plant ( );
	void DemolitionMovie ( );
	void GetPlayerState ( );
};

UClass* ACombatDemolitionHUD::pClassPointer = NULL;

// Class CombatGame.CombatASAGameReplicationInfo
// 0x0001 (0x0381 - 0x0380)
class ACombatASAGameReplicationInfo : public ACombatTDMGameReplicationInfo
{
public:
	unsigned char                                      GameStatus;                                       		// 0x0380 (0x0001) [0x00000000002F0000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56032 ];

		return pClassPointer;
	};

	void UpdateHud ( );
	void UpdateGameStatus ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatASAGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatNoRespawnTDMHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatNoRespawnTDMHUD : public ACombatTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56041 ];

		return pClassPointer;
	};

};

UClass* ACombatNoRespawnTDMHUD::pClassPointer = NULL;

// Class CombatGame.CombatAssasinModeHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatAssasinModeHUD : public ACombatNoRespawnTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56040 ];

		return pClassPointer;
	};

	void EnableEVACPointMessage ( );
	void PostVIPDeathMessage ( );
	void VIPDeathMessage ( );
	void ActivateEmergencyMessage ( );
	void GetRoundResultString ( );
	void SetHudTxt ( );
	void GetRoundGoalInfo ( );
};

UClass* ACombatAssasinModeHUD::pClassPointer = NULL;

// Class CombatGame.CombatNoRespawnTDMRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatNoRespawnTDMRadarCore : public ACombatTDMRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56049 ];

		return pClassPointer;
	};

};

UClass* ACombatNoRespawnTDMRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatASARadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatASARadarCore : public ACombatNoRespawnTDMRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56051 ];

		return pClassPointer;
	};

};

UClass* ACombatASARadarCore::pClassPointer = NULL;

// Class CombatGame.CombatAssasinGameMessage
// 0x0000 (0x0084 - 0x0084)
class UCombatAssasinGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56085 ];

		return pClassPointer;
	};

	void EnableEVACPointMessage ( );
	void PostVIPDeathMessage ( );
	void VIPDeathMessage ( );
	void ActivateEmergencyMessage ( );
	void ClientReceiveEx ( );
};

UClass* UCombatAssasinGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatNoRespawnTDMMovie
// 0x0000 (0x0A80 - 0x0A80)
class UCombatNoRespawnTDMMovie : public UCombatTDMMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56107 ];

		return pClassPointer;
	};

	void GetRounOverPoint ( );
	void GetRoundPoint ( );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( );
};

UClass* UCombatNoRespawnTDMMovie::pClassPointer = NULL;

// Class CombatGame.CombatAssasinMovie
// 0x000C (0x0A80 - 0x0A74)
class UCombatAssasinMovie : public UCombatTeamGameMovie
{
public:
	unsigned long                                      bTestMode : 1;                                    		// 0x0A74 (0x0004) [0x0000000000000000] [0x00000001] 
	class UCombatHUD_ExitContainer*                    ExitContainer;                                    		// 0x0A78 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56114 ];

		return pClassPointer;
	};

	void Tick ( );
	void InitUI ( );
	void UpdateAsaHUDIcon ( );
	void EnableExitPoint ( );
	void DisableExitPoint ( );
	void SetMissionTxt ( );
	void RegisterGOContainer ( );
	void registerLevelObject ( );
	void GetRounOverPoint ( );
	void GetRoundPoint ( );
	void ChangeRoundStausMode ( );
};

UClass* UCombatAssasinMovie::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ExitContainer
// 0x0008 (0x00E0 - 0x00D8)
class UCombatHUD_ExitContainer : public UCombatHUD_GOContainer
{
public:
	class ACombatMapPoint*                             MapPointActor;                                    		// 0x00D8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56142 ];

		return pClassPointer;
	};

	void InitVIP ( );
	void UpdateVIP ( );
	void UpdateExit ( );
	void StartVIPEscape ( );
	void EnableExitPoint ( );
	void DisableExitPoint ( );
	void SetMapPoint ( );
	void RegisterComponent ( );
	void Init ( );
};

UClass* UCombatHUD_ExitContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ExitObject
// 0x0008 (0x01B8 - 0x01B0)
class UCombatHUD_ExitObject : public UCombatHUD_GameObject
{
public:
	unsigned char                                      iconType;                                         		// 0x01B0 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastVIPIconType;                                  		// 0x01B1 (0x0001) [0x0000000000000000]              
	int                                                LastVIPHealthPercent;                             		// 0x01B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56155 ];

		return pClassPointer;
	};

	void CallsetHpGauge ( );
	void InitVIP ( );
	void UpdateVIP ( );
	void StartVIPEscape ( );
	void SetIconType ( );
	void GetLevelObjectMovieClips ( );
};

UClass* UCombatHUD_ExitObject::pClassPointer = NULL;

// Class CombatGame.CombatAutoCrouchVolume
// 0x0000 (0x0280 - 0x0280)
class ACombatAutoCrouchVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56189 ];

		return pClassPointer;
	};

	void CrouchTimer ( );
	void eventUnTouch ( );
	void SetCrouch ( );
	void eventTouch ( );
};

UClass* ACombatAutoCrouchVolume::pClassPointer = NULL;

// Class CombatGame.CombatBusterHUD
// 0x0008 (0x062C - 0x0624)
class ACombatBusterHUD : public ACombatTeamGameHUD
{
public:
	float                                              BusterActorDamageStateDelay;                      		// 0x0624 (0x0004) [0x0000000000000000]              
	int                                                BusterDamageScoreLocalizedID;                     		// 0x0628 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56329 ];

		return pClassPointer;
	};

	void GetGoalStringIDForScoreboard ( );
	void NotifyDestroyObject ( );
	void eventGetScore ( );
	void SetPlayerInfoForScoreboard ( );
	void CheckPlayerInfoForScoreboard ( );
	void SetUIData_Scoreboard ( );
	void GetSpecialScoreStringID ( );
	void GetRoundGoalInfo ( );
};

UClass* ACombatBusterHUD::pClassPointer = NULL;

// Class CombatGame.CombatBombardActor
// 0x0084 (0x02C8 - 0x0244)
class ACombatBombardActor : public AActor
{
public:
	float                                              BombardDelay;                                     		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                BombardNum;                                       		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                PerBombNum;                                       		// 0x024C (0x0004) [0x0000000000000000]              
	class UClass*                                      PClass;                                           		// 0x0250 (0x0008) [0x0000000000000000]              
	int                                                CurBombardNum;                                    		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              BombardX;                                         		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              BombardY;                                         		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              BombardHeight;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              StartDelay;                                       		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              PreDelay;                                         		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              AddedHeight;                                      		// 0x0270 (0x0004) [0x0000000000000000]              
	class UMeshComponent*                              Mesh;                                             		// 0x0274 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   BombardSound;                                     		// 0x027C (0x0008) [0x0000000000000000]              
	class USoundCue*                                   WarnigSound;                                      		// 0x0284 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   AirWhipSound;                                     		// 0x028C (0x0008) [0x0000000000000000]              
	int                                                LocalizedMSGIndex;                                		// 0x0294 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             DustTemplate;                                     		// 0x0298 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    DustPSC;                                          		// 0x02A0 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    LockOnPSC;                                        		// 0x02A8 (0x0008) [0x0000000000000000]              
	float                                              StartDustDelay;                                   		// 0x02B0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowLockOnEffectOnSameTeam : 1;                  		// 0x02B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      AlreadyExcute : 1;                                		// 0x02B4 (0x0004) [0x000000000015000A] [0x00000002] ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig )
	unsigned char                                      CallerTeam;                                       		// 0x02B8 (0x0001) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	int                                                WeaponIndex;                                      		// 0x02BC (0x0004) [0x0000000000000000]              
	struct FName                                       EventName;                                        		// 0x02C0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56455 ];

		return pClassPointer;
	};

	void Destroyed ( );
	void ResetBombard ( );
	void DropBomb ( );
	void StopDust ( );
	void SpawnDust ( );
	void Bombing ( );
	void MakeProjectile ( );
	void PreBombard ( );
	void UpdateCallerTeam ( );
	void ReplicatedEvent ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatBombardActor::pClassPointer = NULL;

// Class CombatGame.CombatBusterGameScore
// 0x0010 (0x0070 - 0x0060)
class UCombatBusterGameScore : public UCombatGameScore
{
public:
	float                                              BusterDamageScoreRatio;                           		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              BusterDamageMissionScoreRatio;                    		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              BusterDamageCRRatio;                              		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              BusterDamageRankExpRatio;                         		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56681 ];

		return pClassPointer;
	};

	void GetRankExp ( );
	void GetCR ( );
	void GetMissionScore ( );
	void GetScore ( );
};

UClass* UCombatBusterGameScore::pClassPointer = NULL;

// Class CombatGame.SeqEvent_ChangedHealth
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_ChangedHealth : public USeqEvent_CombatBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56715 ];

		return pClassPointer;
	};

	void eventGetObjClassVersion ( );
};

UClass* USeqEvent_ChangedHealth::pClassPointer = NULL;

// Class CombatGame.CombatBusterGameMessage
// 0x0000 (0x0084 - 0x0084)
class UCombatBusterGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56744 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( );
};

UClass* UCombatBusterGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatBusterMovie
// 0x0014 (0x0A88 - 0x0A74)
class UCombatBusterMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_BusterContainer*                  BusterContainer;                                  		// 0x0A74 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BusterMovie;                                      		// 0x0A7C (0x0008) [0x0000000000000000]              
	unsigned long                                      bUpdate : 1;                                      		// 0x0A84 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56823 ];

		return pClassPointer;
	};

	void GetRounOverPoint ( );
	void GetRoundPoint ( );
	void ChangeRoundStausMode ( );
	void InitUI ( );
	void Tick ( );
	void SetMissionActorState ( );
	void InitMissionActor ( );
	void UpdateBusterHUDIcon ( );
	void registerLevelObject ( );
	void RegisterGOContainer ( );
};

UClass* UCombatBusterMovie::pClassPointer = NULL;

// Class CombatGame.CombatBusterRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatBusterRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56827 ];

		return pClassPointer;
	};

};

UClass* ACombatBusterRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BusterContainer
// 0x0000 (0x00D8 - 0x00D8)
class UCombatHUD_BusterContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56846 ];

		return pClassPointer;
	};

	void Update ( );
	void InitGameObject ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_BusterContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Buster
// 0x0011 (0x01C1 - 0x01B0)
class UCombatHUD_Buster : public UCombatHUD_GameObject
{
public:
	class ACombatBusterActor*                          TargetActor;                                      		// 0x01B0 (0x0008) [0x0000000000000000]              
	int                                                TargetIndex;                                      		// 0x01B8 (0x0004) [0x0000000000000000]              
	int                                                LastDisplayHealth;                                		// 0x01BC (0x0004) [0x0000000000000000]              
	unsigned char                                      LastUIState;                                      		// 0x01C0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56850 ];

		return pClassPointer;
	};

	void CallsetHpGauge ( );
	void UpdateHealth ( );
	void GetIconFrameLabel ( );
	void Update ( );
	void UpdateVisible ( );
	void GetGameObjectName ( );
	void SetTarget ( );
	void GetLevelObjectMovieClips ( );
};

UClass* UCombatHUD_Buster::pClassPointer = NULL;

// Class CombatGame.CombatCameraThirdPersonCameraMode_Crouch
// 0x0000 (0x0268 - 0x0268)
class UCombatCameraThirdPersonCameraMode_Crouch : public UCombatCameraThirdPersonCameraMode_default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56889 ];

		return pClassPointer;
	};

};

UClass* UCombatCameraThirdPersonCameraMode_Crouch::pClassPointer = NULL;

// Class CombatGame.CombatCameraThirdPersonCameraMode_Spectator
// 0x0000 (0x0268 - 0x0268)
class UCombatCameraThirdPersonCameraMode_Spectator : public UCombatCameraThirdPersonCameraMode_default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56934 ];

		return pClassPointer;
	};

};

UClass* UCombatCameraThirdPersonCameraMode_Spectator::pClassPointer = NULL;

// Class CombatGame.CombatCheatPawn
// 0x0028 (0x0C90 - 0x0C68)
class ACombatCheatPawn : public ACombatGuy_NPC
{
public:
	unsigned char                                      CheatPawnTeamNum;                                 		// 0x0C68 (0x0001) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )
	class UClass*                                      InstanceItemClass;                                		// 0x0C6C (0x0008) [0x0000000000430000]              ( CPF_Travel | CPF_EditConst | CPF_NeedCtorLink )
	int                                                SpawnNumber;                                      		// 0x0C74 (0x0004) [0x0000000000000000]              
	struct FVector                                     SpawnLocation;                                    		// 0x0C78 (0x000C) [0x0000000000000000]              
	struct FRotator                                    SpawnRotation;                                    		// 0x0C84 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57396 ];

		return pClassPointer;
	};

	void AutoRespawn ( );
	void GetSpawnNumber ( );
	void SetSpawnData ( );
	void Died ( );
	void ForceJump ( );
	void ApplyInstanceItem ( );
	void ApplyFamilyInfo ( );
	void IsValidCharClassInfo ( );
	void eventScriptGetTeamNum ( );
	void GetTeamNum ( );
	void InGodMode ( );
	void eventTakeDamage ( );
	void eventPostRenderFor ( );
	void ShouldDisplayIFF ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatCheatPawn::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PracticeGame
// 0x0008 (0x062C - 0x0624)
class ACombatHUD_PracticeGame : public ACombatTeamGameHUD
{
public:
	class UCombatPracticeGameMovie*                    PracticeGameMovie;                                		// 0x0624 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57426 ];

		return pClassPointer;
	};

	void SetProjectileCameraMessage ( );
	void ResetPracticeGameTimer ( );
	void PausePracticeGameTimer ( );
	void ResumePracticeGameTimer ( );
	void SetPeopleCount ( );
	void SetPracticeGameMessage ( );
	void GetPracticeGameMovie ( );
	void GetModeNameInTacticalMap ( );
	void UpdateRadioMessage ( );
	void NotifyCreateRadioUI ( );
	void ShowScoreBoard ( );
};

UClass* ACombatHUD_PracticeGame::pClassPointer = NULL;

// Class CombatGame.ComBatPC_PracticeGame
// 0x0010 (0x0BA0 - 0x0B90)
class AComBatPC_PracticeGame : public ACombatPC
{
public:
	TArray< class UClass* >                            AllWeaponArray;                                   		// 0x0B90 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57428 ];

		return pClassPointer;
	};

	void RequestSetPreset ( );
	void PostBeginPlay ( );
};

UClass* AComBatPC_PracticeGame::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatVideoOptionChange
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatVideoOptionChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58171 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatVideoOptionChange::pClassPointer = NULL;

// Class CombatGame.CombatCTFGameMessage
// 0x0000 (0x0084 - 0x0084)
class UCombatCTFGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58945 ];

		return pClassPointer;
	};

	void ActivatePickupFlagMessage ( );
	void ActivateDroppedFlagMessage ( );
	void ClientReceiveEx ( );
};

UClass* UCombatCTFGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatCTFHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatCTFHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58960 ];

		return pClassPointer;
	};

	void eventGetMissionScore ( );
	void NotifyCTFGameSystemMessage ( );
	void NotifySpawnFlag ( );
	void NotifyCarriedTakePoint ( );
	void SetPlayerInfoForScoreboard ( );
	void CheckPlayerInfoForScoreboard ( );
	void SetUIData_Scoreboard ( );
	void GetSpecialScoreStringID ( );
	void GetRoundGoalInfo ( );
};

UClass* ACombatCTFHUD::pClassPointer = NULL;

// Class CombatGame.CombatCTFGamePC
// 0x0000 (0x0B90 - 0x0B90)
class ACombatCTFGamePC : public ACombatPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58974 ];

		return pClassPointer;
	};

	void ThrowFlagAction ( );
	void ServerThrowFlag ( );
	void ThrowFlag ( );
};

UClass* ACombatCTFGamePC::pClassPointer = NULL;

// Class CombatGame.CombatCTFGameScore
// 0x0028 (0x0088 - 0x0060)
class UCombatCTFGameScore : public UCombatGameScore
{
public:
	struct FScoreStruct                                FirstFlagCaptureScore;                            		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FScoreStruct                                FlagCaptureScore;                                 		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FScoreStruct                                FlagRecovery;                                     		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FScoreStruct                                GetFlagFromEnemybase;                             		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FScoreStruct                                GetDroppedenemyFlag;                              		// 0x0080 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58994 ];

		return pClassPointer;
	};

	void GetMissionScore ( );
	void GetScore ( );
};

UClass* UCombatCTFGameScore::pClassPointer = NULL;

// Class CombatGame.CombatLCTFMovie
// 0x0014 (0x0A88 - 0x0A74)
class UCombatLCTFMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_CTFPointContainer*                CTFContainer;                                     		// 0x0A74 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  CTFMovie;                                         		// 0x0A7C (0x0008) [0x0000000000000000]              
	unsigned long                                      bUpdate : 1;                                      		// 0x0A84 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59035 ];

		return pClassPointer;
	};

	void GetRounOverPoint ( );
	void GetRoundPoint ( );
	void InitUI ( );
	void Tick ( );
	void InitMissionActor ( );
	void UpdateCTFPointArea ( );
	void RegisterGOContainer ( );
	void registerLevelObject ( );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( );
};

UClass* UCombatLCTFMovie::pClassPointer = NULL;

// Class CombatGame.CombatSEIRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatSEIRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59050 ];

		return pClassPointer;
	};

};

UClass* ACombatSEIRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_AR
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_AR : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59142 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_AR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_BASR
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_BASR : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59144 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_BASR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_DMR
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_DMR : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59146 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_DMR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Explosion_FSW_AMSR
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Explosion_FSW_AMSR : public UCombatDamageType_ExplosionWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59148 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Explosion_FSW_AMSR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_AMSR
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_FSW_AMSR : public UCombatDamageType_BASR
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59150 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_AMSR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_GL
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_FSW_GL : public UCombatDamageType_ExplosionWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59152 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_GL::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_LMG
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_FSW_LMG : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59154 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_LMG::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_Melee
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_FSW_Melee : public UCombatDamageType_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59156 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_Melee::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_RL
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_FSW_RL : public UCombatDamageType_ExplosionWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59158 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_RL::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_LMG
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_LMG : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59160 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_LMG::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Machine_Pistol
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Machine_Pistol : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59162 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Machine_Pistol::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Pistol
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_Pistol : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59164 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Pistol::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_RSaW
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_RSaW : public UCombatDamageType_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59166 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_RSaW::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_RSawStrong
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_RSawStrong : public UCombatDamageType_RSaW
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59168 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_RSawStrong::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_SG
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_SG : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59170 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_SG::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_SMG
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_SMG : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59172 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_SMG::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_StrongMelee
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_StrongMelee : public UCombatDamageType_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59174 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_StrongMelee::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_TrophyTurret
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_TrophyTurret : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59176 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_TrophyTurret::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_TutoGrenade
// 0x0000 (0x0118 - 0x0118)
class UCombatDamageType_TutoGrenade : public UCombatDamageType_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59178 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_TutoGrenade::pClassPointer = NULL;

// Class CombatGame.CombatDefaultGame
// 0x0000 (0x076C - 0x076C)
class ACombatDefaultGame : public ACombatTDMGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61207 ];

		return pClassPointer;
	};

};

UClass* ACombatDefaultGame::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionGameMessage
// 0x0008 (0x008C - 0x0084)
class UCombatDemolitionGameMessage : public UCombatGameMessage
{
public:
	int                                                BombPickupTextID;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                BombDropTextID;                                   		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61318 ];

		return pClassPointer;
	};

	void ActivatePickupBombMessage ( );
	void ActivateDroppedBombMessage ( );
	void ClientReceiveEx ( );
};

UClass* UCombatDemolitionGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionMovie
// 0x0018 (0x0A8C - 0x0A74)
class UCombatDemolitionMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_BombsContainer*                   BombContainer;                                    		// 0x0A74 (0x0008) [0x0000000000000000]              
	int                                                BombsiteCount;                                    		// 0x0A7C (0x0004) [0x0000000000000000]              
	int                                                BombCount;                                        		// 0x0A80 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpdateEquippedBomb : 1;                          		// 0x0A84 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateEquippedBombSite : 1;                      		// 0x0A84 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsDisplayedBombLimitTime : 1;                    		// 0x0A84 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStartSpectDefuseUI : 1;                          		// 0x0A84 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                LastBombDefuseTimeCount;                          		// 0x0A88 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61348 ];

		return pClassPointer;
	};

	void GetRounOverPoint ( );
	void NotifyDemolitionSystemMessage ( );
	void DisplaySpectTargetUI ( );
	void GetRoundPoint ( );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( );
	void GetMissionType ( );
	void UpdateBombEquippedHUD ( );
	void CheckNearByBombSite ( );
	void UpdateBombs ( );
	void UpdateBombsites ( );
	void UpdateRemainTime ( );
	void Tick ( );
	void InitUI ( );
	void registerFlag ( );
	void registerLevelObject ( );
	void RegisterGOContainer ( );
};

UClass* UCombatDemolitionMovie::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BombsContainer
// 0x0000 (0x00D8 - 0x00D8)
class UCombatHUD_BombsContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61408 ];

		return pClassPointer;
	};

	void DisplayGODistanceMessage ( );
	void Update ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_BombsContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Bombsite
// 0x0008 (0x01B8 - 0x01B0)
class UCombatHUD_Bombsite : public UCombatHUD_GameObject
{
public:
	class ACombatBombsiteVolume*                       BombsiteObject;                                   		// 0x01B0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61412 ];

		return pClassPointer;
	};

	void CheckNearbyGO ( );
	void IsInBombsite ( );
	void CheckHotKeyMessage ( );
	void CheckAvailableGO ( );
	void UpdateVisible ( );
	void GetIconFrameLabel ( );
	void GetGameObjectName ( );
	void SetBombsiteObject ( );
};

UClass* UCombatHUD_Bombsite::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Bomb
// 0x0010 (0x01C0 - 0x01B0)
class UCombatHUD_Bomb : public UCombatHUD_GameObject
{
public:
	class ACombatTrigger_Bomb*                         BombObject;                                       		// 0x01B0 (0x0008) [0x0000000000000000]              
	struct FName                                       LastBombStateName;                                		// 0x01B8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61415 ];

		return pClassPointer;
	};

	void GetIconFrameLabel ( );
	void Update ( );
	void GetGameObjectName ( );
	void CanDisplayBombIcon ( );
	void UpdateVisible ( );
	void SetBombObject ( );
};

UClass* UCombatHUD_Bomb::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Bomb
// 0x0030 (0x1EE0 - 0x1EB0)
class ACombatWeapon_Bomb : public ACombatWeapon
{
public:
	float                                              PlantAnimDuraion;                                 		// 0x1EB0 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                BombLightColor;                                   		// 0x1EB4 (0x0010) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   IndicatorMIC;                                     		// 0x1EC4 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   ThirdIndicatorMIC;                                		// 0x1ECC (0x0008) [0x0000000000000000]              
	unsigned long                                      bNeedToSwitchWeapon : 1;                          		// 0x1ED4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreMove : 1;                                  		// 0x1ED4 (0x0004) [0x0000000000000000] [0x00000002] 
	class ACombatTrigger_Bomb*                         Bomb;                                             		// 0x1ED8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61546 ];

		return pClassPointer;
	};

	void SetBombIndicatorLight ( );
	void CanEquipUp ( );
	void OwnerEvent ( );
	void ReleaseUse ( );
	void Use ( );
	void StopFire ( );
	void StartFire ( );
	void AddAmmo ( );
	void DropFrom ( );
	void HasAmmo ( );
	void DetachWeapon ( );
	void CheckBombVolumeInside ( );
	void GetFireInterval ( );
	void ClientPendingDestory ( );
	void ServerPlanted ( );
	void ServerCancelPlanting ( );
	void ServerPlanting ( );
	void GetTriggerBomb ( );
	void IgnoreMoveInput ( );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* ACombatWeapon_Bomb::pClassPointer = NULL;

// Class CombatGame.CombatDemoRecSpectatorHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatDemoRecSpectatorHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61577 ];

		return pClassPointer;
	};

};

UClass* ACombatDemoRecSpectatorHUD::pClassPointer = NULL;

// Class CombatGame.CombatDemoRecSpectatorMovie
// 0x0014 (0x0A88 - 0x0A74)
class UCombatDemoRecSpectatorMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_DemoRecPlayer*                    DemoRecPlayerMC;                                  		// 0x0A74 (0x0008) [0x0000000000000000]              
	int                                                LastFrame;                                        		// 0x0A7C (0x0004) [0x0000000000000000]              
	unsigned long                                      bRewinding : 1;                                   		// 0x0A80 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForwarding : 1;                                  		// 0x0A80 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                targetFrame;                                      		// 0x0A84 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61579 ];

		return pClassPointer;
	};

	void Tick ( );
	void registerHUD ( );
	void receivePlayerBar ( );
	void RegisterPlayer ( );
};

UClass* UCombatDemoRecSpectatorMovie::pClassPointer = NULL;

// Class CombatGame.CombatHUD_DemoRecPlayer
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_DemoRecPlayer : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61585 ];

		return pClassPointer;
	};

	void CallHideBG ( );
	void CallShowBG ( );
	void CallSetProgressBar ( );
};

UClass* UCombatHUD_DemoRecPlayer::pClassPointer = NULL;

// Class CombatGame.CombatSeizeGameBase
// 0x0010 (0x0778 - 0x0768)
class ACombatSeizeGameBase : public ACombatPVPGame
{
public:
	int                                                MaxTeamOccupationNum;                             		// 0x0768 (0x0004) [0x0000000000000000]              
	float                                              PhasedOccupyTimeInterval[ 0x3 ];                  		// 0x076C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61950 ];

		return pClassPointer;
	};

	void eventGetGoalScoreValue ( );
	void GetWinTeamByFirstOccuied ( );
	void GetWinnerByDecision ( );
	void CheckLive ( );
	void CheckGoalScore ( );
};

UClass* ACombatSeizeGameBase::pClassPointer = NULL;

// Class CombatGame.CombatSEIGamePC
// 0x000C (0x0B9C - 0x0B90)
class ACombatSEIGamePC : public ACombatPC
{
public:
	unsigned long                                      bGainOccupiedPoint : 1;                           		// 0x0B90 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowLogSeizeScore : 1;                           		// 0x0B90 (0x0004) [0x0000000000000000] [0x00000002] 
	class ACombatSEIModePRI*                           CombatSEIPRI;                                     		// 0x0B94 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61983 ];

		return pClassPointer;
	};

	void NotifyEndOccupiedScoring ( );
	void GainOccupiedScoring ( );
	void EndOccupiedScoring ( );
	void RegisterOccupiedScoring ( );
	void RefreshOccupiedScoring ( );
	void StartOccupiedScoring ( );
	void PawnDied ( );
	void ClientRestart ( );
	void eventPossess ( );
};

UClass* ACombatSEIGamePC::pClassPointer = NULL;

// Class CombatGame.CombatDominationGame
// 0x0000 (0x0778 - 0x0778)
class ACombatDominationGame : public ACombatSeizeGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61984 ];

		return pClassPointer;
	};

	void GetWinnerByDecision ( );
};

UClass* ACombatDominationGame::pClassPointer = NULL;

// Class CombatGame.CombatDominationHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatDominationHUD : public ACombatSEIHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62015 ];

		return pClassPointer;
	};

	void GetRoundGoalInfo ( );
};

UClass* ACombatDominationHUD::pClassPointer = NULL;

// Class CombatGame.CombatDominationRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatDominationRadarCore : public ACombatSEIRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62019 ];

		return pClassPointer;
	};

};

UClass* ACombatDominationRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatDominationMovie
// 0x0008 (0x0A88 - 0x0A80)
class UCombatDominationMovie : public UCombatSEIMovie
{
public:
	class UGFxObject*                                  TestMultiLineTF;                                  		// 0x0A80 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62020 ];

		return pClassPointer;
	};

	void UpdateDominationGameData ( );
	void DrawTestMultiLineText ( );
	void Tick ( );
	void InitUI ( );
	void registerHUD ( );
};

UClass* UCombatDominationMovie::pClassPointer = NULL;

// Class CombatGame.CombatHUD_OccupiedAreaContainer
// 0x0000 (0x00D8 - 0x00D8)
class UCombatHUD_OccupiedAreaContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62023 ];

		return pClassPointer;
	};

	void CheckAvailableGO ( );
	void Update ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_OccupiedAreaContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_OccupiedArea
// 0x0008 (0x01B8 - 0x01B0)
class UCombatHUD_OccupiedArea : public UCombatHUD_GameObject
{
public:
	class ACombatOccupiedAreaVolume*                   AreaVolume;                                       		// 0x01B0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62026 ];

		return pClassPointer;
	};

	void CheckAvailableGO ( );
	void UpdateVisible ( );
	void GetIconFrameLabel ( );
	void GetGameObjectName ( );
	void SetAreaObject ( );
};

UClass* UCombatHUD_OccupiedArea::pClassPointer = NULL;

// Class CombatGame.CombatOccupiedAreaData
// 0x001C (0x0260 - 0x0244)
class ACombatOccupiedAreaData : public AReplicationInfo
{
public:
	int                                                TotalOccupierNum;                                 		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              UpdateOccupationTime;                             		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                OccupationScore;                                  		// 0x024C (0x0004) [0x000000000015000A]              ( CPF_Const | CPF_ExportObject | CPF_Travel | CPF_GlobalConfig )
	class ACombatOccupiedAreaVolume*                   Target;                                           		// 0x0250 (0x0008) [0x0000000000160000]              ( CPF_EditConst | CPF_GlobalConfig )
	class ACombatSEIModeTeamInfo*                      Team;                                             		// 0x0258 (0x0008) [0x0000000000170000]              ( CPF_Travel | CPF_EditConst | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62066 ];

		return pClassPointer;
	};

	void GetOccupiedScoringTime ( );
	void CheckOccupationNum ( );
	void eventReplicatedEvent ( );
	void IsOccupationSuccess ( );
	void AddScore ( );
	void eventReset ( );
};

UClass* ACombatOccupiedAreaData::pClassPointer = NULL;

// Class CombatGame.CombatDroppedSupplies_AmmoKit
// 0x0014 (0x0370 - 0x035C)
class ACombatDroppedSupplies_AmmoKit : public ACombatDroppedSupplies
{
public:
	int                                                MainAmmoRate;                                     		// 0x035C (0x0004) [0x0000000000000000]              
	int                                                SubAmmoRate;                                      		// 0x0360 (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_A;                                    		// 0x0364 (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_B;                                    		// 0x0368 (0x0004) [0x0000000000000000]              
	int                                                GrenadeRate_C;                                    		// 0x036C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62201 ];

		return pClassPointer;
	};

	void SupplyTo ( );
	void CanPickup ( );
};

UClass* ACombatDroppedSupplies_AmmoKit::pClassPointer = NULL;

// Class CombatGame.CombatDroppedSupplies_MediKit
// 0x0004 (0x0360 - 0x035C)
class ACombatDroppedSupplies_MediKit : public ACombatDroppedSupplies
{
public:
	int                                                HealRate;                                         		// 0x035C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62222 ];

		return pClassPointer;
	};

	void SupplyTo ( );
	void CanPickup ( );
};

UClass* ACombatDroppedSupplies_MediKit::pClassPointer = NULL;

// Class CombatGame.CombatDroppedWeapon_MeleeGame
// 0x0002 (0x033C - 0x033A)
class ACombatDroppedWeapon_MeleeGame : public ACombatDroppedWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62305 ];

		return pClassPointer;
	};

	void eventLanded ( );
	void eventDestroyed ( );
	void eventSetPickupMesh ( );
	void GiveTo ( );
	void CanPickup ( );
};

UClass* ACombatDroppedWeapon_MeleeGame::pClassPointer = NULL;

// Class CombatGame.CombatTDMMeleeGame
// 0x0000 (0x076C - 0x076C)
class ACombatTDMMeleeGame : public ACombatTDMGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62312 ];

		return pClassPointer;
	};

	void CanDropWeapon ( );
	void NotifyDropSpecialWeapon ( );
	void NotifyPickupSpecialWeapon ( );
	void NotifyRespawnSpecialWeapon ( );
	void IsPlayingGameState ( );
};

UClass* ACombatTDMMeleeGame::pClassPointer = NULL;

// Class CombatGame.CombatDummyClientController
// 0x0018 (0x0600 - 0x05E8)
class ACombatDummyClientController : public ACombatBotController_GuyBase
{
public:
	struct FString                                     GripControllerManagerClassPath;                   		// 0x05E8 (0x0010) [0x0000000000000000]              
	class AActor*                                      GripControllerManagerHolder;                      		// 0x05F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62339 ];

		return pClassPointer;
	};

	void SpawnGripControllerManager ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatDummyClientController::pClassPointer = NULL;

// Class CombatGame.CombatEmitterPool
// 0x0000 (0x02B4 - 0x02B4)
class ACombatEmitterPool : public AEmitterPool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62358 ];

		return pClassPointer;
	};

};

UClass* ACombatEmitterPool::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndLocalSoundGroup_Base
// 0x0150 (0x01C0 - 0x0070)
class UCombatFrontEndLocalSoundGroup_Base : public UCombatHUDSoundGroup
{
public:
	class USoundCue*                                   EnterScene[ 0x18 ];                               		// 0x0070 (0x00C0) [0x0000000000000000]              
	class USoundCue*                                   WarnInvalidNickName;                              		// 0x0130 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   MainLobby_SearchRoom;                             		// 0x0138 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   MainLobby_OptionMenu;                             		// 0x0140 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   MatchRoom_Intrude;                                		// 0x0148 (0x0008) [0x0000000000000000]              
	TArray< class USoundCue* >                         MatchRoom_ChangeTeam;                             		// 0x0150 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   MatchRoom_RoomState[ 0x7 ];                       		// 0x0160 (0x0038) [0x0000000000000000]              
	class USoundCue*                                   Matchroom_StartMatch;                             		// 0x0198 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   Matchroom_StartMatchCountDown;                    		// 0x01A0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   AlramFriendSuggestion;                            		// 0x01A8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   MailBox_NewMail;                                  		// 0x01B0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   MailBox_UnreadMail;                               		// 0x01B8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62625 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEndLocalSoundGroup_Base::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Accessterms
// 0x0000 (0x00D0 - 0x00D0)
class UCombatFrontEnd_Accessterms : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62764 ];

		return pClassPointer;
	};

	void receiveAccesstermsDisagreeBtn ( );
	void receiveAccesstermsAgreeBtn ( );
	void CallsetCancelBtnLabel ( );
	void CallsetOkBtnLabel ( );
	void CallsetCautionTxt ( );
	void CallsetAccesstermsTxt ( );
	void CallsetTitleTxt ( );
	void OnDisagreeDialogCancle ( );
	void OnDisagreeDialogOK ( );
	void ShowDisagreeDialog ( );
	void InitLabel ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Accessterms::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Achieve
// 0x0040 (0x0110 - 0x00D0)
class UCombatFrontEnd_Achieve : public UCombatFrontEnd_Scene
{
public:
	int                                                RETURN_TO_MATCHRESULT_TIME_MAX;                   		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                ReturnToMatchResultTime;                          		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                PrevLevel;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                CurLevel;                                         		// 0x00DC (0x0004) [0x0000000000000000]              
	unsigned long                                      bQuest : 1;                                       		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     RewardCodeName;                                   		// 0x00E4 (0x0010) [0x0000000000000000]              
	TArray< int >                                      RewardItemList;                                   		// 0x00F4 (0x0010) [0x0000000000000000]              
	int                                                ModeID;                                           		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                CurTier;                                          		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                NewTier;                                          		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62798 ];

		return pClassPointer;
	};

	void receiveMain_LastSceneAchieveButtonShow ( );
	void receiveMain_LastSceneAchieveAnimationComplete ( );
	void CallSetOkButtonSecond ( );
	void ClearTimer ( );
	void ReturnToMatchResultTimer ( );
	void StartTimer ( );
	void SetTierData ( );
	void SetTypeData ( );
	void SetRandomBoxData ( );
	void SetRewardData ( );
	void SetLevelUpData ( );
	void SetQuestData ( );
	void SetData ( );
	void InitLabels ( );
	void IsTierUp ( );
	void GetRewardItemList ( );
	void GetNextFunc ( );
	void GotoPrevScene ( );
	void DelayShowScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Achieve::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_AwaitList
// 0x0054 (0x0124 - 0x00D0)
class UCombatFrontEnd_AwaitList : public UCombatFrontEnd_Object
{
public:
	int                                                ShowType;                                         		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                ShowPageNum;                                      		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                TotalPage;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                TitleId;                                          		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                L_NoUserID;                                       		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                M_NoUserID;                                       		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                RegisterID;                                       		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                UnRegisterID;                                     		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FAwaitListPopUpItem                         AwaitListPopUpInfo[ 0x4 ];                        		// 0x00F0 (0x0020) [0x0000000000000000]              
	unsigned char                                      OptionType;                                       		// 0x0110 (0x0001) [0x0000000000000000]              
	TArray< int >                                      Invite_UserID_List;                               		// 0x0114 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62970 ];

		return pClassPointer;
	};

	void OnDisplayDialogAwait_NO ( );
	void OnDisplayDialogAwait_YES ( );
	void DisplayDialogAwait ( );
	void receiveAwaitListPopupMenuBtn ( );
	void receiveAwaitListAwaiterLeftRightClick ( );
	void receiveAwaitListCloseBtn ( );
	void receiveAwaitListEnrollmentBtn ( );
	void receiveAwaitListNextBtn ( );
	void receiveAwaitListPrevBtn ( );
	void receiveAwaitListReflashBtn ( );
	void CallDrawPopupMenu ( );
	void CallSetEnrollmentBtn ( );
	void CallSetNoUserLabel ( );
	void CallSetAwaiterList ( );
	void CallSetCurrentScene ( );
	void CallSetAwaitListTitle ( );
	void InitAwaiterList ( );
	void SetAwaiterList ( );
	void RequestMatchRoomChannelInviteUserList ( );
	void SetEnrollmentBtnLabel ( );
	void SetNoUserLabel ( );
	void InitLabel ( );
	void Init ( );
	void HideAwaitList ( );
	void ShowAwaitListType ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_AwaitList::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndActor
// 0x00E8 (0x032C - 0x0244)
class ACombatFrontEndActor : public AActor
{
public:
	class USkeletalMeshComponent*                      CharacterMesh;                                    		// 0x0244 (0x0008) [0x0000000000000000]              
	class UClass*                                      Char_InfoClass;                                   		// 0x024C (0x0008) [0x0000000000000000]              
	class USkelControlSingleBone*                      Char_RootRotControl;                              		// 0x0254 (0x0008) [0x0000000000000000]              
	class UAnimNodeSlot*                               Char_FullBodyAnimSlot;                            		// 0x025C (0x0008) [0x0000000000000000]              
	class UAnimNodeSlot*                               Char_TopHalfAnimSlot;                             		// 0x0264 (0x0008) [0x0000000000000000]              
	class UCombatAnimBlendBySlotActive*                Char_TopHalfParentNode;                           		// 0x026C (0x0008) [0x0000000000000000]              
	unsigned char                                      Char_GenderType;                                  		// 0x0274 (0x0001) [0x0000000000000000]              
	unsigned char                                      Char_TeamIndex;                                   		// 0x0275 (0x0001) [0x0000000000000000]              
	unsigned char                                      Char_DefaultTeamIndex;                            		// 0x0276 (0x0001) [0x0000000000000000]              
	unsigned char                                      IKHand;                                           		// 0x0277 (0x0001) [0x0000000000000000]              
	unsigned char                                      PhysUnFreezeCounter;                              		// 0x0278 (0x0001) [0x0000000000000000]              
	int                                                CurrentCharacterRefItemIndex;                     		// 0x027C (0x0004) [0x0000000000000000]              
	class UPhysicsAsset*                               Char_PhysicAsset;                                 		// 0x0280 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      WeaponMesh;                                       		// 0x0288 (0x0008) [0x0000000000000000]              
	class UClass*                                      WP_WeaponClass;                                   		// 0x0290 (0x0008) [0x0000000000000000]              
	class UAnimNodeSlot*                               WP_CustomAnim;                                    		// 0x0298 (0x0008) [0x0000000000000000]              
	int                                                CurrentWeaponRefItemIndex;                        		// 0x02A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowActor : 1;                                   		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDoRotation : 1;                                  		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              DefaultMouseInputDuration;                        		// 0x02A8 (0x0004) [0x0000000000000000]              
	int                                                DefaultMouseMovementPixel;                        		// 0x02AC (0x0004) [0x0000000000000000]              
	float                                              DefaultRotationDegree;                            		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              DefaultRotationInterpolationSpeed;                		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              DefaultRotationInterpolationSpeed_Max;            		// 0x02B8 (0x0004) [0x0000000000000000]              
	int                                                LastMouseInput_X;                                 		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              LastMouseInputTime;                               		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              YawInterpolationSpeed;                            		// 0x02C4 (0x0004) [0x0000000000000000]              
	struct FRotator                                    TargetRot;                                        		// 0x02C8 (0x000C) [0x0000000000000000]              
	class USkelControlLimb*                            HandGripIKNode[ 0x2 ];                            		// 0x02D4 (0x0010) [0x0000000000000000]              
	class UAnimSet*                                    InvenAnimset[ 0x2 ];                              		// 0x02E4 (0x0010) [0x0000000000000000]              
	struct FString                                     InvenAnimSetName[ 0x2 ];                          		// 0x02F4 (0x0020) [0x0000000000000000]              
	class UAnimNodeRandom*                             RandomNode;                                       		// 0x0314 (0x0008) [0x0000000000000000]              
	TArray< struct FName >                             UnfixedBoneNames;                                 		// 0x031C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63092 ];

		return pClassPointer;
	};

	void GetWeaponGripOffset ( );
	void SetWeaponHandGripOffset ( );
	void SetGripIK ( );
	void eventPostInitAnimTree ( );
	void SetCharacterAnimSets ( );
	void SetWeaponMeshFromInfo ( );
	void SetWeaponMesh ( );
	void HideWeaponSilencer ( );
	void UnfixPhysBodies ( );
	void GetUnfixedBoneNames ( );
	void SetCharacterMeshFromInfo ( );
	void GetInvenAnimset ( );
	void SetFrontEndActorRotationX ( );
	void IsShown ( );
	void SetFrontEndPlayerActorVisible ( );
	void eventTick ( );
	void eventDestroyed ( );
};

UClass* ACombatFrontEndActor::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_Base
// 0x0000 (0x0060 - 0x0060)
class UCombatFrontEnd_BuyAfter_Base : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63260 ];

		return pClassPointer;
	};

	void UseItemFail ( );
	void UseItemAction ( );
	void BuyItemAction ( );
};

UClass* UCombatFrontEnd_BuyAfter_Base::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_Used
// 0x0000 (0x0060 - 0x0060)
class UCombatFrontEnd_BuyAfter_Used : public UCombatFrontEnd_BuyAfter_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63525 ];

		return pClassPointer;
	};

	void UseItemFail ( );
	void BuyItemAction ( );
};

UClass* UCombatFrontEnd_BuyAfter_Used::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_CallingCard
// 0x0000 (0x0060 - 0x0060)
class UCombatFrontEnd_BuyAfter_CallingCard : public UCombatFrontEnd_BuyAfter_Used
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63537 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_BuyAfter_CallingCard::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_Equip
// 0x0000 (0x0060 - 0x0060)
class UCombatFrontEnd_BuyAfter_Equip : public UCombatFrontEnd_BuyAfter_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63539 ];

		return pClassPointer;
	};

	void UseItemAction ( );
	void BuyItemAction ( );
};

UClass* UCombatFrontEnd_BuyAfter_Equip::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_MoneyType
// 0x0000 (0x0060 - 0x0060)
class UCombatFrontEnd_BuyAfter_MoneyType : public UCombatFrontEnd_BuyAfter_Used
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63549 ];

		return pClassPointer;
	};

	void UseItemAction ( );
	void BuyItemAction ( );
};

UClass* UCombatFrontEnd_BuyAfter_MoneyType::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_RandomBox
// 0x0000 (0x0060 - 0x0060)
class UCombatFrontEnd_BuyAfter_RandomBox : public UCombatFrontEnd_BuyAfter_Used
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63569 ];

		return pClassPointer;
	};

	void UseItemFail ( );
	void UseItemAction ( );
	void BuyItemAction ( );
};

UClass* UCombatFrontEnd_BuyAfter_RandomBox::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyItem
// 0x0114 (0x01E4 - 0x00D0)
class UCombatFrontEnd_BuyItem : public UCombatFrontEnd_Object
{
public:
	class UCombatDataTableRefItem*                     RefItem;                                          		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UCombatDataTableRefShopItem*                 refShopItem;                                      		// 0x00D8 (0x0008) [0x0000000000000000]              
	class UCombatDataTableRefItemDetailinfo*           RefItemDetailinfo;                                		// 0x00E0 (0x0008) [0x0000000000000000]              
	int                                                PriceType;                                        		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                priceID;                                          		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                BuyItemSlotIndex;                                 		// 0x00F0 (0x0004) [0x0000000000000000]              
	unsigned char                                      SelectPresetTab;                                  		// 0x00F4 (0x0001) [0x0000000000000000]              
	unsigned char                                      RecvType;                                         		// 0x00F5 (0x0001) [0x0000000000000000]              
	int                                                ShopPriceTypeLabelID[ 0x5 ];                      		// 0x00F8 (0x0014) [0x0000000000000000]              
	int                                                PresetLabelIDList[ 0x3 ];                         		// 0x010C (0x000C) [0x0000000000000000]              
	struct FAddoninfo                                  AddOnInfoList[ 0xA ];                             		// 0x0118 (0x0078) [0x0000000000000000]              
	struct Fabilityinfo                                AbilityInfoList[ 0x7 ];                           		// 0x0190 (0x0054) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63589 ];

		return pClassPointer;
	};

	void OnBuyItemFailureOK ( );
	void OnBuyItemCheckCancel ( );
	void OnBuyItemCheckOK ( );
	void EquipItem ( );
	void isSale ( );
	void IsPurchasableItemByHoldingSum ( );
	void DisPlayDialog_BuyItem ( );
	void receiveShopPopupInventoryBtn ( );
	void receiveShopPopupEquipBtn ( );
	void receiveShopPopupBuyCancelBtn ( );
	void receiveShopPopupBuyAndEquipBtn ( );
	void receiveShopPopupBuyBtn ( );
	void receiveShopPopupPriceBtn ( );
	void receiveShopPopupUnitBtn ( );
	void receiveShopPopupPresetViewBtn ( );
	void CallPlayPurchaseSound ( );
	void CallSetSuccess ( );
	void CallPlayEquipSound ( );
	void CallShowEquipPopup ( );
	void CallSetInventoryBtnState ( );
	void CallSetInventoryBtnLabel ( );
	void CallSetEquipBtnState ( );
	void CallSetEquipBtnLabel ( );
	void CallSetPresetItemList ( );
	void CallSetBuyFinishLabel ( );
	void CallSetBuyItemInfo ( );
	void CallSetEquipTitleLabel ( );
	void CallSetCancelState ( );
	void CallSetCancelLabel ( );
	void CallSetBuyAndEquipVisible ( );
	void CallSetBuyAndEquipState ( );
	void CallSetBuyAndEquipLabel ( );
	void CallSetBuyBtnState ( );
	void CallSetBuyBtnLabel ( );
	void CallSetPayAttention ( );
	void CallSetBalanceValue ( );
	void CallSetBalanceLabel ( );
	void CallSetHoldingSumValue ( );
	void CallSetHoldingSumLabel ( );
	void CallSelectBuyPrice ( );
	void CallSetBuyPriceTab ( );
	void CallSetBuyPriceLabel ( );
	void CallSelectMonetaryUnit ( );
	void CallSetMonetaryUnitTab ( );
	void CallSetMonetaryLabel ( );
	void CallSetInfoDesc ( );
	void CallSetAddon ( );
	void CallSetAttachmentTitle ( );
	void CallSetAbility ( );
	void CallSetItemEffect ( );
	void CallSetItemImage ( );
	void CallSetItemIcon ( );
	void CallSetPackageItemList ( );
	void CallSetPackageItemTitle ( );
	void CallSetComparisonSlot ( );
	void CallSetEquipSlotData ( );
	void CallSelectPresetTab ( );
	void CallSetPresetTab ( );
	void CallSetTemplate ( );
	void CallSetBuyTitleLabel ( );
	void InitPresetItemObject ( );
	void SetPresetItemList ( );
	void SetBuyItemInfoData ( );
	void ResetAbilityInfoList ( );
	void GetAbilityInfoList ( );
	void SetAbility ( );
	void ResetAddOnList ( );
	void GetAddOnList ( );
	void SetAddOn ( );
	void SetInfoDesc ( );
	void CalcPriceValue ( );
	void SetPriceValueList ( );
	void SetMonetaryUnitTab ( );
	void SetItemEffect ( );
	void SetItemImage ( );
	void SetItemIcon ( );
	void ResetEquipSlot ( );
	void SetEquipSlotData ( );
	void CalcDayItemPriod ( );
	void SetPackageItemList ( );
	void SetTemplate ( );
	void SetBuyAndEquipLabel ( );
	void SetBuyTitleLabel ( );
	void GetPriceIconType ( );
	void SetPriceType ( );
	void OnBuyItem_Success ( );
	void ShowEquipPopUp ( );
	void ShowBuyItemPopUp ( );
	void GetPriceInfo ( );
	void SetItemData ( );
	void InitItemData ( );
	void InitPresetTabInfo ( );
	void InitLabels ( );
	void HidePopUp ( );
	void HideScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_BuyItem::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CallingCardPage
// 0x0078 (0x0148 - 0x00D0)
class UCombatFrontEnd_CallingCardPage : public UCombatFrontEnd_Object
{
public:
	struct FFrontEndButtonStruct                       CallingCardButtonInfo[ 0x2 ];                     		// 0x00D0 (0x0030) [0x0000000000000000]              
	struct FFrontEndButtonStruct                       CallingCardTabInfo[ 0x2 ];                        		// 0x0100 (0x0030) [0x0000000000000000]              
	TArray< struct FCallingCardInfo >                  CallingCardInfoList;                              		// 0x0130 (0x0010) [0x0000000000000000]              
	unsigned char                                      SHOW_CALLINGCARD_COUNT;                           		// 0x0140 (0x0001) [0x0000000000000000]              
	int                                                selectID;                                         		// 0x0144 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63920 ];

		return pClassPointer;
	};

	void receiveListItemBtn ( );
	void receiveCloseBtn ( );
	void receiveApplyBtn ( );
	void CallSetTabData ( );
	void CallscrollingItemList ( );
	void CallSelectItemList ( );
	void CallSetItemList ( );
	void CallSetBtnLabel ( );
	void CallSetTitle ( );
	void GetCurrentRemainTime ( );
	void OnCallingCardExpire ( );
	void OnCallingCardChangeFailureOK ( );
	void OnCallingCardChange_Failure ( );
	void OnCallingCardChange_Sucess ( );
	void NotShowCallingCardPageOK ( );
	void NotShowCallingCardPage ( );
	void IsShowCallingCardPage ( );
	void SetCallingCardList ( );
	void CurrentCallingCardID ( );
	void FocusCallingCardID ( );
	void InitLabel ( );
	void HideScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_CallingCardPage::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ChangePropernounPopup
// 0x0024 (0x00F4 - 0x00D0)
class UCombatFrontEnd_ChangePropernounPopup : public UCombatFrontEnd_Object
{
public:
	unsigned char                                      PopupMode;                                        		// 0x00D0 (0x0001) [0x0000000000000000]              
	TArray< struct FSendTextInfo >                     SendTextList;                                     		// 0x00D4 (0x0010) [0x0000000000000000]              
	struct FString                                     SendText;                                         		// 0x00E4 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63986 ];

		return pClassPointer;
	};

	void CallSetCancelBtn ( );
	void CallSetOkBtn ( );
	void CallSetFocus ( );
	void CallSetMaxChars ( );
	void CallsetCautionTxt ( );
	void CallSetGuideTxt ( );
	void CallSetInputTxt ( );
	void CallSetTitleText ( );
	void receiveChangeProperNounPopupCancelBtn ( );
	void OnDisplayDialogUseDialogCancle ( );
	void OnDisplayDialogUseDialogOK ( );
	void receiveChangeProperNounPopupOkBtn ( );
	void CheckText ( );
	void HideScene ( );
	void onChangeError ( );
	void SetChangePropernounLabel ( );
	void ShowPropernounPopup ( );
};

UClass* UCombatFrontEnd_ChangePropernounPopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Channel
// 0x0058 (0x0128 - 0x00D0)
class UCombatFrontEnd_Channel : public UCombatFrontEnd_Scene
{
public:
	struct UCombatFrontEnd_Channel_FButtonInfo         ButtonList[ 0x3 ];                                		// 0x00D0 (0x003C) [0x0000000000000000]              
	int                                                BoosterList[ 0x2 ];                               		// 0x010C (0x0008) [0x0000000000000000]              
	class UCombatChannelTransaction*                   ChannelTran;                                      		// 0x0114 (0x0008) [0x0000000000000000]              
	int                                                SelectServerIndex;                                		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                SelectChannelIndex;                               		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                SelectChannelPropertyNumber;                      		// 0x0124 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64036 ];

		return pClassPointer;
	};

	void receiveLobbyChannelListBtn ( );
	void receiveLobbyChannelTutorialBtn ( );
	void receiveLobbyChannelAwesomiumBannerBtn ( );
	void receiveLobbyChannelServerListBtn ( );
	void receiveLobbyChannelEnterBtn ( );
	void receiveLobbyChannelRefreshBtn ( );
	void CallSetTutorialToolTip ( );
	void CallHideTutorialToolTip ( );
	void CallShowTutorialToolTip ( );
	void CallSetServerInfo ( );
	void CallSelectedChannelList ( );
	void CallSetRemoveChannelList ( );
	void CallSetAddChannelList ( );
	void CallSetUpdateChannelList ( );
	void CallSetChannelList ( );
	void CallSetServerListInfo ( );
	void CallSelectedServerList ( );
	void CallSetServerList ( );
	void CallSetChannelBtn ( );
	void CallSetChannelLabel ( );
	void OnDisplayEnterMatchChannelPenaltyCancel ( );
	void OnDisplayEnterMatchChannelPenaltyOK ( );
	void DisplayEnterMatchChannelPenalty ( );
	void OnDisplayDialogEnterMatchChannelFailureOK ( );
	void DisplayDialogEnterMatchChannelFailure ( );
	void CheckKAD ( );
	void CheckLevel ( );
	void CheckTestChannel ( );
	void CheckClan ( );
	void CheckChampionship ( );
	void CheckAdmin ( );
	void CheckEnterMatchChannel ( );
	void OnEnterMatchChannel ( );
	void ShowPopupList ( );
	void CheckFirstPlay ( );
	void SetSelectChannelList ( );
	void GetChannelState ( );
	void GetChannelPropertyList ( );
	void UpdateChannelList ( );
	void SetSelectServerList ( );
	void CheckBooster ( );
	void UpdateServerInfo ( );
	void UpdateServerDesc ( );
	void UpdateTutorialToolTip ( );
	void GetChannelList ( );
	void GetServerList ( );
	void UpdateServerList ( );
	void GetSendMatchChannelStateList ( );
	void RequestEnterMatchChannel ( );
	void RequestMatchChannelState ( );
	void OnDisPlayDialogTutorialResultOK ( );
	void DisplayDialogTutorialResult ( );
	void InitData ( );
	void InitButtons ( );
	void InitLabels ( );
	void GotoPrevScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Channel::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_ProfileTab
// 0x0000 (0x0068 - 0x0068)
class UCombatFrontEnd_CharacterInfo_ProfileTab : public UCombatFrontEnd_CharacterInfo_TabBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64255 ];

		return pClassPointer;
	};

	void InitGameData ( );
	void InitTierData ( );
	void InitRankData ( );
	void CallSetSummary ( );
	void InitData ( );
	void InitCategoryButton ( );
};

UClass* UCombatFrontEnd_CharacterInfo_ProfileTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Chat
// 0x0048 (0x0118 - 0x00D0)
class UCombatFrontEnd_Chat : public UCombatFrontEnd_Object
{
public:
	struct FString                                     LastWhisperSenderName;                            		// 0x00D0 (0x0010) [0x0000000000000000]              
	int                                                TabLabelIDList[ 0x3 ];                            		// 0x00E0 (0x000C) [0x0000000000000000]              
	int                                                PopUpLabelIDList[ 0x5 ];                          		// 0x00EC (0x0014) [0x0000000000000000]              
	unsigned long                                      bPlayScrNotice : 1;                               		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                CurrentTabType;                                   		// 0x0104 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentWhisperID;                                 		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64471 ];

		return pClassPointer;
	};

	void IsClanInvite ( );
	void receiveCommonLobbyChattingPopupButton ( );
	void receiveCommonLobbyChattingListViewRightClick ( );
	void receiveCommonLobbyChattingListViewClick ( );
	void receiveCommonLobbyChattingFocus ( );
	void receiveCommonLobbyChattingTab ( );
	void receiveCommonLobbyChattingMessage ( );
	void CallRemovePopup ( );
	void CallSetPopup ( );
	void CallSetLabelLastWhisperList ( );
	void CallRemoveLastWhisperListData ( );
	void CallSetLastWhisperListData ( );
	void CallHideLastWhisperList ( );
	void showLastWhisperList ( );
	void CallStopNotice ( );
	void CallPlayNotice ( );
	void CallSetNotice ( );
	void CallSetWhisperId ( );
	void CallChangeWhisperMode ( );
	void CallSetTextFocus ( );
	void CallSetChatTabButtonToolTip ( );
	void CallSetChatTabButtonSelected ( );
	void CallRemoveAllMessage ( );
	void CallSetModeLables ( );
	void CallAddMessage ( );
	void UpdateLastWhisperList ( );
	void SaveLastWhisperSenderName ( );
	void AddMessage ( );
	void OnWhisperMode ( );
	void UpdateScrNotice ( );
	void StopScrNotice ( );
	void PlayScrNotice ( );
	void InitChatTab ( );
	void InitPopUpLabels ( );
	void InitTabLabels ( );
	void InitLabels ( );
	void HideWhisperList ( );
	void HideScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Chat::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Clan
// 0x001C (0x00EC - 0x00D0)
class UCombatFrontEnd_Clan : public UCombatFrontEnd_Scene
{
public:
	struct FString                                     ReqClanName;                                      		// 0x00D0 (0x0010) [0x0000000000000000]              
	int                                                RequiredMoney;                                    		// 0x00E0 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_ClanJoinPopup*               PopupClass;                                       		// 0x00E4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65959 ];

		return pClassPointer;
	};

	void UpdateCraeteButton ( );
	void GotoPrevScene ( );
	void CallSetDisableCancelBtn ( );
	void CallSetDisableCreatedBtn ( );
	void RecvFailKickMemberClan ( );
	void RecvFailAcceptSuggestClan ( );
	void RecvFailInviteClan ( );
	void OnCreateClanErrorDialogOK ( );
	void CreateClanErrorDialog ( );
	void RecvFailCreateClan ( );
	void RecvSuccessCreateClan ( );
	void RequestCreateClanName ( );
	void RequestSendClanCreatableNameCheck ( );
	void OnCreateClanNameDialogCancel ( );
	void OnCreateClanNameDialogOK ( );
	void CreateClanNameDialog ( );
	void SetClanText ( );
	void CallSetEmphasisMessageText ( );
	void CallSetThirdParagraphText ( );
	void CallSetSecondParagraphText ( );
	void CallSetFirstParagraphText ( );
	void CallSetButtonLabelText ( );
	void CallSetMessageText ( );
	void CallSetInputText ( );
	void CallSetTitleText ( );
	void SetJoinPopup ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Clan::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClanJoinPopup
// 0x0009 (0x00D9 - 0x00D0)
class UCombatFrontEnd_ClanJoinPopup : public UCombatFrontEnd_Object
{
public:
	unsigned long                                      bNeedInitClanPasswordLabel : 1;                   		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                nClanID;                                          		// 0x00D4 (0x0004) [0x0000000000000000]              
	unsigned char                                      PopupMode;                                        		// 0x00D8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65961 ];

		return pClassPointer;
	};

	void CallSetClanPasswordAdviceText ( );
	void CallSetClanPasswordCautionText ( );
	void CallSetClanPasswordInputHeadText ( );
	void CallSetClanPasswordNoticeText ( );
	void CallSetClanPasswordTitleText ( );
	void CallShowClanPasswordPop ( );
	void ReceiveClanPopupCancelBtn ( );
	void ReceiveClanPopupJoinOkBtn ( );
	void CallSetCancelBtn ( );
	void CallSetOkBtn ( );
	void CallSetClanJoinFixText ( );
	void CallSetClanNoticeFixTxt ( );
	void CallShowClanIntroducePop ( );
	void CallShowClanNoticePop ( );
	void CallShowClanJoinPop ( );
	void SetPopupClanName ( );
	void SetClanPopUpBtnLabel ( );
	void HideClanJoinPopup ( );
	void HideScene ( );
	void ShowClanPasswordPopup ( );
	void ShowClanIntroduceWritePopup ( );
	void ShowClanNoticeWritePopup ( );
	void ShowClanJoinPopup ( );
};

UClass* UCombatFrontEnd_ClanJoinPopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClanHome
// 0x00C8 (0x0198 - 0x00D0)
class UCombatFrontEnd_ClanHome : public UCombatFrontEnd_Scene
{
public:
	struct FString                                     ClanMaster;                                       		// 0x00D0 (0x0010) [0x0000000000000000]              
	int                                                MyUserID;                                         		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                MyGrade;                                          		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                SendUserID;                                       		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                SendGrade;                                        		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                PopupState;                                       		// 0x00F0 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_ClanJoinPopup*               PopupClass;                                       		// 0x00F4 (0x0008) [0x0000000000000000]              
	int                                                SelectedMatchTab;                                 		// 0x00FC (0x0004) [0x0000000000000000]              
	class UCBUIDataStore_Mission*                      DataStoreMission;                                 		// 0x0100 (0x0008) [0x0000000000000000]              
	TArray< struct FClanMatchRecordData >              MatchRecordList;                                  		// 0x0108 (0x0010) [0x0000000000000000]              
	struct FPopupMenuStruct                            PopupMenuData[ 0xA ];                             		// 0x0118 (0x0050) [0x0000000000000000]              
	TArray< int >                                      PopupMenuIDs;                                     		// 0x0168 (0x0010) [0x0000000000000000]              
	TArray< int >                                      SelfPopupMenuIDs;                                 		// 0x0178 (0x0010) [0x0000000000000000]              
	TArray< int >                                      JoinPopupMenuIDs;                                 		// 0x0188 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66031 ];

		return pClassPointer;
	};

	void CallResetDetailInfo ( );
	void CallSelectClanLocalList ( );
	void CallSetClanLocalList ( );
	void CallViewClanLocalList ( );
	void CallSetClanLocalLabel ( );
	void CallSetClanLocalHead ( );
	void ReceiveClanHomeLocalChange ( );
	void ReceiveClanHomeMatchListBtn ( );
	void ReceiveClanHomeBMatchBtn ( );
	void ReceiveClanHomeAMatchBtn ( );
	void ReceiveClanHomeRecentlyMatchBtn ( );
	void ReceiveClanHomeSecondTabBtn ( );
	void ReceiveClanHomeFirstTabBtn ( );
	void CallSetDetailInfo ( );
	void CallSetScoreBarText ( );
	void CallSetScoreList ( );
	void CallSetScoreTabLabel ( );
	void CallMainTabLabel ( );
	void SetDetailClanMatchRecord ( );
	void SortByScore ( );
	void SetClanMatchRecord ( );
	void MakeClanMatchList ( );
	void SetNoticeBtnDisabled ( );
	void IsClanIntroducePopupDisplayed ( );
	void IsClanPopupDisplayed ( );
	void SetClanMatchData ( );
	void RequestChangeClanPassword ( );
	void ClanPasswordError ( );
	void ShowClanPasswordPopup ( );
	void CloseNoticePopup ( );
	void GetClanTabState ( );
	void receiveClanNoticeBtn ( );
	void ReceiveClanHomePopupBtn ( );
	void CanDelegateClanMaster ( );
	void ReceiveClanHomeRejectBtn ( );
	void ReceiveClanHomeApprovalBtn ( );
	void ReceiveClanHomePersonalRightBtn ( );
	void ReceiveClanSubscriberTabBtn ( );
	void ReceiveClanHomeMemberTabBtn ( );
	void ReceiveClanHomePasswordChangeBtn ( );
	void ReceiveClanHomeClanCloseBtn ( );
	void ReceiveClanBreakAwayFailed ( );
	void ReceiveClanRegionUpdateFailed ( );
	void RecvClanKickMemberSucceed ( );
	void RecvClanGradeChangeFail ( );
	void RecvClanMasterDelegateFail ( );
	void RecvClanJoinRefuseFail ( );
	void RecvClanJoinApproveFail ( );
	void RecvFailShutDownClan ( );
	void OnClanError_OK ( );
	void DisplayDialogClanHomeError ( );
	void OnClanClanBreakAway_OK ( );
	void DisplayDialogClanBreakAway ( );
	void OnClanClanGrade_OK ( );
	void DisplayDialogClanGrade ( );
	void OnClanKickMemberSucced_OK ( );
	void DisplayDialogClanKickMemberSucced ( );
	void OnClanKickMember_OK ( );
	void DisplayDialogClanKickMember ( );
	void OnClanShutDownSucceed_OK ( );
	void DisplayDialogClanShutDownSucceed ( );
	void OnClan_Cancel ( );
	void OnClanShutDownNotice_OK ( );
	void DisplayDialogClanShutDownNotice ( );
	void CallSetClanIntroduceDesc ( );
	void CallSetClanIntroduceDrawLabel ( );
	void CallSetClanNoticeDesc ( );
	void CallSetClanNoticeDrawLabel ( );
	void CallDrawPopupMenu ( );
	void CallSetClanHomeBtn ( );
	void CallSetClanSubscriberSortTitle ( );
	void CallUpdateClanSubscriberList ( );
	void CallSetClanSubscriberList ( );
	void CallSetClanMemberSortTitle ( );
	void CallUpdateClanMemberList ( );
	void CallSetClanMemberList ( );
	void CallAddClanNewsList ( );
	void CallSetClanNewsList ( );
	void CallSetClanNewsTitle ( );
	void CallSetClanBooster ( );
	void CallSetClanExperiencePoint ( );
	void CallSetClanLevel ( );
	void CallSetClanLevelAndBoosterTitle ( );
	void CallSetClanInfoList ( );
	void CallSetClanInfoTitle ( );
	void CallSetClanHomeTip ( );
	void SendClanShutDownReq ( );
	void SendClanBreakAwayReq ( );
	void ChangClanMasterInfoData ( );
	void ChangeClanInfoData ( );
	void ClearClanHomeData ( );
	void SetPopupJoinMenu ( );
	void SetPopupSelfMenu ( );
	void SetPopupMenu ( );
	void SetClanHomeButton ( );
	void SetClanSubscriberInfo ( );
	void SetClanMemberLoginInfo ( );
	void SetClanLoginInfo ( );
	void SetClanMemberInfo ( );
	void SetClanLevelInfo ( );
	void SetClanInfo ( );
	void SetMyClanInfo ( );
	void SetClanData ( );
	void InitLabels ( );
	void GotoPrevScene ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void SetJoinPopup ( );
	void Init ( );
};

UClass* UCombatFrontEnd_ClanHome::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClanList
// 0x009C (0x016C - 0x00D0)
class UCombatFrontEnd_ClanList : public UCombatFrontEnd_Scene
{
public:
	class UCombatFrontEnd_ClanJoinPopup*               PopupClass;                                       		// 0x00D0 (0x0008) [0x0000000000000000]              
	struct FClanInformation                            CurrentClanInfo;                                  		// 0x00D8 (0x0044) [0x0000000000000000]              
	class UCBUIDataStore_Mission*                      DataStoreMission;                                 		// 0x011C (0x0008) [0x0000000000000000]              
	TArray< struct FFixTextInfo >                      FixTextList;                                      		// 0x0124 (0x0010) [0x0000000000000000]              
	TArray< int >                                      SortMenuIDList;                                   		// 0x0134 (0x0010) [0x0000000000000000]              
	int                                                ShowPageNum;                                      		// 0x0144 (0x0004) [0x0000000000000000]              
	int                                                TotalPage;                                        		// 0x0148 (0x0004) [0x0000000000000000]              
	int                                                ShowType;                                         		// 0x014C (0x0004) [0x0000000000000000]              
	int                                                MyClanID;                                         		// 0x0150 (0x0004) [0x0000000000000000]              
	int                                                SelectClanID;                                     		// 0x0154 (0x0004) [0x0000000000000000]              
	int                                                joinState;                                        		// 0x0158 (0x0004) [0x0000000000000000]              
	struct FString                                     SearchClanName;                                   		// 0x015C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66525 ];

		return pClassPointer;
	};

	void SetJoinPopup ( );
	void GotoPrevScene ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void ReceiveClanPopupCancelBtn ( );
	void ReceiveClanPopupJoinOkBtn ( );
	void receiveClanListSortDropDownMenuChange ( );
	void receiveClanListSearchBtn ( );
	void receiveClanListJoinBtn ( );
	void receiveClanListClanBtn ( );
	void receiveClanListNextBtn ( );
	void receiveClanListPrevBtn ( );
	void receiveClanListClanFoundationBtn ( );
	void CallSetClanSearchTxt ( );
	void CallSetClanJoinBtn ( );
	void CallSetClanProfile ( );
	void CallSetClanLatelyRecord ( );
	void CallSetClanInfo ( );
	void CallSetClanFixText ( );
	void CallSetWayBtn ( );
	void CallSetClanFoundationBtn ( );
	void CallDisableClanListSortMenu ( );
	void CallSelectClanListSortMenu ( );
	void CallSetClanListSortMenu ( );
	void CallSelectClanList ( );
	void CallSetClanListData ( );
	void CallSetClanListTitle ( );
	void RecvClanJoinCancelFail ( );
	void RecvClanJoinApplyFail ( );
	void OnClanError_OK ( );
	void DisplayDialogClanListError ( );
	void SetClanJoinButton ( );
	void SetClanInformation ( );
	void OnFindFailureDialogOK ( );
	void DisplayClanFindFailureDialog ( );
	void OnClanFindFailed ( );
	void CompareClanID ( );
	void SetClanList ( );
	void UpdateWayButton ( );
	void SetWayBtn ( );
	void SetClanJoinBtn ( );
	void SetClanFoundationBtn ( );
	void SetClanListSortMenu ( );
	void SetClanFixText ( );
	void InitData ( );
	void InitButtons ( );
	void InitLabels ( );
	void SetSearchClanName ( );
	void RequestSendClanFind ( );
	void RequestSendClanDetail ( );
	void RequestSendClanList ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_ClanList::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClassSelect
// 0x0000 (0x00D0 - 0x00D0)
class UCombatFrontEnd_ClassSelect : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66707 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_ClassSelect::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClausePopup
// 0x0010 (0x00E0 - 0x00D0)
class UCombatFrontEnd_ClausePopup : public UCombatFrontEnd_Object
{
public:
	struct FString                                     URL;                                              		// 0x00D0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66709 ];

		return pClassPointer;
	};

	void receiveClausePopupClauseBtn ( );
	void receiveClausePopupCancelBtn ( );
	void receiveClausePopupOkBtn ( );
	void CalletClauseBtn ( );
	void CallSetCancelBtn ( );
	void CallSetOkBtn ( );
	void CallSetContent ( );
	void CallSetTitle ( );
	void GetURL ( );
	void InitLabel ( );
	void Init ( );
};

UClass* UCombatFrontEnd_ClausePopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Community
// 0x01E0 (0x02B0 - 0x00D0)
class UCombatFrontEnd_Community : public UCombatFrontEnd_Object
{
public:
	struct FMessengerListStruct                        MessengerListInfos[ 0x6 ];                        		// 0x00D0 (0x0090) [0x0000000000000000]              
	int                                                MessengerPopupLabelIDList[ 0x9 ];                 		// 0x0160 (0x0024) [0x0000000000000000]              
	struct FString                                     UserName_FriendWith;                              		// 0x0184 (0x0010) [0x0000000000000000]              
	struct FString                                     UserName_AddBlackList;                            		// 0x0194 (0x0010) [0x0000000000000000]              
	int                                                UserID_BreakFriend;                               		// 0x01A4 (0x0004) [0x0000000000000000]              
	struct FString                                     UserName_ClanInvite;                              		// 0x01A8 (0x0010) [0x0000000000000000]              
	int                                                Banish_UserID;                                    		// 0x01B8 (0x0004) [0x0000000000000000]              
	int                                                Invite_ClanID;                                    		// 0x01BC (0x0004) [0x0000000000000000]              
	unsigned char                                      MessengerState;                                   		// 0x01C0 (0x0001) [0x0000000000000000]              
	unsigned long                                      bDisplayedNoList : 1;                             		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayedUserInfoTooltip : 1;                    		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FUserInfoTooltipInfo                        CurrentUserInfoTooltipInfo;                       		// 0x01C8 (0x0078) [0x0000000000000000]              
	TArray< struct UCombatFrontEnd_Community_FPopupItemInfo > Items_FriendsRequestsPopup;                       		// 0x0240 (0x0010) [0x0000000000000000]              
	TArray< struct UCombatFrontEnd_Community_FPopupItemInfo > Items_MyFriendsPopup;                             		// 0x0250 (0x0010) [0x0000000000000000]              
	TArray< struct UCombatFrontEnd_Community_FPopupItemInfo > Items_ClanPopup;                                  		// 0x0260 (0x0010) [0x0000000000000000]              
	TArray< struct UCombatFrontEnd_Community_FPopupItemInfo > Items_BlockedUsersPopup;                          		// 0x0270 (0x0010) [0x0000000000000000]              
	struct FString                                     NoFriendLabel;                                    		// 0x0280 (0x0010) [0x0000000000000000]              
	struct FString                                     NoClanLabel;                                      		// 0x0290 (0x0010) [0x0000000000000000]              
	struct FString                                     NoClanMemberLabel;                                		// 0x02A0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66734 ];

		return pClassPointer;
	};

	void SetMessenger_ClanList_Offline ( );
	void GetClanLocationDescription ( );
	void GetClanLevelName ( );
	void GetClanLevelIconPath ( );
	void GetMessengerUserState_Clan ( );
	void GetClanMessengerUserState ( );
	void GetStatusDecription_Clan ( );
	void GetClanStatusDecription ( );
	void CallSetTapButtonSelected ( );
	void receiveMessengerTapButton ( );
	void receiveMessengerPopupButton ( );
	void GetUserIDbyName ( );
	void ClearCurrentUserInfoTooltipInfo ( );
	void RemoveUserInfoTooltip ( );
	void MakeUserInfoTooltipInfoGFxObject ( );
	void UpdateUserInfoTooltipInfo ( );
	void DisplayClanUserInfoTooltip ( );
	void DisplayUserInfoTooltip ( );
	void receiveMessengerListViewOutButton ( );
	void receiveMessengerListViewOverButton ( );
	void receiveMessengerListViewRequestFriendCancelButton ( );
	void receiveMessengerListViewRequestFriendOkButton ( );
	void IsCompetitiveChannel ( );
	void SetSubmenu ( );
	void IsAbleClanInviteUser ( );
	void IsAbleMatchroomInviteUser ( );
	void IsAbleFollowUser ( );
	void SendSubmenu ( );
	void ShowPopup_Clan ( );
	void ShowPopup_Messenger ( );
	void receiveMessengerListViewLeftRightButton ( );
	void receiveMessengerListViewTitleOpenButton ( );
	void receiveMessengerListViewTitleCloseButton ( );
	void receiveMessengerAddFriendsKillFocus ( );
	void receiveMessengerAddFriendsSetFocus ( );
	void receiveMessengerAddFriendButton ( );
	void receiveMessengerCloseButton ( );
	void CallUpdateToolTip ( );
	void CallRemoveToolTip ( );
	void CallSetToopTip ( );
	void CallRemovePopup ( );
	void CallSetPopup ( );
	void CallHideNoPeopleCover ( );
	void CallShowNoPeopleCover ( );
	void CallSetListGruopPerson ( );
	void CallRemoveList ( );
	void CallCloseList ( );
	void CallOpenList ( );
	void CallInitAddFriend ( );
	void HideWithMotion ( );
	void ShowWithMotion ( );
	void OnRemoveBlackList_Cancel ( );
	void OnRemoveBlackList_Failure ( );
	void RemoveBlackList ( );
	void OnAddBlackList_Failure_OK ( );
	void DisplayAddBlackList_Failure ( );
	void OnAddBlackList_Cancel ( );
	void OnAddBlackList_OK ( );
	void TryAddBlackList ( );
	void OnRemoveFriend_Failure_OK ( );
	void OnRemoveFriend_Failure ( );
	void OnBreakFriends_Cancel ( );
	void OnBreakFriends_OK ( );
	void BreakFriendsWith ( );
	void OnAnswerRejectFriendSuggestion_Failure_OK ( );
	void OnAnswerRejectFriendSuggestion_Failure ( );
	void OnAnswerAcceptFriendSuggestion_Failure_OK ( );
	void OnAnswerAcceptFriendSuggestion_Failure ( );
	void AlramFriendSuggestion ( );
	void OnSuggestFriend_Failure_OK ( );
	void OnSuggestFriend_Failure ( );
	void OnSuggestFriend_Success ( );
	void OnClanBanish_Cancel ( );
	void OnClanBreakAway_Cancel ( );
	void OnClanBreakAway_OK ( );
	void OnClanBanish_OK ( );
	void RecvFailKickMemberClan ( );
	void RecvFailAcceptClan ( );
	void RecvFailSuggestClan ( );
	void ClanMemberList ( );
	void OnClanGradeBreak_OK ( );
	void ClanBreakAway ( );
	void ClanMemberBanis ( );
	void OnClanAccept_Cancel ( );
	void OnClanAccept_OK ( );
	void ClanAccept ( );
	void OnClanInvite_Cancel ( );
	void OnClanInvite_OK ( );
	void ClanInvite ( );
	void OnFriendWith_Cancel ( );
	void OnFriendWith_OK ( );
	void DisplayDialogFriendWith ( );
	void FriendsWith ( );
	void SortNickname ( );
	void SortClanNickname ( );
	void SortClanMessnegerInfo ( );
	void SortMessnegerInfo ( );
	void GetModeGroupname ( );
	void GetModeName ( );
	void GetLocationDescription ( );
	void GetLevelName ( );
	void GetLevelIconPath ( );
	void GetMessengerUserState_Friend ( );
	void GetMessengerUserState ( );
	void GetStatusDecription_Friend ( );
	void GetStatusDecription ( );
	void SetMessenger_BlockList ( );
	void UpdateMessenger_BlockList ( );
	void SetMessenger_FriendList_Offline ( );
	void UpdateClanMessenger_ClanList_Offline ( );
	void UpdateClanMessenger_ClanList_Online ( );
	void UpdateClanMessenger_ClanList ( );
	void UpdateMessenger_FriendList_Offline ( );
	void SetMessenger_ClanList_Online ( );
	void SetMessenger_FriendList_Online ( );
	void UpdateMessenger_FriendList_Online ( );
	void UpdateOnlineFriendsCount ( );
	void UpdateMessenger_FriendList ( );
	void SetMessenger_SuggestionList ( );
	void UpdateNewSuggestionFriendIcon ( );
	void UpdateMessenger_SuggestionList ( );
	void CheckDisplayNoListUI ( );
	void CheckNeedDisplayZeroList ( );
	void UpdateMessenger ( );
	void ControlMessengerVisible ( );
	void Close ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void InitLabels ( );
	void Init ( );
	void HideSceneWithMotion ( );
	void ShowSceneWithMotion ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Community::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CreateCharacter
// 0x0020 (0x00F0 - 0x00D0)
class UCombatFrontEnd_CreateCharacter : public UCombatFrontEnd_Scene
{
public:
	TArray< struct FSendNickInfo >                     SendNickList;                                     		// 0x00D0 (0x0010) [0x0000000000000000]              
	struct FString                                     SendNick;                                         		// 0x00E0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67300 ];

		return pClassPointer;
	};

	void receiveLobbyCreateNicknameExitBtn ( );
	void receiveLobbyCreateNicknameOkBtn ( );
	void CallSetFocus ( );
	void CallSetBtnLabel ( );
	void CallSetMessageTxt ( );
	void CallSetInputTxt ( );
	void CallsetTitleTxt ( );
	void OnDisplayDialogExitDialogCancle ( );
	void OnDisplayDialogExitDialogOK ( );
	void DisplayDialogExitDialog ( );
	void CheckNickname ( );
	void AddSendNick ( );
	void UpdateMessage ( );
	void UpdateCreateNickName ( );
	void SaveFirstPlay ( );
	void InitLabels ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_CreateCharacter::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Cube
// 0x0000 (0x00D0 - 0x00D0)
class UCombatFrontEnd_Cube : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67352 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_Cube::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Dashboard
// 0x0410 (0x04E0 - 0x00D0)
class UCombatFrontEnd_Dashboard : public UCombatFrontEnd_Object
{
public:
	struct FDashboardStruct                            DashboardInfo[ 0xF ];                             		// 0x00D0 (0x030C) [0x0000000000000000]              
	class UGFxObject*                                  TopBar;                                           		// 0x03DC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  BottomBar;                                        		// 0x03E4 (0x0008) [0x0000000000000000]              
	struct FString                                     LastPlayerName;                                   		// 0x03EC (0x0010) [0x0000000000000000]              
	int                                                LastCCardID;                                      		// 0x03FC (0x0004) [0x0000000000000000]              
	struct FString                                     LastCCardIconPath;                                		// 0x0400 (0x0010) [0x0000000000000000]              
	struct FString                                     LastClanName;                                     		// 0x0410 (0x0010) [0x0000000000000000]              
	struct FString                                     LastClanIconName;                                 		// 0x0420 (0x0010) [0x0000000000000000]              
	struct FString                                     LastClanIconPath;                                 		// 0x0430 (0x0010) [0x0000000000000000]              
	struct FString                                     LastClanLevel;                                    		// 0x0440 (0x0010) [0x0000000000000000]              
	struct FString                                     LastClanLevelColor;                               		// 0x0450 (0x0010) [0x0000000000000000]              
	int                                                LastLevel;                                        		// 0x0460 (0x0004) [0x0000000000000000]              
	int                                                LastExpGuage;                                     		// 0x0464 (0x0004) [0x0000000000000000]              
	struct FString                                     LastLevelIconPath;                                		// 0x0468 (0x0010) [0x0000000000000000]              
	int                                                LastCurExp;                                       		// 0x0478 (0x0004) [0x0000000000000000]              
	int                                                LastNextExp;                                      		// 0x047C (0x0004) [0x0000000000000000]              
	int                                                LastTierPoint;                                    		// 0x0480 (0x0004) [0x0000000000000000]              
	struct FString                                     LastTierIconPath;                                 		// 0x0484 (0x0010) [0x0000000000000000]              
	TArray< struct FMyMoneyStruct >                    LastMyMoneyInfo;                                  		// 0x0494 (0x0010) [0x0000000000000000]              
	int                                                LastOnlineFriendCount;                            		// 0x04A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLastNewSuggestionFriend : 1;                     		// 0x04A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLastNewMail : 1;                                 		// 0x04A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLastExpiresMail : 1;                             		// 0x04A8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bLastNoManner : 1;                                		// 0x04A8 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                LastNewMailCount;                                 		// 0x04AC (0x0004) [0x0000000000000000]              
	struct FString                                     CashChargeURL;                                    		// 0x04B0 (0x0010) [0x0000000000000000]              
	int                                                BulletSaleEffectTimeOut;                          		// 0x04C0 (0x0004) [0x0000000000000000]              
	int                                                BulletSaleEffectLineCount;                        		// 0x04C4 (0x0004) [0x0000000000000000]              
	int                                                PenaltyTimeMinute_UI;                             		// 0x04C8 (0x0004) [0x0000000000000000]              
	int                                                PenaltyPoint_UI;                                  		// 0x04CC (0x0004) [0x0000000000000000]              
	TArray< struct UCombatFrontEnd_Dashboard_FPopupItemInfo > DashBoardPopup;                                   		// 0x04D0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67354 ];

		return pClassPointer;
	};

	void CallSetServerPing ( );
	void CallHideEventEffect ( );
	void CallShowEventEffect ( );
	void CallClosePopupMenu ( );
	void CallSetRankedBanVisible ( );
	void CallSetRankedBan ( );
	void receiveCommonTopBarChargeBtn ( );
	void receiveCommonTopBarRefreshBtn ( );
	void receiveTopBarPopupMenuBtn ( );
	void CallDrawPopupMenu ( );
	void receiveTopBarLeftRightBtn ( );
	void UpdateMoneyDisplayButtonDisable ( );
	void NoMannerTimeToString ( );
	void SetBottomBoosterIcon ( );
	void GetJackpotColorString ( );
	void AddJackpotNoticeMessage ( );
	void CallStopNotice ( );
	void CallPlayNotice ( );
	void CallAddNotice ( );
	void CallInitNotice ( );
	void GetBoosterToolTipAttendRewardDesc ( );
	void GetBoosterToolTipGoldDesc ( );
	void GetBoosterToolTipExpDesc ( );
	void GetBoosterToolTipByID ( );
	void GetBoosterToolTipTitle ( );
	void CallSetApplyBooster ( );
	void CallSetBottomBarBtn ( );
	void CallHideBottombar ( );
	void CallShowBottombar ( );
	void CallSetFinanceAllDisabled ( );
	void CallUpdateFinance ( );
	void CallSetFinance ( );
	void CallSetUserInfo ( );
	void CallTopbarBtnExpriesVisible ( );
	void CallSetTopBarBtn ( );
	void CallHideTopbar ( );
	void CallShowTopbar ( );
	void UpdatePing ( );
	void IsBackButtonDisabled ( );
	void UpdateMailButton_ExpiresMail ( );
	void UpdateMailButtonHasExpires ( );
	void UpdateMailButton_NewMailCount ( );
	void UpdateMailButton_NewMail ( );
	void UpdateMailButton ( );
	void InitMailButton ( );
	void UpdateMessengerButton_OnlineFriendCount ( );
	void UpdateMessengerButton_NewSuggestionFriend ( );
	void UpdateClanButton ( );
	void InitMessengerButton ( );
	void OnUpdateMatchBanInfo ( );
	void UpdateMyMoneyInfo ( );
	void UpdateMyBaseInfo ( );
	void IsButtonAble ( );
	void SendButtonState_Disabled ( );
	void SetButtonState_Disabled ( );
	void SendButtonState_Selected ( );
	void SetButtonState_Selected ( );
	void GetButtonState_Disabled ( );
	void GetButtonState_Selected ( );
	void GetButtonState_All ( );
	void GetCashChargeURL ( );
	void StopBulletSaleEventEffect ( );
	void StartBulletSaleEventEffect ( );
	void HideSaleEventEffect ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
	void SetBottomBar ( );
	void SetTopBar ( );
};

UClass* UCombatFrontEnd_Dashboard::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_DebugUI
// 0x0000 (0x00D0 - 0x00D0)
class UCombatFrontEnd_DebugUI : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67719 ];

		return pClassPointer;
	};

	void CallSetDebugInfo ( );
};

UClass* UCombatFrontEnd_DebugUI::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event
// 0x0054 (0x0124 - 0x00D0)
class UCombatFrontEnd_Event : public UCombatFrontEnd_Scene
{
public:
	int                                                CurrentViewTabIndex;                              		// 0x00D0 (0x0004) [0x0000000000000000]              
	TArray< struct FEventTabStruct >                   EventTabList;                                     		// 0x00D4 (0x0010) [0x0000000000000000]              
	class UCombatFrontEnd_Event_TabBase*               TabList[ 0x8 ];                                   		// 0x00E4 (0x0040) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67723 ];

		return pClassPointer;
	};

	void receiveTabBtn ( );
	void OnQuestStatus_Change ( );
	void receiveRewardBtn ( );
	void CallSelectMainTab ( );
	void CallSetMainTab ( );
	void CallSetMainTitle ( );
	void Init ( );
	void GetTabClassData ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void GotoPrevScene ( );
};

UClass* UCombatFrontEnd_Event::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_TabBase
// 0x000C (0x006C - 0x0060)
class UCombatFrontEnd_Event_TabBase : public UObject
{
public:
	class UCombatFrontEndMoviePlayer*                  ParentMoviePlayer;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      bShowTab : 1;                                     		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67729 ];

		return pClassPointer;
	};

	void InitData ( );
	void InitCategoryButton ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Event_TabBase::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_AttendanceCheckTab
// 0x0010 (0x007C - 0x006C)
class UCombatFrontEnd_Event_AttendanceCheckTab : public UCombatFrontEnd_Event_TabBase
{
public:
	TArray< struct FRewardItemStruct >                 RewardItemList;                                   		// 0x006C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67749 ];

		return pClassPointer;
	};

	void receiveRewardBtn ( );
	void CallDrawAttendanceCheckReward ( );
	void CallStampAnimation ( );
	void CallSetAttendanceCheck ( );
	void PlayStampAnimation ( );
	void InitData ( );
	void GetRewardItemList ( );
	void GetToday ( );
	void InitCategoryButton ( );
};

UClass* UCombatFrontEnd_Event_AttendanceCheckTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_MissionTab
// 0x0020 (0x008C - 0x006C)
class UCombatFrontEnd_Event_MissionTab : public UCombatFrontEnd_Event_TabBase
{
public:
	struct FString                                     MissionState_TextColor[ 0x2 ];                    		// 0x006C (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67751 ];

		return pClassPointer;
	};

	void AddMissionData ( );
	void InitData ( );
	void InitCategoryButton ( );
	void CallSetMissionData ( );
	void GetMissionGroup ( );
	void GetResetTimeLabelID ( );
	void GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_MissionTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_DailyMissionTab
// 0x0000 (0x008C - 0x008C)
class UCombatFrontEnd_Event_DailyMissionTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67750 ];

		return pClassPointer;
	};

	void CallSetMissionData ( );
	void GetMissionGroup ( );
	void GetResetTimeLabelID ( );
	void GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_DailyMissionTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_WeeklyMissionTab
// 0x0000 (0x008C - 0x008C)
class UCombatFrontEnd_Event_WeeklyMissionTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67752 ];

		return pClassPointer;
	};

	void CallSetMissionData ( );
	void GetMissionGroup ( );
	void GetResetTimeLabelID ( );
	void GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_WeeklyMissionTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_SpecialEventTab
// 0x0000 (0x008C - 0x008C)
class UCombatFrontEnd_Event_SpecialEventTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67753 ];

		return pClassPointer;
	};

	void CallSetMissionData ( );
	void GetMissionGroup ( );
	void GetResetTimeLabelID ( );
	void GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_SpecialEventTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_PCBangEventTab
// 0x0000 (0x008C - 0x008C)
class UCombatFrontEnd_Event_PCBangEventTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67754 ];

		return pClassPointer;
	};

	void CallSetMissionData ( );
	void GetMissionGroup ( );
	void GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_PCBangEventTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_AiEventTab
// 0x0000 (0x008C - 0x008C)
class UCombatFrontEnd_Event_AiEventTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67755 ];

		return pClassPointer;
	};

	void CallSetMissionData ( );
	void GetMissionGroup ( );
	void GetResetTimeLabelID ( );
	void GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_AiEventTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_HiredSoldierEventTab
// 0x0000 (0x008C - 0x008C)
class UCombatFrontEnd_Event_HiredSoldierEventTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67756 ];

		return pClassPointer;
	};

	void CallSetMissionData ( );
	void GetResetTimeLabelID ( );
	void GetMissionGroup ( );
	void GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_HiredSoldierEventTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_AchievementTab
// 0x0000 (0x008C - 0x008C)
class UCombatFrontEnd_Event_AchievementTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67757 ];

		return pClassPointer;
	};

	void CallSetMissionData ( );
	void GetMissionGroup ( );
	void InitData ( );
	void GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_AchievementTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_ComebackRewardTab
// 0x0000 (0x006C - 0x006C)
class UCombatFrontEnd_Event_ComebackRewardTab : public UCombatFrontEnd_Event_TabBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67955 ];

		return pClassPointer;
	};

	void InitData ( );
	void InitCategoryButton ( );
};

UClass* UCombatFrontEnd_Event_ComebackRewardTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Exit
// 0x0010 (0x00E0 - 0x00D0)
class UCombatFrontEnd_Exit : public UCombatFrontEnd_Object
{
public:
	struct FScriptDelegate                             __CallSetMission__Delegate;                       		// 0x00D0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68242 ];

		return pClassPointer;
	};

	void Show ( );
	void CallSetLayout ( );
	void CallSetPresent ( );
	void CallSetGameExp ( );
	void CallSetGameInfo ( );
	void CallSetTitle ( );
	void CallBtnLabel ( );
	void CallSetPCRoomDisabled ( );
	void CallSetPCRoomMission ( );
	void CallSetDailyMission ( );
	void SetQuestData ( );
	void CallSetMission ( );
	void GetTitle ( );
	void HideScene ( );
	void ShowScene ( );
	void SetRewardData ( );
	void SetGameExpData ( );
	void eventBattleInfo_PushElement ( );
	void SetBattleData ( );
};

UClass* UCombatFrontEnd_Exit::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_GameTitle
// 0x0000 (0x00D0 - 0x00D0)
class UCombatFrontEnd_GameTitle : public UCombatFrontEnd_Scene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68360 ];

		return pClassPointer;
	};

	void CallsetRatingDesc ( );
	void CallsetRatingIcon ( );
	void SetRatingIcon ( );
	void Init ( );
};

UClass* UCombatFrontEnd_GameTitle::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Help
// 0x0008 (0x00D8 - 0x00D0)
class UCombatFrontEnd_Help : public UCombatFrontEnd_Object
{
public:
	int                                                MaxSubTabNum;                                     		// 0x00D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsFirstOpen : 1;                                 		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      FirstEverPlay : 1;                                		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68370 ];

		return pClassPointer;
	};

	void CallHideHome ( );
	void CallShowHome ( );
	void CallSetHome ( );
	void CallSetSubTab ( );
	void CallSelectMainTab ( );
	void CallSetMainTab ( );
	void CallSetHelpBG ( );
	void CallSetNextBtnLabel ( );
	void CallSetCloseBtnLabel ( );
	void CallSetTitle ( );
	void GetTabDetailInfoObject ( );
	void GetHelpTabSubObject ( );
	void SetHelpTabMain ( );
	void InitHome ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Help::pClassPointer = NULL;

// Class CombatGame.UIDisplayPoint
// 0x0010 (0x0254 - 0x0244)
class AUIDisplayPoint : public AActor
{
public:
	struct FString                                     NameText;                                         		// 0x0244 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68548 ];

		return pClassPointer;
	};

};

UClass* AUIDisplayPoint::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ItemSellPopup
// 0x0048 (0x0118 - 0x00D0)
class UCombatFrontEnd_ItemSellPopup : public UCombatFrontEnd_Object
{
public:
	struct FInvenItemInfo                              SellItemInfo;                                     		// 0x00D0 (0x0038) [0x0000000000000000]              
	TArray< int >                                      SellSlotList;                                     		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69015 ];

		return pClassPointer;
	};

	void receiveInventorySellItemNoticePopupCancelBtn ( );
	void receiveInventorySellItemNoticePopupOkBtn ( );
	void receiveInventorySellItemViewPopupCancelBtn ( );
	void receiveInventorySellItemViewPopupOkBtn ( );
	void CallPlaySellSound ( );
	void CallSetSuccess ( );
	void CallSetSellItemNoticeContent ( );
	void CallSetSellItemNoticeFixTxt ( );
	void CallShowSellItemNoticePopup ( );
	void CallSetSellMaxCnt ( );
	void CallSetSellViewCnt ( );
	void CallSetSellItemInfo ( );
	void CallSetSellItemViewFixTxt ( );
	void CallShowSellItemViewPopup ( );
	void OnDisPlayDialog_ItemSellFailedOK ( );
	void DisPlayDialog_ItemSellFailed ( );
	void ItemSellSuccess ( );
	void OnItemSell ( );
	void SetSellItemNoticeContent ( );
	void SetSellSlotList ( );
	void SetSellMaxCnt ( );
	void SetSellItemInfo ( );
	void SetSellItemData ( );
	void ShowSellItemViewPopup ( );
	void InitLabels ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_ItemSellPopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ToolTip
// 0x01C4 (0x0294 - 0x00D0)
class UCombatFrontEnd_ToolTip : public UCombatFrontEnd_Object
{
public:
	unsigned long                                      bInitTooltipLocalization : 1;                     		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     WeaponLocalizationInfos[ 0x6 ];                   		// 0x00D4 (0x0060) [0x0000000000000000]              
	struct FString                                     ClothesChipLocalizationInfos[ 0x14 ];             		// 0x0134 (0x0140) [0x0000000000000000]              
	struct FString                                     html_br;                                          		// 0x0274 (0x0010) [0x0000000000000000]              
	struct FString                                     html_img;                                         		// 0x0284 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69087 ];

		return pClassPointer;
	};

	void CalculateRemainRentalTime_Shop ( );
	void CalculateRemainRentalTime_Inventory ( );
	void GetItemCategoryLabel ( );
	void SetTooltipLocalization ( );
};

UClass* UCombatFrontEnd_ToolTip::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ItemToolTip
// 0x0000 (0x0294 - 0x0294)
class UCombatFrontEnd_ItemToolTip : public UCombatFrontEnd_ToolTip
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69112 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_ItemToolTip::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ItemToolTip_RollOver
// 0x0000 (0x0294 - 0x0294)
class UCombatFrontEnd_ItemToolTip_RollOver : public UCombatFrontEnd_ToolTip
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69114 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_ItemToolTip_RollOver::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Login
// 0x0050 (0x0120 - 0x00D0)
class UCombatFrontEnd_Login : public UCombatFrontEnd_Scene
{
public:
	int                                                IDLabelID;                                        		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                PWLabelID;                                        		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                CheckBoxLabelID;                                  		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                OKBtnLabelID;                                     		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                CancelBtnLabelID;                                 		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                AccountBtnLabelID;                                		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                OptionBtnLabelID;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                ExitBtnLabelID;                                   		// 0x00EC (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedLocalize : 1;                                		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSaveUserInfo : 1;                                		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     loginID;                                          		// 0x00F4 (0x0010) [0x0000000000000000]              
	struct FString                                     userPW;                                           		// 0x0104 (0x0010) [0x0000000000000000]              
	int                                                FailedLoginCount;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  StatusTF;                                         		// 0x0118 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69116 ];

		return pClassPointer;
	};

	void OnDialogTextInputError_OK ( );
	void DisplayDialogTextInputError ( );
	void IsMaxFailedLoginCount ( );
	void MakeLoginSoruce ( );
	void receiveLoginBackBtn ( );
	void receiveLoginExitBtn ( );
	void receiveLoginOptionBtn ( );
	void receiveLoginAccountBtn ( );
	void receiveCheckCancelBtn ( );
	void receiveLoginOkBtn ( );
	void SetButtonDisabled ( );
	void UpdateCertifyWaitUserCount ( );
	void UpdateLoginProgressUI ( );
	void InitLoginProgressUI ( );
	void HideLoginProgressUI ( );
	void ShowLoginProgressUI ( );
	void CallSetLoginProgressStatus ( );
	void CallSetLoginProgress ( );
	void CallHideProgress ( );
	void CallShowProgress ( );
	void CallSetLoginButtonsDisabled ( );
	void CallSetLoginFirst ( );
	void CallSetLoginUserInfo ( );
	void CallSetLoginTexts ( );
	void UnLock ( );
	void Lock ( );
	void GotoPrevScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Login::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MainLobby
// 0x00F4 (0x01C4 - 0x00D0)
class UCombatFrontEnd_MainLobby : public UCombatFrontEnd_Scene
{
public:
	struct UCombatFrontEnd_MainLobby_FButtonInfo       SortButtonList[ 0x6 ];                            		// 0x00D0 (0x0078) [0x0000000000000000]              
	struct UCombatFrontEnd_MainLobby_FButtonInfo       RoomButtonList[ 0x5 ];                            		// 0x0148 (0x0064) [0x0000000000000000]              
	class UCombatLobbyTransaction*                     LobbyTran;                                        		// 0x01AC (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_MatchMember*                 MatchMemberClass;                                 		// 0x01B4 (0x0008) [0x0000000000000000]              
	int                                                SelectMatchRoomNumber;                            		// 0x01BC (0x0004) [0x0000000000000000]              
	int                                                EnterMatchRoomNumber;                             		// 0x01C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69198 ];

		return pClassPointer;
	};

	void receiveRoomMemberHide ( );
	void receiveLobbyRoomListItemRightBtn ( );
	void receiveLobbyRoomListItemBtn ( );
	void receiveCompetitiveMajorityCueBtn ( );
	void receiveCompetitiveMinorityCueBtn ( );
	void receiveLobbyRoomListPracticeBtn ( );
	void receiveLobbyRoomListEnrollmentBtn ( );
	void receiveLobbyRoomListQuickSetBtn ( );
	void receiveLobbyRoomListQuickStartBtn ( );
	void receiveLobbyRoomListJoinBtn ( );
	void receiveLobbyRoomListMakeBtn ( );
	void CallSetCompetitiveToolTip ( );
	void CallSetCompetitiveBtn ( );
	void CallSetCompetitiveHead ( );
	void CallSetMapImageRoomInfo ( );
	void CallSetLabelRoomInfo ( );
	void CallHideRoomInfo ( );
	void CallShowRoomInfo ( );
	void CallSetRoomBtn ( );
	void CallChangeRoomListLayout ( );
	void CallSetSortBtn ( );
	void CallSetRemoveRoomList ( );
	void CallSetAddRoomList ( );
	void CallSetUpdateRoomList ( );
	void CallSetRoomList ( );
	void IsDisplayMatchRoomLookIn ( );
	void MatchRoomLookIn ( );
	void OnDisplayDialogEnterMatchRoomFailureOK ( );
	void DisplayDialogEnterMatchRoomFailure ( );
	void EnterMatchRoom ( );
	void RequestEnterMatchRoomByRoomNumber ( );
	void OnDisplayDialogMatchRoomPassWordCancel ( );
	void OnDisplayDialogMatchRoomPassWordOK ( );
	void DisplayDialogMatchRoomPassWord ( );
	void IsIgnorePassWord ( );
	void UpdateMatchRoomList ( );
	void SetMapImageRoomInfo ( );
	void GetServerChannel ( );
	void UpdateLabelRoomInfo ( );
	void IsMapProto ( );
	void IsModeProto ( );
	void GetMatchRoomMapName ( );
	void GetMatchRoomModeName ( );
	void GetMatchRoomTitle ( );
	void GetMatchRoomGFxObject ( );
	void SetRoomList ( );
	void ChangeRoomListLayout ( );
	void IsInviteAutoRegist ( );
	void UpdateEnrollmentButton ( );
	void UpdateCompetitiveButton ( );
	void InitCompetitionData ( );
	void InitData ( );
	void InitButtons ( );
	void SetMatchMemberClass ( );
	void GotoPrevScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_MainLobby::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MatchMember
// 0x000C (0x00DC - 0x00D0)
class UCombatFrontEnd_MatchMember : public UCombatFrontEnd_Object
{
public:
	int                                                MatchroomNumber;                                  		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                X;                                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                Y;                                                		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69206 ];

		return pClassPointer;
	};

	void receiveRoomMemberHide ( );
	void CallSetMatchMemberList ( );
	void CallSetMatchMemberTitle ( );
	void CallMoveTo ( );
	void IsDisplay ( );
	void GetMaxUser ( );
	void IsAutoMatching ( );
	void GetClanEmblemImagePath ( );
	void SetClanData ( );
	void GetCallingCardImagePath ( );
	void GetLevelImagePath ( );
	void SetMatchMemberList ( );
	void InitLabels ( );
	void SetData ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_MatchMember::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MakeRoom
// 0x01A0 (0x0270 - 0x00D0)
class UCombatFrontEnd_MakeRoom : public UCombatFrontEnd_Scene
{
public:
	TArray< struct FMakeroom_MissionInfo >             Makeroom_MissionInfos;                            		// 0x00D0 (0x0010) [0x0000000000000000]              
	TArray< struct FMakeroom_ModeInfo >                Makeroom_ModeInfos;                               		// 0x00E0 (0x0010) [0x0000000000000000]              
	TArray< struct FMakeroom_MapInfo >                 Makeroom_MapInfos;                                		// 0x00F0 (0x0010) [0x0000000000000000]              
	int                                                MissionLabelID;                                   		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                ModeLabelID;                                      		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                DescLabelID;                                      		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                ModeSetupLabelID;                                 		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                MapSetupLabelID;                                  		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                CurretMapLabelID;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                BrandNewLabelID;                                  		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                PopularityLabelID;                                		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                EventLabelID;                                     		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                MaxUserCountLabelID;                              		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                ChangeModeLabelID;                                		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                ChangeMapLabelID;                                 		// 0x012C (0x0004) [0x0000000000000000]              
	struct FString                                     ModeSetupLabel;                                   		// 0x0130 (0x0010) [0x0000000000000000]              
	struct FString                                     MapSetupLabel;                                    		// 0x0140 (0x0010) [0x0000000000000000]              
	struct FFrontEndButtonStruct                       ButtonInfo[ 0x7 ];                                		// 0x0150 (0x00A8) [0x0000000000000000]              
	int                                                SelectedMissionIndex;                             		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                SelectedModeIndex;                                		// 0x01FC (0x0004) [0x0000000000000000]              
	int                                                SelectedMapIndex;                                 		// 0x0200 (0x0004) [0x0000000000000000]              
	int                                                SelectedModeGroupIndex;                           		// 0x0204 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRandomMode : 1;                                  		// 0x0208 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedUpdatePassword : 1;                          		// 0x0208 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsPracticeRoom : 1;                               		// 0x0208 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FString                                     SelectedMissionName;                              		// 0x020C (0x0010) [0x0000000000000000]              
	struct FString                                     SelectedModeName;                                 		// 0x021C (0x0010) [0x0000000000000000]              
	struct FString                                     SelectedMapName;                                  		// 0x022C (0x0010) [0x0000000000000000]              
	struct FString                                     SelectedMapMaxPlayerCount;                        		// 0x023C (0x0010) [0x0000000000000000]              
	struct FString                                     SelectedMapBGPath;                                		// 0x024C (0x0010) [0x0000000000000000]              
	int                                                LastPassword;                                     		// 0x025C (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentUIMode;                                    		// 0x0260 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentSetupType;                                 		// 0x0261 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentCompetitiveType;                           		// 0x0262 (0x0001) [0x0000000000000000]              
	class UCBUIDataStore_Mission*                      DataStoreMission;                                 		// 0x0264 (0x0008) [0x0000000000000000]              
	int                                                nChannel;                                         		// 0x026C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69424 ];

		return pClassPointer;
	};

	void DisplayPracticeFailureDialog ( );
	void SetMapList ( );
	void TodayModeSelectTimer ( );
	void OnTodayModeUpdate ( );
	void SetModeList ( );
	void receiveLobbyRoomCreatedMapListBtn ( );
	void receiveLobbyRoomCreatedModeListBtn ( );
	void receiveLobbyRoomCreatedMissionListBtn ( );
	void receiveLobbyRoomCreatedPasswordBtn ( );
	void receiveLobbyRoomCreatedMapSmallBtn ( );
	void receiveLobbyRoomCreatedMapMiddleBtn ( );
	void receiveLobbyRoomCreatedMapLargeBtn ( );
	void receiveLobbyRoomCreatedMapTotalBtn ( );
	void OnEnterRoomSettingSucceed ( );
	void OnDisplayTodayModeCreateFailedDialogOK ( );
	void DisplayTodayModeCreateFailedDialog ( );
	void receiveLobbyRoomCreatedCompleteBtn ( );
	void LoadPracticeMode ( );
	void receiveLobbyRoomCreatedSetChangeBtn ( );
	void receiveLobbyRoomCreatedCancelBtn ( );
	void CallScrollingMapList ( );
	void CallSelectMapList ( );
	void CallSetMapList ( );
	void CallSetModeListVisible ( );
	void CallShowSelectedMap ( );
	void CallScrollingModeList ( );
	void CallSelectModeList ( );
	void CallRemoveModeList ( );
	void CallUpdateModeList ( );
	void CallSetModeList ( );
	void CallLockingMissionList ( );
	void CallScrollingMissionList ( );
	void CallSelectMissionList ( );
	void CallRemoveMissionList ( );
	void CallUpdateMissionList ( );
	void CallSetMissionList ( );
	void CallSetCurrentValue ( );
	void CallSetPassword ( );
	void CallSetRoomCreatedBtn ( );
	void CallSetRoomCreatedLabel ( );
	void CallShowMapSetup ( );
	void CallShowModeSetup ( );
	void OnEnterMatchroomByCreationFailureDialogOK ( );
	void DisplayEnterMatchroomByCreationFailureDialog ( );
	void OnEnterMatchroomByCreation_Failure ( );
	void GetButtonLabel ( );
	void ChangeButtonSelected_MapSizeTabButton ( );
	void ChangeMapButtonState ( );
	void ChangeButtonLabel_ChangeButton ( );
	void ChangeSetupLabel ( );
	void ChangeSetup ( );
	void GetMapBGPath ( );
	void GetMaxPlayerCountDesc ( );
	void GetMapSizeLabel ( );
	void GetMapLabel ( );
	void GetModeLabel ( );
	void GetMissionLabel ( );
	void GetMapIndex ( );
	void GetModeIndex ( );
	void GetMissionIndex ( );
	void SelectMap ( );
	void SelectRandom ( );
	void SelectMode ( );
	void SelectMission ( );
	void SendMapList ( );
	void SendModeList ( );
	void SendMissionList ( );
	void SetMissionList ( );
	void InitMapList ( );
	void InitModeList ( );
	void InitMissionList ( );
	void InitMissionModeMapList ( );
	void InitPassword ( );
	void InitButtons ( );
	void InitCommonLabels ( );
	void InitLabels ( );
	void Close ( );
	void Init ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void SetPracticeRoom ( );
	void GotoPrevScene ( );
};

UClass* UCombatFrontEnd_MakeRoom::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MatchResult
// 0x03D8 (0x04A8 - 0x00D0)
class UCombatFrontEnd_MatchResult : public UCombatFrontEnd_Scene
{
public:
	class UCBUIDataStore_Mission*                      DataStoreMission;                                 		// 0x00D0 (0x0008) [0x0000000000000000]              
	struct FString                                     UsedMilitaryBranchLabel;                          		// 0x00D8 (0x0010) [0x0000000000000000]              
	struct FString                                     InGameRankLabel;                                  		// 0x00E8 (0x0010) [0x0000000000000000]              
	struct FString                                     CRPointLabel;                                     		// 0x00F8 (0x0010) [0x0000000000000000]              
	struct FString                                     UsedCRPointLabel;                                 		// 0x0108 (0x0010) [0x0000000000000000]              
	struct FString                                     AcquiredCRPointLabel;                             		// 0x0118 (0x0010) [0x0000000000000000]              
	struct FString                                     AIWaveLabel;                                      		// 0x0128 (0x0010) [0x0000000000000000]              
	unsigned char                                      RoundType;                                        		// 0x0138 (0x0001) [0x0000000000000000]              
	unsigned char                                      MyTeamIndex;                                      		// 0x0139 (0x0001) [0x0000000000000000]              
	unsigned char                                      WinnerTeamIndex;                                  		// 0x013A (0x0001) [0x0000000000000000]              
	unsigned char                                      MyUsedMilitaryBranchType;                         		// 0x013B (0x0001) [0x0000000000000000]              
	int                                                PMScore;                                          		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                VCScore;                                          		// 0x0140 (0x0004) [0x0000000000000000]              
	struct FString                                     ModeNameString;                                   		// 0x0144 (0x0010) [0x0000000000000000]              
	struct FString                                     MapNameString;                                    		// 0x0154 (0x0010) [0x0000000000000000]              
	struct FString                                     GoalString;                                       		// 0x0164 (0x0010) [0x0000000000000000]              
	unsigned long                                      bBetaMode : 1;                                    		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBetaMap : 1;                                     		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      MyLevelUp : 1;                                    		// 0x0174 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bClanMatch : 1;                                   		// 0x0174 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bClanChange : 1;                                  		// 0x0174 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bClanRankMatch : 1;                               		// 0x0174 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bCompSquadClan : 1;                               		// 0x0174 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAiMatch : 1;                                     		// 0x0174 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bHasModeScore : 1;                                		// 0x0174 (0x0004) [0x0000000000000000] [0x00000100] 
	struct FString                                     MyPlayedTimeString;                               		// 0x0178 (0x0010) [0x0000000000000000]              
	struct FString                                     MyNameString;                                     		// 0x0188 (0x0010) [0x0000000000000000]              
	struct FString                                     ClanIconPathString;                               		// 0x0198 (0x0010) [0x0000000000000000]              
	struct FString                                     ClanNameString;                                   		// 0x01A8 (0x0010) [0x0000000000000000]              
	int                                                MyPrevLevel;                                      		// 0x01B8 (0x0004) [0x0000000000000000]              
	int                                                MyCurLevel;                                       		// 0x01BC (0x0004) [0x0000000000000000]              
	int                                                MyGainExp;                                        		// 0x01C0 (0x0004) [0x0000000000000000]              
	int                                                MyGainGameMoney;                                  		// 0x01C4 (0x0004) [0x0000000000000000]              
	int                                                MyTeamRanking;                                    		// 0x01C8 (0x0004) [0x0000000000000000]              
	int                                                MyTotalRanking;                                   		// 0x01CC (0x0004) [0x0000000000000000]              
	int                                                MyKillCount;                                      		// 0x01D0 (0x0004) [0x0000000000000000]              
	int                                                MyDeathCount;                                     		// 0x01D4 (0x0004) [0x0000000000000000]              
	int                                                MyAssistCount;                                    		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                MyLifeCount;                                      		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                MyScore;                                          		// 0x01E0 (0x0004) [0x0000000000000000]              
	int                                                MyModeScore;                                      		// 0x01E4 (0x0004) [0x0000000000000000]              
	struct FString                                     MyUsedMilitaryBranchString;                       		// 0x01E8 (0x0010) [0x0000000000000000]              
	int                                                MyRank;                                           		// 0x01F8 (0x0004) [0x0000000000000000]              
	struct FString                                     MyRankNameString;                                 		// 0x01FC (0x0010) [0x0000000000000000]              
	int                                                MyUsedCRPoint;                                    		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                MyAcquiredCRPoint;                                		// 0x0210 (0x0004) [0x0000000000000000]              
	struct FString                                     MyCurrentLevelIconUrl;                            		// 0x0214 (0x0010) [0x0000000000000000]              
	struct FString                                     MyCurrentSalaryIconUrl;                           		// 0x0224 (0x0010) [0x0000000000000000]              
	struct FString                                     MyNextLevelIconUrl;                               		// 0x0234 (0x0010) [0x0000000000000000]              
	struct FString                                     MyNextSalaryIconUrl;                              		// 0x0244 (0x0010) [0x0000000000000000]              
	struct FString                                     MyPromotionName;                                  		// 0x0254 (0x0010) [0x0000000000000000]              
	struct FString                                     MyClanPoint;                                      		// 0x0264 (0x0010) [0x0000000000000000]              
	struct FString                                     MyClanLevel;                                      		// 0x0274 (0x0010) [0x0000000000000000]              
	struct FString                                     MyClanLevelColor;                                 		// 0x0284 (0x0010) [0x0000000000000000]              
	int                                                nChannelType;                                     		// 0x0294 (0x0004) [0x0000000000000000]              
	struct FString                                     ViperCircleClanName;                              		// 0x0298 (0x0010) [0x0000000000000000]              
	struct FString                                     PeaceMakerClanName;                               		// 0x02A8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestScorePlayerName;                              		// 0x02B8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestKillPlayerName;                               		// 0x02C8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestAssistPlayerName;                             		// 0x02D8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestMissionScorePlayerName;                       		// 0x02E8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestScoreLevelUrl;                                		// 0x02F8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestKillLevelUrl;                                 		// 0x0308 (0x0010) [0x0000000000000000]              
	struct FString                                     BestAssistLevelUrl;                               		// 0x0318 (0x0010) [0x0000000000000000]              
	struct FString                                     BestMissionScoreLevelUrl;                         		// 0x0328 (0x0010) [0x0000000000000000]              
	struct FString                                     BestScoreEmblemUrl;                               		// 0x0338 (0x0010) [0x0000000000000000]              
	struct FString                                     BestKillEmblemUrl;                                		// 0x0348 (0x0010) [0x0000000000000000]              
	struct FString                                     BestAssistEmblemUrl;                              		// 0x0358 (0x0010) [0x0000000000000000]              
	struct FString                                     BestMissionScoreEmblemUrl;                        		// 0x0368 (0x0010) [0x0000000000000000]              
	struct FString                                     bestScoreClanName;                                		// 0x0378 (0x0010) [0x0000000000000000]              
	struct FString                                     bestKillClanName;                                 		// 0x0388 (0x0010) [0x0000000000000000]              
	struct FString                                     BestAssistClanName;                               		// 0x0398 (0x0010) [0x0000000000000000]              
	struct FString                                     BestMissionScoreClanName;                         		// 0x03A8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestScoreClanLevel;                               		// 0x03B8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestKillClanLevel;                                		// 0x03C8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestAssistClanLevel;                              		// 0x03D8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestMissionScoreClanLevel;                        		// 0x03E8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestScoreClanLevelColor;                          		// 0x03F8 (0x0010) [0x0000000000000000]              
	struct FString                                     BestKillClanLevelColor;                           		// 0x0408 (0x0010) [0x0000000000000000]              
	struct FString                                     BestAssistClanLevelColor;                         		// 0x0418 (0x0010) [0x0000000000000000]              
	struct FString                                     BestMissionScoreClanLevelColor;                   		// 0x0428 (0x0010) [0x0000000000000000]              
	struct FString                                     BestScoreTierUrl;                                 		// 0x0438 (0x0010) [0x0000000000000000]              
	struct FString                                     BestKillTierUrl;                                  		// 0x0448 (0x0010) [0x0000000000000000]              
	struct FString                                     BestAssistTierUrl;                                		// 0x0458 (0x0010) [0x0000000000000000]              
	struct FString                                     BestMissionScoreTierUrl;                          		// 0x0468 (0x0010) [0x0000000000000000]              
	int                                                bestScore;                                        		// 0x0478 (0x0004) [0x0000000000000000]              
	int                                                bestKill;                                         		// 0x047C (0x0004) [0x0000000000000000]              
	int                                                BestAssist;                                       		// 0x0480 (0x0004) [0x0000000000000000]              
	int                                                BestMissionScore;                                 		// 0x0484 (0x0004) [0x0000000000000000]              
	int                                                ModeUIType;                                       		// 0x0488 (0x0004) [0x0000000000000000]              
	TArray< struct FUIScoreboardData >                 ScoreboardList;                                   		// 0x048C (0x0010) [0x0000000000000000]              
	int                                                RETURN_TO_MATCHROOM_TIME_MAX;                     		// 0x049C (0x0004) [0x0000000000000000]              
	int                                                ReturnToMatchroomTime;                            		// 0x04A0 (0x0004) [0x0000000000000000]              
	int                                                SelectedIndex;                                    		// 0x04A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69865 ];

		return pClassPointer;
	};

	void CallSetStatTextBox ( );
	void CallSelectedTab ( );
	void receiveFinalResultExpBarAnimationComplete ( );
	void receiveFinalResultTabButtonClick ( );
	void receiveFinalResultReadyButtonClick ( );
	void receiveFinalResultMatchRoomButtonClick ( );
	void receiveFinalResultCaptureButtonClick ( );
	void CallStartAnimation ( );
	void CallSetReadyButtonSelected ( );
	void CallSetReadyButtonDisabled ( );
	void CallSetMatchRoomButtonSecond ( );
	void CallSetMathRoomButtonDisabled ( );
	void CallAddMessage ( );
	void UpdateMatchRoomChatting_GameResult ( );
	void GetLvlImagePath ( );
	void GetCalculateExp ( );
	void SetMyClanInfos ( );
	void SetMyInfos ( );
	void SetPlayerInfos ( );
	void SetMatchInfos ( );
	void SetMatchResult ( );
	void SetAllResultData ( );
	void GetMyInfos ( );
	void SortByRanking ( );
	void UpdateRandomBoxData ( );
	void UpdateBoosterData ( );
	void GetPlayerInfos ( );
	void GetMatchInfos ( );
	void GetMatchResult ( );
	void GetAllResultData ( );
	void Close ( );
	void GotoPrevScene ( );
	void SetModeScoreLabel ( );
	void SetLabels ( );
	void ClearTimerReturnToMatchRoom ( );
	void TimerReturnToMatchRoom ( );
	void StartReturnToMatchRoomTimer ( );
	void Init ( );
};

UClass* UCombatFrontEnd_MatchResult::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MatchRoom
// 0x04DC (0x05AC - 0x00D0)
class UCombatFrontEnd_MatchRoom : public UCombatFrontEnd_Scene
{
public:
	class UGFxObject*                                  PlayerListClass;                                  		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  RoomDetailInfoClass;                              		// 0x00D8 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_MatchroomPopup*              PopupClass;                                       		// 0x00E0 (0x0008) [0x0000000000000000]              
	class UCombatFrontEnd_TacticalGear*                TacticalGearClass;                                		// 0x00E8 (0x0008) [0x0000000000000000]              
	class UCBUIDataStore_Mission*                      MissionList;                                      		// 0x00F0 (0x0008) [0x0000000000000000]              
	unsigned long                                      bLastDashboardDisable : 1;                        		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLastTacticalGearDisable : 1;                     		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIgnoreShortKey : 1;                              		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRankingMatch : 1;                                		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHostMode : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              Cur_MatchStart_WaitTime;                          		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              Old_MatchStart_WaitTime;                          		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                nSelectedId;                                      		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                nChannel;                                         		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                TeamRankingPoint;                                 		// 0x010C (0x0004) [0x0000000000000000]              
	struct FMatchroomButtonStruct                      MatchroomButtonInfo[ 0x7 ];                       		// 0x0110 (0x0134) [0x0000000000000000]              
	int                                                ReadyButtonLabelIDList[ 0x5 ];                    		// 0x0244 (0x0014) [0x0000000000000000]              
	struct FString                                     ReadyButtonLabelList[ 0x5 ];                      		// 0x0258 (0x0050) [0x0000000000000000]              
	struct FRClickPopupMenuItem                        PopupMenuSetup[ 0x8 ];                            		// 0x02A8 (0x0060) [0x0000000000000000]              
	class USoundCue*                                   BecameHostSound;                                  		// 0x0308 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   MatchAbortedSound;                                		// 0x0310 (0x0008) [0x0000000000000000]              
	TArray< struct FGameOptionUIInfo >                 GameOptionUIInfos;                                		// 0x0318 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_MaxUser;                		// 0x0328 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_GoalKill;               		// 0x0338 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_GoalPoint;              		// 0x0348 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_GoalWave;               		// 0x0358 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_LimitTime;              		// 0x0368 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_WinRound;               		// 0x0378 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_HalfChange;             		// 0x0388 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_AutoTeamBalance;        		// 0x0398 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_AllChat;                		// 0x03A8 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_DeathChat;              		// 0x03B8 (0x0010) [0x0000000000000000]              
	struct FString                                     ChangeOptionNotifyMessage_ThirdCamera;            		// 0x03C8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionMaxUserLabel;                               		// 0x03D8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionAIMaxUserLavel;                             		// 0x03E8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionGoalKillLabel;                              		// 0x03F8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionGoalPointLabel;                             		// 0x0408 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionGoalWaveLabel;                              		// 0x0418 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionRoundLabel;                                 		// 0x0428 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionMissionLabel;                               		// 0x0438 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionPlayTimeMinLabel;                           		// 0x0448 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionPlayTimeMinSecLabel;                        		// 0x0458 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionHalfChangeOnLabel;                          		// 0x0468 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionHalfChangeOffLabel;                         		// 0x0478 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionAutoTeamBalanceOnLabel;                     		// 0x0488 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionAutoTeamBalanceOffLabel;                    		// 0x0498 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionAutoCampOnLabel;                            		// 0x04A8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionAutoCampOffLabel;                           		// 0x04B8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionSaveClanRecordLabel;                        		// 0x04C8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionAllChatOnLabel;                             		// 0x04D8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionAllChatOffLabel;                            		// 0x04E8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionDeathChatOnLabel;                           		// 0x04F8 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionDeathChatOffLabel;                          		// 0x0508 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionDifficultyEasyLabel;                        		// 0x0518 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionDifficultyNormalLabel;                      		// 0x0528 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionDifficultyHardLabel;                        		// 0x0538 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionThirdCameraOnLabel;                         		// 0x0548 (0x0010) [0x0000000000000000]              
	struct FString                                     OptionThirdCameraOffLabel;                        		// 0x0558 (0x0010) [0x0000000000000000]              
	struct FString                                     TeamList_LeftTeamLabel;                           		// 0x0568 (0x0010) [0x0000000000000000]              
	struct FString                                     TeamList_RightTeamLabel;                          		// 0x0578 (0x0010) [0x0000000000000000]              
	struct FString                                     TeamList_AutoBalanceTeamLabel;                    		// 0x0588 (0x0010) [0x0000000000000000]              
	struct FString                                     TeamList_AutoCampTeamLabel;                       		// 0x0598 (0x0010) [0x0000000000000000]              
	int                                                CompMatchDialogID;                                		// 0x05A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70210 ];

		return pClassPointer;
	};

	void CallSetMatchingImpossiblenessVisible ( );
	void CallSetMatchingImpossiblenessDesc ( );
	void CallSetMatchingImpossiblenessLabel ( );
	void CallSetMatchingRankingPoint ( );
	void CallSetTeamLayOut ( );
	void CallViewVc ( );
	void CallViewPm ( );
	void CallSetMode ( );
	void CallSetAiModeBg ( );
	void CallSetAiModeInfo ( );
	void CallSetAiModeLabel ( );
	void CallSetLeftIsMyTeam ( );
	void CallSetMatchingStateDesc ( );
	void CallSetMatchingStateIcon ( );
	void CallSetMatchingStateLabel ( );
	void SetAverrageTierPointLabel ( );
	void OnCompMatchDialogCheck ( );
	void OnMatchroomReadyButtonUpdate ( );
	void OnMatchroomUserPenaltyEnd ( );
	void UpdateIsCanCompetitiveMatch ( );
	void IsCompetitiveMatch ( );
	void IsRankingMatch ( );
	void GetMercenaryMatch ( );
	void IsEnoughUserCountForAutoMatchingSystem ( );
	void UpdateAiMatch ( );
	void UpdateAutoMatch ( );
	void UpdateCurrentMatchMode ( );
	void UpdateMatchroomTeamSwap ( );
	void SetAutoMatchingTeamSearch ( );
	void SetAutoMatchingPossible ( );
	void SetAutoMatchingCompose ( );
	void OnLeaveRoomSettingSucceed ( );
	void CallSetApplyOptionBackGround ( );
	void CallSetApplyOptionState ( );
	void CallSetApplyOptionTxt ( );
	void OnCompetitionMatchEndDialog ( );
	void DisplayCompetitionMatchEndDialog ( );
	void OnBackToCompetitionDialogCancle ( );
	void OnBackToCompetitionDialogOK ( );
	void DisplayBackToCompetitionDialog ( );
	void GetStartableMinUserCountErrorMessage ( );
	void OnReturnInforceDialogOK ( );
	void DisplayReturnInforceDialog ( );
	void OnInvalidFinishMatchDialogOK ( );
	void DisplayInvalidFinishMatchDialog ( );
	void OnMatcroomUpdateOptionFailurDialogOK ( );
	void DisplayMatcroomUpdateOptionFailureDialog ( );
	void OnIntrudeFailureDialogOK ( );
	void DisplayIntrudeFailureDialog ( );
	void OnLeaveMatchroomFailureDialogOK ( );
	void DisplayLeaveMatchroomFailureDialog ( );
	void OnReadyFailureDialogOK ( );
	void DisplayReadyFailureDialog ( );
	void OnStartMatchFailureDialogOK ( );
	void DisplayStartMatchFailureChatMsg ( );
	void DisplayStartMatchFailureDialog ( );
	void OnChangeTeamFailureDialogOK ( );
	void DisplayChangeTeamFailureDialog ( );
	void GotoPrevScene ( );
	void receiveTacticalGearListBtn ( );
	void receiveTacticalGearOpenBtn ( );
	void InitGearList ( );
	void receiveMatchRoomPopupOptionChange ( );
	void receiveMatchRoomPopupCancelBtn ( );
	void receiveMatchRoomPopupOptionOkBtn ( );
	void OnRoomNameSwaerDialogOK ( );
	void RoomNameSwaerDialog ( );
	void receiveMatchRoomPopupRenameOkBtn ( );
	void HideChangeRoomNamePopup ( );
	void ShowChangeRoomNamePopup ( );
	void CanChangeMaxUserOption ( );
	void GetGameOptionUIInfosIndexBy ( );
	void receiveLobbyMatchRoomInfoSideMenuChange ( );
	void receiveLobbyMatchRoomInfoClanMatchRecordBtn ( );
	void receiveLobbyMatchRoomInfoDetailBtn ( );
	void receiveLobbyMatchRoomInfoModeMapEditBtn ( );
	void receiveLobbyMatchRoomInfoTitleBtn ( );
	void CallSetClanMatchRecord ( );
	void CallSetMapBackGround ( );
	void CallSetRoomSynergyIcon ( );
	void CallSetSideMenuInfo ( );
	void CallDisabledSideMenu ( );
	void CallSelectSideMenu ( );
	void CallSetSideMenuData ( );
	void CallSetSideMenuTotal ( );
	void CallSetInfoBtns ( );
	void CallVisibleTitleTxt ( );
	void CallVisibleLocalTxt ( );
	void CallSetRoomInfo ( );
	void CallSetParticipant ( );
	void CallSetAdministrator ( );
	void HideRoomDetailInfo ( );
	void ShowRoomDetailInfo ( );
	void receiveLobbyMatchRoomReadyStartKey ( );
	void receiveLobbyMatchRoomUserListPopupMenuBtn ( );
	void receiveLobbyMatchRoomUserListRightBtn ( );
	void receiveLobbyMatchRoomUserListBtn ( );
	void receiveLobbyMatchRoomReadyStartBtn ( );
	void receiveLobbyMatchRoomInvitationBtn ( );
	void receiveLobbyMatchRoomWatcherBtn ( );
	void OnMatcroomKickUserDialogCancel ( );
	void OnMatcroomKickUserDialogOK ( );
	void OnMatcroomKickUserFailurDialogOK ( );
	void receiveLobbyMatchRoomCompulsoryLeaveBtn ( );
	void OnNotifyChangeMatchroomGameOption ( );
	void OnNotifyChangeHost ( );
	void DisplayTeamUpdateType ( );
	void receiveLobbyMatchRoomTransitionBtn ( );
	void receiveLobbyMatchRoomTeamChangeBtn ( );
	void CallDrawPopupMenu ( );
	void CallRemoveVcUserList ( );
	void CallAddVcUserList ( );
	void CallUpdateVcUserList ( );
	void CallSetVcUserList ( );
	void CallRemovePmUserList ( );
	void CallAddPmUserList ( );
	void CallUpdatePmUserList ( );
	void CallSetPmUserList ( );
	void CallSetTopVcDisabled ( );
	void CallSetTopVcSelected ( );
	void CallSetTopVcLabel ( );
	void CallSetTopPmDisabled ( );
	void CallSetTopPmSelected ( );
	void CallSetTopPmLabel ( );
	void CallSetReadyStartButtonStatus ( );
	void CallSetMatchRoomBtn ( );
	void HidePlayerList ( );
	void ShowPlayerList ( );
	void SetTacticalGearButton_Disabled ( );
	void OnGearSetChange_Used ( );
	void OnGearSetChange_Failure ( );
	void OnGearSetChange_Success ( );
	void GetMapListBy ( );
	void DisplayCheckBox_GameOption ( );
	void DisableCheckBox_GameOption ( );
	void SelectCheckBox_GameOption ( );
	void SelectDropdown_GameOption ( );
	void SendCheckBoxData_GameOption ( );
	void SendDropDownData_GameOption ( );
	void SetGameOptionValueList ( );
	void InitGameOptionUIInfos ( );
	void InitMenu_GameOption ( );
	void MakeFlashData_BaseRoomInfo_ModeMap ( );
	void MakeFlashData_BaseRoomInfo_Password ( );
	void MakeFlashData_BaseRoomInfo_Location ( );
	void MakeFlashData_BaseRoomInfo_RoomName ( );
	void MakeFlashData_BaseRoomInfo_All ( );
	void SendBaseRoomInfo_Password ( );
	void SendBaseRoomInfo_ModeMap ( );
	void SendBaseRoomInfo_RoomName ( );
	void SendBaseRoomInfo_All ( );
	void OnMatchHasFinished ( );
	void OnMatcroomUpdateOption_Failure ( );
	void OnIntrude_Failure ( );
	void OnIntrude_Success ( );
	void OnIntrude_Try ( );
	void EnableInputSystem ( );
	void DisableInputSystem ( );
	void ClearTimerStartMatchCountDown ( );
	void TimerStartMatchCountDown ( );
	void ClearAllCompMatchData ( );
	void ClearAllClanMatchData ( );
	void CancelMatchMapPreload ( );
	void MatchMapPreload ( );
	void UpdateMatchroom_TeamList ( );
	void OnChangeTeam_Success ( );
	void OnChangeTeam_Failure ( );
	void OnMatchroomSlotUpdateDel ( );
	void OnPlayerJoinMatchroom ( );
	void OnLeaveMatchRoom_Failure ( );
	void OnReady_Failure ( );
	void OnMatchBeginningAborted ( );
	void OnStartMatchBeginCountdown ( );
	void OnStartMatch_Failure_Notify ( );
	void OnStartMatch_Failure ( );
	void UpdateMatchroom_Password ( );
	void UpdateTeamDisplayBar ( );
	void UpdateMatchroom_Option ( );
	void IsAutoMatchingSystem ( );
	void UpdateMatchroom_ModeMap ( );
	void UpdateMatchroom_RoomName ( );
	void GameOptionMenu_All_Disabled ( );
	void GetReadyLabelType_NormalUser ( );
	void GetReadyLabelType_HostUser ( );
	void MakeFlashObject_Button_Disabeld ( );
	void MakeFlashObject_Button_Selected ( );
	void MakeFlashObject_Button_Label ( );
	void SendButtonInfo_Disabled ( );
	void SendButtonInfo_Selected ( );
	void SendButtonInfo_Label ( );
	void SendButtonInfo_All ( );
	void InitButton ( );
	void UpdateButtonInvitationByRoomState ( );
	void UpdateButtonKickUserByRoomState ( );
	void UpdateButtonTeamSwapByRoomState ( );
	void UpdateButtonTeamChangeByRoomState ( );
	void UpdateButtonReadyByRoomState ( );
	void UpdateButtonChangeModeMapByRoomState ( );
	void UpdateButtonTacticalGearByRoomState ( );
	void UpdateButtonGameOptionMenuByRoomState ( );
	void UpdateButtonDashboardByRoomState ( );
	void UpdateMatchroomButton ( );
	void ClearWarnLazyHost ( );
	void SetTimerLazyHostWarning ( );
	void ClearLazyHostTimer ( );
	void WarnLazyHost ( );
	void OnNotifyLazyHostWarning ( );
	void UpdateMemberCount_AutoCamp ( );
	void UpdateMemberCount_AutoBalance ( );
	void UpdateMemberCount_EachTeam ( );
	void UpdateMemberCount ( );
	void GetMatchroomPlayerDataSortedForUI ( );
	void ChangeClanInfoTeamList ( );
	void SelectTeamListButton ( );
	void UpdateTeamList ( );
	void CheckHostMode ( );
	void StartEnteringMatch ( );
	void UpdateMatchRoom ( );
	void UpdateDashboardButtons_Show ( );
	void UpdateDashboardButtons_Hide ( );
	void InitTeamListChangeTeamButtons ( );
	void InformMatchRoomCountdownOngoing ( );
	void InitLabels ( );
	void Close ( );
	void Init ( );
	void OnUpdateMatchStartWaitTime ( );
	void SetTacticalGear ( );
	void SetRoomPopup ( );
	void SetRoomDetailInfo ( );
	void SetPlayerList ( );
	void GetMissionList ( );
};

UClass* UCombatFrontEnd_MatchRoom::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MatchroomPopup
// 0x0040 (0x0110 - 0x00D0)
class UCombatFrontEnd_MatchroomPopup : public UCombatFrontEnd_Object
{
public:
	unsigned long                                      bNeedInitChangeRoomLabel : 1;                     		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                ChangeRoomLabelID;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                OKBtnLabelID;                                     		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                CancelBtnLabelID;                                 		// 0x00DC (0x0004) [0x0000000000000000]              
	struct FString                                     ChangeRoomLabel;                                  		// 0x00E0 (0x0010) [0x0000000000000000]              
	struct FString                                     OKBtnLabel;                                       		// 0x00F0 (0x0010) [0x0000000000000000]              
	struct FString                                     CancelBtnLabel;                                   		// 0x0100 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70249 ];

		return pClassPointer;
	};

	void CallSetCancelBtn ( );
	void CallSetOkBtn ( );
	void CallSelectOptionMenu ( );
	void CallSetOptionMenuData ( );
	void CallSetOptionFixTxt ( );
	void CallShowOptionPop ( );
	void CallSetRenameFixTxt ( );
	void CallShowRenamePop ( );
	void InitChangeRoomLabel ( );
	void HideChangeRoomNamePopup ( );
	void HideScene ( );
	void ShowChangeRoomNamePopup ( );
};

UClass* UCombatFrontEnd_MatchroomPopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_TacticalGear
// 0x0054 (0x0124 - 0x00D0)
class UCombatFrontEnd_TacticalGear : public UCombatFrontEnd_Object
{
public:
	int                                                LastGearIndex;                                    		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FString                                     EquipNoticeString;                                		// 0x00D4 (0x0010) [0x0000000000000000]              
	struct FString                                     PriceString;                                      		// 0x00E4 (0x0010) [0x0000000000000000]              
	struct FString                                     ConditionString_Title;                            		// 0x00F4 (0x0010) [0x0000000000000000]              
	struct FString                                     ConditionString_EnoughMoney;                      		// 0x0104 (0x0010) [0x0000000000000000]              
	struct FString                                     ConditionString_AllowedMode;                      		// 0x0114 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70253 ];

		return pClassPointer;
	};

	void receiveTacticalGearListBtn ( );
	void receiveTacticalGearOpenBtn ( );
	void CallHideTacticalGearList ( );
	void CallShowTacticalGearList ( );
	void CallSetToolTip ( );
	void CallDisabledTacticalBtn ( );
	void CallEquipTacticalGear ( );
	void CallUpdateTacticalGear ( );
	void CallScrolledTacticalGear ( );
	void CallSelectedTacticalGear ( );
	void CallSetTacticalGear ( );
	void CallSetGuideLabel ( );
	void CallSetTitleLabel ( );
	void OnGearSetChange_Used ( );
	void OnGearSetChange_Failure ( );
	void OnGearSetChange_Success ( );
	void MakeDescriptionForList ( );
	void MakeGearListData ( );
	void UpdateGearList ( );
	void UpdateGearCondition ( );
	void OnGearSetChangeFailureDialogOK ( );
	void DisplayOnGearSetChangeFailure ( );
	void SetTooltip ( );
	void SetButtonImage ( );
	void SetGear ( );
	void InitGearList ( );
	void Init ( );
};

UClass* UCombatFrontEnd_TacticalGear::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Menu
// 0x0000 (0x00D0 - 0x00D0)
class UCombatFrontEnd_Menu : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71133 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_Menu::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_PlayerInfoPage
// 0x00F8 (0x01C8 - 0x00D0)
class UCombatFrontEnd_PlayerInfoPage : public UCombatFrontEnd_Object
{
public:
	class UGFxObject*                                  PlayerInfoClass;                                  		// 0x00D0 (0x0008) [0x0000000000000000]              
	struct FString                                     PlayStat[ 0xB ];                                  		// 0x00D8 (0x00B0) [0x0000000000000000]              
	int                                                ClanStatStringIdx[ 0x8 ];                         		// 0x0188 (0x0020) [0x0000000000000000]              
	TArray< int >                                      MainTabIDList;                                    		// 0x01A8 (0x0010) [0x0000000000000000]              
	TArray< int >                                      BattleTabList;                                    		// 0x01B8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71135 ];

		return pClassPointer;
	};

	void IsAbleClanView ( );
	void CallDisableClanViewBtn ( );
	void CallSetLatelyClanMatchRecordLabel ( );
	void CallSetSubTabBtn ( );
	void CallSetMainTabBtn ( );
	void receiveRankViewBtn ( );
	void receiveClanViewBtn ( );
	void receivePlayInfoCloseBtn ( );
	void CallSetRecord ( );
	void CallSetProfile ( );
	void CallSsetCloseBtn ( );
	void CallSetTitle ( );
	void HidePlayerInfo ( );
	void ShowPlayerInfo ( );
	void ShowPlayerInfoPage ( );
	void WriteStatItem ( );
	void SetPlayStatInfo ( );
	void SetProfileInfo ( );
	void SetStatInfo ( );
	void GetMatchResultString ( );
	void GetChannelTitle ( );
	void GetRate ( );
	void SetPlayerInfoPopup ( );
	void InitLabels ( );
	void Init ( );
};

UClass* UCombatFrontEnd_PlayerInfoPage::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_QuickStart
// 0x0098 (0x0168 - 0x00D0)
class UCombatFrontEnd_QuickStart : public UCombatFrontEnd_Scene
{
public:
	TArray< struct FQuickStart_MissionInfo >           QuickStart_MissionInfos;                          		// 0x00D0 (0x0010) [0x0000000000000000]              
	TArray< struct FQuickStart_ModeInfo >              QuickStart_ModeInfos;                             		// 0x00E0 (0x0010) [0x0000000000000000]              
	TArray< struct FQuickStart_MapInfo >               QuickStart_MapInfos;                              		// 0x00F0 (0x0010) [0x0000000000000000]              
	struct FFrontEndButtonStruct                       QStartButtonInfo[ 0x3 ];                          		// 0x0100 (0x0048) [0x0000000000000000]              
	int                                                StatusLabels[ 0x2 ];                              		// 0x0148 (0x0008) [0x0000000000000000]              
	int                                                PlayersLabels[ 0x2 ];                             		// 0x0150 (0x0008) [0x0000000000000000]              
	class UCBUIDataStore_Mission*                      DataStoreMission;                                 		// 0x0158 (0x0008) [0x0000000000000000]              
	class UCBUIDataStore_QuickstartSetting*            QSSetting;                                        		// 0x0160 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71272 ];

		return pClassPointer;
	};

	void OnQuickstartFailureDialogOK ( );
	void OnQuickStart_Failure ( );
	void receiveLobbyQuickStartSetupDropDownMenuChange ( );
	void receiveLobbyQuickStartSetupSaveAndRunBtn ( );
	void receiveLobbyQuickStartSetupSaveAndCloseBtn ( );
	void receiveLobbyQuickStartSetupCancelBtn ( );
	void CallSetQuickStartSetupBtns ( );
	void CallDisableOptionMenu ( );
	void CallSelectOptionMenu ( );
	void CallSetOptionMenu ( );
	void CallSetOptionName ( );
	void CallSetDesc ( );
	void CallSetTitle ( );
	void ComposePlayersDropdown ( );
	void ComposeStatusDropdown ( );
	void ComposeMapDropdown ( );
	void ComposeModesDropdown ( );
	void ComposeMissionDropdown ( );
	void SetMapList ( );
	void SetModeList ( );
	void SetMissionList ( );
	void Close ( );
	void InitButtons ( );
	void InitLabels ( );
	void InitMinorDropdowns ( );
	void InitMajorDropdowns ( );
	void InitAllDropdowns ( );
	void Init ( );
	void GotoPrevScene ( );
};

UClass* UCombatFrontEnd_QuickStart::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_RandomBox
// 0x0008 (0x00D8 - 0x00D0)
class UCombatFrontEnd_RandomBox : public UCombatFrontEnd_Scene
{
public:
	unsigned char                                      FromOpenedScene;                                  		// 0x00D0 (0x0001) [0x0000000000000000]              
	unsigned char                                      ActionState;                                      		// 0x00D1 (0x0001) [0x0000000000000000]              
	unsigned long                                      bContinueOpening : 1;                             		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasCardCover : 1;                                		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71407 ];

		return pClassPointer;
	};

	void CallHideGuideTip ( );
	void CallShowGuideTip ( );
	void CallSetGuideTipTxt ( );
	void CallSetAutoOpen ( );
	void CallVisibleCloseBtn ( );
	void CallDisableCloseBtn ( );
	void CallSetCloseBtnLabel ( );
	void CallVisibleContinuousOpenBtn ( );
	void CallDisableCountinuousOpenBtn ( );
	void CallSetContinuousOpenCnt ( );
	void CallSetContinuousOpenBtnLabel ( );
	void CallHideBoxArea ( );
	void CallShowBoxArea ( );
	void CallSetBoxArea ( );
	void CallEraseGetItem ( );
	void CallDrawGetItem ( );
	void CallSetGetItemList ( );
	void RandomBoxUsedSuccess ( );
	void NotifyResizeWindow ( );
	void DisplayItemCard ( );
	void NotifyRandomBoxClosedAction ( );
	void DisplayGainItemList ( );
	void SetRandomBoxMaterial ( );
	void UpdateBoxOpenableNumUI ( );
	void GetBoxOpenableNum ( );
	void SetContinuousOpenButtonSetting ( );
	void OnClickContinousOpenButton ( );
	void PostBeginContinuousOpen ( );
	void GetFromOpenedScene ( );
	void SetFromOpenedScene ( );
	void InitButtonSetting ( );
	void EndRandomBoxAction ( );
	void AllCardOpened ( );
	void CardAutoFaceUp ( );
	void CardFaceDownComplete ( );
	void BeginMakeCard ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_RandomBox::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatFinishedRandomboxScene
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatFinishedRandomboxScene : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71429 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatFinishedRandomboxScene::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatContinuousOpenRndBox
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatContinuousOpenRndBox : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71515 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatContinuousOpenRndBox::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_RandomBoxPickUp
// 0x0000 (0x00D0 - 0x00D0)
class UCombatFrontEnd_RandomBoxPickUp : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71555 ];

		return pClassPointer;
	};

	void CallSetVisible ( );
	void CallSetPickupInfo ( );
	void UpdateRandomBoxPickUpList ( );
};

UClass* UCombatFrontEnd_RandomBoxPickUp::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Sort
// 0x006C (0x013C - 0x00D0)
class UCombatFrontEnd_Sort : public UCombatFrontEnd_Object
{
public:
	struct FSortInfo                                   InvenSortList[ 0x5 ];                             		// 0x00D0 (0x0028) [0x0000000000000000]              
	struct FSortInfo                                   ShopSortList[ 0x5 ];                              		// 0x00F8 (0x0028) [0x0000000000000000]              
	int                                                CurrentSceneType;                                 		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                SelectSortID;                                     		// 0x0124 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAllSelect : 1;                                   		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      FilterIDList;                                     		// 0x012C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71889 ];

		return pClassPointer;
	};

	void receiveCommonSortDownClick ( );
	void receiveCommonSortUpClick ( );
	void receiveCommonSortFilterClick ( );
	void receiveCommonSortFilterAllViewClick ( );
	void CallSetShopPosition ( );
	void CallSetInventoryPosition ( );
	void CallSelectSortBtn ( );
	void CallSetSortList ( );
	void CallSetSortLabel ( );
	void CallSelectAllViewFilter ( );
	void CallSetAllViewFilterLabel ( );
	void CallUnselectFilterList ( );
	void CallSelectFilterList ( );
	void CallSetFilterList ( );
	void CallSetFilterLabel ( );
	void AddFilterIDList ( );
	void UpdateListSortBtn ( );
	void SetUIPosition ( );
	void SetSortList ( );
	void SetFilterList ( );
	void SetSortDataBySceneType ( );
	void InitLabels ( );
	void Close ( );
	void Init ( );
	void ToggleUI ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Sort::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Storage
// 0x01CD (0x029D - 0x00D0)
class UCombatFrontEnd_Storage : public UCombatFrontEnd_Scene
{
public:
	TArray< struct FLabelInfo >                        LabelList;                                        		// 0x00D0 (0x0010) [0x0000000000000000]              
	struct UCombatFrontEnd_Storage_FButtonInfo         ButtonList[ 0x9 ];                                		// 0x00E0 (0x0144) [0x0000000000000000]              
	struct FMoneyInfo                                  MoneyList[ 0x5 ];                                 		// 0x0224 (0x0028) [0x0000000000000000]              
	class UCombatMailTransaction*                      MailTran;                                         		// 0x024C (0x0008) [0x0000000000000000]              
	int                                                TabType;                                          		// 0x0254 (0x0004) [0x0000000000000000]              
	int                                                ShowPageNum;                                      		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                TotalPage;                                        		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                selectID;                                         		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                MaxCheckCount;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAllCheck : 1;                                    		// 0x0268 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowReceiveFailedDialog : 1;                     		// 0x0268 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< int >                                      CheckList;                                        		// 0x026C (0x0010) [0x0000000000000000]              
	TArray< int >                                      ReceiveIDList;                                    		// 0x027C (0x0010) [0x0000000000000000]              
	TArray< int >                                      ReadIDList;                                       		// 0x028C (0x0010) [0x0000000000000000]              
	unsigned char                                      NextScene;                                        		// 0x029C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71966 ];

		return pClassPointer;
	};

	void receiveArchiveCheckBox ( );
	void receiveArchiveReadedMsg ( );
	void receiveArchiveAllCheckBtn ( );
	void receiveArchiveAllReceiveBtn ( );
	void receiveArchiveReceiveSelectedBtn ( );
	void receiveArchiveReceiveArticleBtn ( );
	void receiveArchiveMsgDeleteBtn ( );
	void receiveArchiveNextBtn ( );
	void receiveArchivePrevBtn ( );
	void receiveArchiveGiftTab ( );
	void receiveArchiveStorageTab ( );
	void CallSetPageNumber ( );
	void CallSelectMessageList ( );
	void CallSetCheckBoxState ( );
	void CallSetContents ( );
	void CallSetMessageList ( );
	void CallSetFixDesc ( );
	void CallSetHeadLabel ( );
	void CallSetBtns ( );
	void GotoPrevScene ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void SetTabType ( );
	void InitStorageContent ( );
	void UpdateCheckBoxState ( );
	void UpdatePageNumber ( );
	void GetExpirationTimeStr ( );
	void GetToolTip ( );
	void SetSystemMailStr ( );
	void IsAbleCheckBox ( );
	void IsSystemMail ( );
	void OnDisplayDialogReceiveStorageContentFailureOK ( );
	void DisplayDialogReceiveStorageContentFailure ( );
	void OnDisplayDialogReceiveStorageFinishOK ( );
	void DisplayDialogReceiveStorageFinish ( );
	void IsChangeSceneByRandomBox ( );
	void OnDisplayDialogReceiveStorageContentCancel ( );
	void OnDisplayDialogReceiveStorageContentOK ( );
	void DisplayDialogReceiveStorageContent ( );
	void OnDisplayDialogStorageListFailureOK ( );
	void DisplayDialogStorageListFailure ( );
	void SetStorageList ( );
	void ReceiveStorageFinish ( );
	void ReceiveStorageContent_Failure ( );
	void ReceiveStorageContent_Success ( );
	void UpdateStorageContent ( );
	void UpdateStorageList ( );
	void MailBoxStateUpdate ( );
	void RequestMailBoxReceive ( );
	void RequestMailBoxStateUpdate ( );
	void RequestStorageList ( );
	void SetButtonUnreadCount ( );
	void SetButtonState ( );
	void ClearReadList ( );
	void RemoveReadIDList ( );
	void AddReadIDList ( );
	void ClearCheckList ( );
	void RemoveCheckList ( );
	void InitData ( );
	void InitButtons ( );
	void InitLabels ( );
	void HideScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Storage::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndChatManager
// 0x0000 (0x0C28 - 0x0C28)
class UCombatFrontEndChatManager : public UCombatChatManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72438 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEndChatManager::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndHUD
// 0x0000 (0x05B4 - 0x05B4)
class ACombatFrontEndHUD : public ACombatHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72440 ];

		return pClassPointer;
	};

	void GetLoaded ( );
	void ChangeScene ( );
};

UClass* ACombatFrontEndHUD::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatUIMouseEvent
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatUIMouseEvent : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74146 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatUIMouseEvent::pClassPointer = NULL;

// Class CombatGame.CombatGameFixedCamera
// 0x0000 (0x0070 - 0x0070)
class UCombatGameFixedCamera : public UGameFixedCamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75346 ];

		return pClassPointer;
	};

};

UClass* UCombatGameFixedCamera::pClassPointer = NULL;

// Class CombatGame.CombatGameThirdPersonCamera
// 0x0028 (0x01FC - 0x01D4)
class UCombatGameThirdPersonCamera : public UGameThirdPersonCamera
{
public:
	class UGameThirdPersonCameraMode*                  ThirdPersonCamDead;                               		// 0x01D4 (0x0008) [0x0000000000000000]              
	class UClass*                                      ThirdPersonCamDeadClass;                          		// 0x01DC (0x0008) [0x0000000000000000]              
	class UGameThirdPersonCameraMode*                  ThirdPersonCamSpectator;                          		// 0x01E4 (0x0008) [0x0000000000000000]              
	class UClass*                                      ThirdPersonCamSpectatorClass;                     		// 0x01EC (0x0008) [0x0000000000000000]              
	class ACombatPlayerControllerBase*                 LocalPC;                                          		// 0x01F4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75483 ];

		return pClassPointer;
	};

	void UpdateCamera ( );
	void FindBestCameraMode ( );
	void Init ( );
};

UClass* UCombatGameThirdPersonCamera::pClassPointer = NULL;

// Class CombatGame.CombatGameSpectatorCamera
// 0x0000 (0x01D4 - 0x01D4)
class UCombatGameSpectatorCamera : public UGameThirdPersonCamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75484 ];

		return pClassPointer;
	};

};

UClass* UCombatGameSpectatorCamera::pClassPointer = NULL;

// Class CombatGame.CombatGrenadeExplosionLight
// 0x0000 (0x026C - 0x026C)
class UCombatGrenadeExplosionLight : public UCombatExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75558 ];

		return pClassPointer;
	};

};

UClass* UCombatGrenadeExplosionLight::pClassPointer = NULL;

// Class CombatGame.CombatGrenadeLight
// 0x0000 (0x026C - 0x026C)
class UCombatGrenadeLight : public UCombatExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75560 ];

		return pClassPointer;
	};

};

UClass* UCombatGrenadeLight::pClassPointer = NULL;

// Class CombatGame.CombatRescuePC
// 0x0008 (0x0B98 - 0x0B90)
class ACombatRescuePC : public ACombatPC
{
public:
	unsigned char                                      SpawnAreaIndex;                                   		// 0x0B90 (0x0001) [0x0000000000390000]              ( CPF_Travel | CPF_Component )
	unsigned long                                      bIsRepair : 1;                                    		// 0x0B94 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsReporting : 1;                                 		// 0x0B94 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75639 ];

		return pClassPointer;
	};

	void ToggleDisplayReparingArea ( );
	void TryToTalk ( );
	void ServerLetsGoTalking ( );
	void FailedRequestRepair ( );
	void SuccessRequestRepair ( );
	void StopRepair ( );
	void StartRepair ( );
	void RequestRepair ( );
	void GiveUpRepair ( );
	void StopRepairByPlayer ( );
	void ReleaseUse ( );
	void Use ( );
	void ServerSetSpawnAreaIndex ( );
	void SetSpawnAreaIndex ( );
	void GetSpawnAreaIndex ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatRescuePC::pClassPointer = NULL;

// Class CombatGame.CombatRescueGameHUD
// 0x0004 (0x0628 - 0x0624)
class ACombatRescueGameHUD : public ACombatTeamGameHUD
{
public:
	unsigned long                                      bStateNameDirty : 1;                              		// 0x0624 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMovePositionDirty : 1;                           		// 0x0624 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75656 ];

		return pClassPointer;
	};

	void InitAudioChannel ( );
	void HideRepairTimer ( );
	void IsDisplayRepairTimer ( );
	void UpdateRepairTimer ( );
	void DisplayRepairTimer ( );
	void NotifyStandByToEscape ( );
	void DisplayRoundResult ( );
	void DisplayMission ( );
};

UClass* ACombatRescueGameHUD::pClassPointer = NULL;

// Class CombatGame.CombatRepairingArea
// 0x0008 (0x024C - 0x0244)
class ACombatRepairingArea : public AActor
{
public:
	class UStaticMeshComponent*                        Mesh;                                             		// 0x0244 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75685 ];

		return pClassPointer;
	};

	void eventUnTouch ( );
	void eventTouch ( );
	void IsTouchingPawn ( );
};

UClass* ACombatRepairingArea::pClassPointer = NULL;

// Class CombatGame.CombatRescueGameBase
// 0x0002 (0x076A - 0x0768)
class ACombatRescueGameBase : public ACombatPVPGame
{
public:
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0768 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatRescueGameBase.LastMissionTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75689 ];

		return pClassPointer;
	};

	void BroadcastStandByToEscape ( );
	void BroadcastGroggyHostage ( );
	void BroadcastActivateHostage ( );
	void CheckTimeOver ( );
	void CheckLive ( );
	void CheckGoalScore ( );
};

UClass* ACombatRescueGameBase::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatHostageActivate
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatHostageActivate : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75749 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatHostageActivate::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatMeshTransform
// 0x0010 (0x0118 - 0x0108)
class USeqAct_CombatMeshTransform : public USequenceAction
{
public:
	class ACombatHostageActor*                         Original;                                         		// 0x0108 (0x0008) [0x0000000000000000]              
	class ASkeletalMeshActor*                          NewMesh;                                          		// 0x0110 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75909 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CombatMeshTransform::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Achievement_Attainment
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_Achievement_Attainment : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75988 ];

		return pClassPointer;
	};

	void CallMessage ( );
};

UClass* UCombatHUD_Achievement_Attainment::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Achievement_ProgressList
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_Achievement_ProgressList : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75994 ];

		return pClassPointer;
	};

	void CallMessagePush ( );
};

UClass* UCombatHUD_Achievement_ProgressList::pClassPointer = NULL;

// Class CombatGame.CombatHUD_CTFPointArea
// 0x0018 (0x01C8 - 0x01B0)
class UCombatHUD_CTFPointArea : public UCombatHUD_GameObject
{
public:
	class ACombatLCTFFlagPoint*                        AreaVolume;                                       		// 0x01B0 (0x0008) [0x0000000000000000]              
	class ACombatLCTFFlagActor*                        flag;                                             		// 0x01B8 (0x0008) [0x0000000000000000]              
	int                                                TargetIndex;                                      		// 0x01C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsArea : 1;                                       		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76845 ];

		return pClassPointer;
	};

	void UpdateVisible ( );
	void Update ( );
	void GetIconFrameLabel ( );
	void GetGameObjectName ( );
	void SetCTFObject ( );
	void Init ( );
};

UClass* UCombatHUD_CTFPointArea::pClassPointer = NULL;

// Class CombatGame.CombatHUD_CTFPointContainer
// 0x0000 (0x00D8 - 0x00D8)
class UCombatHUD_CTFPointContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76871 ];

		return pClassPointer;
	};

	void Update ( );
	void InitGameObject ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_CTFPointContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Hostage
// 0x0020 (0x01D0 - 0x01B0)
class UCombatHUD_Hostage : public UCombatHUD_GameObject
{
public:
	class ACombatHostageActor*                         Target;                                           		// 0x01B0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  HPStateBarMC;                                     		// 0x01B8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  HPMC;                                             		// 0x01C0 (0x0008) [0x0000000000000000]              
	int                                                LastDisplayHealth;                                		// 0x01C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      LastGodMode : 1;                                  		// 0x01CC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77092 ];

		return pClassPointer;
	};

	void UpdateHealth ( );
	void Update ( );
	void GetIconFrameLabel ( );
	void GetGameObjectName ( );
	void UpdateVisible ( );
	void SetHostageActor ( );
	void GetLevelObjectMovieClips ( );
};

UClass* UCombatHUD_Hostage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_HostageContainer
// 0x0000 (0x00D8 - 0x00D8)
class UCombatHUD_HostageContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77113 ];

		return pClassPointer;
	};

	void Update ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_HostageContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PickupItemContainer
// 0x0000 (0x00D8 - 0x00D8)
class UCombatHUD_PickupItemContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77767 ];

		return pClassPointer;
	};

	void SetVisiblePickupLocator ( );
	void Update ( );
	void InitGameObject ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_PickupItemContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PickupItemLocator
// 0x0009 (0x01B9 - 0x01B0)
class UCombatHUD_PickupItemLocator : public UCombatHUD_GameObject
{
public:
	class AActor*                                      PickupItemObject;                                 		// 0x01B0 (0x0008) [0x0000000000000000]              
	unsigned char                                      PickupIconType;                                   		// 0x01B8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77776 ];

		return pClassPointer;
	};

	void GetIconFrameLabel ( );
	void Update ( );
	void GetGameObjectName ( );
	void CanDisplayIcon ( );
	void UpdateVisible ( );
	void SetPickupLocatorObject ( );
};

UClass* UCombatHUD_PickupItemLocator::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PracticeGameHelp
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_PracticeGameHelp : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77840 ];

		return pClassPointer;
	};

	void GetActivateHUDByGameState ( );
	void RefreshKeyBinding ( );
	void ConvertHotKeyString ( );
	void Init ( );
};

UClass* UCombatHUD_PracticeGameHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PracticeGameRoundStatus
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_PracticeGameRoundStatus : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77866 ];

		return pClassPointer;
	};

	void CallPauseTimer ( );
	void CallStopTimer ( );
	void CallPlayTimer ( );
	void CallSetPeopleCount ( );
	void GetActivateHUDByGameState ( );
	void Init ( );
};

UClass* UCombatHUD_PracticeGameRoundStatus::pClassPointer = NULL;

// Class CombatGame.CombatHUD_RepairTimeBar
// 0x0003 (0x00C0 - 0x00BD)
class UCombatHUD_RepairTimeBar : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77998 ];

		return pClassPointer;
	};

	void CallStartProgressAnimationNoPercent ( );
	void CallStartProgressAnimation ( );
};

UClass* UCombatHUD_RepairTimeBar::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialLeveObject
// 0x0018 (0x01C8 - 0x01B0)
class UCombatHUD_TutorialLeveObject : public UCombatHUD_GameObject
{
public:
	class ACombatTutorialLevelObject*                  TargetObject;                                     		// 0x01B0 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           IconFrameLabels;                                  		// 0x01B8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78544 ];

		return pClassPointer;
	};

	void GetIconFrameLabel ( );
	void Update ( );
	void GetGameObjectName ( );
	void UpdateVisible ( );
	void UpdateLocatorAlpha ( );
	void SetTargetObject ( );
};

UClass* UCombatHUD_TutorialLeveObject::pClassPointer = NULL;

// Class CombatGame.CombatTutorialLevelObject
// 0x0009 (0x025D - 0x0254)
class ACombatTutorialLevelObject : public ATrigger
{
public:
	unsigned long                                      HideOnHUD : 1;                                    		// 0x0254 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                DisplaynameID;                                    		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned char                                      LevelObjectType;                                  		// 0x025C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78548 ];

		return pClassPointer;
	};

	void GetMissionActorSortPriority ( );
	void InitMissionActor ( );
	void eventTouch ( );
};

UClass* ACombatTutorialLevelObject::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialLOContainer
// 0x0000 (0x00D8 - 0x00D8)
class UCombatHUD_TutorialLOContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78566 ];

		return pClassPointer;
	};

	void Update ( );
	void InitGameObject ( );
	void RegisterComponent ( );
};

UClass* UCombatHUD_TutorialLOContainer::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItem_Spray
// 0x0010 (0x00D8 - 0x00C8)
class UCombatInstanceItem_Spray : public UCombatInstanceItem
{
public:
	class UMaterialInterface*                          SprayMaterial;                                    		// 0x00C8 (0x0008) [0x0000000000000000]              
	float                                              Width;                                            		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              Height;                                           		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79170 ];

		return pClassPointer;
	};

	void GetSprayMaterial ( );
};

UClass* UCombatInstanceItem_Spray::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItem_Spray_Clan
// 0x0000 (0x00D8 - 0x00D8)
class UCombatInstanceItem_Spray_Clan : public UCombatInstanceItem_Spray
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79178 ];

		return pClassPointer;
	};

	void GetSprayMaterial ( );
};

UClass* UCombatInstanceItem_Spray_Clan::pClassPointer = NULL;

// Class CombatGame.CombatLTDMGame
// 0x0002 (0x076C - 0x076A)
class ACombatLTDMGame : public ACombatTDMGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80225 ];

		return pClassPointer;
	};

	void eventGetGoalScoreValue ( );
	void CheckLive ( );
};

UClass* ACombatLTDMGame::pClassPointer = NULL;

// Class CombatGame.CombatLTDMHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatLTDMHUD : public ACombatTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80231 ];

		return pClassPointer;
	};

};

UClass* ACombatLTDMHUD::pClassPointer = NULL;

// Class CombatGame.CombatLTDMRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatLTDMRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80233 ];

		return pClassPointer;
	};

};

UClass* ACombatLTDMRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatLTDMMovie
// 0x0000 (0x0A80 - 0x0A80)
class UCombatLTDMMovie : public UCombatTDMMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80234 ];

		return pClassPointer;
	};

	void GetRounOverPoint ( );
	void GetRoundPoint ( );
};

UClass* UCombatLTDMMovie::pClassPointer = NULL;

// Class CombatGame.CombatMassiveSEIHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatMassiveSEIHUD : public ACombatSEIHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80418 ];

		return pClassPointer;
	};

};

UClass* ACombatMassiveSEIHUD::pClassPointer = NULL;

// Class CombatGame.CombatMassiveSEIMovie
// 0x0000 (0x0A80 - 0x0A80)
class UCombatMassiveSEIMovie : public UCombatSEIMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80420 ];

		return pClassPointer;
	};

};

UClass* UCombatMassiveSEIMovie::pClassPointer = NULL;

// Class CombatGame.CombatMassiveSeizegame
// 0x0000 (0x0778 - 0x0778)
class ACombatMassiveSeizegame : public ACombatSeizeGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80422 ];

		return pClassPointer;
	};

};

UClass* ACombatMassiveSeizegame::pClassPointer = NULL;

// Class CombatGame.CombatMeleeGameMessage
// 0x0000 (0x0084 - 0x0084)
class UCombatMeleeGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80500 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( );
};

UClass* UCombatMeleeGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatMeleeGamePC
// 0x0000 (0x0B90 - 0x0B90)
class ACombatMeleeGamePC : public ACombatPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80515 ];

		return pClassPointer;
	};

};

UClass* ACombatMeleeGamePC::pClassPointer = NULL;

// Class CombatGame.CombatMovieCaptureController
// 0x0000 (0x073C - 0x073C)
class ACombatMovieCaptureController : public APlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80606 ];

		return pClassPointer;
	};

};

UClass* ACombatMovieCaptureController::pClassPointer = NULL;

// Class CombatGame.CombatMovieCaptureInfo
// 0x0000 (0x04C0 - 0x04C0)
class ACombatMovieCaptureInfo : public ACombatGameFrame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80609 ];

		return pClassPointer;
	};

};

UClass* ACombatMovieCaptureInfo::pClassPointer = NULL;

// Class CombatGame.CombatNoRespawnTDMGame
// 0x0002 (0x076C - 0x076A)
class ACombatNoRespawnTDMGame : public ACombatTDMGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80611 ];

		return pClassPointer;
	};

	void CheckGoalScore ( );
};

UClass* ACombatNoRespawnTDMGame::pClassPointer = NULL;

// Class CombatGame.CombatTDMGameNoRespawnReplicationInfo
// 0x0000 (0x0380 - 0x0380)
class ACombatTDMGameNoRespawnReplicationInfo : public ACombatTDMGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80615 ];

		return pClassPointer;
	};

};

UClass* ACombatTDMGameNoRespawnReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatNoRespawnTDMMeleeGame
// 0x0000 (0x076C - 0x076C)
class ACombatNoRespawnTDMMeleeGame : public ACombatTDMMeleeGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80634 ];

		return pClassPointer;
	};

	void CheckLive ( );
	void eventGetGoalScoreValue ( );
	void CheckGoalScore ( );
};

UClass* ACombatNoRespawnTDMMeleeGame::pClassPointer = NULL;

// Class CombatGame.CombatSeizeFlagActor
// 0x0040 (0x0284 - 0x0244)
class ACombatSeizeFlagActor : public AActor
{
public:
	class USkeletalMeshComponent*                      FlagMesh;                                         		// 0x0244 (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x024C (0x0008) [0x0000000000000000]              
	struct FSkeletalMeshMaterialInfo                   FlagMaterialList_Unocuupied;                      		// 0x0254 (0x000C) [0x0000000000000000]              
	struct FSkeletalMeshMaterialInfo                   FlagMaterialList_Battling;                        		// 0x0260 (0x000C) [0x0000000000000000]              
	struct FSkeletalMeshMaterialInfo                   FlagMaterialList_OurTeam;                         		// 0x026C (0x000C) [0x0000000000000000]              
	struct FSkeletalMeshMaterialInfo                   FlagMaterialList_Enemy;                           		// 0x0278 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80782 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void OnEnemyOccupyingState ( );
	void OnOurTeamOccupyingState ( );
	void OnBattlingState ( );
	void OnUnoccupiedState ( );
};

UClass* ACombatSeizeFlagActor::pClassPointer = NULL;

// Class CombatGame.CombatParachuteVolume
// 0x0001 (0x0281 - 0x0280)
class ACombatParachuteVolume : public AVolume
{
public:
	unsigned char                                      UnTouchState;                                     		// 0x0280 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80892 ];

		return pClassPointer;
	};

	void eventUnTouch ( );
};

UClass* ACombatParachuteVolume::pClassPointer = NULL;

// Class CombatGame.CombatPassiveSkill
// 0x0060 (0x00E0 - 0x0080)
class UCombatPassiveSkill : public UCombatSkill
{
public:
	float                                              MaxHealthRate_Buff;                               		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              MaxAutoCureHealthModifier_Buff;                   		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              HealthCureRate_Buff;                              		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              AddMainAmmo_Buff;                                 		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              AddSubAmmo_Buff;                                  		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              AddMainMagazineAmmo_Buff;                         		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              AddSubMagazineAmmo_Buff;                          		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              MaxMainMagazineAmmo_Buff;                         		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              MaxSubMagazineAmmo_Buff;                          		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              WeaponReloadSpeedRate_Buff;                       		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              WeaponChangeRate_Buff;                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              GroundCrouchSpeedRate_Buff;                       		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              GroundWalkingSpeedRate_Buff;                      		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              GroundRunSpeedRate_Buff;                          		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              GroundAccelationRate_Buff;                        		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              GunAttackRate_Buff;                               		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              MeleeAttackRate_Buff;                             		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              ExplosiveAttackRate_Buff;                         		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              GunGuardRate_Buff;                                		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              MeleeGuardRate_Buff;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              ExplosiveGuardRate_Buff;                          		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              DetailedRadarDistance_Buff;                       		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              RadarRange_Buff;                                  		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                AddGrenade_Buff;                                  		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80899 ];

		return pClassPointer;
	};

	void ApplySkill ( );
	void ActivateSkill ( );
};

UClass* UCombatPassiveSkill::pClassPointer = NULL;

// Class CombatGame.CombatPawn_PracticeGame
// 0x0060 (0x0C3C - 0x0BDC)
class ACombatPawn_PracticeGame : public ACombatGuy_Player
{
public:
	struct FSProjectileCamera                          ProjectileCameraInfo;                             		// 0x0BDC (0x0018) [0x0000000000000000]              
	float                                              ProjStartTime;                                    		// 0x0BF4 (0x0004) [0x0000000000000000]              
	struct FVector                                     ProjCameraLocation;                               		// 0x0BF8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ProjCameraRotation;                               		// 0x0C04 (0x000C) [0x0000000000000000]              
	float                                              FirstFollowSpeed;                                 		// 0x0C10 (0x0004) [0x0000000000000000]              
	float                                              RecoverStartTime;                                 		// 0x0C14 (0x0004) [0x0000000000000000]              
	class ACombatProjectile*                           ProjViewTarget;                                   		// 0x0C18 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsPlayingProjCamera : 1;                         		// 0x0C20 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     SavedCameraLocation;                              		// 0x0C24 (0x000C) [0x0000000000000000]              
	struct FRotator                                    SavedCameraRotation;                              		// 0x0C30 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81035 ];

		return pClassPointer;
	};

	void SetProjectileCamera ( );
	void OnProjectileFire_LocalPC ( );
	void CalcCamera ( );
	void ProcessViewRotation ( );
};

UClass* ACombatPawn_PracticeGame::pClassPointer = NULL;

// Class CombatGame.CombatPawn_Vehicle
// 0x0000 (0x0C68 - 0x0C68)
class ACombatPawn_Vehicle : public ACombatGuy_NPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81219 ];

		return pClassPointer;
	};

	void eventTakeDamage ( );
	void eventReplicatedEvent ( );
};

UClass* ACombatPawn_Vehicle::pClassPointer = NULL;

// Class CombatGame.CombatPendingPC
// 0x0004 (0x0740 - 0x073C)
class ACombatPendingPC : public APlayerController
{
public:
	unsigned long                                      bUpdateWorldCam : 1;                              		// 0x073C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81270 ];

		return pClassPointer;
	};

	void UpdateViewLocation ( );
	void eventGetPlayerViewPoint ( );
	void ResetFOV ( );
	void PreBeginPlay ( );
};

UClass* ACombatPendingPC::pClassPointer = NULL;

// Class CombatGame.CombatProj_Rocket
// 0x0004 (0x03E8 - 0x03E4)
class ACombatProj_Rocket : public ACombatProj_ExplosiveBase
{
public:
	float                                              RocketLifetime;                                   		// 0x03E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81991 ];

		return pClassPointer;
	};

	void SelfExplode ( );
	void PostBeginPlay ( );
};

UClass* ACombatProj_Rocket::pClassPointer = NULL;

// Class CombatGame.CombatProj_BombardProj
// 0x0000 (0x03E8 - 0x03E8)
class ACombatProj_BombardProj : public ACombatProj_Rocket
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82002 ];

		return pClassPointer;
	};

	void SetDisplay ( );
	void Init ( );
};

UClass* ACombatProj_BombardProj::pClassPointer = NULL;

// Class CombatGame.CombatProj_FlashBang
// 0x0004 (0x03F8 - 0x03F4)
class ACombatProj_FlashBang : public ACombatProj_Grenade
{
public:
	float                                              fFlashbangSoundTime;                              		// 0x03F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82041 ];

		return pClassPointer;
	};

	void TriggerExplosion ( );
	void ShouldSpawnExplosionCameraEffect ( );
	void GetFlashBangTime ( );
};

UClass* ACombatProj_FlashBang::pClassPointer = NULL;

// Class CombatGame.CombatProj_GrenadeLauncher
// 0x0000 (0x03F4 - 0x03F4)
class ACombatProj_GrenadeLauncher : public ACombatProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82065 ];

		return pClassPointer;
	};

	void NotifyMaxBouncedCount ( );
};

UClass* ACombatProj_GrenadeLauncher::pClassPointer = NULL;

// Class CombatGame.CombatProj_InstantProjectile
// 0x0000 (0x03F4 - 0x03F4)
class ACombatProj_InstantProjectile : public ACombatProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82072 ];

		return pClassPointer;
	};

};

UClass* ACombatProj_InstantProjectile::pClassPointer = NULL;

// Class CombatGame.CombatRescueGameMessage
// 0x0000 (0x0084 - 0x0084)
class UCombatRescueGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82356 ];

		return pClassPointer;
	};

	void StandByToEscapeMessage ( );
	void GroggyHostageMessage ( );
	void PlayAnnounce ( );
	void ActivateHostageMessage ( );
	void ClientReceiveEx ( );
};

UClass* UCombatRescueGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatRescueGameMovie
// 0x001C (0x0A90 - 0x0A74)
class UCombatRescueGameMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_HostageContainer*                 HostageContainer;                                 		// 0x0A74 (0x0008) [0x0000000000000000]              
	unsigned long                                      bUpdate : 1;                                      		// 0x0A7C (0x0004) [0x0000000000000000] [0x00000001] 
	class UGFxObject*                                  HostageStateMovie;                                		// 0x0A80 (0x0008) [0x0000000000000000]              
	class UCombatHUD_RepairTimeBar*                    RepairTimeBarMC;                                  		// 0x0A88 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82360 ];

		return pClassPointer;
	};

	void GetRounOverPoint ( );
	void HideRepairTimer ( );
	void IsDisplayRepairTimer ( );
	void UpdateRepairTimer ( );
	void DisplayRepairTimer ( );
	void DisplayTimerEffect ( );
	void ChangeRoundStausMode ( );
	void InitUI ( );
	void UpdateHostageState ( );
	void Tick ( );
	void UpdateRescueHUDIcon ( );
	void registerHostageBar ( );
	void registerTimeBarRepair ( );
	void RegisterGOContainer ( );
};

UClass* UCombatRescueGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatRescueRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatRescueRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82376 ];

		return pClassPointer;
	};

};

UClass* ACombatRescueRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatReverbVolume
// 0x0000 (0x02C4 - 0x02C4)
class ACombatReverbVolume : public AReverbVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82489 ];

		return pClassPointer;
	};

};

UClass* ACombatReverbVolume::pClassPointer = NULL;

// Class CombatGame.CombatRocketLight
// 0x0000 (0x026C - 0x026C)
class UCombatRocketLight : public UCombatExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82504 ];

		return pClassPointer;
	};

};

UClass* UCombatRocketLight::pClassPointer = NULL;

// Class CombatGame.CombatSeizeGameMessage
// 0x0000 (0x0084 - 0x0084)
class UCombatSeizeGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82614 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( );
};

UClass* UCombatSeizeGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatSingleGameReplicationInfo
// 0x0000 (0x0400 - 0x0400)
class ACombatSingleGameReplicationInfo : public ACombatAIGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82679 ];

		return pClassPointer;
	};

	void IsPlayingGameState ( );
};

UClass* ACombatSingleGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatSkill_AirStrike
// 0x0001 (0x00C9 - 0x00C8)
class UCombatSkill_AirStrike : public UCombatActiveSkill
{
public:
	unsigned char                                      AnnounceSkill;                                    		// 0x00C8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82759 ];

		return pClassPointer;
	};

	void MakeBombard ( );
	void Use ( );
};

UClass* UCombatSkill_AirStrike::pClassPointer = NULL;

// Class CombatGame.CombatSkill_Supplies
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_Supplies : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82772 ];

		return pClassPointer;
	};

	void GiveWeapon ( );
	void DeactivateSkill ( );
	void ActivateSkill ( );
	void Use ( );
};

UClass* UCombatSkill_Supplies::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Supplies
// 0x0009 (0x1ED9 - 0x1ED0)
class ACombatWeapon_Supplies : public ACombatWeapon_Skill_Weapon
{
public:
	class UClass*                                      SuppliesSKillClass;                               		// 0x1ED0 (0x0008) [0x0000000000000000]              
	unsigned char                                      DropType;                                         		// 0x1ED8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82785 ];

		return pClassPointer;
	};

	void PickupFire ( );
};

UClass* ACombatWeapon_Supplies::pClassPointer = NULL;

// Class CombatGame.CombatSkill_AmmoKit
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_AmmoKit : public UCombatSkill_Supplies
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82788 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_AmmoKit::pClassPointer = NULL;

// Class CombatGame.CombatSkill_AT4
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_AT4 : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82790 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_AT4::pClassPointer = NULL;

// Class CombatGame.CombatSkill_AttackHelicopter
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_AttackHelicopter : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82792 ];

		return pClassPointer;
	};

	void Use ( );
};

UClass* UCombatSkill_AttackHelicopter::pClassPointer = NULL;

// Class CombatGame.CombatSkill_Plant
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_Plant : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82801 ];

		return pClassPointer;
	};

	void DeactivateSkill ( );
	void ActivateSkill ( );
	void Use ( );
};

UClass* UCombatSkill_Plant::pClassPointer = NULL;

// Class CombatGame.CombatSkill_ClayMore
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_ClayMore : public UCombatSkill_Plant
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82809 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_ClayMore::pClassPointer = NULL;

// Class CombatGame.CombatSkill_Howitzer
// 0x0003 (0x00CC - 0x00C9)
class UCombatSkill_Howitzer : public UCombatSkill_AirStrike
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82811 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_Howitzer::pClassPointer = NULL;

// Class CombatGame.CombatSkill_Juggernaut
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_Juggernaut : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82813 ];

		return pClassPointer;
	};

	void Use ( );
};

UClass* UCombatSkill_Juggernaut::pClassPointer = NULL;

// Class CombatGame.CombatSkill_M32
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_M32 : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82819 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_M32::pClassPointer = NULL;

// Class CombatGame.CombatSkill_MediKit
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_MediKit : public UCombatSkill_Supplies
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82821 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_MediKit::pClassPointer = NULL;

// Class CombatGame.CombatSkill_Predator
// 0x0003 (0x00CC - 0x00C9)
class UCombatSkill_Predator : public UCombatSkill_AirStrike
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82823 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_Predator::pClassPointer = NULL;

// Class CombatGame.CombatSkill_SmokeGrenade
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_SmokeGrenade : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82829 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_SmokeGrenade::pClassPointer = NULL;

// Class CombatGame.CombatSkill_Sonar
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_Sonar : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82831 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_Sonar::pClassPointer = NULL;

// Class CombatGame.CombatSkill_STEYR50
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_STEYR50 : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82833 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_STEYR50::pClassPointer = NULL;

// Class CombatGame.CombatSkill_UAVPatrol
// 0x0020 (0x00E8 - 0x00C8)
class UCombatSkill_UAVPatrol : public UCombatActiveSkill
{
public:
	float                                              PatrolTime;                                       		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              FlightHeight;                                     		// 0x00CC (0x0004) [0x0000000000000000]              
	class ACombatSkillActor_UAV*                       UAV;                                              		// 0x00D0 (0x0008) [0x0000000000000000]              
	struct FString                                     UAV_ClassName;                                    		// 0x00D8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82839 ];

		return pClassPointer;
	};

	void Use ( );
};

UClass* UCombatSkill_UAVPatrol::pClassPointer = NULL;

// Class CombatGame.CombatSkill_XM25
// 0x0000 (0x00C8 - 0x00C8)
class UCombatSkill_XM25 : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82853 ];

		return pClassPointer;
	};

};

UClass* UCombatSkill_XM25::pClassPointer = NULL;

// Class CombatGame.CombatSpectatorPoint
// 0x0000 (0x0244 - 0x0244)
class ACombatSpectatorPoint : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83208 ];

		return pClassPointer;
	};

};

UClass* ACombatSpectatorPoint::pClassPointer = NULL;

// Class CombatGame.CombatStandAloneGame
// 0x0000 (0x0768 - 0x0768)
class ACombatStandAloneGame : public ACombatTeamGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83316 ];

		return pClassPointer;
	};

};

UClass* ACombatStandAloneGame::pClassPointer = NULL;

// Class CombatGame.CombatSuicideVolume
// 0x0008 (0x0288 - 0x0280)
class ACombatSuicideVolume : public AVolume
{
public:
	class UClass*                                      DamageType;                                       		// 0x0280 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83695 ];

		return pClassPointer;
	};

	void eventTouch ( );
};

UClass* ACombatSuicideVolume::pClassPointer = NULL;

// Class CombatGame.CombatTDMMeleeHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatTDMMeleeHUD : public ACombatTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83705 ];

		return pClassPointer;
	};

};

UClass* ACombatTDMMeleeHUD::pClassPointer = NULL;

// Class CombatGame.CombatTDMMeleeRadarCore
// 0x0000 (0x0424 - 0x0424)
class ACombatTDMMeleeRadarCore : public ACombatTDMRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83707 ];

		return pClassPointer;
	};

};

UClass* ACombatTDMMeleeRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatTestRTHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatTestRTHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83723 ];

		return pClassPointer;
	};

	void PostRender ( );
};

UClass* ACombatTestRTHUD::pClassPointer = NULL;

// Class CombatGame.CombatTestRTMoviePlayer
// 0x0008 (0x02F8 - 0x02F0)
class UCombatTestRTMoviePlayer : public UCombatGFxMoviePlayer
{
public:
	class UTextureRenderTarget2D*                      MyRenderTarget;                                   		// 0x02F0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83726 ];

		return pClassPointer;
	};

	void DrawRenderTarget ( );
	void SetRenderTexture ( );
	void Init ( );
};

UClass* UCombatTestRTMoviePlayer::pClassPointer = NULL;

// Class CombatGame.CombatTestTeamGame
// 0x0002 (0x076C - 0x076A)
class ACombatTestTeamGame : public ACombatTDMGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83735 ];

		return pClassPointer;
	};

	void GetWarmUpEndingTime ( );
};

UClass* ACombatTestTeamGame::pClassPointer = NULL;

// Class CombatGame.CombatTutorialPC
// 0x0000 (0x0B90 - 0x0B90)
class ACombatTutorialPC : public ACombatPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84022 ];

		return pClassPointer;
	};

	void OnToggleGodMode ( );
};

UClass* ACombatTutorialPC::pClassPointer = NULL;

// Class CombatGame.CombatTutorialGamePRI
// 0x0004 (0x0520 - 0x051C)
class ACombatTutorialGamePRI : public ACombatAIModePRI
{
public:
	unsigned long                                      bHasBomb : 1;                                     		// 0x051C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84023 ];

		return pClassPointer;
	};

	void eventHasBomb ( );
	void SetBomb ( );
};

UClass* ACombatTutorialGamePRI::pClassPointer = NULL;

// Class CombatGame.CombatTutorialGameReplicationInfo
// 0x002A (0x042A - 0x0400)
class ACombatTutorialGameReplicationInfo : public ACombatAIGameReplicationInfo
{
public:
	TArray< class ACombatBombsiteVolume* >             Bombsites;                                        		// 0x0400 (0x0010) [0x0000000000000000]              
	TArray< class ACombatTrigger_Bomb* >               Bombs;                                            		// 0x0410 (0x0010) [0x0000000000000000]              
	int                                                TotalBombsites;                                   		// 0x0420 (0x0004) [0x0000000000000000]              
	int                                                TotalBombs;                                       		// 0x0424 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0428 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTutorialGameReplicationInfo.PlantedBombSettingTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84024 ];

		return pClassPointer;
	};

	void GetBombLocation ( );
	void GetBombsiteLocation ( );
	void eventPostBeginPlay ( );
	void eventDestroyed ( );
	void Reset ( );
	void RemoveBomb ( );
	void FindBomb ( );
	void AddBomb ( );
	void CleanUpBombsites ( );
	void RemoveBombSite ( );
	void AddBombsite ( );
	void GetBomb ( );
	void GetBombSite ( );
	void eventTimer ( );
};

UClass* ACombatTutorialGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatTutorialGameHUD
// 0x0000 (0x0624 - 0x0624)
class ACombatTutorialGameHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84025 ];

		return pClassPointer;
	};

	void SetUIData_Scoreboard ( );
	void SetPlayerInfoForScoreboard ( );
	void CheckPlayerInfoForScoreboard ( );
};

UClass* ACombatTutorialGameHUD::pClassPointer = NULL;

// Class CombatGame.CombatWaitingServer
// 0x0004 (0x04C4 - 0x04C0)
class ACombatWaitingServer : public ACombatGameFrame
{
public:
	int                                                InitializeDelayTime;                              		// 0x04C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84499 ];

		return pClassPointer;
	};

};

UClass* ACombatWaitingServer::pClassPointer = NULL;

// Class CombatGame.CombatWaveBotController
// 0x0004 (0x05EC - 0x05E8)
class ACombatWaveBotController : public ACombatBotController_GuyBase
{
public:
	float                                              LastJumpOverWallTime;                             		// 0x05E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84505 ];

		return pClassPointer;
	};

};

UClass* ACombatWaveBotController::pClassPointer = NULL;

// Class CombatGame.CombatWavePawn_JuggernautBase
// 0x0004 (0x0CB4 - 0x0CB0)
class ACombatWavePawn_JuggernautBase : public ACombatWavePawnBase
{
public:
	unsigned long                                      bUseChainSawEffect : 1;                           		// 0x0CB0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84525 ];

		return pClassPointer;
	};

	void SetMyCombatWeapon ( );
};

UClass* ACombatWavePawn_JuggernautBase::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Plant
// 0x0004 (0x1ED4 - 0x1ED0)
class ACombatWeapon_Plant : public ACombatWeapon_Skill_Weapon
{
public:
	unsigned long                                      bMartyrdom : 1;                                   		// 0x1ED0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86417 ];

		return pClassPointer;
	};

	void SkillFire ( );
	void HolderDied ( );
	void GetProjectileClass ( );
	void MakeProjectile ( );
};

UClass* ACombatWeapon_Plant::pClassPointer = NULL;

// Class CombatGame.CombatWeaponAtt_Grenade
// 0x0000 (0x0424 - 0x0424)
class ACombatWeaponAtt_Grenade : public ACBWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86552 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponAtt_Grenade::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_AR
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_AR : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86557 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_AR::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_AR_HP
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_AR_HP : public ACombatWeaponBase_AR
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86562 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_AR_HP::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_BASR
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_BASR : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86570 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_BASR::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_DMR
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_DMR : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86575 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_DMR::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_FSW_AMSR
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_FSW_AMSR : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86580 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_FSW_AMSR::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_FSW_GL
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_FSW_GL : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86587 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_FSW_GL::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_FSW_LMG
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_FSW_LMG : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86592 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_FSW_LMG::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_FSW_RL
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_FSW_RL : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86597 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_FSW_RL::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_LMG
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_LMG : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86602 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_LMG::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_Machine_Pistol
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_Machine_Pistol : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86607 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_Machine_Pistol::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_MiniGunBase
// 0x003C (0x1EEC - 0x1EB0)
class ACombatWeaponBase_MiniGunBase : public ACombatWeapon
{
public:
	class USoundCue*                                   BarrelSpinningStartCue;                           		// 0x1EB0 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   BarrelSpinningLoopCue;                            		// 0x1EB8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   BarrelSpinningStopCue;                            		// 0x1EC0 (0x0008) [0x0000000000000000]              
	float                                              SpinUpTime;                                       		// 0x1EC8 (0x0004) [0x0000000000000000]              
	float                                              SpinDownTime;                                     		// 0x1ECC (0x0004) [0x0000000000000000]              
	float                                              SpinDownTime_ActiveCooling;                       		// 0x1ED0 (0x0004) [0x0000000000000000]              
	float                                              CurrentBarrelRotAccel;                            		// 0x1ED4 (0x0004) [0x0000000000000000]              
	float                                              CurrentBarrelRotRate;                             		// 0x1ED8 (0x0004) [0x0000000000000000]              
	float                                              BarrelRotRateFiringThreshold;                     		// 0x1EDC (0x0004) [0x0000000000000000]              
	float                                              MaxBarrelRotRate;                                 		// 0x1EE0 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      BarrelSkelCtrl;                                   		// 0x1EE4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86737 ];

		return pClassPointer;
	};

	void UpdateBarrelRotation ( );
	void HandleFinishedFiring ( );
	void PostInitAnimTree ( );
};

UClass* ACombatWeaponBase_MiniGunBase::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_Pistol
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_Pistol : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86874 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_Pistol::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_RescueSaw
// 0x0000 (0x1F2C - 0x1F2C)
class ACombatWeaponBase_RescueSaw : public ACombatWeaponBase_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86881 ];

		return pClassPointer;
	};

	void MeleeAttackEnded ( );
	void MeleeAttackStarted ( );
	void HasAmmo ( );
	void DecideAnimSeq ( );
};

UClass* ACombatWeaponBase_RescueSaw::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_SASR
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_SASR : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86903 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_SASR::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_SG
// 0x0000 (0x1EB4 - 0x1EB4)
class ACombatWeaponBase_SG : public ACombatWeapon_Shotgun_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86908 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_SG::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_SMG
// 0x0000 (0x1EB0 - 0x1EB0)
class ACombatWeaponBase_SMG : public ACombatWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86913 ];

		return pClassPointer;
	};

};

UClass* ACombatWeaponBase_SMG::pClassPointer = NULL;

// Class CombatGame.CombatWeaponPickupFactory_MeleeMode
// 0x000B (0x0454 - 0x0449)
class ACombatWeaponPickupFactory_MeleeMode : public ACombatWeaponPickupFactory
{
public:
	unsigned long                                      bDropWeaponOnDeath : 1;                           		// 0x044C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRespawnDelaying : 1;                             		// 0x044C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              RespawnDelayedTime;                               		// 0x0450 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86918 ];

		return pClassPointer;
	};

	void RespawnEffect ( );
	void EndDelaying ( );
	void DelayRespawn ( );
	void SpawnCopyFor ( );
	void SetPickupHidden ( );
	void SetPickupVisible ( );
	void eventSetInitialState ( );
};

UClass* ACombatWeaponPickupFactory_MeleeMode::pClassPointer = NULL;

// Class CombatGame.DemoRecSpectator
// 0x0018 (0x0BA8 - 0x0B90)
class ADemoRecSpectator : public ACombatPC
{
public:
	unsigned long                                      bFindPlayer : 1;                                  		// 0x0B90 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLockRotationToViewTarget : 1;                    		// 0x0B90 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAutoSwitchPlayers : 1;                           		// 0x0B90 (0x0004) [0x0000000000000000] [0x00000004] 
	class APlayerReplicationInfo*                      MyRealViewTarget;                                 		// 0x0B94 (0x0008) [0x0000000000000000]              
	class ACombatPawn*                                 LastViewTargetPawn;                               		// 0x0B9C (0x0008) [0x0000000000000000]              
	float                                              AutoSwitchPlayerInterval;                         		// 0x0BA4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87208 ];

		return pClassPointer;
	};

	void IsDemorecSpectator ( );
	void UpdateRotation ( );
	void Pause ( );
	void SetPause ( );
	void ClientSetRealViewTarget ( );
	void ServerViewSelf ( );
	void SetViewTarget ( );
	void DemoViewNextPlayer ( );
	void ViewClass ( );
	void Slomo ( );
	void ScreenshotMode ( );
	void InitPlayerReplicationInfo ( );
	void eventReceivedPlayer ( );
	void ClientSetHUD ( );
	void eventPostBeginPlay ( );
};

UClass* ADemoRecSpectator::pClassPointer = NULL;

// Class CombatGame.GripActionNode_AimingFocus
// 0x0005 (0x00F9 - 0x00F4)
class UGripActionNode_AimingFocus : public UCombatAIActionNodeBase
{
public:
	unsigned long                                      bReleaseAimingFocus : 1;                          		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CurAITarget;                                      		// 0x00F8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87723 ];

		return pClassPointer;
	};

	void Execute ( );
	void eventGetNodeTitle ( );
};

UClass* UGripActionNode_AimingFocus::pClassPointer = NULL;

// Class CombatGame.GripActionNode_Crouch
// 0x0004 (0x00F8 - 0x00F4)
class UGripActionNode_Crouch : public UCombatAIActionNodeBase
{
public:
	unsigned long                                      SavedCanCrouch : 1;                               		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87734 ];

		return pClassPointer;
	};

	void eventExecutePost ( );
	void Execute ( );
};

UClass* UGripActionNode_Crouch::pClassPointer = NULL;

// Class CombatGame.GripActionNode_SelectAIBeacon
// 0x0004 (0x00F8 - 0x00F4)
class UGripActionNode_SelectAIBeacon : public UCombatAIActionNodeBase
{
public:
	float                                              MaxRange;                                         		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87754 ];

		return pClassPointer;
	};

	void Execute ( );
	void eventGetNodeTitle ( );
};

UClass* UGripActionNode_SelectAIBeacon::pClassPointer = NULL;

// Class CombatGame.GripActionNode_Shoot
// 0x0018 (0x010C - 0x00F4)
class UGripActionNode_Shoot : public UCombatAIActionNodeBase
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00F4 (0x0001) [0x0000000000000000]              
	int                                                FireCountPerBurst;                                		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                BurstCount;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              DelayBetweenBursts;                               		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                CurBurstCount;                                    		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              LastBurstTime;                                    		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87791 ];

		return pClassPointer;
	};

	void ExecutePost ( );
	void Execute ( );
	void ExecutePre ( );
	void eventGetNodeTitle ( );
};

UClass* UGripActionNode_Shoot::pClassPointer = NULL;

// Class CombatGame.GripActionNode_Sleep
// 0x0008 (0x00FC - 0x00F4)
class UGripActionNode_Sleep : public UCombatAIActionNodeBase
{
public:
	float                                              Duration;                                         		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              StartTimeSeconds;                                 		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87813 ];

		return pClassPointer;
	};

	void Execute ( );
	void ExecutePre ( );
	void eventGetNodeTitle ( );
};

UClass* UGripActionNode_Sleep::pClassPointer = NULL;

// Class CombatGame.GripActionNode_SwitchWeapon
// 0x0001 (0x00F5 - 0x00F4)
class UGripActionNode_SwitchWeapon : public UCombatAIActionNodeBase
{
public:
	unsigned char                                      WeaponGroup;                                      		// 0x00F4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87827 ];

		return pClassPointer;
	};

	void Execute ( );
	void eventGetNodeTitle ( );
};

UClass* UGripActionNode_SwitchWeapon::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetHealth
// 0x0008 (0x00F4 - 0x00EC)
class UGripCondNode_TargetHealth : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00EC (0x0001) [0x0000000000000000]              
	unsigned char                                      Op;                                               		// 0x00ED (0x0001) [0x0000000000000000]              
	int                                                Health;                                           		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87866 ];

		return pClassPointer;
	};

	void ComputeCondition ( );
	void eventGetNodeTitle ( );
};

UClass* UGripCondNode_TargetHealth::pClassPointer = NULL;

// Class CombatGame.GripCondNode_WeaponPossession
// 0x0008 (0x00F4 - 0x00EC)
class UGripCondNode_WeaponPossession : public UGripConditionNode
{
public:
	unsigned char                                      WeaponGroup;                                      		// 0x00EC (0x0001) [0x0000000000000000]              
	unsigned long                                      bNegative : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87911 ];

		return pClassPointer;
	};

	void eventGetNodeTitle ( );
	void ComputeCondition ( );
};

UClass* UGripCondNode_WeaponPossession::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatDisplayMessage
// 0x0010 (0x0118 - 0x0108)
class USeqAct_CombatDisplayMessage : public USequenceAction
{
public:
	struct FString                                     Message;                                          		// 0x0108 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88169 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatDisplayMessage::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatGameOver
// 0x0002 (0x010A - 0x0108)
class USeqAct_CombatGameOver : public USequenceAction
{
public:
	unsigned char                                      Winner;                                           		// 0x0108 (0x0001) [0x0000000000000000]              
	unsigned char                                      Reason;                                           		// 0x0109 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88176 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatGameOver::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatPlayRandomBoxScene
// 0x0004 (0x010C - 0x0108)
class USeqAct_CombatPlayRandomBoxScene : public USequenceAction
{
public:
	int                                                RandomBoxGrade;                                   		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88185 ];

		return pClassPointer;
	};

	void UpdateRandomboxMaterial ( );
	void eventActivated ( );
};

UClass* USeqAct_CombatPlayRandomBoxScene::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatSetGravity
// 0x0004 (0x010C - 0x0108)
class USeqAct_CombatSetGravity : public USequenceAction
{
public:
	float                                              Gravity;                                          		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88197 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatSetGravity::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTeamCert
// 0x0010 (0x0118 - 0x0108)
class USeqAct_CombatTeamCert : public USequenceAction
{
public:
	unsigned char                                      TeamIndex;                                        		// 0x0108 (0x0001) [0x0000000000000000]              
	unsigned long                                      IsAI : 1;                                         		// 0x010C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IgnoreTeam : 1;                                   		// 0x010C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                MaxCount;                                         		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                CurrentCount;                                     		// 0x0114 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88202 ];

		return pClassPointer;
	};

	void eventActivated ( );
	void Reset ( );
};

UClass* USeqAct_CombatTeamCert::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_Dialogue
// 0x0014 (0x011C - 0x0108)
class USeqAct_CombatTutorial_Dialogue : public USequenceAction
{
public:
	TArray< struct FTutorial_Dialogue >                Dialogues;                                        		// 0x0108 (0x0010) [0x0000000000000000]              
	int                                                Cnt;                                              		// 0x0118 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88214 ];

		return pClassPointer;
	};

	void ShowDialogue ( );
	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_Dialogue::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_HelpOff
// 0x0000 (0x0108 - 0x0108)
class USeqAct_CombatTutorial_HelpOff : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88231 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_HelpOff::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_HelpOn
// 0x0018 (0x0120 - 0x0108)
class USeqAct_CombatTutorial_HelpOn : public USequenceAction
{
public:
	int                                                HelpTitle;                                        		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                HelpDesc;                                         		// 0x010C (0x0004) [0x0000000000000000]              
	struct FString                                     GBACommandToSkip;                                 		// 0x0110 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88237 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_HelpOn::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_HideBombIconsOnHUD
// 0x0004 (0x010C - 0x0108)
class USeqAct_CombatTutorial_HideBombIconsOnHUD : public USequenceAction
{
public:
	unsigned long                                      HideBombs : 1;                                    		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      HideBombSites : 1;                                		// 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88246 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_HideBombIconsOnHUD::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_HideHUD
// 0x0004 (0x010C - 0x0108)
class USeqAct_CombatTutorial_HideHUD : public USequenceAction
{
public:
	unsigned long                                      HideHUD : 1;                                      		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88254 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_HideHUD::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_MessageOff
// 0x0000 (0x0108 - 0x0108)
class USeqAct_CombatTutorial_MessageOff : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88261 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_MessageOff::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_MessageOn
// 0x0014 (0x011C - 0x0108)
class USeqAct_CombatTutorial_MessageOn : public USequenceAction
{
public:
	int                                                MessageTextID;                                    		// 0x0108 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           GBA_Commnads;                                     		// 0x010C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88267 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_MessageOn::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_PointAI
// 0x0008 (0x0110 - 0x0108)
class USeqAct_CombatTutorial_PointAI : public USequenceAction
{
public:
	class ACombatGuy_NPC*                              AIPawn;                                           		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88276 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_PointAI::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_QuestOff
// 0x0014 (0x011C - 0x0108)
class USeqAct_CombatTutorial_QuestOff : public USequenceAction
{
public:
	struct FString                                     QuestID;                                          		// 0x0108 (0x0010) [0x0000000000000000]              
	unsigned long                                      ResetAll : 1;                                     		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88280 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_QuestOff::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatTutorial_QuestOn
// 0x0018 (0x0120 - 0x0108)
class USeqAct_CombatTutorial_QuestOn : public USequenceAction
{
public:
	struct FString                                     QuestID;                                          		// 0x0108 (0x0010) [0x0000000000000000]              
	int                                                QuestTextIdx;                                     		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                QuestCompletedTextIdx;                            		// 0x011C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88288 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CombatTutorial_QuestOn::pClassPointer = NULL;

// Class CombatGame.SeqAct_IgnoreInput
// 0x0004 (0x010C - 0x0108)
class USeqAct_IgnoreInput : public USequenceAction
{
public:
	unsigned long                                      bMoveInputIgnore : 1;                             		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLookInputIgnore : 1;                             		// 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWeaponInputIgnore : 1;                           		// 0x0108 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88304 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_IgnoreInput::pClassPointer = NULL;

// Class CombatGame.SeqAct_SetCRandEXP
// 0x0008 (0x0110 - 0x0108)
class USeqAct_SetCRandEXP : public USequenceAction
{
public:
	int                                                CR;                                               		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                Exp;                                              		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88354 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetCRandEXP::pClassPointer = NULL;

// Class CombatGame.SeqAct_SetPawnSpeed
// 0x0014 (0x011C - 0x0108)
class USeqAct_SetPawnSpeed : public USequenceAction
{
public:
	float                                              GroundSpeed;                                      		// 0x0108 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            Actors;                                           		// 0x010C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88364 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetPawnSpeed::pClassPointer = NULL;

// Class CombatGame.SeqAct_SwitchWeapon
// 0x0004 (0x010C - 0x0108)
class USeqAct_SwitchWeapon : public USequenceAction
{
public:
	int                                                WeaponNumber;                                     		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88374 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SwitchWeapon::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatLOEvent
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatLOEvent : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88410 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatLOEvent::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatDTEvent
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatDTEvent : public USeqEvent_CombatLOEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88412 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatDTEvent::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatUISceneChange
// 0x0000 (0x0128 - 0x0128)
class USeqEvent_CombatUISceneChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88418 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatUISceneChange::pClassPointer = NULL;

// Class CombatGame.USSCoverLink
// 0x0003 (0x03D8 - 0x03D5)
class AUSSCoverLink : public ACoverLink
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88425 ];

		return pClassPointer;
	};

};

UClass* AUSSCoverLink::pClassPointer = NULL;

// Class CombatGame.USSInventoryManager
// 0x0000 (0x0270 - 0x0270)
class AUSSInventoryManager : public AInventoryManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88428 ];

		return pClassPointer;
	};

};

UClass* AUSSInventoryManager::pClassPointer = NULL;

// Class CombatGame.USSWeaponAttachment
// 0x0030 (0x0274 - 0x0244)
class AUSSWeaponAttachment : public AActor
{
public:
	class USkeletalMeshComponent*                      WeapMeshComp;                                     		// 0x0244 (0x0008) [0x0000000000000000]              
	struct FName                                       MuzzleFlashSocketName;                            		// 0x024C (0x0008) [0x0000000000000000]              
	class UStaticMeshComponent*                        MuzzleFlashMesh;                                  		// 0x0254 (0x0008) [0x0000000000000000]              
	unsigned long                                      MuzzleFlashAttached : 1;                          		// 0x025C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              MuzzleFlashDuration;                              		// 0x0260 (0x0004) [0x0000000000000000]              
	struct FUSSMaterialImpactEffect                    DefaultImpactEffect;                              		// 0x0264 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88435 ];

		return pClassPointer;
	};

	void eventMuzzleFlashTimer ( );
	void StopMuzzleFlash ( );
	void DetachMuzzleFlash ( );
	void AttachMuzzleFlash ( );
	void CauseMuzzleFlash ( );
	void PlayImpactEffects ( );
	void GetImpactEffect ( );
	void DetachFrom ( );
	void AttachTo ( );
};

UClass* AUSSWeaponAttachment::pClassPointer = NULL;

// Class CombatGame.USSWeapon
// 0x0038 (0x03DC - 0x03A4)
class AUSSWeapon : public AWeapon
{
public:
	struct FName                                       WeaponSocketName;                                 		// 0x03A4 (0x0008) [0x0000000000000000]              
	struct FName                                       MuzzleFlashSocketName;                            		// 0x03AC (0x0008) [0x0000000000000000]              
	TArray< int >                                      ShotPerFireBurst;                                 		// 0x03B4 (0x0010) [0x0000000000000000]              
	float                                              AimingTolerance;                                  		// 0x03C4 (0x0004) [0x0000000000000000]              
	int                                                ShotInBurstCount;                                 		// 0x03C8 (0x0004) [0x0000000000000000]              
	class UClass*                                      WeaponAttachmentClass;                            		// 0x03CC (0x0008) [0x0000000000000000]              
	class ACCSController*                              CCSController;                                    		// 0x03D4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88543 ];

		return pClassPointer;
	};

	void NotifyWeaponFired ( );
	void StartFire ( );
	void CanAttack ( );
	void DetachWeapon ( );
	void AttachWeaponTo ( );
	void TimeWeaponEquipping ( );
	void CacheAIController ( );
};

UClass* AUSSWeapon::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif